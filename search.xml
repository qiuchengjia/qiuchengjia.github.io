<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Java反编译]]></title>
      <url>http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E5%8F%8D%E7%BC%96%E8%AF%91/</url>
      <content type="html"><![CDATA[<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java枚举类]]></title>
      <url>http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul>
<li>在java语言中还没有引入枚举类型之前，表示枚举类型的常用模式是声明一组具有int常量。之前我们通常利用public final static 方法定义的代码如下，分别用1 表示春天，2表示夏天，3表示秋天，4表示冬天</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Season</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SPRING = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUMMER = <span class="number">2</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUTUMN = <span class="number">3</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WINTER = <span class="number">4</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这种方法称作int枚举模式。可这种模式有什么问题呢，我们都用了那么久了，应该没问题的。通常我们写出来的代码都会考虑它的安全性、易用性和可读性。 首先我们来考虑一下它的类型安全性。当然这种模式不是类型安全的。比如说我们设计一个函数，要求传入春夏秋冬的某个值。但是使用int类型，我们无法保证传入的值为合法。代码如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getChineseSeason</span><span class="params">(<span class="keyword">int</span> season)</span></span>&#123;</div><div class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">switch</span>(season)&#123;</div><div class="line">            <span class="keyword">case</span> Season.SPRING :</div><div class="line">                result.append(<span class="string">"春天"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Season.SUMMER :</div><div class="line">                result.append(<span class="string">"夏天"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Season.AUTUMN :</div><div class="line">                result.append(<span class="string">"秋天"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Season.WINTER :</div><div class="line">                result.append(<span class="string">"冬天"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span> :</div><div class="line">                result.append(<span class="string">"地球没有的季节"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>.getChineseSeason(Season.SPRING));<span class="comment">//这是正常的场景</span></div><div class="line"></div><div class="line">        System.out.println(<span class="keyword">this</span>.getChineseSeason(<span class="number">5</span>));</div><div class="line">        <span class="comment">//这个却是不正常的场景，这就导致了类型不安全问题</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>程序getChineseSeason(Season.SPRING)是我们预期的使用方法。可getChineseSeason(5)显然就不是了，而且编译很通过，在运行时会出现什么情况，我们就不得而知了。这显然就不符合Java程序的类型安全</p>
</li>
<li><p>接下来我们来考虑一下这种模式的可读性。使用枚举的大多数场合，我都需要方便得到枚举类型的字符串表达式。如果将int枚举常量打印出来，我们所见到的就是一组数字，这是没什么太大的用处。我们可能会想到使用String常量代替int常量。虽然它为这些常量提供了可打印的字符串，但是它会导致性能问题，因为它依赖于字符串的比较操作，所以这种模式也是我们不期望的。 从类型安全性和程序可读性两方面考虑，int和String枚举模式的缺点就显露出来了。幸运的是，从Java1.5发行版本开始，就提出了另一种可以替代的解决方案，可以避免int和String枚举模式的缺点，并提供了许多额外的好处。那就是枚举类型（enum type）。接下来的章节将介绍枚举类型的定义、特征、应用场景和优缺点</p>
</li>
</ul>
<a id="more"></a>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>枚举类型（enum type）是指由一组固定的常量组成合法的类型。Java中由关键字enum来定义一个枚举类型。下面就是java枚举类型的定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Season &#123;</div><div class="line">    SPRING, SUMMER, AUTUMN, WINER;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>Java定义枚举类型的语句很简约。它有以下特点：</p>
<ol>
<li><p>使用关键字enum</p>
</li>
<li><p>类型名称，比如这里的Season</p>
</li>
<li><p>一串允许的值，比如上面定义的春夏秋冬四季</p>
</li>
<li><p>枚举可以单独定义在一个文件中，也可以嵌在其它Java类中</p>
</li>
<li><p>枚举可以实现一个或多个接口（Interface）</p>
</li>
<li><p>可以定义新的变量</p>
</li>
<li><p>可以定义新的方法</p>
</li>
<li><p>可以定义根据具体枚举值而相异的类</p>
</li>
</ol>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>以在背景中提到的类型安全为例，用枚举类型重写那段代码。代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Season &#123;</div><div class="line">    SPRING(<span class="number">1</span>), SUMMER(<span class="number">2</span>), AUTUMN(<span class="number">3</span>), WINTER(<span class="number">4</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(<span class="keyword">int</span> code)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> code;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseSeason</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将英文的季节转换成中文季节</div><div class="line">     * <span class="doctag">@param</span> season</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChineseSeason</span><span class="params">(Season season)</span></span>&#123;</div><div class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">switch</span>(season)&#123;</div><div class="line">            <span class="keyword">case</span> SPRING :</div><div class="line">                result.append(<span class="string">"[中文：春天，枚举常量:"</span> + season.name() + <span class="string">"，数据:"</span> + season.getCode() + <span class="string">"]"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> AUTUMN :</div><div class="line">                result.append(<span class="string">"[中文：秋天，枚举常量:"</span> + season.name() + <span class="string">"，数据:"</span> + season.getCode() + <span class="string">"]"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> SUMMER : </div><div class="line">                result.append(<span class="string">"[中文：夏天，枚举常量:"</span> + season.name() + <span class="string">"，数据:"</span> + season.getCode() + <span class="string">"]"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> WINTER :</div><div class="line">                result.append(<span class="string">"[中文：冬天，枚举常量:"</span> + season.name() + <span class="string">"，数据:"</span> + season.getCode() + <span class="string">"]"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span> :</div><div class="line">                result.append(<span class="string">"地球没有的季节 "</span> + season.name());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(Season s : Season.values())&#123;</div><div class="line">            System.out.println(getChineseSeason(s));<span class="comment">//这是正常的场景</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//System.out.println(getChineseSeason(5));</span></div><div class="line">        <span class="comment">//此处已经是编译不通过了，这就保证了类型安全</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</div><div class="line">        UseSeason useSeason = <span class="keyword">new</span> UseSeason();</div><div class="line">        useSeason.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>输出</li>
</ul>
<blockquote>
<p>[中文：春天，枚举常量:SPRING，数据:1] [中文：夏天，枚举常量:SUMMER，数据:2] [中文：秋天，枚举常量:AUTUMN，数据:3] [中文：冬天，枚举常量:WINTER，数据:4]</p>
</blockquote>
<ul>
<li>这里有一个问题，为什么我要将域添加到枚举类型中呢？目的是想将数据与它的常量关联起来。如1代表春天，2代表夏天</li>
</ul>
<h3 id="什么时候使用"><a href="#什么时候使用" class="headerlink" title="什么时候使用"></a>什么时候使用</h3><ul>
<li>那么什么时候应该使用枚举呢？每当需要一组固定的常量的时候，如一周的天数、一年四季等。或者是在我们编译前就知道其包含的所有值的集合。Java 1.5的枚举能满足绝大部分程序员的要求的，它的简明，易用的特点是很突出的</li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul>
<li>这里介绍了七种常见的用法</li>
</ul>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;  </div><div class="line">  RED, GREEN, BLANK, YELLOW  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Signal &#123;  </div><div class="line">    GREEN, YELLOW, RED  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrafficLight</span> </span>&#123;  </div><div class="line">    Signal color = Signal.RED;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">switch</span> (color) &#123;  </div><div class="line">        <span class="keyword">case</span> RED:  </div><div class="line">            color = Signal.GREEN;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> YELLOW:  </div><div class="line">            color = Signal.RED;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> GREEN:  </div><div class="line">            color = Signal.YELLOW;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="向枚举中添加新方法"><a href="#向枚举中添加新方法" class="headerlink" title="向枚举中添加新方法"></a>向枚举中添加新方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;  </div><div class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>);  </div><div class="line">    <span class="comment">// 成员变量  </span></div><div class="line">    <span class="keyword">private</span> String name;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;  </div><div class="line">    <span class="comment">// 构造方法  </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">        <span class="keyword">this</span>.index = index;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 普通方法  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">for</span> (Color c : Color.values()) &#123;  </div><div class="line">            <span class="keyword">if</span> (c.getIndex() == index) &#123;  </div><div class="line">                <span class="keyword">return</span> c.name;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// get set 方法  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> name;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> index;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.index = index;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="覆盖枚举的方法"><a href="#覆盖枚举的方法" class="headerlink" title="覆盖枚举的方法"></a>覆盖枚举的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;  </div><div class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>);  </div><div class="line">    <span class="comment">// 成员变量  </span></div><div class="line">    <span class="keyword">private</span> String name;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;  </div><div class="line">    <span class="comment">// 构造方法  </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">        <span class="keyword">this</span>.index = index;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//覆盖方法  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.index+<span class="string">"_"</span>+<span class="keyword">this</span>.name;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Behaviour</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;  </div><div class="line">    <span class="function">String <span class="title">getInfo</span><span class="params">()</span></span>;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color implements Behaviour&#123;  </div><div class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>);  </div><div class="line">    <span class="comment">// 成员变量  </span></div><div class="line">    <span class="keyword">private</span> String name;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;  </div><div class="line">    <span class="comment">// 构造方法  </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">        <span class="keyword">this</span>.index = index;  </div><div class="line">    &#125;  </div><div class="line"><span class="comment">//接口方法  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//接口方法  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="keyword">this</span>.index+<span class="string">":"</span>+<span class="keyword">this</span>.name);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用接口组织枚举"><a href="#使用接口组织枚举" class="headerlink" title="使用接口组织枚举"></a>使用接口组织枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Food</span> </span>&#123;  </div><div class="line">    <span class="keyword">enum</span> Coffee implements Food&#123;  </div><div class="line">        BLACK_COFFEE,DECAF_COFFEE,LATTE,CAPPUCCINO  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">enum</span> Dessert implements Food&#123;  </div><div class="line">        FRUIT, CAKE, GELATO  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="关于枚举集合的使用"><a href="#关于枚举集合的使用" class="headerlink" title="关于枚举集合的使用"></a>关于枚举集合的使用</h3><ul>
<li>java.util.EnumSet和java.util.EnumMap是两个枚举集合。EnumSet保证集合中的元素不重复;EnumMap中的 key是enum类型，而value则可以是任意类型。关于这个两个集合的使用就不在这里赘述，可以参考JDK文档</li>
</ul>
<hr>
<hr>
<h2 id="枚举是如何保证线程安全的"><a href="#枚举是如何保证线程安全的" class="headerlink" title="枚举是如何保证线程安全的"></a>枚举是如何保证线程安全的</h2><ul>
<li>要想看源码，首先得有一个类吧，那么枚举类型到底是什么类呢？是enum吗？答案很明显不是，enum就和class一样，只是一个关键字，他并不是一个类，那么枚举是由什么类维护的呢，我们简单的写一个枚举：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> t &#123;</div><div class="line">    SPRING,SUMMER,AUTUMN,WINTER;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后我们使用反编译，看看这段代码到底是怎么实现的，反编译（Java的反编译）后代码内容如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Enum</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">T</span><span class="params">(String s, <span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(s, i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T[] values()&#123;</div><div class="line">        T at[];</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        T at1[];</div><div class="line">        System.arraycopy(at = ENUM$VALUES, <span class="number">0</span>, at1 = <span class="keyword">new</span> T[i = at.length], <span class="number">0</span>, i);</div><div class="line">        <span class="keyword">return</span> at1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">valueOf</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (T)Enum.valueOf(demo/T, s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T SPRING;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T SUMMER;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T AUTUMN;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T WINTER;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> T ENUM$VALUES[];</div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        SPRING = <span class="keyword">new</span> T(<span class="string">"SPRING"</span>, <span class="number">0</span>);</div><div class="line">        SUMMER = <span class="keyword">new</span> T(<span class="string">"SUMMER"</span>, <span class="number">1</span>);</div><div class="line">        AUTUMN = <span class="keyword">new</span> T(<span class="string">"AUTUMN"</span>, <span class="number">2</span>);</div><div class="line">        WINTER = <span class="keyword">new</span> T(<span class="string">"WINTER"</span>, <span class="number">3</span>);</div><div class="line">        ENUM$VALUES = (<span class="keyword">new</span> T[] &#123;</div><div class="line">            SPRING, SUMMER, AUTUMN, WINTER</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java自动拆箱和装箱]]></title>
      <url>http://www.qiuchengjia.cn/2016/08/11/JAVA/Java%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%92%8C%E8%A3%85%E7%AE%B1/</url>
      <content type="html"><![CDATA[<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%92%8C%E8%A3%85%E7%AE%B1.png" alt=""></center>

<h2 id="什么是自动拆箱和装箱"><a href="#什么是自动拆箱和装箱" class="headerlink" title="什么是自动拆箱和装箱"></a>什么是自动拆箱和装箱</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>自动装箱就是 Java 自动将原始数据类型转为对应的包装类对象 比如将 int 型的变量转成 Integer对象 自动拆箱反之(从 Java 1.5 开始引入)</li>
</ul>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul>
<li>自动装箱时，编译器调用 valueOf() 将原始数据类型值转为对象；同时自动拆箱时，编译器调用类似 intValue(), doubleValue() 这类方法将对象转换成原始类型值</li>
</ul>
<table>
<thead>
<tr>
<th>基本类型</th>
<th style="text-align:left">大小</th>
<th style="text-align:left">数值范围</th>
<th style="text-align:left">默认值</th>
<th style="text-align:left">包装类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td style="text-align:left">^</td>
<td style="text-align:left">true,false</td>
<td style="text-align:left">false</td>
<td style="text-align:left">Boolean</td>
</tr>
<tr>
<td>byte</td>
<td style="text-align:left">8bit</td>
<td style="text-align:left">-2^7 – 2^7-1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Byte</td>
</tr>
<tr>
<td>char</td>
<td style="text-align:left">16bit</td>
<td style="text-align:left">\u0000 – \uffff</td>
<td style="text-align:left">\u0000</td>
<td style="text-align:left">Character</td>
</tr>
<tr>
<td>short</td>
<td style="text-align:left">16bit</td>
<td style="text-align:left">-2^15 – 2^15-1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Short</td>
</tr>
<tr>
<td>int</td>
<td style="text-align:left">32bit</td>
<td style="text-align:left">-2^31 – 2^31-1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Integer</td>
</tr>
<tr>
<td>long</td>
<td style="text-align:left">64bit</td>
<td style="text-align:left">-2^63 – 2^63-1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Long</td>
</tr>
<tr>
<td>float</td>
<td style="text-align:left">32bit</td>
<td style="text-align:left">IEEE 754</td>
<td style="text-align:left">0.0f</td>
<td style="text-align:left">Float</td>
</tr>
<tr>
<td>double</td>
<td style="text-align:left">64bit</td>
<td style="text-align:left">IEEE 754</td>
<td style="text-align:left">0.0d</td>
<td style="text-align:left">Double</td>
</tr>
<tr>
<td>void</td>
<td style="text-align:left">^</td>
<td style="text-align:left">^</td>
<td style="text-align:left">^</td>
<td style="text-align:left">Void</td>
</tr>
</tbody>
</table>
<h3 id="基本类型与装箱基本类型的区别"><a href="#基本类型与装箱基本类型的区别" class="headerlink" title="基本类型与装箱基本类型的区别"></a>基本类型与装箱基本类型的区别</h3><ul>
<li><p>基本类型只有值，而装箱基本类型则具有与它们的值不同的同一性。换句话说，对装箱基本类型运用 == 操作符几乎总是错的</p>
</li>
<li><p>基本类型只有功能完备的值，而装箱基本类型除了它对应基本类型的所有功能值外，还有一个非功能值 null，这导致了对于包装基本类型进行拆箱操作后所进行的操作存在 NPE 的风险</p>
</li>
<li><p>基本类型更加省空间和时间，如果对包装类型进行频繁的装箱和拆箱操作会影响性能</p>
</li>
</ul>
<a id="more"></a>
<h2 id="何时发生自动装箱与拆箱？"><a href="#何时发生自动装箱与拆箱？" class="headerlink" title="何时发生自动装箱与拆箱？"></a>何时发生自动装箱与拆箱？</h2><h3 id="赋值时"><a href="#赋值时" class="headerlink" title="赋值时"></a>赋值时</h3><ul>
<li>在Java1.5之前，需要手动地进行类型转换，而现在所有的转换都是有编译器来完成</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//before autoboxing</span></div><div class="line">Integer iObject = Integer.valueOf(<span class="number">3</span>);</div><div class="line"><span class="keyword">int</span> iPrimitive = iObject.intValue()</div><div class="line"> </div><div class="line"><span class="comment">//after java5</span></div><div class="line">Integer iObject = <span class="number">3</span>;      <span class="comment">//autobxing - primitive to wrapper conversion</span></div><div class="line"><span class="keyword">int</span> iPrimitive = iObject; <span class="comment">//unboxing - object to primitive conversion</span></div></pre></td></tr></table></figure>
<h3 id="方法调用时"><a href="#方法调用时" class="headerlink" title="方法调用时"></a>方法调用时</h3><ul>
<li>当在进行方法调用时，可以传入原始数据值或对象，编译器同样会自动进行转换</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">show</span><span class="params">(Integer iParam)</span></span>&#123;</div><div class="line">   System.out.println(<span class="string">"autoboxing example - method invocation i: "</span> + iParam);</div><div class="line">   <span class="keyword">return</span> iParam;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//autoboxing and unboxing in method invocation</span></div><div class="line">show(<span class="number">3</span>); <span class="comment">//autoboxing</span></div><div class="line"><span class="keyword">int</span> result = show(<span class="number">3</span>); <span class="comment">//unboxing because return type of method is Integer</span></div></pre></td></tr></table></figure>
<h2 id="自动装箱引起的性能问题"><a href="#自动装箱引起的性能问题" class="headerlink" title="自动装箱引起的性能问题"></a>自动装箱引起的性能问题</h2><ul>
<li>如果有人告诉你：“只要修改一个字符，下面这段代码的运行速度就能提高5倍。”，你觉得可能么？</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> t = System.currentTimeMillis();</div><div class="line">Long sum = <span class="number">0L</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</div><div class="line">    sum += i;</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"total:"</span> + sum);</div><div class="line">System.out.println(<span class="string">"processing time: "</span> + (System.currentTimeMillis() - t) + <span class="string">" ms"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>输出结果：</li>
</ul>
<blockquote>
<p>total:2305843005992468481<br>processing time: 63556 ms</p>
</blockquote>
<ul>
<li>将Long修改为long，再来看一下运行结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> t = System.currentTimeMillis();</div><div class="line"><span class="keyword">long</span> sum = <span class="number">0L</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</div><div class="line">    sum += i;</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"total:"</span> + sum);</div><div class="line">System.out.println(<span class="string">"processing time: "</span> + (System.currentTimeMillis() - t) + <span class="string">" ms"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>输出结果：</li>
</ul>
<blockquote>
<p>total:2305843005992468481<br>processing time: 12229 ms</p>
</blockquote>
<ul>
<li>事实证明，仅仅修改了一个字符，性能提高了不止一倍两倍。那，就究竟是什么原因导致的呢？<br>因为，+这个操作符不适用Integer对象，在进行数值相加操作之前会发生自动拆箱操作，转换成int，相加之后还会发生自动拆箱操作，装换成Integer对象。其内部变化如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sum = sum.longValue() + i;</div><div class="line">Long sum = <span class="keyword">new</span> Long(sum);</div></pre></td></tr></table></figure>
<ul>
<li>很明显，在上面的循环中会创建2147483647个”Long“类型实例，在这样庞大的循环中，会降低程序的性能并且加重了垃圾回收的工作量</li>
</ul>
<blockquote>
<p><strong>说明：包含在包装器中的内容不会改变。即Long对象是不可变的</strong></p>
</blockquote>
<h2 id="重载与自动装箱"><a href="#重载与自动装箱" class="headerlink" title="重载与自动装箱"></a>重载与自动装箱</h2><ul>
<li>在java 5之前，value(int)和value(Integer)是完全不相同的方法，开发者不会因为传入是int还是Integer调用哪个方法困惑，但是由于自动装箱和拆箱的引入，处理重载方法时会不会有什么变化呢？可通过下面一个例子进行探讨：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"method with primitive argument"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Integer num)</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"method with wrapper argument"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//calling overloaded method</span></div><div class="line">AutoboxingTest autoTest = <span class="keyword">new</span> AutoboxingTest();</div><div class="line"><span class="keyword">int</span> value = <span class="number">3</span>;</div><div class="line">autoTest.test(value);  <span class="comment">//no autoboxing </span></div><div class="line">Integer iValue = value;</div><div class="line">autoTest.test(iValue); <span class="comment">//no autoboxing</span></div></pre></td></tr></table></figure>
<ul>
<li>输出结果</li>
</ul>
<blockquote>
<p>method with primitive argument<br>method with wrapper argument</p>
</blockquote>
<ul>
<li>从输出结果可以看出，在重载的情况下，不会发生自动装箱操作</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>自动装箱与拆箱在编程过程中给我们带来了极大的方便，但也存在一些容易让人出错的问题</li>
</ul>
<h3 id="对象相等比较"><a href="#对象相等比较" class="headerlink" title="对象相等比较"></a>对象相等比较</h3><ul>
<li>“==”既可用于原始值的比较，也可用于对象间的比较。当进行对象间的比较时，实质上比较的是对象的引用是否相等，而不是比较对象代表的值。如果要比较对象的值，应当使用对象对应的equals方法。可通过以下例子进行探讨：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoboxingTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="comment">// Example 1: == comparison pure primitive – no autoboxing</span></div><div class="line">        <span class="keyword">int</span> i1 = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> i2 = <span class="number">1</span>;</div><div class="line">        System.out.println(<span class="string">"i1==i2 : "</span> + (i1 == i2)); <span class="comment">// true</span></div><div class="line"> </div><div class="line">        <span class="comment">// Example 2: equality operator mixing object and primitive</span></div><div class="line">        Integer num1 = <span class="number">1</span>; <span class="comment">// autoboxing</span></div><div class="line">        <span class="keyword">int</span> num2 = <span class="number">1</span>;</div><div class="line">        System.out.println(<span class="string">"num1 == num2 : "</span> + (num1 == num2)); <span class="comment">// true</span></div><div class="line"> </div><div class="line">        <span class="comment">// Example 3: special case - arises due to autoboxing in Java</span></div><div class="line">        Integer obj1 = <span class="number">1</span>; <span class="comment">// autoboxing will call Integer.valueOf()</span></div><div class="line">        Integer obj2 = <span class="number">1</span>; <span class="comment">// same call to Integer.valueOf() will return same cached Object</span></div><div class="line">        System.out.println(<span class="string">"obj1 == obj2 : "</span> + (obj1 == obj2)); <span class="comment">// true</span></div><div class="line"> </div><div class="line">        <span class="comment">// Example 4: equality operator - pure object comparison</span></div><div class="line">        Integer one = <span class="keyword">new</span> Integer(<span class="number">1</span>); <span class="comment">// no autoboxing</span></div><div class="line">        Integer anotherOne = <span class="keyword">new</span> Integer(<span class="number">1</span>);</div><div class="line">        System.out.println(<span class="string">"one == anotherOne : "</span> + (one == anotherOne)); <span class="comment">// false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>输出结果</li>
</ul>
<blockquote>
<p>i1==i2 : true<br>num1 == num2 : true<br>obj1 == obj2 : true<br>one == anotherOne : false</p>
</blockquote>
<ul>
<li><p>值得注意的是，在Example 2中，比较是一个对象和一个原始值，出现这种情况比较的应该是对象的值</p>
</li>
<li><p>让人感到困惑的Example 3，在一开始我们说过，”==”用于对象间的比较时，比较的是它们的引用，那么为什么obj1 == obj2返回的结果却是true？<strong>这是一种极端情况，处于节省内存的考虑，JVM会缓存-128到127的Integer对象</strong>。也就是说，在创建obj1对象时，会进行自动装箱操作，并且将其对象保存至缓存中，在创建obj2对象时，同样会进行自动装箱操作，然后在缓存中查找是否有相同值的对象，如果有，那么obj2对象就会指向obj1对象。obj1和obj2实际上是同一个对象。所以使用”==”比较返回true</p>
</li>
<li><p>而Example 4，是通过使用构造器来创建对象的，而没有发生自动装箱操作，不会执行缓存策略，故one和anotherOne是指向不同的引用的</p>
</li>
</ul>
<blockquote>
<p>　<strong>说明：这种 Integer 缓存策略仅在自动装箱（autoboxing）的时候有用，使用构造器创建的 Integer 对象不能被缓存</strong></p>
</blockquote>
<h3 id="容易混乱的对象和原始数据值"><a href="#容易混乱的对象和原始数据值" class="headerlink" title="容易混乱的对象和原始数据值"></a>容易混乱的对象和原始数据值</h3><ul>
<li>一个很容易犯错的问题，就是忽略对象与原始数据值之间的差异，在进行比较操作时，对象如果没有初始化或者为null，在自动拆箱过程中obj.xxxValue，则会抛出NullPointerException，可通过以下例子进行探讨：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Integer count;</div><div class="line"><span class="comment">//NullPointerException on unboxing</span></div><div class="line"><span class="keyword">if</span>( count &lt;= <span class="number">0</span>)&#123;</div><div class="line">  System.out.println(<span class="string">"Count is not started yet"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生成无用对象增加GC压力"><a href="#生成无用对象增加GC压力" class="headerlink" title="生成无用对象增加GC压力"></a>生成无用对象增加GC压力</h3><ul>
<li>因为自动装箱会隐式地创建对象，像前面提到的那样，如果在一个循环体中，会创建无用的中间对象，这样会增加GC压力，拉低程序的性能。所以在写循环时一定要注意代码，避免引入不必要的自动装箱操作</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://gongchuangsu.com/2016/05/25/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/15.Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/" target="_blank" rel="external">Java学习笔记之自动装箱与拆箱</a>  </p>
</li>
<li><p><a href="http://ryan-hou.github.io/blog/2016/06/08/zi-dong-zhuang-xiang-yu-chai-xiang/" target="_blank" rel="external">自动装箱与拆箱</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java注解]]></title>
      <url>http://www.qiuchengjia.cn/2016/08/07/JAVA/Java%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h3><ul>
<li><p>注解对于开发人员来讲既熟悉又陌生，熟悉是因为只要你是做开发，都会用到注解（常见的@Override）；陌生是因为即使不使用注解也照常能够进行开发；注解不是必须的，但了解注解有助于我们深入理解某些第三方框架（比如Android Support Annotations、JUnit、xUtils、ActiveAndroid等），提高工作效率</p>
</li>
<li><p>ava注解又称为标注，是Java从1.5开始支持加入源码的特殊语法元数据；Java中的类、方法、变量、参数、包都可以被注解。这里提到的元数据是描述数据的数据，结合实例来说明：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>AnnotionDemo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>这里的”app_name”就是描述数据”AnnotionDemo”的数据，这是在配置文件中写的，注解是在源码中写的，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main_layout);</div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            setTextInOtherThread();</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>在上面的代码中，在MainActivity.java中复写了父类Activity.java的onCreate方法，使用到了@Override注解。但即使不加上@Override注解标记代码，程序也能够正常运行。那这里的@Override注解有什么用呢？使用它有什么好处？事实上，@Override是告诉编译器这个方法是一个重写方法，如果父类中不存在该方法，编译器会报错，提示该方法不是父类中的方法。如果不小心拼写错误，将onCreate写成了onCreat，而且没有使用@Override注解，程序依然能够编译通过，但运行结果和期望的大不相同。从示例可以看出，注解有助于阅读代码</p>
</li>
<li><p>使用注解很简单，根据注解类的@Target所修饰的对象范围，可以在类、方法、变量、参数、包中使用“@+注解类名+[属性值]”的方式使用注解。比如：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@UiThread</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTextInOtherThread</span><span class="params">(@StringRes <span class="keyword">int</span> resId)</span></span>&#123;</div><div class="line">    TextView threadTxtView = (TextView)MainActivity.<span class="keyword">this</span>.findViewById(R.id.threadTxtViewId);</div><div class="line">    threadTxtView.setText(resId);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="特别说明："><a href="#特别说明：" class="headerlink" title="特别说明："></a><strong>特别说明：</strong></h4><ul>
<li><p>注解仅仅是元数据，和业务逻辑无关，所以当你查看注解类时，发现里面没有任何逻辑处理；</p>
</li>
<li><p>javadoc中的@author、@version、@param、@return、@deprecated、@hide、@throws、@exception、@see是标记，并不是注解；</p>
</li>
</ul>
<a id="more"></a>
<h3 id="注解的作用"><a href="#注解的作用" class="headerlink" title="注解的作用"></a>注解的作用</h3><ul>
<li><p><strong>格式检查：</strong>告诉编译器信息，比如被@Override标记的方法如果不是父类的某个方法，IDE会报错；</p>
</li>
<li><p><strong>减少配置：</strong>运行时动态处理，得到注解信息，实现代替配置文件的功能；</p>
</li>
<li><p><strong>减少重复工作：</strong>比如第三方框架xUtils，通过注解@ViewInject减少对findViewById的调用，类似的还有（JUnit、ActiveAndroid等）；</p>
</li>
</ul>
<h3 id="注解是如何工作的？"><a href="#注解是如何工作的？" class="headerlink" title="注解是如何工作的？"></a>注解是如何工作的？</h3><ul>
<li>注解仅仅是元数据，和业务逻辑无关，所以当你查看注解类时，发现里面没有任何逻辑处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ViewInject &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/* parent view id */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">parentId</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果注解不包含业务逻辑处理，必然有人来实现这些逻辑。注解的逻辑实现是元数据的用户来处理的，注解仅仅提供它定义的属性（类/方法/变量/参数/包）的信息，注解的用户来读取这些信息并实现必要的逻辑。当使用java中的注解时（比如@Override、@Deprecated、@SuppressWarnings）JVM就是用户，它在字节码层面工作。如果是自定义的注解，比如第三方框架ActiveAndroid，它的用户是每个使用注解的类，所有使用注解的类都需要继承Model.java，在Model.java的构造方法中通过反射来获取注解类中的每个属性：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TableInfo</span><span class="params">(Class&lt;? extends Model&gt; type)</span> </span>&#123;</div><div class="line">    mType = type;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Table tableAnnotation = type.getAnnotation(Table.class);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (tableAnnotation != <span class="keyword">null</span>) &#123;</div><div class="line">        mTableName = tableAnnotation.name();</div><div class="line">        mIdName = tableAnnotation.id();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        mTableName = type.getSimpleName();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Manually add the id column since it is not declared like the other columns.</span></div><div class="line">    Field idField = getIdField(type);</div><div class="line">    mColumnNames.put(idField, mIdName);</div><div class="line"></div><div class="line">    List&lt;Field&gt; fields = <span class="keyword">new</span> LinkedList&lt;Field&gt;(ReflectionUtils.getDeclaredColumnFields(type));</div><div class="line">    Collections.reverse(fields);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">        <span class="keyword">if</span> (field.isAnnotationPresent(Column.class)) &#123;</div><div class="line">            <span class="keyword">final</span> Column columnAnnotation = field.getAnnotation(Column.class);</div><div class="line">            String columnName = columnAnnotation.name();</div><div class="line">            <span class="keyword">if</span> (TextUtils.isEmpty(columnName)) &#123;</div><div class="line">                columnName = field.getName();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mColumnNames.put(field, columnName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注解和配置文件的区别"><a href="#注解和配置文件的区别" class="headerlink" title="注解和配置文件的区别"></a>注解和配置文件的区别</h3><ul>
<li>通过上面的描述可以发现，其实注解干的很多事情，通过配置文件也可以干，比如为类设置配置属性；但注解和配置文件是有很多区别的，在实际编程过程中，注解和配置文件配合使用在工作效率、低耦合、可拓展性方面才会达到权衡</li>
</ul>
<hr>
<h4 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a><strong>配置文件：</strong></h4><p><strong>使用场合：</strong></p>
<ul>
<li><p>外部依赖的配置，比如build.gradle中的依赖配置；</p>
</li>
<li><p>同一项目团队内部达成一致的时候；</p>
</li>
<li><p>非代码类的资源文件（比如图片、布局、数据、签名文件等）；</p>
</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li><p>降低耦合，配置集中，容易扩展，比如Android应用多语言支持；</p>
</li>
<li><p>对象之间的关系一目了然，比如strings.xml；</p>
</li>
<li><p>xml配置文件比注解功能齐全，支持的类型更多，比如drawable、style等；</p>
</li>
</ul>
<p><strong> 缺点：</strong></p>
<ul>
<li><p>繁琐；</p>
</li>
<li><p>类型不安全，比如R.java中的都是资源ID，用TextView的setText方法时传入int值时无法检测出该值是否为资源ID，但@StringRes可以；</p>
</li>
</ul>
<hr>
<h4 id="注解："><a href="#注解：" class="headerlink" title="注解："></a><strong>注解：</strong></h4><p><strong>使用场合：</strong></p>
<ul>
<li><p>动态配置信息；</p>
</li>
<li><p>代为实现程序逻辑（比如xUtils中的@ViewInject代为实现findViewById）；</p>
</li>
<li><p>代码格式检查，比如Override、Deprecated、NonNull、StringRes等，便于IDE能够检查出代码错误</p>
</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li><p>在class文件中，提高程序的内聚性；</p>
</li>
<li><p>减少重复工作，提高开发效率，比如findViewById</p>
</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><p>如果对annotation进行修改，需要重新编译整个工程；</p>
</li>
<li><p>业务类之间的关系不如XML配置那样一目了然；</p>
</li>
<li><p>程序中过多的annotation，对于代码的简洁度有一定影响；</p>
</li>
<li><p>扩展性较差；</p>
</li>
</ul>
<hr>
<h3 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h3><h4 id="API"><a href="#API" class="headerlink" title="API"></a><strong>API</strong></h4><p>Android开发过程中使用到的注解主要来自如下几个地方：</p>
<ul>
<li><p>Android SDK：在包android.annotation下；</p>
</li>
<li><p>Android Annotation Support包：在包android.support.annotation下；</p>
</li>
<li><p>JDK：在包java.lang下；</p>
</li>
<li><p>第三方框架中的自定义注解；</p>
</li>
</ul>
<h4 id="最常见注解"><a href="#最常见注解" class="headerlink" title="最常见注解"></a><strong>最常见注解</strong></h4><ul>
<li><strong>@Override</strong></li>
</ul>
<p>属于标记注解，不需要设置属性值；只能添加在方法的前面，用于标记该方法是复写的父类中的某个方法，如果在父类没有的方法前面加上@Override注解，编译器会报错：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@Deprecated</strong></li>
</ul>
<p>属于标记注解，不需要设置属性值；可以对构造方法、变量、方法、包、参数标记，告知用户和编译器被标记的内容已不建议被使用，如果被使用，编译器会报警告，但不会报错，程序也能正常运行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.LOCAL_VARIABLE, ElementType.METHOD, ElementType.PACKAGE, ElementType.PARAMETER, ElementType.TYPE&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@SuppressWarnings</strong></li>
</ul>
<p>可以对构造方法、变量、方法、包、参数标记，用于告知编译器忽略指定的警告，不用再编译完成后出现警告信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.CONSTRUCTOR, ElementType.LOCAL_VARIABLE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</div><div class="line">    String[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@TargetApi</strong></li>
</ul>
<p>可以对接口、方法、构造方法标记，如果在应用中指定minSdkVersion为8，但有地方需要使用API 11中的方法，为了避免编译器报错，在调用API11中方法的接口、方法或者构造方法前面加上@Target(11)，这样该方法就可以使用&lt;=11的API接口了。虽然这样能够避免编译器报错，但在运行时需要注意，不能在API低于11的设备中使用该方法，否则会crash（可以获取程序运行设备的API版本来判断是否调用该方法）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;TYPE, METHOD, CONSTRUCTOR&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TargetApi &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This sets the target api level for the type..</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@SuppressLint</strong></li>
</ul>
<p>和@Target的功能差不多，但使用范围更广，主要用于避免在lint检查时报错：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressLint &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The set of warnings (identified by the lint issue id) that should be</div><div class="line">     * ignored by lint. It is not an error to specify an unrecognized name.</div><div class="line">     */</div><div class="line">    String[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Android-Annotation-Support包中的注解介绍："><a href="#Android-Annotation-Support包中的注解介绍：" class="headerlink" title="Android Annotation Support包中的注解介绍："></a>Android Annotation Support包中的注解介绍：</h3><p>Android support library从19.1版本开始引入了一个新的注解库，它包含很多有用的元注解，你能用它们修饰你的代码，帮助你发现bug。Support library自己本身也用到了这些注解，所以作为support library的用户，Android Studio已经基于这些注解校验了你的代码并且标注其中潜在的问题</p>
<p>这些注解是作为一个support包提供给开发者使用，要使用他们，需要在build.gradle中添加对android support-annotations的依赖：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.android.support:support-annotations:22.2.0'</span></div></pre></td></tr></table></figure>
<p>support包中的注解分为如下几大类：</p>
<h4 id="Nullness注解："><a href="#Nullness注解：" class="headerlink" title="Nullness注解："></a><strong>Nullness注解：</strong></h4><ul>
<li><p><strong>@Nullable:</strong>用于标记方法参数或者返回值可以为空；</p>
</li>
<li><p><strong>@NonNull:</strong>用于标记方法参数或者返回值不能为空，如果为空编译器会报警告；</p>
</li>
</ul>
<h4 id="资源类型注解："><a href="#资源类型注解：" class="headerlink" title="资源类型注解："></a><strong>资源类型注解：</strong></h4><ul>
<li>这类注解主要用于标记方法的参数必须要是指定的资源类型，如果不是，IDE就会报错；因为资源文件都是静态的，所以在编写代码时IDE就知道传值是否错误，可以避免传的资源id错误导致运行时异常。资源类型注解包括@AnimatorRes、@AnimRes、@AnyRes、@ArrayRes、@BoolRes、@ColorRes、@DimenRes、@DrawableRes、@FractionRes、@IdRes、@IntgerRes、@InterpolatorRes、@LayoutRes、@MenuRes、@PluralsRes、@RawRes、@StringRes、@StyleableRes、@StyleRes、@TransitionRes、@XmlRes</li>
</ul>
<h4 id="类型定义注解："><a href="#类型定义注解：" class="headerlink" title="类型定义注解："></a><strong>类型定义注解：</strong></h4><ul>
<li>这类注解用于检查“魔幻数”，很多时候，我们使用整型常量代替枚举类型（性能考虑），例如我们有一个IceCreamFlavourManager类，它具有三种模式的操作：VANILLA，CHOCOLATE和STRAWBERRY。我们可以定义一个名为@Flavour的新注解，并使用@IntDef指定它可以接受的值类型：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceCreamFlavourManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flavour;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VANILLA = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CHOCOLATE = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STRAWBERRY = <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="meta">@IntDef</span>(&#123;VANILLA, CHOCOLATE, STRAWBERRY&#125;)</div><div class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Flavour &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Flavour</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFlavour</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> flavour;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlavour</span><span class="params">(@Flavour <span class="keyword">int</span> flavour)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.flavour = flavour;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这时如果我们使用错误的整型值调用IceCreamFlavourManager.setFlavour时，IDE将报错如下：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A32.jpg" alt=""></center>

<ul>
<li>IDE甚至会提示我们可以使用的有效的取值：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A31.jpg" alt=""></center>

<ul>
<li>我们也可以指定整型值作为标志位，也就是说这些整型值可以使用’｜’或者’&amp;’进行与或等操作。如果我们把@Flavour定义为如下标志位：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IntDef</span>(flag = <span class="keyword">true</span>, value = &#123;VANILLA, CHOCOLATE, STRAWBERRY&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Flavour &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>那么可以如下调用：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.setFlavour(IceCreamFlavourManager.VANILLA &amp; IceCreamFlavourManager.CHOCOLATE);</div></pre></td></tr></table></figure>
<h4 id="线程注解："><a href="#线程注解：" class="headerlink" title="线程注解："></a><strong>线程注解：</strong></h4><ul>
<li>用于标记指定的方法、类（如果一个类中的所有方法都有相同的线程需求，就可以对这个类进行注解，比如View.java就被@UIThread所标记）只能在指定的线程类中被调用，包括：@UiThread、@MainThread、@WorkerThread、@BinderThread；以@UIThread为例，说明这类注解的使用方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main_layout);</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                setTextInOtherThread(R.string.app_name);</div><div class="line">             <span class="comment">// setTextInOtherThread2(R.string.app_name);</span></div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@UiThread</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTextInOtherThread</span><span class="params">(@StringRes <span class="keyword">int</span> resId)</span></span>&#123;</div><div class="line">        TextView threadTxtView = (TextView)MainActivity.<span class="keyword">this</span>.findViewById(R.id.threadTxtViewId);</div><div class="line">        threadTxtView.setText(resId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTextInOtherThread2</span><span class="params">(@StringRes <span class="keyword">final</span> <span class="keyword">int</span> resId)</span></span>&#123;</div><div class="line">        MainActivity.<span class="keyword">this</span>.runOnUiThread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                TextView threadTxtView = (TextView)MainActivity.<span class="keyword">this</span>.findViewById(R.id.threadTxtViewId);</div><div class="line">                threadTxtView.setText(resId);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@UIThread和@MainThread的区别：</strong>在进程里只有一个主线程。这个就是@MainThread。同时这个线程也是一个@UiThread。比如activity的主要窗口就运行在这个线程上。然而它也有能力为应用创建其他线程。这很少见，一般具备这样功能的都是系统进程。通常是把和生命周期有关的用@MainThread标注，和View层级结构相关的用@UiThread标注。但是由于@MainThread本质上是一个@UiThread，而大部分情况下@UiThread又是一个@MainThread，所以工具(lint ,Android Studio,等等)可以把他们互换，所以你能在一个可以调用@MainThread方法的地方也能调用@UiThread方法，反之亦然</li>
</ul>
<h4 id="GRB颜色值注解："><a href="#GRB颜色值注解：" class="headerlink" title="GRB颜色值注解："></a><strong>GRB颜色值注解：</strong></h4><ul>
<li>用于标记传递的颜色值必须是整型值，并且不能是color资源ID；当你的API期望一个颜色资源的时候，可以用@ColorRes标注，但是当你有一个相反的使用场景时，这种用法就不可用了，因为你并不是期望一个颜色资源id，而是一个真实的RGB或者ARGB的颜色值。在这种情况下，你可以使用@ColorInt注解，表示你期望的是一个代表颜色的整数值：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(@ColorInt <span class="keyword">int</span> color)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>有了这个，当你传递一个颜色id而不是颜色值的时候，lint就会标记出这段不正确的代码：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A34.jpg" alt=""></center>

<h4 id="值约束注解："><a href="#值约束注解：" class="headerlink" title="值约束注解："></a><strong>值约束注解：</strong></h4><ul>
<li>用于标记参数必须是指定类型的值，并且值的范围必须在约束的范围内，包括@Size、@IntRange、@FloatRange。如果你的参数是一个float或者double类型，并且一定要在某个范围内，你可以使用@FloatRange注解：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlpha</span><span class="params">(@FloatRange(from=<span class="number">0.0</span>, to=<span class="number">1.0</span>)</span> <span class="keyword">float</span> alpha)</span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果有人使用该API的时候传递一个0-255的值，比如尝试调用setAlpha(128)，那么工具就会捕获这一问题：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A36.jpg" alt=""></center>

<ul>
<li><p>把这些注解应用到参数上是非常有用的，因为用户很有可能会提供错误范围的参数，比如上面的setAlpha例子，有的API是采用0-255的方式，而有的是采用0-1的float值的方式</p>
</li>
<li><p>对于数据、集合以及字符串，你可以用@Size注解参数来限定集合的大小(当参数是字符串的时候，可以限定字符串的长度)。举几个例子:</p>
<ol>
<li><p>集合不能为空: @Size(min=1)；</p>
</li>
<li><p>字符串最大只能有23个字符: @Size(max=23)；</p>
</li>
<li><p>数组只能有2个元素: @Size(2)；</p>
</li>
<li><p>数组的大小必须是2的倍数 (例如图形API中获取位置的x/y坐标数组: @Size(multiple=2)</p>
</li>
</ol>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A37.jpg" alt=""></center>

<h4 id="权限注解："><a href="#权限注解：" class="headerlink" title="权限注解："></a><strong>权限注解：</strong></h4><ul>
<li>如果你的方法需要调用者有特定的权限，你可以使用@RequiresPermission注解：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>(Manifest.permission.SET_WALLPAPER)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setWallpaper</span><span class="params">(Bitmap bitmap)</span> <span class="keyword">throws</span> IOException</span>;</div></pre></td></tr></table></figure>
<ul>
<li>如果你至少需要权限集合中的一个，你可以使用anyOf属性：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>(anyOf = &#123;</div><div class="line">    Manifest.permission.ACCESS_COARSE_LOCATION,</div><div class="line">    Manifest.permission.ACCESS_FINE_LOCATION&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Location <span class="title">getLastKnownLocation</span><span class="params">(String provider)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>如果你同时需要多个权限，你可以用allOf属性：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>(allOf = &#123;</div><div class="line">    Manifest.permission.READ_HISTORY_BOOKMARKS, </div><div class="line">    Manifest.permission.WRITE_HISTORY_BOOKMARKS&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">updateVisitedHistory</span><span class="params">(ContentResolver cr, String url, <span class="keyword">boolean</span> real)</span> </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>对于intents的权限，可以直接在定义的intent常量字符串字段上标注权限需求(他们通常都已经被@SdkConstant注解标注过了):</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>(android.Manifest.permission.BLUETOOTH)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_REQUEST_DISCOVERABLE =</div><div class="line">            <span class="string">"android.bluetooth.adapter.action.REQUEST_DISCOVERABLE"</span>;</div></pre></td></tr></table></figure>
<ul>
<li>对于content providers的权限，你可能需要单独的标注读和写的权限访问，所以可以用@Read或者@Write标注每一个权限需求：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>.Read(<span class="meta">@RequiresPermission</span>(READ_HISTORY_BOOKMARKS))</div><div class="line"><span class="meta">@RequiresPermission</span>.Write(<span class="meta">@RequiresPermission</span>(WRITE_HISTORY_BOOKMARKS))</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Uri BOOKMARKS_URI = Uri.parse(<span class="string">"content://browser/bookmarks"</span>);</div></pre></td></tr></table></figure>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A38.jpg" alt=""></center>


<h4 id="复写方法注解："><a href="#复写方法注解：" class="headerlink" title="复写方法注解："></a><strong>复写方法注解：</strong></h4><ul>
<li>如果你的API允许使用者重写你的方法，但你又需要你自己的方法(父方法)在重写的时候也被调用，这时候你可以使用@CallSuper标注：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CallSuper</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>用了这个后，当重写的方法没有调用父方法时，工具就会给予警告提示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A39.jpg" alt=""></center>

<h4 id="返回值注解："><a href="#返回值注解：" class="headerlink" title="返回值注解："></a><strong>返回值注解：</strong></h4><ul>
<li><p>如果你的方法有返回值，你期望调用者用这个值做些事情，那么你可以使用@CheckResult注解标注这个方法</p>
</li>
<li><p>你并不需要为每个非空方法都进行标注。它主要的目的是帮助哪些容易被混淆，难以被理解的API的使用者</p>
</li>
<li><p>比如，可能很多开发者都对String.trim()一知半解，认为调用了这个方法，就可以让字符串改变以去掉空白字符。如果这个方法被@CheckResult标注，工具就会对那些没有使用trim()返回结果的调用者发出警告</p>
</li>
<li><p>Android中，Context#checkPermission这个方法已经被@CheckResult标注了：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CheckResult</span>(suggest=<span class="string">"#enforcePermission(String,int,int,String)"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">checkPermission</span><span class="params">(@NonNull String permission, <span class="keyword">int</span> pid, <span class="keyword">int</span> uid)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>这是非常重要的，因为有些使用context.checkPermission的开发者认为他们已经执行了一个权限 —-但其实这个方法仅仅只做了检查并且反馈一个是否成功的值而已。如果开发者使用了这个方法，但是又不用其返回值，那么这个开发者真正想调用的可能是这个Context#enforcePermission方法，而不是checkPermission</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A310.jpg" alt=""></center>

<h4 id="测试可见注解："><a href="#测试可见注解：" class="headerlink" title="测试可见注解："></a><strong>测试可见注解：</strong></h4><ul>
<li>你可以把这个注解标注到类、方法或者字段上，以便你在测试的时候可以使用他们</li>
</ul>
<hr>
<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>通过阅读注解类的源码可以发现，任何一个注解类都有如下特征：</p>
<ul>
<li><p>注解类会被@interface标记；</p>
</li>
<li><p>注解类的顶部会被@Documented、@Retention、@Target、@Inherited这四个注解标记（@Documented、@Inherited可选，@Retention、@Target必须要有）；</p>
</li>
</ul>
<p><strong>@UiThread源码：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(CLASS)</div><div class="line"><span class="meta">@Target</span>(&#123;METHOD,CONSTRUCTOR,TYPE&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UiThread &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>上文提到的四个注解：@Documented、@Retention、@Target、@Inherited就是元注解，它们的作用是负责注解其它注解，主要是描述注解的一些属性，任何注解都离不开元注解（包括元注解自身，通过元注解可以自定义注解），元注解的用户是JDK，JDK已经帮助我们实现了这四个注解的逻辑。这四个注解在JDK的java.lang.annotation包中。对每个元注解的详细说明如下：</p>
<h4 id="Target："><a href="#Target：" class="headerlink" title="@Target："></a><strong>@Target：</strong></h4><ul>
<li><p><strong>作用：</strong>用于描述注解的使用范围，即被描述的注解可以用在什么地方；</p>
</li>
<li><p><strong>取值：</strong></p>
</li>
</ul>
<ol>
<li><p>CONSTRUCTOR:构造器；</p>
</li>
<li><p>FIELD:实例；</p>
</li>
<li><p>LOCAL_VARIABLE:局部变量；</p>
</li>
<li><p>METHOD:方法；</p>
</li>
<li><p>PACKAGE:包；</p>
</li>
<li><p>PARAMETER:参数;</p>
</li>
<li><p>TYPE:类、接口(包括注解类型) 或enum声明</p>
</li>
</ol>
<ul>
<li><strong>示例：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/***</span></div><div class="line"> *</div><div class="line"> * 实体注解接口</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(value = &#123;ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(value = RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Entity &#123;</div><div class="line">    <span class="comment">/***</span></div><div class="line">     * 实体默认firstLevelCache属性为false</div><div class="line">     * <span class="doctag">@return</span> boolean</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">firstLevelCache</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</div><div class="line">    <span class="comment">/***</span></div><div class="line">     * 实体默认secondLevelCache属性为false</div><div class="line">     * <span class="doctag">@return</span> boolean</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">secondLevelCache</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</div><div class="line">    <span class="comment">/***</span></div><div class="line">     * 表名默认为空</div><div class="line">     * <span class="doctag">@return</span> String</div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">tableName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">    <span class="comment">/***</span></div><div class="line">     * 默认以""分割注解</div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">split</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Retention："><a href="#Retention：" class="headerlink" title="@Retention："></a><strong>@Retention：</strong></h4><ul>
<li><p><strong>作用：</strong>表示需要在什么级别保存该注解信息，用于描述注解的生命周期，即被描述的注解在什么范围内有效；</p>
</li>
<li><p><strong>取值：</strong></p>
</li>
</ul>
<ol>
<li><p>SOURCE:在源文件中有效，即源文件保留；</p>
</li>
<li><p>CLASS:在class文件中有效，即class保留；</p>
</li>
<li><p>RUNTIME:在运行时有效，即运行时保留；</p>
</li>
</ol>
<ul>
<li><strong>示例：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/***</span></div><div class="line"> * 字段注解接口</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(value = &#123;ElementType.FIELD&#125;)<span class="comment">//注解可以被添加在实例上</span></div><div class="line"><span class="meta">@Retention</span>(value = RetentionPolicy.RUNTIME)<span class="comment">//注解保存在JVM运行时刻,能够在运行时刻通过反射API来获取到注解的信息</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;<span class="comment">//注解的name属性</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Documented："><a href="#Documented：" class="headerlink" title="@Documented："></a><strong>@Documented：</strong></h4><ul>
<li><p><strong>作用：</strong>用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化</p>
</li>
<li><p><strong>取值：</strong>它属于标记注解，没有成员；</p>
</li>
<li><p><strong>示例：</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(CLASS)</div><div class="line"><span class="meta">@Target</span>(&#123;METHOD,CONSTRUCTOR,TYPE&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UiThread &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Inherited："><a href="#Inherited：" class="headerlink" title="@Inherited："></a><strong>@Inherited：</strong></h4><ul>
<li><p><strong>作用：</strong>用于描述某个被标注的类型是可被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类</p>
</li>
<li><p><strong>取值：</strong>它属于标记注解，没有成员；</p>
</li>
<li><p><strong>示例：</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  </span></div><div class="line"> * <span class="doctag">@author</span> wangsheng </div><div class="line"> **/  </div><div class="line"><span class="meta">@Inherited</span>  </div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Greeting &#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> FontColor&#123; BULE,RED,GREEN&#125;;  </div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;  </div><div class="line">    <span class="function">FontColor <span class="title">fontColor</span><span class="params">()</span> <span class="keyword">default</span> FontColor.GREEN</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如何自定义注解"><a href="#如何自定义注解" class="headerlink" title="如何自定义注解"></a>如何自定义注解</h3><p>使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。</p>
<ul>
<li><strong>自定义注解格式：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">元注解</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名&#123;</div><div class="line">    定义体；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>注解参数可支持的数据类型：</strong></li>
</ul>
<ol>
<li><p>所有基本数据类型（int,float,boolean,byte,double,char,long,short)；</p>
</li>
<li><p>String类型；</p>
</li>
<li><p>Class类型；</p>
</li>
<li><p>enum类型；</p>
</li>
<li><p>Annotation类型；</p>
</li>
<li><p>以上所有类型的数组</p>
</li>
</ol>
<hr>
<p><strong>特别说明：</strong></p>
<ul>
<li>注解类中的方法只能用public或者默认这两个访问权修饰，不写public就是默认，eg：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FruitColor &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Color&#123; BULE,RED,GREEN&#125;;</div><div class="line">    <span class="function">Color <span class="title">fruitColor</span><span class="params">()</span> <span class="keyword">default</span> Color.GREEN</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>如果注解类中只有一个成员，最好把方法名设置为”value”，比如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FruitName &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解元素的值不可为null。因此, 使用空字符串或0作为默认值是一种常用的做法</li>
</ul>
<hr>
<h4 id="实例演示："><a href="#实例演示：" class="headerlink" title="实例演示："></a><strong>实例演示：</strong></h4><ul>
<li><strong>ToDo.java：</strong>注解类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@interface</span> Todo &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Priority &#123;LOW, MEDIUM, HIGH&#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Status &#123;STARTED, NOT_STARTED&#125;    </div><div class="line">    <span class="function">String <span class="title">author</span><span class="params">()</span> <span class="keyword">default</span> "Yash"</span>;</div><div class="line">    <span class="function">Priority <span class="title">priority</span><span class="params">()</span> <span class="keyword">default</span> Priority.LOW</span>;</div><div class="line">    <span class="function">Status <span class="title">status</span><span class="params">()</span> <span class="keyword">default</span> Status.NOT_STARTED</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>BusinessLogic:</strong>使用注解的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessLogic</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessLogic</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compltedMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"This method is complete"</span>);</div><div class="line">    &#125;    </div><div class="line"></div><div class="line">    <span class="meta">@Todo</span>(priority = Todo.Priority.HIGH)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notYetStartedMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// No Code Written yet</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Todo</span>(priority = Todo.Priority.MEDIUM, author = <span class="string">"Uday"</span>, status = Todo.Status.STARTED)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">incompleteMethod1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//Some business logic is written</span></div><div class="line">        <span class="comment">//But its not complete yet</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Todo</span>(priority = Todo.Priority.LOW, status = Todo.Status.STARTED )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">incompleteMethod2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//Some business logic is written</span></div><div class="line">        <span class="comment">//But its not complete yet</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>TodoReport.java：</strong>解析注解信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoReport</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TodoReport</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        getTodoReportForBusinessLogic();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 解析使用注解的类，获取通过注解设置的属性</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getTodoReportForBusinessLogic</span><span class="params">()</span> </span>&#123;</div><div class="line">        Class businessLogicClass = BusinessLogic.class;</div><div class="line">        <span class="keyword">for</span>(Method method : businessLogicClass.getMethods()) &#123;</div><div class="line">            Todo todoAnnotation = (Todo)method.getAnnotation(Todo.class);</div><div class="line">            <span class="keyword">if</span>(todoAnnotation != <span class="keyword">null</span>) &#123;</div><div class="line">                System.out.println(<span class="string">" Method Name : "</span> + method.getName());</div><div class="line">                System.out.println(<span class="string">" Author : "</span> + todoAnnotation.author());</div><div class="line">                System.out.println(<span class="string">" Priority : "</span> + todoAnnotation.priority());</div><div class="line">                System.out.println(<span class="string">" Status : "</span> + todoAnnotation.status());</div><div class="line">                System.out.println(<span class="string">" --------------------------- "</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>执行结果如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A311.jpg" alt=""></center>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/21410338?f3fb8ead20=ede8379d6b659f7594e37ed09c7c0b50" target="_blank" rel="external">深入浅出Java注解</a></p>
</li>
<li><p><a href="http://www.in-droid.com/2016/06/02/Java%E6%B3%A8%E8%A7%A3/" target="_blank" rel="external">Java注解</a></p>
</li>
<li><p><a href="http://josh-persistence.iteye.com/blog/2226493" target="_blank" rel="external">深入浅出Java Annotation(元注解和自定义注解）</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javadoc标签]]></title>
      <url>http://www.qiuchengjia.cn/2016/08/04/JAVA/Javadoc%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<h3 id="javadoc-标签"><a href="#javadoc-标签" class="headerlink" title="javadoc 标签"></a>javadoc 标签</h3><ul>
<li>javadoc工具软件识别以下标签：</li>
</ul>
<table>
<thead>
<tr>
<th>标签</th>
<th style="text-align:left">描述</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>@author</td>
<td style="text-align:left">标识一个类的作者</td>
<td style="text-align:center">@author description</td>
</tr>
<tr>
<td>@deprecated</td>
<td style="text-align:left">指名一个过期的类或成员</td>
<td style="text-align:center">@deprecated description</td>
</tr>
<tr>
<td>{@docRoot}</td>
<td style="text-align:left">指明当前文档根目录的路径</td>
<td style="text-align:center">Directory Path</td>
</tr>
<tr>
<td>@exception</td>
<td style="text-align:left">标志一个类抛出的异常</td>
<td style="text-align:center">@exception exception-name explanation</td>
</tr>
<tr>
<td>{@inheritDoc}</td>
<td style="text-align:left">从直接父类继承的注释</td>
<td style="text-align:center">Inherits a comment from the immediate surperclass.</td>
</tr>
<tr>
<td>{@link}</td>
<td style="text-align:left">插入一个到另一个主题的链接</td>
<td style="text-align:center">{@link name text}</td>
</tr>
<tr>
<td>{@linkplain}</td>
<td style="text-align:left">插入一个到另一个主题的链接，但是该链接显示纯文本字体</td>
<td style="text-align:center">Inserts an in-line link to another topic.</td>
</tr>
<tr>
<td>@param</td>
<td style="text-align:left">说明一个方法的参数</td>
<td style="text-align:center">@param parameter-name explanation</td>
</tr>
<tr>
<td>@return</td>
<td style="text-align:left">说明返回值类型</td>
<td style="text-align:center">@return explanation</td>
</tr>
<tr>
<td>@see</td>
<td style="text-align:left">指定一个到另一个主题的链接</td>
<td style="text-align:center">@see anchor</td>
</tr>
<tr>
<td>@serial</td>
<td style="text-align:left">说明一个序列化属性</td>
<td style="text-align:center">@serial description</td>
</tr>
<tr>
<td>@serialData</td>
<td style="text-align:left">说明通过writeObject( ) 和 writeExternal( )方法写的数据</td>
<td style="text-align:center">@serialData description</td>
</tr>
<tr>
<td>@serialField</td>
<td style="text-align:left">说明一个ObjectStreamField组件</td>
<td style="text-align:center">@serialField name type description</td>
</tr>
<tr>
<td>@since</td>
<td style="text-align:left">标记当引入一个特定的变化时</td>
<td style="text-align:center">@since release</td>
</tr>
<tr>
<td>@throws</td>
<td style="text-align:left">和 @exception标签一样.</td>
<td style="text-align:center">The @throws tag has the same meaning as the @exception tag.</td>
</tr>
<tr>
<td>{@value}</td>
<td style="text-align:left">显示常量的值，该常量必须是static属性。</td>
<td style="text-align:center">Displays the value of a constant, which must be a static field.</td>
</tr>
<tr>
<td>@version</td>
<td style="text-align:left">指定类的版本</td>
<td style="text-align:center">@version info</td>
</tr>
</tbody>
</table>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java泛型]]></title>
      <url>http://www.qiuchengjia.cn/2016/08/03/JAVA/Java%E6%B3%9B%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>泛型（Generic Type）是Java中重要的一部分。在J2SE 5.0之后新增。在使用Java标准库中的内容的时候，经常会遇到泛型。这里将泛型总结一下</p>
<h3 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h3><ul>
<li>讨论一个内容的时候，首先会来说什么是什么。在官方的文档中说到</li>
</ul>
<blockquote>
<p>A generic type is a generic class or interface that is parameterized over types.</p>
</blockquote>
<ul>
<li>泛型又可以称作参数化类型，这是在Java SE新增添的特性。一对尖括号，中间包含类型信息。将类型独立成参数，在使用的时候才指定实际的类型</li>
</ul>
<p>如果没有泛型会怎么样？我们考虑以下几种情况：</p>
<ol>
<li><p>你实现了一个存储整数类型（Integer）的列表，这时候你又需要存储字符串（String）的列表，两种列表逻辑行为完全一样，只是存储的类型不同</p>
</li>
<li><p>为了保证列表的通用性，你将列表的类型改为了Object，这样就不用为类型修改代码了。但是每次从列表中取对象的时候都需要强制转换，而且很很容易出错</p>
</li>
</ol>
<ul>
<li>有了泛型之后，可以将逻辑相同类型不同的代码独立出来，由编译器负责进行<strong>类型转换</strong></li>
</ul>
<a id="more"></a>
<h3 id="泛型的声明"><a href="#泛型的声明" class="headerlink" title="泛型的声明"></a>泛型的声明</h3><h4 id="泛型方法（Generic-Method）"><a href="#泛型方法（Generic-Method）" class="headerlink" title="泛型方法（Generic Method）"></a>泛型方法（Generic Method）</h4><ul>
<li>泛型方法是在普通方法声明上加入了泛型</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">( E[] inputArray )</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> ( E element : inputArray )&#123;        </div><div class="line">        System.out.printf( <span class="string">"%s "</span>, element );</div><div class="line">    &#125;</div><div class="line">    System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>调用：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create arrays of Integer, Double and Character</span></div><div class="line">Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</div><div class="line">Double[] doubleArray = &#123; <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span> &#125;;</div><div class="line">Character[] charArray = &#123; <span class="string">'H'</span>, <span class="string">'E'</span>, <span class="string">'L'</span>, <span class="string">'L'</span>, <span class="string">'O'</span> &#125;;</div><div class="line">System.out.println( <span class="string">"Array integerArray contains:"</span> );</div><div class="line">printArray( intArray  ); <span class="comment">// pass an Integer array</span></div><div class="line">System.out.println( <span class="string">"\nArray doubleArray contains:"</span> );</div><div class="line">printArray( doubleArray ); <span class="comment">// pass a Double array</span></div><div class="line">System.out.println( <span class="string">"\nArray characterArray contains:"</span> );</div><div class="line">printArray( charArray ); <span class="comment">// pass a Character array</span></div></pre></td></tr></table></figure>
<ul>
<li>输出：</li>
</ul>
<blockquote>
<p>Array integerArray contains:<br>1 2 3 4 5 6<br>Array doubleArray contains:<br>1.1 2.2 3.3 4.4<br>Array characterArray contains:<br>H E L L O</p>
</blockquote>
<p>Java泛型方法的声明格式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[权限] [修饰符] [泛型] [返回值] [方法名]  (    [参数列表]   ) &#123;&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span>  &lt; E &gt;   <span class="function"><span class="keyword">void</span>   <span class="title">printArray</span><span class="params">( E[] inputArray )</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>泛型的声明，必须在方法的修饰符（public,static,final,abstract等）之后，返回值声明之前。可以声明多个泛型，用逗号隔开。泛型的声明要用&lt;&gt;包裹</li>
</ul>
<p>泛型方法的使用有两种：</p>
<h5 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h5><ul>
<li>以声明键值对的例子来说，通常的写法会有一长串，不免有些痛苦</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, List&lt;String&gt;&gt; m = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;();</div></pre></td></tr></table></figure>
<ul>
<li>我们可以构造一个泛型方法作为静态工厂，来完成这一操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; <span class="function">HashMap&lt;K, V&gt; <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;K, V&gt;();</div><div class="line">&#125;</div><div class="line">Map&lt;String, List&lt;String&gt;&gt; m = newInstance();</div></pre></td></tr></table></figure>
<ul>
<li>编译器在编译代码的时候推导出了K, V分别对应的类型。当然，编译器的推导能力也是有限的，这里也就不过多讨论了</li>
</ul>
<h5 id="指定类型"><a href="#指定类型" class="headerlink" title="指定类型"></a>指定类型</h5><ul>
<li>不赘述</li>
</ul>
<h4 id="泛型类（Generic-Class）"><a href="#泛型类（Generic-Class）" class="headerlink" title="泛型类（Generic Class）"></a>泛型类（Generic Class）</h4><ul>
<li>泛型类和普通类的声明一样，只是在类名后面加上了类型表示。就像泛型方法，泛型类可以有一个或多个类型表示，用逗号进行分隔</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">private</span> T t;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.t = t;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">     Box&lt;Integer&gt; integerBox = <span class="keyword">new</span> Box&lt;Integer&gt;();</div><div class="line">     Box&lt;String&gt; stringBox = <span class="keyword">new</span> Box&lt;String&gt;();</div><div class="line">    </div><div class="line">     integerBox.add(<span class="keyword">new</span> Integer(<span class="number">10</span>));</div><div class="line">     stringBox.add(<span class="keyword">new</span> String(<span class="string">"Hello World"</span>));</div><div class="line">     System.out.printf(<span class="string">"Integer Value :%d\n\n"</span>, integerBox.get());</div><div class="line">     System.out.printf(<span class="string">"String Value :%s\n"</span>, stringBox.get());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Integer Value :10<br>String Value :Hello World</p>
</blockquote>
<ul>
<li><p>在泛型类上声明的类型，可以被用到类中任何表示类型的地方</p>
</li>
<li><p>泛型类只能通过以指定类型的方式进行使用。在之后的Java版本中，加入了类型推导功能，可以将后面的泛型类型省略，但是还是需要保留尖括号</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">// 普通的写法</span></div><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 省略的写法</span></div></pre></td></tr></table></figure>
<h4 id="泛型接口（Generic-Interface）"><a href="#泛型接口（Generic-Interface）" class="headerlink" title="泛型接口（Generic Interface）"></a>泛型接口（Generic Interface）</h4><ul>
<li>泛型接口是在声明接口的时候指定，类在继承接口的时候需要补充泛型类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Info</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getInfo</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后定义一个类实现这个接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> InfoImp implements Info&lt;String&gt; &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以发现实现接口里的方法需要使用具体的类型</li>
</ul>
<p>泛型接口的一般格式：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[访问权限] interface [接口名] &lt;泛型标识&gt; &#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>当然，我们可以实现泛型接口的时候不指名泛型类型，这样这个类就需要定义为泛型类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> InfoImp&lt;T&gt; implements Info&lt;T&gt; &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="泛型标识与泛型通配符"><a href="#泛型标识与泛型通配符" class="headerlink" title="泛型标识与泛型通配符"></a>泛型标识与泛型通配符</h3><ul>
<li>理论上泛型标识可以使用任意的字母或字母序列，可以考虑以下的例子，但是不推荐这样使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;STRING&gt; <span class="function">STRING <span class="title">sayHello</span><span class="params">(STRING word)</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"Hello "</span> + word);</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>但是Java内部有一套自己的规范，这样在阅读JDK代码的时候会更加明确泛型标识的含义</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">E - Element (在集合中使用，因为集合中存放的是元素)</div><div class="line">T - Type（Java 类）</div><div class="line">K - Key（键）</div><div class="line">V - Value（值）</div><div class="line">N - Number（数值类型）</div><div class="line">? - 表示不确定的java类型</div><div class="line">S、U、V - <span class="number">2</span>nd、<span class="number">3</span>rd、<span class="number">4</span>th types</div></pre></td></tr></table></figure>
<ul>
<li>说到泛型标识符，再说一说泛型通配符。常用的泛型通配符有三种</li>
</ul>
<h4 id="任意类型-“-lt-”-gt"><a href="#任意类型-“-lt-”-gt" class="headerlink" title="任意类型 “&lt;”?&gt;"></a>任意类型 “&lt;”?&gt;</h4><ul>
<li>“&lt;”?&gt; 可以理解为泛型中的 Object，为什么这么说呢？因为任意类型的通配符可以接受任意类型的泛型。下面的例子表示出了这种关系</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Box&lt;?&gt; box = <span class="keyword">new</span> Box&lt;String&gt;();</div></pre></td></tr></table></figure>
<ul>
<li>类似于将后面的类型转换到前面的类型。但是&lt;?&gt;只能用作接收，不能用来定义，下面的例子是错误的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;?&gt; </span>&#123;&#125; <span class="comment">//错误的泛型类定义</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;?&gt; <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(? helloString)</span> </span>&#123;&#125; <span class="comment">//错误的泛型方法定义</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Box</span>&lt;?&gt; </span>&#123;&#125; <span class="comment">//错误的泛型接口定义</span></div></pre></td></tr></table></figure>
<h4 id="上限类型-“-lt-”-extends-类-gt"><a href="#上限类型-“-lt-”-extends-类-gt" class="headerlink" title="上限类型 “&lt;”? extends 类&gt;"></a>上限类型 “&lt;”? extends 类&gt;</h4><ul>
<li>“&lt;”? extends 类&gt; 表示泛型只能使用这个类或这个类的<strong>子类</strong>。举个例子</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends String&gt; <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(T helloString)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>在该方法中调用sayHello(“xiaoming”);是正确的，但是调用sayHello(2333);就是错误的</p>
</li>
<li><p>考虑一种更通用的情况</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">(List&lt;? extends String&gt; list)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(String str:list)&#123;</div><div class="line">        System.out.println(str);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这个例子指定了泛型类的具体类型的范围。在JDK中经常可以看到这样的使用方法</li>
</ul>
<h4 id="下限类型-“-lt-”-super-类-gt"><a href="#下限类型-“-lt-”-super-类-gt" class="headerlink" title="下限类型 “&lt;”? super 类&gt;"></a>下限类型 “&lt;”? super 类&gt;</h4><ul>
<li>同上限方法，”&lt;”? super 类&gt; 表示泛型只能使用这个类或这个类的<strong>父类</strong></li>
</ul>
<h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><ul>
<li><p>泛型只在编译时有效，编译成字节码的过程中会进行类型擦除的操作。当然并不是所有的泛型类型都被擦除，有些也会保留下来</p>
</li>
<li><p>一个简单的类型擦除的例子：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">Iterator&lt;String&gt; it = list.iterator();</div><div class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">   String s = it.next();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>我们对其编译，然后再反编译，反编译引擎用的CFR：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayList arrayList = <span class="keyword">new</span> ArrayList();</div><div class="line">Iterator iterator = arrayList.iterator();</div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">    String string = (String)iterator.next();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>从上面的结果可以看出，泛型类上面的类型被去掉了，但是增加了一个类型强制转换。解释器默认认为里面的类型都会是String。这是因为在编译的时候会进行类型检查，如果发现使用的类型与泛型声明类型不符，编译是不会通过的</p>
</li>
<li><p>那能不能绕过这个检查呢？这个时候就需要使用<strong>反射</strong>来进行操作了。就上面的例子来说，ArrayList可以放入任意类型，所以使用反射只要保证类型强制转换不出问题，程序还是可以使用的</p>
</li>
</ul>
<p>在Java文档中提到，类型擦除主要进行以下工作：</p>
<ol>
<li><p>将泛型中的所有类型参数更换成类型界限，或者无界的类型替换成Object。所以生成的字节码只包含普通类、接口和方法</p>
</li>
<li><p>为了确保类型安全，必要时插入强制类型转换</p>
</li>
<li><p>生成桥接方法保持扩展泛型类型中的多态性</p>
</li>
</ol>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><ul>
<li>使用泛型方法可以使用可变参数：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T... args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (T t : args) &#123;</div><div class="line">            System.out.println(t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        out(<span class="string">"findingsea"</span>, <span class="number">123</span>, <span class="number">11.11</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="new-T"><a href="#new-T" class="headerlink" title="new T()?"></a>new T()?</h3><ul>
<li>能不能在泛型方法（类）中创建泛型类型的实例呢？答案是不可以的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(List&lt;E&gt; list)</span> </span>&#123;</div><div class="line">    E elem = <span class="keyword">new</span> E();  <span class="comment">// 编译错误</span></div><div class="line">    list.add(elem);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>不过可以使用反射来创建实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(List&lt;E&gt; list, Class&lt;E&gt; cls)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    E elem = cls.newInstance();   <span class="comment">// OK</span></div><div class="line">    list.add(elem);</div><div class="line">&#125;</div><div class="line">List&lt;String&gt; ls = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">append(ls, String.class);</div></pre></td></tr></table></figure>
<ul>
<li>因为类型擦除的缘故，部分类型信息会丢失，我们在运行时不会获取到相应的类型，所以也就无法将该类型实例化成对象</li>
</ul>
<h3 id="泛型和数组"><a href="#泛型和数组" class="headerlink" title="泛型和数组"></a>泛型和数组</h3><p>在Java中，直接创建泛型数组是非法的（要注意的一点是，Java中没有所谓的泛型数组一说）。泛型设计的初衷是为了简化程序员类型转换的操作，保证类型安全。数组是<strong>协变</strong>的，如果Sub为Super的子类型，那么数组Sub[]就是Super[]的子类型。这样做就很难保证存储上的安全</p>
<ul>
<li>但在实际使用过程中，往往需要创建泛型数组：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; E[] newArray(<span class="keyword">int</span> n) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> E[n];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这个时候运行程序，会抛出异常</li>
</ul>
<blockquote>
<p>Exception in thread “main” java.lang.Error: Unresolved compilation problem:<br>    Cannot create a generic array of E</p>
</blockquote>
<ul>
<li>在这种情况下，可以使用 List 来代替数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">newList</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;E&gt;();</div></pre></td></tr></table></figure>
<ul>
<li><p>但是，Java不是生来就有List的，如果遇到必须使用数组的情况该怎么办？</p>
</li>
<li><p>在这里可以参考Java里聚合类型的实现，以一个简单的例子说明</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> E[] elements;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</div><div class="line">        elements = <span class="keyword">new</span> E[<span class="number">10</span>];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        elements[size++] = e;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        E result = elements[--size];</div><div class="line">        elements[size] = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>上面的例子和java.util.Stack还是有区别的，只是为了说明如何处理泛型数组问题</p>
</li>
<li><p>同样运行的时候会出错</p>
</li>
</ul>
<blockquote>
<p>Exception in thread “main” java.lang.Error: Unresolved compilation problem:<br>    Cannot create a generic array of E</p>
</blockquote>
<ul>
<li>一种方法是在创建泛型数组的时候创建一个Object数组，然后转换成E数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elements = (E[]) <span class="keyword">new</span> Object[<span class="number">10</span>];</div></pre></td></tr></table></figure>
<ul>
<li>第二种方法将数组类型改为Object，在弹出元素的时候进行转换</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Object[] elements;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        E result = (E) elements[--size];</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>泛型数组的返回和传递</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> generics;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsArray</span> </span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 返回一个泛型数组</div><div class="line">   * <span class="doctag">@param</span> ts</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="meta">@SafeVarargs</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] getArray(T...ts)&#123;</div><div class="line">     <span class="keyword">return</span> ts;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 为方法传递一个泛型数组</div><div class="line">   * <span class="doctag">@param</span> param</div><div class="line">   */</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T[] param)</span></span>&#123;</div><div class="line"></div><div class="line">     System.out.println(<span class="string">"the Param is:"</span>);</div><div class="line"></div><div class="line">     <span class="keyword">for</span>(T c:param)&#123;</div><div class="line"></div><div class="line">       System.out.print(c);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line"></div><div class="line">     Integer[] arr = getArray(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</div><div class="line"></div><div class="line">     System.out.println(arr);</div><div class="line"></div><div class="line">     print(arr);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><p><a href="http://sumyblog.me/2015/12/15/java-generic-type-one-two-and-three/#undefined" target="_blank" rel="external">Java泛型二三事</a></p>
</li>
<li><p><a href="http://0opslab.com/2016/01/02/Java%E6%B3%9B%E5%9E%8B/" target="_blank" rel="external">Java泛型</a></p>
</li>
<li><p><a href="https://github.com/JustinSDK/JavaSE6Tutorial/blob/master/docs/CH12.md#%E7%AC%AC-12-%E7%AB%A0-%E6%B3%9B%E5%9E%8B" target="_blank" rel="external">Java SE 6 技术手册</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java反射]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/30/JAVA/Java%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<h3 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h3><p>“<strong>反射（Reflection）能够让运行于JVM中的程序检测和修改运行时的行为。</strong>”这个概念常常会和内省（Introspection）混淆，以下是这两个术语在Wikipedia中的解释：</p>
<ul>
<li><p>内省用于在运行时检测某个对象的类型和其包含的属性</p>
</li>
<li><p>反射用于在运行时检测和修改某个对象的结构及其行为</p>
</li>
</ul>
<p>从它们的定义可以看出，内省是反射的一个子集。有些语言支持内省，但并不支持反射，如C++</p>
<ul>
<li>内省示例：instanceof 运算符用于检测某个对象是否属于特定的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Dog) &#123;</div><div class="line">    Dog d = (Dog) obj;</div><div class="line">    d.bark();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>反射示例：Class.forName()方法可以通过类或接口的名称（一个字符串或完全限定名）来获取对应的Class对象。forName方法会触发类的初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用反射</span></div><div class="line">Class&lt;?&gt; c = Class.forName(<span class="string">"classpath.and.classname"</span>);</div><div class="line">Object dog = c.newInstance();</div><div class="line">Method m = c.getDeclaredMethod(<span class="string">"bark"</span>, <span class="keyword">new</span> Class&lt;?&gt;[<span class="number">0</span>]);</div><div class="line">m.invoke(dog);</div></pre></td></tr></table></figure>
<ul>
<li>在Java中，反射更接近于内省，因为你无法改变一个对象的结构。虽然一些API可以用来修改方法和属性的可见性，但并不能修改结构<a id="more"></a>
</li>
</ul>
<h3 id="为什么需要反射"><a href="#为什么需要反射" class="headerlink" title="为什么需要反射"></a>为什么需要反射</h3><p>反射能够让我们：</p>
<ul>
<li><p>在运行时检测对象的类型</p>
</li>
<li><p>动态构造某个类的对象</p>
</li>
<li><p>检测类的属性和方法</p>
</li>
<li><p>任意调用对象的方法</p>
</li>
<li><p>修改构造函数、方法、属性的可见性</p>
</li>
<li><p>以及其他</p>
</li>
</ul>
<p><strong>反射是框架中常用的方法</strong></p>
<ul>
<li>例如，<a href="http://www.programcreek.com/2012/02/junit-tutorial-2-annotations/" target="_blank" rel="external">JUnit</a> 通过反射来遍历包含 @Test 注解的方法，并在运行单元测试时调用它们。（这个连接中包含了一些<a href="http://www.programcreek.com/2012/02/junit-tutorial-2-annotations/" target="_blank" rel="external">JUnit</a> 的使用案例）</li>
</ul>
<p>对于Web框架，开发人员在配置文件中定义他们对各种接口和类的实现。通过反射机制，框架能够快速地动态初始化所需要的类</p>
<ul>
<li>例如，Spring框架使用如下的配置文件：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"someID"</span> <span class="attr">class</span>=<span class="string">"com.programcreek.Foo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someField"</span> <span class="attr">value</span>=<span class="string">"someValue"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>当Spring容器处理<bean>元素时，会使用Class.forName(“com.programcreek.Foo”)来初始化这个类，并再次使用反射获取<property>元素对应的setter方法，为对象的属性赋值</property></bean></p>
</li>
<li><p>Servlet也会使用相同的机制：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>someServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.programcreek.WhyReflectionServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="处理泛型"><a href="#处理泛型" class="headerlink" title="处理泛型"></a>处理泛型</h3><ul>
<li>Java 5中引入了泛型的概念之后，Java反射API也做了相应的修改，以提供对泛型的支持。由于类型擦除机制的存在，泛型类中的类型参数等信息，在运行时刻是不存在的。JVM看到的都是原始类型。对此，Java 5对Java类文件的格式做了修订，添加了Signature属性，用来包含不在JVM类型系统中的类型信息。 在运行时刻，JVM会读取Signature属性的内容并提供给反射API来使用。<br>比如在代码中声明了一个域是List类型的，虽然在运行时刻其类型会变成原始类型List，但是仍然可以通过反射来获取到所用的实际的类型参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Field field = Pair.class.getDeclaredField(<span class="string">"myList"</span>); <span class="comment">//myList的类型是List </span></div><div class="line">Type type = field.getGenericType(); </div><div class="line"><span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType) &#123;     </div><div class="line">    ParameterizedType paramType = (ParameterizedType) type;     </div><div class="line">    Type[] actualTypes = paramType.getActualTypeArguments();     </div><div class="line">    <span class="keyword">for</span> (Type aType : actualTypes) &#123;         </div><div class="line">        <span class="keyword">if</span> (aType <span class="keyword">instanceof</span> Class) &#123;         </div><div class="line">            Class clz = (Class) aType;             </div><div class="line">            System.out.println(clz.getName()); <span class="comment">//输出java.lang.String         </span></div><div class="line">        &#125;     </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>在程序运行期间，Java运行时系统始终为所有的对象维护一个被称为运行时的类型标识。这个信息跟踪着这个对象所属的类。可以通过专门的Java类访问这些信息，保存这些信息的类被称为<strong>Class类</strong>。<br>获取Class对象的三种方法：</p>
<ol>
<li><p>通过调用Object类中的getClass()方法返回一个Class对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Object myObject = <span class="keyword">new</span> Object();</div><div class="line">Class myObjectClass = myObject.getClass();</div></pre></td></tr></table></figure>
</li>
<li><p>通过调用静态方法forName获得类名对应的Class对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String className = <span class="string">"java.util.Date"</span>;</div><div class="line">Class cl = Class.forName(className);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>注意：在使用<code>Class.forName()</code>方法时，必须提供一个类的全名，这个全名包括类所在的包的名字。</p>
<ol>
<li>如果在调用该方法时，没有找到该路径的类，将会抛出ClassNotFoundException。<br>获得Class对象的第三种方法非常简单，如果<code>T</code>是任意的Java类型，<code>T.class</code>将代表匹配的类对象<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class cl1 = Date.class;</div><div class="line">Class cl2 = <span class="keyword">int</span>.class;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>补充：可通过下面方式访问类的父类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Object myObject = <span class="keyword">new</span> Object();</div><div class="line">Class myObjectClass = myObject.getSuperclass();</div></pre></td></tr></table></figure></p>
<h3 id="获取类名"><a href="#获取类名" class="headerlink" title="获取类名"></a>获取类名</h3><p>通过Class对象可以获取两个版本的类名：</p>
<ol>
<li><p>通过getName()方法返回类的全限定类名(包含包名)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">String className = aClass.getName();</div></pre></td></tr></table></figure>
</li>
<li><p>通过getSimpleName()方法返回类名(不包含包名)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">String className = aClass.getSimpleName();</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="获取修饰符"><a href="#获取修饰符" class="headerlink" title="获取修饰符"></a>获取修饰符</h3><p>可以通过Class对象的<code>getModifiers()</code>方法来访问一个类的修饰符，该方法通过返回一个整型数值，用不同的位开关描述public/private/static等修饰符的使用状况。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line"><span class="keyword">int</span> modifiers = aClass.getModifiers();</div></pre></td></tr></table></figure></p>
<p>还可以使用Modifier类中的isPublic、isPrivate或isFinal判断方法或构造器是否是public、private或final。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Modifier.isAbstract(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isFinal(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isInterface(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isNative(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isPrivate(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isProtected(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isPublic(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isStatic(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isStrict(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isSynchronized(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isTransient(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isVolatile(<span class="keyword">int</span> modifiers);</div></pre></td></tr></table></figure></p>
<h3 id="获取包信息"><a href="#获取包信息" class="headerlink" title="获取包信息"></a>获取包信息</h3><p>可通过以下方式获取包信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">Object object = <span class="keyword">new</span> Object();</div><div class="line">Class cl = object.getClass();</div><div class="line">System.out.println(cl.getPackage());</div><div class="line">...</div><div class="line"><span class="comment">/*output</span></div><div class="line">package java.lang, Java Platform API Specification, version 1.7</div><div class="line">*/</div></pre></td></tr></table></figure></p>
<h3 id="获取实现的接口集合"><a href="#获取实现的接口集合" class="headerlink" title="获取实现的接口集合"></a>获取实现的接口集合</h3><p>可通过调用Class对象的<code>getInterfaces()</code>方法获取一个类实现的接口集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">Class[] interfaces = aClass.getInterfaces();</div></pre></td></tr></table></figure></p>
<p>注意：getInterfaces()方法仅仅只返回当前类所实现的接口，不包括当前类的父类所实现的接口。</p>
<h3 id="获取构造器"><a href="#获取构造器" class="headerlink" title="获取构造器"></a>获取构造器</h3><p>可通过调用Class对象的<code>getConstructors()</code>方法获取一个类的构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">Constructor[] constructors = aClass.getConstructors();</div></pre></td></tr></table></figure></p>
<p>返回的Constructor数组包含每一个声明为<code>public</code>的构造方法。</p>
<hr>
<p>还可以通过给定的构造方法的参数类型获取指定的构造方法，如下：返回的构造方法的方法参数为String类型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">Constructor constructor = aClass.getConstructor(<span class="keyword">new</span> Class[]&#123;String.class&#125;);</div></pre></td></tr></table></figure></p>
<p>注意：如果没有指定的构造方法能匹配给定的方法参数，则会抛出<code>NoSuchMethodException</code>异常。</p>
<hr>
<p>还可以获取指定构造方法的方法参数信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Constructor constructor = ... <span class="comment">//获取Constructor对象</span></div><div class="line">Class[] parameterTypes = constructor.getParameterTypes();</div></pre></td></tr></table></figure></p>
<hr>
<p>利用Constructor对象实例化一个类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Constructor constructor = ... <span class="comment">//获取Constructor对象</span></div><div class="line">Class[] parameterTypes = constructor.getParameterTypes();</div></pre></td></tr></table></figure></p>
<h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><p>可通过调用Class对象的<code>getMethods()</code>方法获取一个类的所有方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ...<span class="comment">//获取Class对象</span></div><div class="line">Method[] methods = aClass.getMethods();</div></pre></td></tr></table></figure></p>
<p>返回的Method对象数组包含了指定类中声明为public的所有变量集合。</p>
<hr>
<p>还可以通过具体的参数类型来获取指定的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class  aClass = ...<span class="comment">//获取Class对象</span></div><div class="line">Method method = aClass.getMethod(<span class="string">"doSomething"</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;);</div></pre></td></tr></table></figure></p>
<p>注意：如果根据给定的方法名称以及参数类型无法匹配到相应的方法，则会抛出NoSuchMethodException</p>
<hr>
<p>获取指定方法的方法参数以及返回类型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Method method = ... <span class="comment">//获取Class对象</span></div><div class="line">Class[] parameterTypes = method.getParameterTypes();</div><div class="line">Class returnType = method.getReturnType();</div></pre></td></tr></table></figure></p>
<hr>
<p>通过Method对象调用方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取一个方法名为doSomesthing，参数类型为String的方法</span></div><div class="line">Method method = MyObject.class.getMethod(<span class="string">"doSomething"</span>, String.class);</div><div class="line">Object returnValue = method.invoke(<span class="keyword">null</span>, <span class="string">"parameter-value1"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="获取变量"><a href="#获取变量" class="headerlink" title="获取变量"></a>获取变量</h3><p>可通过调用Class对象的<code>getFields()</code>方法获取一个类的成员变量<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">Field[] method = aClass.getFields();</div></pre></td></tr></table></figure></p>
<p>返回的Field对象数组包含了指定类中声明为<code>public</code>的所有变量集合</p>
<hr>
<p>还可以通过具体的变量名称获取指定的变量<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">Field[] method = aClass.getFields(<span class="string">"someField"</span>);</div></pre></td></tr></table></figure></p>
<p>注意：在调用<code>getField()</code>方法时，如果根据给定的方法参数没有找到对应的变量，那么就会抛出<code>NoSuchFieldException</code></p>
<hr>
<p>通过调用<code>Field</code>对象的<code>getName()</code>方法获取它的变量名称<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Field field = ... <span class="comment">//获取Field对象</span></div><div class="line">String fieldName = field.getName();</div></pre></td></tr></table></figure></p>
<hr>
<p>通过调用<code>Field</code>对象<code>getType()</code>方法来获取一个变量的类型（如String, int等等）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">Field field = aClass.getField(<span class="string">"someField"</span>);</div><div class="line">Object fieldType = field.getType();</div></pre></td></tr></table></figure></p>
<hr>
<p>通过调用<code>Field.get()</code>或<code>Field.set()</code>方法获取或设置(get/set)变量值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Class  aClass = MyObject.class</div><div class="line">Field field = aClass.getField(<span class="string">"someField"</span>);</div><div class="line"></div><div class="line">MyObject objectInstance = <span class="keyword">new</span> MyObject();</div><div class="line"></div><div class="line">Object value = field.get(objectInstance);</div><div class="line"></div><div class="line">field.set(objetInstance, value);</div></pre></td></tr></table></figure></p>
<h3 id="获取指定类的getters和setters"><a href="#获取指定类的getters和setters" class="headerlink" title="获取指定类的getters和setters"></a>获取指定类的getters和setters</h3><ul>
<li>Getter：Getter方法的名字以get开头，没有方法参数，返回一个值</li>
<li>Setter：Setter方法的名字以set开头，有一个方法参数</li>
</ul>
<p>一个获取getter方法和setter方法的例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printGettersSetters</span><span class="params">(Class aClass)</span></span>&#123;</div><div class="line">  Method[] methods = aClass.getMethods();</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(Method method : methods)&#123;</div><div class="line">    <span class="keyword">if</span>(isGetter(method)) System.out.println(<span class="string">"getter: "</span> + method);</div><div class="line">    <span class="keyword">if</span>(isSetter(method)) System.out.println(<span class="string">"setter: "</span> + method);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isGetter</span><span class="params">(Method method)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(!method.getName().startsWith(<span class="string">"get"</span>))      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">if</span>(method.getParameterTypes().length != <span class="number">0</span>)   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">void</span>.class.equals(method.getReturnType()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSetter</span><span class="params">(Method method)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(!method.getName().startsWith(<span class="string">"set"</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">if</span>(method.getParameterTypes().length != <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="获取私有变量"><a href="#获取私有变量" class="headerlink" title="获取私有变量"></a>获取私有变量</h3><p>可以通过调用<code>Class.getDeclaredField(String name)</code>方法或者<code>Class.getDeclaredFields()</code>方法获取私有变量和受保护变量，不包括超类的成员；<code>Class.getField(String name)</code>和<code>Class.getFields()</code>只会返回公有变量，其中包括超类的公有变量，而无法获取私有变量。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivateObject</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> String privateString = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PrivateObject</span><span class="params">(String privateString)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.privateString = privateString;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**********************************************************************/</span></div><div class="line">PrivateObject privateObject = <span class="keyword">new</span> PrivateObject(<span class="string">"The Private Value"</span>);</div><div class="line"></div><div class="line">Field privateStringField = PrivateObject.class.</div><div class="line">            getDeclaredField(<span class="string">"privateString"</span>);</div><div class="line"></div><div class="line">privateStringField.setAccessible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">String fieldValue = (String) privateStringField.get(privateObject);</div><div class="line">System.out.println(<span class="string">"fieldValue = "</span> + fieldValue);</div></pre></td></tr></table></figure></p>
<p>这个例子会输出”fieldValue = The Private Value”，<code>The Private Value</code>是<code>PrivateObject</code>实例的<code>privateString</code>私有变量的值，注意调用<code>PrivateObject.class.getDeclaredField(&quot;privateString&quot;)</code>方法会返回一个私有变量，这个方法返回的变量是定义在<code>PrivateObject</code>类中的而不是在它的父类中定义的变量。<br>注意：<code>privateStringField.setAccessible(true)</code>这行代码，通过调用<code>setAccessible()</code>方法会关闭指定类Field实例的反射访问检查，这行代码执行之后不论是私有的、受保护的以及包访问的作用域，你都可以在任何地方访问，即使你不在他的访问权限作用域之内。但是你如果你用一般代码来访问这些不在你权限作用域之内的代码依然是不可以的，在编译的时候就会报错。</p>
<h3 id="获取私有方法"><a href="#获取私有方法" class="headerlink" title="获取私有方法"></a>获取私有方法</h3><p>可以通过调用<code>Class.getDeclaredMethod(String name, Class[] parameterTypes)</code>或者<code>Class.getDeclaredMethods()</code>方法获取私有方法，不包括超类的成员；<code>Class.getMethod(String name, Class[] parameterTypes)</code>和<code>Class.getMethods()</code>方法，只会返回公有的方法，其中包括超类的公有方法，而无法获取私有方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivateObject</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> String privateString = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PrivateObject</span><span class="params">(String privateString)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.privateString = privateString;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">getPrivateString</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.privateString;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*******************************************************************/</span></div><div class="line">PrivateObject privateObject = <span class="keyword">new</span> PrivateObject(<span class="string">"The Private Value"</span>);</div><div class="line"></div><div class="line">Method privateStringMethod = PrivateObject.class.</div><div class="line">        getDeclaredMethod(<span class="string">"getPrivateString"</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">privateStringMethod.setAccessible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">String returnValue = (String)</div><div class="line">        privateStringMethod.invoke(privateObject, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"returnValue = "</span> + returnValue);</div></pre></td></tr></table></figure></p>
<p>这个例子会输出<code>&quot;returnValue = The Private Value&quot;</code>，<code>The Private Value</code>是<code>PrivateObject</code>实例的<code>getPrivateString()</code>方法的返回值。<code>PrivateObject.class.getDeclaredMethod(&quot;privateString&quot;)</code>方法会返回一个私有方法，这个方法是定义在<code>PrivateObject</code>类中的而不是在它的父类中定义的。<br>注意：Method.setAcessible(true)这行代码，通过调用setAccessible()方法会关闭指定类的Method实例的反射访问检查，这行代码执行之后不论是私有的、受保护的以及包访问的作用域，你都可以在任何地方访问，即使你不在他的访问权限作用域之内。但是你如果你用一般代码来访问这些不在你权限作用域之内的代码依然是不可以的，在编译的时候就会报错。</p>
<h3 id="获取注解"><a href="#获取注解" class="headerlink" title="获取注解"></a>获取注解</h3><p><strong>什么是注解？</strong><br>注解是Java 5的一个新特性。注解是插入你代码中的一种注释或者说是一种元数据（meta data）。这些注解信息可以在编译期使用预编译工具进行处理（pre-compiler tools），也可以在运行期使用Java反射机制进行处理。<br>下面是一个类注解的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@MyAnnotation</span>(name=<span class="string">"someName"</span>,  value = <span class="string">"Hello World"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在TheClass类定义的上面有一个@MyAnnotation的注解。注解的定义与接口的定义相似，下面是MyAnnotation注解的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在interface前面的@符号表名这是一个注解，一旦你定义了一个注解之后你就可以将其应用到你的代码中。</p>
<blockquote>
<p>说明：在注解定义中的两个指示@Retention(RetentionPolicy.RUNTIME)和@Target(ElementType.TYPE)，说明了这个注解该如何使用。</p>
<ol>
<li>@Retention(RetentionPolicy.RUNTIME)表示这个注解可以在运行期通过反射访问。如果你没有在注解定义的时候使用这个指示那么这个注解的信息不会保留到运行期，这样反射就无法获取它的信息。</li>
<li>@Target(ElementType.TYPE) 表示这个注解只能用在类型上面（比如类跟接口）。你同样可以把Type改为Field或者Method，或者你可以不用这个指示，这样的话你的注解在类，方法和变量上就都可以使用了。</li>
</ol>
</blockquote>
<hr>
<p><strong>类注解</strong><br>下是一个访问类注解的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Class aClass = TheClass.class;</div><div class="line">Annotation[] annotations = aClass.getAnnotations();</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Annotation annotation : annotations)&#123;</div><div class="line">    <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</div><div class="line">        MyAnnotation myAnnotation = (MyAnnotation) annotation;</div><div class="line">        System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</div><div class="line">        System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你还可以像下面这样指定访问一个类的注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Class aClass = TheClass.class;</div><div class="line">Annotation annotation = aClass.getAnnotation(MyAnnotation.class);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</div><div class="line">    MyAnnotation myAnnotation = (MyAnnotation) annotation;</div><div class="line">    System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</div><div class="line">    System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>方法注解</strong><br>下面是一个方法注解的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass</span> </span>&#123;</div><div class="line">  <span class="meta">@MyAnnotation</span>(name=<span class="string">"someName"</span>,  value = <span class="string">"Hello World"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你可以像这样访问方法注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Method method = ... <span class="comment">//获取方法对象</span></div><div class="line">Annotation[] annotations = method.getDeclaredAnnotations();</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Annotation annotation : annotations)&#123;</div><div class="line">    <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</div><div class="line">        MyAnnotation myAnnotation = (MyAnnotation) annotation;</div><div class="line">        System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</div><div class="line">        System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你可以像这样访问指定的方法注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Method method = ... <span class="comment">// 获取方法对象</span></div><div class="line">Annotation annotation = method.getAnnotation(MyAnnotation.class);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</div><div class="line">    MyAnnotation myAnnotation = (MyAnnotation) annotation;</div><div class="line">    System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</div><div class="line">    System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>参数注解</strong><br>方法参数也可以添加注解，就像下面这样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomethingElse</span><span class="params">(</span></span></div><div class="line">        @MyAnnotation(name=<span class="string">"aName"</span>, value=<span class="string">"aValue"</span>) String parameter)&#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你可以通过Method对象来访问方法参数注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Method method = ... <span class="comment">//获取方法对象</span></div><div class="line">Annotation[][] parameterAnnotations = method.getParameterAnnotations();</div><div class="line">Class[] parameterTypes = method.getParameterTypes();</div><div class="line"></div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(Annotation[] annotations : parameterAnnotations)&#123;</div><div class="line">  Class parameterType = parameterTypes[i++];</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(Annotation annotation : annotations)&#123;</div><div class="line">    <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</div><div class="line">        MyAnnotation myAnnotation = (MyAnnotation) annotation;</div><div class="line">        System.out.println(<span class="string">"param: "</span> + parameterType.getName());</div><div class="line">        System.out.println(<span class="string">"name : "</span> + myAnnotation.name());</div><div class="line">        System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>需要注意的是Method.getParameterAnnotations()方法返回一个注解类型的二维数组，每一个方法的参数包含一个注解数组。</p>
<hr>
<p><strong>变量注解</strong><br>下面是一个变量注解的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@MyAnnotation</span>(name=<span class="string">"someName"</span>,  value = <span class="string">"Hello World"</span>)</div><div class="line">  <span class="keyword">public</span> String myField = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你可以像这样来访问变量的注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Field field = ... <span class="comment">//获取方法对象&lt;/pre&gt;</span></div><div class="line">&lt;pre&gt;Annotation[] annotations = field.getDeclaredAnnotations();</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Annotation annotation : annotations)&#123;</div><div class="line"> <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</div><div class="line"> MyAnnotation myAnnotation = (MyAnnotation) annotation;</div><div class="line"> System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</div><div class="line"> System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你可以像这样访问指定的变量注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Field field = ...<span class="comment">//获取方法对象&lt;/pre&gt;</span></div><div class="line">&lt;pre&gt;</div><div class="line">Annotation annotation = field.getAnnotation(MyAnnotation.class);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</div><div class="line"> MyAnnotation myAnnotation = (MyAnnotation) annotation;</div><div class="line"> System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</div><div class="line"> System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://ifeve.com/java-reflection/" target="_blank" rel="external">Java Reflection教程</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java垃圾收集机制]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/24/JVM/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h3 id="对象引用"><a href="#对象引用" class="headerlink" title="对象引用"></a>对象引用</h3><p> Java中的垃圾回收一般是在Java堆中进行，因为堆中几乎存放了Java中所有的对象实例。谈到Java堆中的垃圾回收，自然要谈到引用。在JDK1.2之前，Java中的引用定义很很纯粹：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。但在JDK1.2之后，Java对引用的概念进行了扩充，将其分为<strong>强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）四种</strong>，引用强度依次减弱</p>
<ul>
<li><p><strong>强引用：</strong>如“Object obj = new Object（）”，这类引用是Java程序中最普遍的。只要强引用还存在，垃圾收集器就永远不会回收掉被引用的对象</p>
</li>
<li><p><strong>软引用：</strong>它用来描述一些可能还有用，但并非必须的对象。在系统内存不够用时，这类引用关联的对象将被垃圾收集器回收。JDK1.2之后提供了SoftReference类来实现软引用</p>
</li>
<li><p><strong>弱引用：</strong>它也是用来描述非需对象的，但它的强度比软引用更弱些，被弱引用关联的对象只能生存岛下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2之后，提供了WeakReference类来实现弱引用</p>
</li>
<li><p><strong>虚引用：</strong>最弱的一种引用关系，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的是希望能在这个对象被收集器回收时收到一个系统通知。JDK1.2之后提供了PhantomReference类来实现虚引用</p>
</li>
</ul>
<a id="more"></a>
<h3 id="垃圾对象的判定"><a href="#垃圾对象的判定" class="headerlink" title="垃圾对象的判定"></a>垃圾对象的判定</h3><p>Java堆中存放着几乎所有的对象实例，垃圾收集器对堆中的对象进行回收前，要先确定这些对象是否还有用，判定对象是否为垃圾对象有如下算法：</p>
<h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><ul>
<li><p>给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1，当引用失效时，计数器值就减1，任何时刻计数器都为0的对象就是不可能再被使用的</p>
</li>
<li><p>引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的选择，<strong>当Java语言并没有选择这种算法来进行垃圾回收，主要原因是它很难解决对象之间的相互循环引用问题</strong></p>
</li>
</ul>
<h4 id="根搜索算法"><a href="#根搜索算法" class="headerlink" title="根搜索算法"></a>根搜索算法</h4><p><strong>Java和C#中都是采用根搜索算法来判定对象是否存活的。</strong>这种算法的基本思路是通过一系列名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，就证明此对象是不可用的。在Java语言里，可作为GC Roots的兑现包括下面几种：</p>
<ul>
<li><p>虚拟机栈（栈帧中的本地变量表）中引用的对象</p>
</li>
<li><p>方法区中的类静态属性引用的对象</p>
</li>
<li><p>方法区中的常量引用的对象</p>
</li>
<li><p>本地方法栈中JNI（Native方法）的引用对象</p>
</li>
</ul>
<p>实际上，在根搜索算法中，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行根搜索后发现没有与GC Roots相连接的引用链，那它会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize（）方法。当对象没有覆盖finalize（）方法，或finalize（）方法已经被虚拟机调用过，虚拟机将这两种情况都视为没有必要执行。如果该对象被判定为有必要执行finalize（）方法，那么这个对象将会被放置在一个名为F-Queue队列中，并在稍后由一条由虚拟机自动建立的、低优先级的Finalizer线程去执行finalize（）方法。finalize（）方法是对象逃脱死亡命运的最后一次机会（因为一个对象的finalize（）方法最多只会被系统自动调用一次），稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果要在finalize（）方法中成功拯救自己，只要在finalize（）方法中让该对象重引用链上的任何一个对象建立关联即可。而如果对象这时还没有关联到任何链上的引用，那它就会被回收掉</p>
<h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><ul>
<li>判定除了垃圾对象之后，便可以进行垃圾回收了。下面介绍一些垃圾收集算法，由于垃圾收集算法的实现涉及大量的程序细节，因此这里主要是阐明各算法的实现思想，而不去细论算法的具体实现</li>
</ul>
<h4 id="标记—清除算法"><a href="#标记—清除算法" class="headerlink" title="标记—清除算法"></a>标记—清除算法</h4><p>标记—清除算法是最基础的收集算法，它分为“标记”和“清除”两个阶段：首先标记出所需回收的对象，在标记完成后统一回收掉所有被标记的对象，它的标记过程其实就是前面的根搜索算法中判定垃圾对象的标记过程。标记—清除算法的执行情况如下图所示：</p>
<ul>
<li><p>回收前状态</p>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B6.jpg" alt=""></center>
</li>
<li><p>回收后状态</p>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B61.jpg" alt=""></center>

</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B62.jpg" alt=""></center>


<p>该算法有如下缺点：</p>
<ul>
<li><p>标记和清除过程的效率都不高</p>
</li>
<li><p>标记清除后会产生大量不连续的内存碎片，空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不触发另一次垃圾收集动作</p>
</li>
</ul>
<h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><p>复制算法是针对标记—清除算法的缺点，在其基础上进行改进而得到的，它讲课用内存按容量分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完了，就将还存活着的对象复制到另外一块内存上面，然后再把已使用过的内存空间一次清理掉。复制算法有如下优点：</p>
<ul>
<li><p>每次只对一块内存进行回收，运行高效</p>
</li>
<li><p>只需移动栈顶指针，按顺序分配内存即可，实现简单</p>
</li>
<li><p>内存回收时不用考虑内存碎片的出现</p>
</li>
</ul>
<p>它的缺点是：可一次性分配的最大内存缩小了一半</p>
<p>复制算法的执行情况如下图所示：</p>
<ul>
<li>回收前状态：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B63.jpg" alt=""></center>

<ul>
<li>回收后状态：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B64.jpg" alt=""></center>

<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B65.jpg" alt=""></center>

<h4 id="标记—整理算法"><a href="#标记—整理算法" class="headerlink" title="标记—整理算法"></a>标记—整理算法</h4><p>复制算法比较适合于新生代，在老年代中，对象存活率比较高，如果执行较多的复制操作，效率将会变低，所以老年代一般会选用其他算法，如标记—整理算法。该算法标记的过程与标记—清除算法中的标记过程一样，但对标记后出的垃圾对象的处理情况有所不同，它不是直接对可回收对象进行清理，而是让所有的对象都向一端移动，然后直接清理掉端边界以外的内存。标记—整理算法的回收情况如下所示：</p>
<ul>
<li>回收前状态：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B66.jpg" alt=""></center>

<ul>
<li>回收后状态：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B67.jpg" alt=""></center>

<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B62.jpg" alt=""></center>

<h4 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h4><ul>
<li><strong>当前商业虚拟机的垃圾收集 都采用分代收集</strong>，它根据对象的存活周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代。在新生代中，每次垃圾收集时都会发现有大量对象死去，只有少量存活，因此可选用复制算法来完成收集，而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记—清除算法或标记—整理算法来进行回收</li>
</ul>
<h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><ul>
<li>垃圾收集器是内存回收算法的具体实现，Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大的差别。Sun  HotSpot虚拟机1.6版包含了如下收集器：Serial、ParNew、Parallel Scavenge、CMS、Serial Old、Parallel Old。这些收集器以不同的组合形式配合工作来完成不同分代区的垃圾收集工作</li>
</ul>
<h3 id="垃圾回收分析"><a href="#垃圾回收分析" class="headerlink" title="垃圾回收分析"></a>垃圾回收分析</h3><p>在用代码分析之前，我们对内存的分配策略明确以下三点：</p>
<ul>
<li><p>对象优先在Eden分配</p>
</li>
<li><p>大对象直接进入老年代</p>
</li>
<li><p>长期存活的对象将进入老年代</p>
</li>
</ul>
<p>对垃圾回收策略说明以下两点：</p>
<ul>
<li><p>新生代GC（Minor GC）：发生在新生代的垃圾收集动作，因为Java对象大多都具有朝生夕灭的特性，因此Minor GC非常频繁，一般回收速度也比较快</p>
</li>
<li><p>老年代GC（Major GC/Full GC）：发生在老年代的GC，出现了Major GC，经常会伴随至少一次Minor GC。由于老年代中的对象生命周期比较长，因此Major GC并不频繁，一般都是等待老年代满了后才进行Full GC，而且其速度一般会比Minor GC慢10倍以上。另外，如果分配了Direct Memory，在老年代中进行Full GC时，会顺便清理掉Direct Memory中的废弃对象</p>
</li>
</ul>
<p>下面我们来看如下代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlotGc</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        <span class="keyword">byte</span>[] holder = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">32</span>*<span class="number">1024</span>*<span class="number">1024</span>];  </div><div class="line">        System.gc();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>代码很简单，就是向内存中填充了32MB的数据，然后通过虚拟机进行垃圾收集。在Javac编译后，我们执行如下指令：java -verbose:gc SlotGc来查看垃圾收集的结果，得到如下输出信息：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[GC <span class="number">208</span>K-&gt;<span class="number">134</span>K(<span class="number">5056</span>K), <span class="number">0.0017306</span> secs]</div><div class="line"></div><div class="line">[Full GC <span class="number">134</span>K-&gt;<span class="number">134</span>K(<span class="number">5056</span>K), <span class="number">0.0121194</span> secs]</div><div class="line"></div><div class="line">[Full GC <span class="number">32902</span>K-&gt;<span class="number">32902</span>K(<span class="number">37828</span>K), <span class="number">0.0094149</span> sec</div></pre></td></tr></table></figure>
<ul>
<li><p>注意第三行，“-&gt;”之前的数据表示垃圾回收前堆中存活对象所占用的内存大小，“-&gt;”之后的数据表示垃圾回收堆中存活对象所占用的内存大小，括号中的数据表示堆内存的总容量，0.0094149 sec 表示垃圾回收所用的时间。</p>
</li>
<li><p>从结果中可以看出，System.gc(（）运行后并没有回收掉这32MB的内存，这应该是意料之中的结果，因为变量holder还处在作用域内，虚拟机自然不会回收掉holder引用的对象所占用的内存。</p>
</li>
<li><p>我们把代码修改如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlotGc</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        &#123;  </div><div class="line">        <span class="keyword">byte</span>[] holder = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">32</span>*<span class="number">1024</span>*<span class="number">1024</span>];  </div><div class="line">        &#125;  </div><div class="line">        System.gc();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>加入花括号后，holder的作用域被限制在了花括号之内，因此，在执行System.gc（）时，holder引用已经不能再被访问，逻辑上来讲，这次应该会回收掉holder引用的对象所占的内存。但查看垃圾回收情况时，输出信息如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[GC <span class="number">208</span>K-&gt;<span class="number">134</span>K(<span class="number">5056</span>K), <span class="number">0.0017100</span> secs]</div><div class="line"></div><div class="line">[Full GC <span class="number">134</span>K-&gt;<span class="number">134</span>K(<span class="number">5056</span>K), <span class="number">0.0125887</span> secs]</div><div class="line"></div><div class="line">[Full GC <span class="number">32902</span>K-&gt;<span class="number">32902</span>K(<span class="number">37828</span>K), <span class="number">0.0089226</span> secs]</div></pre></td></tr></table></figure>
<ul>
<li>很明显，这32MB的数据并没有被回收。下面我们再做如下修改：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlotGc</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        &#123;  </div><div class="line">        <span class="keyword">byte</span>[] holder = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">32</span>*<span class="number">1024</span>*<span class="number">1024</span>];  </div><div class="line">        holder = <span class="keyword">null</span>;  </div><div class="line">        &#125;  </div><div class="line">        System.gc();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这次得到的垃圾回收信息如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[GC <span class="number">208</span>K-&gt;<span class="number">134</span>K(<span class="number">5056</span>K), <span class="number">0.0017194</span> secs]</div><div class="line"></div><div class="line">[Full GC <span class="number">134</span>K-&gt;<span class="number">134</span>K(<span class="number">5056</span>K), <span class="number">0.0124656</span> secs]</div><div class="line"></div><div class="line">[Full GC <span class="number">32902</span>K-&gt;<span class="number">134</span>K(<span class="number">37828</span>K), <span class="number">0.0091637</span> secs]</div></pre></td></tr></table></figure>
<ul>
<li><p>说明这次holder引用的对象所占的内存被回收了。我们慢慢来分析</p>
</li>
<li><p><strong>首先明确一点：holder能否被回收的根本原因是局部变量表中的Slot是否还存有关于holder数组对象的引用</strong></p>
</li>
<li><p>在第一次修改中，虽然在holder作用域之外进行回收，但是在此之后，没有对局部变量表的读写操作，holder所占用的Slot还没有被其他变量所复用（回忆Java内存区域与内存溢出一文中关于Slot的讲解），所以作为GC Roots一部分的局部变量表仍保持者对它的关联。这种关联没有被及时打断，因此GC收集器不会将holder引用的对象内存回收掉。 在第二次修改中，在GC收集器工作前，手动将holder设置为null值，就把holder所占用的局部变量表中的Slot清空了，因此，这次GC收集器工作时将holder之前引用的对象内存回收掉了</p>
</li>
<li><p>当然，我们也可以用其他方法来将holder引用的对象内存回收掉，只要复用holder所占用的slot即可，比如在holder作用域之外执行一次读写操作</p>
</li>
<li><p>为对象赋null值并不是控制变量回收的最好方法，以恰当的变量作用域来控制变量回收时间才是最优雅的解决办法。另外，赋null值的操作在经过虚拟机JIT编译器优化后会被消除掉，经过JIT编译后，System.gc（）执行时就可以正确地回收掉内存，而无需赋null值</p>
</li>
</ul>
<h3 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h3><p>Java虚拟机的内存管理与垃圾收集是虚拟机结构体系中最重要的组成部分，对程序（尤其服务器端）的性能和稳定性有着非常重要的影响。性能调优需要具体情况具体分析，而且实际分析时可能需要考虑的方面很多，这里仅就一些简单常用的情况作简要介绍</p>
<ul>
<li><p>我们可以通过给Java虚拟机分配超大堆（前提是物理机的内存足够大）来提升服务器的响应速度，但分配超大堆的前提是有把握把应用程序的Full GC频率控制得足够低，因为一次Full GC的时间造成比较长时间的停顿。控制Full GC频率的关键是保证应用中绝大多数对象的生存周期不应太长，尤其不能产生批量的、生命周期长的大对象，这样才能保证老年代的稳定</p>
</li>
<li><p>Direct Memory在堆内存外分配，而且二者均受限于物理机内存，且成负相关关系，因此分配超大堆时，如果用到了NIO机制分配使用了很多的Direct Memory，则有可能导致Direct Memory的OutOfMemoryError异常，这时可以通过-XX:MaxDirectMemorySize参数调整Direct Memory的大小</p>
</li>
<li><p>除了Java堆和永久代以及直接内存外，还要注意下面这些区域也会占用较多的内存，这些内存的总和会受到操作系统进程最大内存的限制：</p>
</li>
</ul>
<ol>
<li><p><strong>线程堆栈：</strong>可通过-Xss调整大小，内存不足时抛出StackOverflowError（纵向无法分配，即无法分配新的栈帧）或OutOfMemoryError（横向无法分配，即无法建立新的线程）</p>
</li>
<li><p><strong>Socket缓冲区：</strong>每个Socket连接都有Receive和Send两个缓冲区，分别占用大约37KB和25KB的内存。如果无法分配，可能会抛出IOException：Too many open files异常</p>
</li>
<li><p><strong>JNI代码：</strong>如果代码中使用了JNI调用本地库，那本地库使用的内存也不在堆中</p>
</li>
<li><p><strong>虚拟机和GC：</strong>虚拟机和GC的代码执行也要消耗一定的内存</p>
</li>
</ol>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://blog.csdn.net/ns_code/article/details/18076173" target="_blank" rel="external">传送门</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javac编译与JIT编译]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/24/JVM/Javac%E7%BC%96%E8%AF%91%E4%B8%8EJIT%E7%BC%96%E8%AF%91/</url>
      <content type="html"><![CDATA[<h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><ul>
<li>不论是物理机还是虚拟机，大部分的程序代码从开始编译到最终转化成物理机的目标代码或虚拟机能执行的指令集之前，都会按照如下图所示的各个步骤进行：</li>
</ul>
<p><br></p>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Javac%E7%BC%96%E8%AF%91%E4%B8%8EJIT%E7%BC%96%E8%AF%91.jpg" alt=""></center><br><br><br>- 其中绿色的模块可以选择性实现。很容易看出，上图中间的那条分支是解释执行的过程（即一条字节码一条字节码地解释执行，如JavaScript），而下面的那条分支就是传统编译原理中从源代码到目标机器代码的生成过程<br><br>- 如今，基于物理机、虚拟机等的语言，大多都遵循这种基于现代经典编译原理的思路，在执行前先对程序源码进行词法解析和语法解析处理，把源码转化为抽象语法树。<strong>对于一门具体语言的实现来说，词法和语法分析乃至后面的优化器和目标代码生成器都可以选择独立于执行引擎，形成一个完整意义的编译器去实现，这类代表是C/C++语言。也可以把抽象语法树或指令流之前的步骤实现一个半独立的编译器，这类代表是Java语言。又或者可以把这些步骤和执行引擎全部集中在一起实现，如大多数的JavaScript执行器</strong><br><a id="more"></a><br><br>### Javac编译###<br><br>-  在Java中提到“编译”，自然很容易想到Javac编译器将<em>.java文件编译成为</em>.class文件的过程，<strong>这里的Javac编译器称为前端编译器</strong>，其他的前端编译器还有诸如Eclipse JDT中的增量式编译器ECJ等。相对应的还有<strong>后端编译器</strong>，它在程序运行期间将字节码转变成机器码<strong>（现在的Java程序在运行时基本都是解释执行加编译执行）</strong>，如<strong>HotSpot虚拟机自带的JIT（Just In Time Compiler）编译器（分Client端和Server端）</strong>。另外，有时候还有可能会碰到静态提前编译器（AOT，Ahead Of Time Compiler）直接把*.java文件编译成本地机器代码，如GCJ、Excelsior JET等，这类编译器我们应该比较少遇到。<br><br>- 下面简要说下Javac编译（前端编译）的过程<br><br>####  词法、语法分析####<br><br>- 词法分析是将源代码的字符流转变为标记（Token）集合。单个字符是程序编写过程中的的最小元素，而标记则是编译过程的最小元素，关键字、变量名、字面量、运算符等都可以成为标记，比如整型标志int由三个字符构成，但是它只是一个标记，不可拆分<br><br>- 语法分析是根据Token序列来构造抽象语法树的过程。抽象语法树是一种用来描述程序代码语法结构的树形表示方式，语法树的每一个节点都代表着程序代码中的一个语法结构，如bao、类型、修饰符、运算符等。经过这个步骤后，编译器就基本不会再对源码文件进行操作了，后续的操作都建立在<strong>抽象语法树之</strong>上<br><br>####  填充符号表####<br><br>- 完成了语法分析和词法分析之后，下一步就是填充符号表的过程。符号表是由一组符号地址和符号信息构成的表格。符号表中所登记的信息在编译的不同阶段都要用到，在语义分析（后面的步骤）中，符号表所登记的内容将用于语义检查和产生中间代码，在目标代码生成阶段，当对符号名进行地址分配时，符号表是地址分配的依据<br><br>####   语义分析####<br><br>语法树能表示一个结构正确的源程序的抽象，但无法保证源程序是符合逻辑的。而语义分析的主要任务是读结构上正确的源程序进行上下文有关性质的审查。语义分析过程分为标注检查和数据及控制流分析两个步骤：<br><br>- 标注检查步骤检查的内容包括诸如变量使用前是否已被声明、变量和赋值之间的数据类型是否匹配等<br><br>- 数据及控制流分析是对程序上下文逻辑更进一步的验证，它可以检查出诸如程序局部变量在使用前是否有赋值、方法的每条路径是否都有返回值、是否所有的受查异常都被正确处理了等问题<br><br>####    字节码生成####<br><br>- 字节码生成是Javac编译过程的最后一个阶段。字节码生成阶段不仅仅是把前面各个步骤所生成的信息转化成字节码写到磁盘中，编译器还进行了少量的代码添加和转换工作。 实例构造器<init>（）方法和类构造器<clinit>（）方法就是在这个阶段添加到语法树之中的（这里的实例构造器并不是指默认的构造函数，而是指我们自己重载的构造函数，如果用户代码中没有提供任何构造函数，那编译器会自动添加一个没有参数、访问权限与当前类一致的默认构造函数，这个工作在填充符号表阶段就已经完成了）<br><br>### JIT编译###<br><br>- Java程序最初是仅仅通过解释器解释执行的，即对字节码逐条解释执行，这种方式的执行速度相对会比较慢，尤其当某个方法或代码块运行的特别频繁时，这种方式的执行效率就显得很低。于是后来在虚拟机中引入了<strong>JIT编译器（即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“Hot Spot Code”（热点代码），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是JIT编译器</strong><br><br>- 现在主流的商用虚拟机（如Sun HotSpot、IBM J9）中几乎都同时包含解释器和编译器（三大商用虚拟机之一的JRockit是个例外，它内部没有解释器，因此会有启动相应时间长之类的缺点，但它主要是面向服务端的应用，这类应用一般不会重点关注启动时间）。二者各有优势：<strong>当程序需要迅速启动和执行时，解释器可以首先发挥作用，省去编译的时间，立即执行；当程序运行后，随着时间的推移，编译器逐渐会返回作用，把越来越多的代码编译成本地代码后，可以获取更高的执行效率。解释执行可以节约内存，而编译执行可以提升效率</strong><br><br>-  HotSpot虚拟机中内置了两个JIT编译器：Client Complier和Server Complier，分别用在客户端和服务端，目前主流的HotSpot虚拟机中默认是采用解释器与其中一个编译器直接配合的方式工作<br><br>#### 热点代码####<br><br>运行过程中会被即时编译器编译的“热点代码”有两类：<br><br>- 被多次调用的方法<br><br>- 被多次调用的循环体<br><br>两种情况，编译器都是以整个方法作为编译对象，这种编译也是虚拟机中标准的编译方式。要知道一段代码或方法是不是热点代码，是不是需要触发即时编译，需要进行Hot Spot Detection（热点探测）。目前主要的热点 判定方式有以下两种：<br><br>- <strong>基于采样的热点探测：</strong>采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这段方法代码就是“热点代码”。这种探测方法的好处是实现简单高效，还可以很容易地获取方法调用关系，缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测<br><br><br>- <strong>基于计数器的热点探测：</strong>采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是“热点方法”。这种统计方法实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是它的统计结果相对更加精确严谨<br><br>在HotSpot虚拟机中使用的是第二种——基于计数器的热点探测方法，因此它为每个方法准备了两个计数器：方法调用计数器和回边计数器<br><br>- 方法调用计数器用来统计方法调用的次数，在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间内方法被调用的次数<br><br>- 回边计数器用于统计一个方法中循环体代码执行的次数（准确地说，应该是回边的次数，因为并非所有的循环都是回边），在字节码中遇到控制流向后跳转的指令就称为“回边”<br><br>- 在确定虚拟机运行参数的前提下，这两个计数器都有一个确定的阀值，当计数器的值超过了阀值，就会触发JIT编译。触发了JIT编译后，在默认设置下，执行引擎并不会同步等待编译请求完成，而是继续进入解释器按照解释方式执行字节码，直到提交的请求被编译器编译完成为止（编译工作在后台线程中进行）。当编译工作完成后，下一次调用该方法或代码时，就会使用已编译的版本<br><br>- 由于方法计数器触发即时编译的过程与回边计数器触发即时编译的过程类似，因此这里仅给出方法调用计数器触发即时编译的流程：<br><br><center><img src="http://o99dg8ap9.bkt.clouddn.com/Javac%E7%BC%96%E8%AF%91%E4%B8%8EJIT%E7%BC%96%E8%AF%911.jpg" alt=""></center>


<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>Javac字节码编译器与虚拟机内的JIT编译器的执行过程合起来其实就等同于一个传统的编译器所执行的编译过程</li>
</ul>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://blog.csdn.net/ns_code/article/details/18009455" target="_blank" rel="external">传送门</a></li>
</ul>
</clinit></init>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java语法糖]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/24/JVM/Java%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
      <content type="html"><![CDATA[<h3 id="语法糖来源"><a href="#语法糖来源" class="headerlink" title="语法糖来源"></a>语法糖来源</h3><ul>
<li>语法糖（Syntactic Sugar），也称糖衣语法，是由英国计算机学家Peter.J.Landin发明的一个术语，指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。<strong>Java中最常用的语法糖主要有泛型、变长参数、条件编译、自动拆装箱、内部类等。</strong>虚拟机并不支持这些语法，<strong>它们在编译阶段就被还原回了简单的基础语法结构，这个过程成为解语法糖</strong></li>
</ul>
<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ul>
<li><p>泛型是JDK1.5之后引入的一项新特性，Java语言在还没有出现泛型时，只能通过Object是所有类型的父类和类型强制转换这两个特点的配合来实现泛型的功能，这样实现的泛型功能要在程序运行期才能知道Object真正的对象类型，在Javac编译期，编译器无法检查这个Object的强制转型是否成功，这便将一些风险转接到了程序运行期中</p>
</li>
<li><p>Java语言在JDK1.5之后引入的泛型实际上只在程序源码中存在，在编译后的字节码文件中，就已经被替换为了原来的原生类型，并且在相应的地方插入了强制转型代码，因此对于运行期的Java语言来说，ArrayList<string>和ArrayList<integer>就是同一个类。所以泛型技术实际上是Java语言的一颗语法糖，Java语言中的泛型实现方法称为类型擦除，基于这种方法实现的泛型被称为<strong>伪泛型</strong></integer></string></p>
</li>
</ul>
<h4 id="泛型示例"><a href="#泛型示例" class="headerlink" title="泛型示例"></a>泛型示例</h4><ul>
<li>下面是一段简单的Java泛型代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,String&gt;();  </div><div class="line">map.put(<span class="number">1</span>,<span class="string">"No.1"</span>);  </div><div class="line">map.put(<span class="number">2</span>,<span class="string">"No.2"</span>);  </div><div class="line">System.out.println(map.get(<span class="number">1</span>));  </div><div class="line">System.out.println(map.get(<span class="number">2</span>));</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>将这段Java代码编译成Class文件，然后再用字节码反编译工具进行反编译后，将会发现泛型都变回了原生类型，如下面的代码所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Map map = <span class="keyword">new</span> HashMap();  </div><div class="line">map.put(<span class="number">1</span>,<span class="string">"No.1"</span>);  </div><div class="line">map.put(<span class="number">2</span>,<span class="string">"No.2"</span>);  </div><div class="line">System.out.println((String)map.get(<span class="number">1</span>));  </div><div class="line">System.out.println((String)map.get(<span class="number">2</span>));</div></pre></td></tr></table></figure>
<ul>
<li>为了更详细地说明类型擦除，再看如下代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.List;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanxingTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"List String"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(List&lt;Integer&gt; list)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"List Int"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>当我用Javac编译器编译这段代码时，报出了如下错误：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">FanxingTest.java:<span class="number">3</span>: 名称冲突：method(java.util.List&lt;java.lang.String&gt;) 和 method</div><div class="line"></div><div class="line">(java.util.List&lt;java.lang.Integer&gt;) 具有相同疑符</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</div><div class="line"></div><div class="line">                    ^</div><div class="line"></div><div class="line">FanxingTest.java:<span class="number">6</span>: 名称冲突：method(java.util.List&lt;java.lang.Integer&gt;) 和 <span class="function">metho</span></div><div class="line"></div><div class="line"><span class="title">d</span><span class="params">(java.util.List&lt;java.lang.String&gt;)</span> 具有相同疑符</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(List&lt;Integer&gt; list)</span>&#123;</div><div class="line"></div><div class="line">                    ^</div><div class="line"></div><div class="line"><span class="number">2</span> 错误</div></pre></td></tr></table></figure>
<ul>
<li><p>这是因为泛型List<string>和List<integer>编译后都被擦除了，变成了一样的原生类型List，擦除动作导致这两个方法的特征签名变得一模一样，在Class类文件结构一文中讲过，Class文件中不能存在特征签名相同的方法</integer></string></p>
</li>
<li><p>把以上代码修改如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.List;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanxingTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"List String"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">(List&lt;Integer&gt; list)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"List Int"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>发现这时编译可以通过了<strong>（注意：Java语言中true和1没有关联，二者属于不同的类型，不能相互转换，不存在C语言中整数值非零即真的情况）。</strong>两个不同类型的返回值的加入，使得方法的重载成功了。这是为什么呢？</p>
</li>
<li><p>我们知道，<strong>Java代码中的方法特征签名只包括了方法名称、参数顺序和参数类型，并不包括方法的返回值</strong>，因此方法的返回值并不参与重载方法的选择，这样看来为重载方法加入返回值貌似是多余的。对于重载方法的选择来说，这确实是多余的，但我们现在要解决的问题是让上述代码能通过编译，让两个重载方法能够合理地共存于同一个Class文件之中，这就要看字节码的方法特征签名，它不仅包括了Java代码中方法特征签名中所包含的那些信息，<strong>还包括方法返回值及受查异常表。</strong>为两个重载方法加入不同的返回值后，因为有了不同的字节码特征签名，它们便可以共存于一个Class文件之中。</p>
</li>
<li><p>自动拆装箱、变长参数等语法糖也都是在编译阶段就把它们该语法糖结构还原为了原生的语法结构，因此在Class文件中也只存在其对应的原生类型，这里不再一一说明</p>
</li>
</ul>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://blog.csdn.net/ns_code/article/details/18011009" target="_blank" rel="external">传送门</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多态性实现机制——静态分派与动态分派]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/24/JVM/%E5%A4%9A%E6%80%81%E6%80%A7%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E2%80%94%E2%80%94%E9%9D%99%E6%80%81%E5%88%86%E6%B4%BE%E4%B8%8E%E5%8A%A8%E6%80%81%E5%88%86%E6%B4%BE/</url>
      <content type="html"><![CDATA[<h3 id="方法解析"><a href="#方法解析" class="headerlink" title="方法解析"></a>方法解析</h3><ul>
<li><p>Class文件的编译过程中不包含传统编译中的连接步骤，一切方法调用在Class文件里面存储的都只是符号引用，而不是方法在实际运行时内存布局中的入口地址。这个特性给Java带来了更强大的动态扩展能力，使得可以在类运行期间才能确定某些目标方法的直接引用，称为动态连接，也有一部分方法的符号引用在类加载阶段或第一次使用时转化为直接引用，这种转化称为静态解析。这在前面的“Java内存区域与内存溢出”一文中有提到</p>
</li>
<li><p>静态解析成立的前提是：方法在程序真正执行前就有一个可确定的调用版本，并且这个方法的调用版本在运行期是不可改变的。换句话说，调用目标在编译器进行编译时就必须确定下来，这类方法的调用称为解析</p>
</li>
<li><p>在Java语言中，<strong>符合“编译器可知，运行期不可变”这个要求的方法主要有静态方法和私有方法两大类</strong>，前者与类型直接关联，后者在外部不可被访问，这两种方法都不可能通过继承或别的方式重写出其他的版本，<strong>因此它们都适合在类加载阶段进行解析</strong></p>
</li>
</ul>
<p>Java虚拟机里共提供了四条方法调用字节指令，分别是：</p>
<ul>
<li><p>invokestatic：调用静态方法</p>
</li>
<li><p>invokespecial：调用实例构造器<init>方法、私有方法和父类方法</init></p>
</li>
<li><p>invokevirtual：调用所有的虚方法</p>
</li>
<li><p>invokeinterface：调用接口方法，会在运行时再确定一个实现此接口的对象</p>
</li>
</ul>
<a id="more"></a>
<p>只要能被invokestatic和invokespecial指令调用的方法，都可以在解析阶段确定唯一的调用版本，符合这个条件的有静态方法、私有方法、实例构造器和父类方法四类，它们在类加载时就会把符号引用解析为该方法的直接引用。这些方法可以称为<strong>非虚方法</strong>（还包括final方法），与之相反，其他方法就称为<strong>虚方法</strong>（final方法除外）。这里要特别说明下final方法，虽然调用final方法使用的是invokevirtual指令，但是由于它无法覆盖，没有其他版本，所以也无需对方发接收者进行多态选择。Java语言规范中明确说明了final方法是一种非虚方法</p>
<ul>
<li>解析调用一定是个静态过程，在编译期间就完全确定，在类加载的解析阶段就会把涉及的符号引用转化为可确定的直接引用，不会延迟到运行期再去完成。而分派调用则可能是静态的也可能是动态的，根据分派依据的宗量数（方法的调用者和方法的参数统称为方法的宗量）又可分为单分派和多分派。两类分派方式两两组合便构成了静态单分派、静态多分派、动态单分派、动态多分派四种分派情况</li>
</ul>
<h3 id="静态分派"><a href="#静态分派" class="headerlink" title="静态分派"></a>静态分派</h3><ul>
<li><strong>所有依赖静态类型来定位方法执行版本的分派动作，都称为静态分派，静态分派的最典型应用就是多态性中的方法重载。</strong>静态分派发生在编译阶段，因此确定静态分配的动作实际上不是由虚拟机来执行的。下面通过一段方法重载的示例程序来更清晰地说明这种分派机制：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;  </div><div class="line">&#125;    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticPai</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Human hum)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"I am human"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Man hum)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"I am man"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Woman hum)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"I am woman"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        Human man = <span class="keyword">new</span> Man();  </div><div class="line">        Human woman = <span class="keyword">new</span> Woman();  </div><div class="line">        StaticPai sp = <span class="keyword">new</span> StaticPai();  </div><div class="line">        sp.say(man);  </div><div class="line">        sp.say(woman);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>上面代码的执行结果如下：</p>
<blockquote>
<p>I am human<br>I am human</p>
</blockquote>
</li>
<li><p>以上结果的得出应该不难分析。在分析为什么会选择参数类型为Human的重载方法去执行之前，先看如下代码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Human man = <span class="keyword">new</span> Man（）;</div></pre></td></tr></table></figure>
<ul>
<li><p>我们把上面代码中的<strong>“Human”称为变量的静态类型</strong>，后面的<strong>“Man”称为变量的实际类型</strong>。静态类型和实际类型在程序中都可以发生一些变化，区别是静态类型的变化仅仅在使用时发生，变量本身的静态类型不会被改变，并且最终的静态类型是在编译期可知的，而实际类型变化的结果在运行期才可确定</p>
</li>
<li><p>回到上面的代码分析中，在调用say（）方法时，方法的调用者（回忆上面关于宗量的定义，方法的调用者属于宗量）都为sp的前提下，使用哪个重载版本，完全取决于传入参数的数量和数据类型（方法的参数也是数据宗量）。代码中刻意定义了两个静态类型相同、实际类型不同的变量，可见<strong>编译器（不是虚拟机，因为如果是根据静态类型做出的判断，那么在编译期就确定了）在重载时是通过参数的静态类型而不是实际类型作为判定依据的。</strong>并且静态类型是编译期可知的，所以在编译阶段，Javac编译器就根据参数的静态类型决定使用哪个重载版本。这就是静态分派最典型的应用</p>
</li>
</ul>
<h3 id="动态分派"><a href="#动态分派" class="headerlink" title="动态分派"></a>动态分派</h3><ul>
<li>动态分派与多态性的另一个重要体现——方法覆写有着很紧密的关系。向上转型后调用子类覆写的方法便是一个很好地说明动态分派的例子。这种情况很常见，因此这里不再用示例程序进行分析。很显然，在判断执行父类中的方法还是子类中覆盖的方法时，如果用静态类型来判断，那么无论怎么进行向上转型，都只会调用父类中的方法，但实际情况是，根据对父类实例化的子类的不同，调用的是不同子类中覆写的方法，<strong>很明显，这里是要根据变量的实际类型来分派方法的执行版本的。而实际类型的确定需要在程序运行时才能确定下来，这种在运行期根据实际类型确定方法执行版本的分派过程称为动态分派</strong></li>
</ul>
<h3 id="单分派和多分派"><a href="#单分派和多分派" class="headerlink" title="单分派和多分派"></a>单分派和多分派</h3><ul>
<li><p>前面给出：方法的接受者（亦即方法的调用者）与方法的参数统称为方法的宗量。但分派是根据一个宗量对目标方法进行选择，多分派是根据多于一个宗量对目标方法进行选择</p>
</li>
<li><p>为了方便理解，下面给出一段示例代码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Eat</span></span>&#123;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drink</span></span>&#123;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Eat arg)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"爸爸在吃饭"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Drink arg)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"爸爸在喝水"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Eat arg)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"儿子在吃饭"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Drink arg)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"儿子在喝水"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDoublePai</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        Father father = <span class="keyword">new</span> Father();  </div><div class="line">        Father child = <span class="keyword">new</span> Child();  </div><div class="line">        father.doSomething(<span class="keyword">new</span> Eat());  </div><div class="line">        child.doSomething(<span class="keyword">new</span> Drink());  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>运行结果应该很容易预测到，如下：</li>
</ul>
<blockquote>
<p>爸爸在吃饭<br>    儿子在喝水</p>
</blockquote>
<ul>
<li><p>我们首先来看编译阶段编译器的选择过程，即静态分派过程。这时候选择目标方法的依据有两点：一是方法的接受者（即调用者）的静态类型是Father还是Child，二是方法参数类型是Eat还是Drink。<strong>因为是根据两个宗量进行选择，所以Java语言的静态分派属于多分派类型</strong></p>
</li>
<li><p>再来看运行阶段虚拟机的选择，即动态分派过程。由于编译期已经了确定了目标方法的参数类型（编译期根据参数的静态类型进行静态分派），因此唯一可以影响到虚拟机选择的因素只有此方法的接受者的实际类型是Father还是Child。<strong>因为只有一个宗量作为选择依据，所以Java语言的动态分派属于单分派类型</strong></p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E5%A4%9A%E6%80%81%E6%80%A7%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E2%80%94%E2%80%94%E9%9D%99%E6%80%81%E5%88%86%E6%B4%BE%E4%B8%8E%E5%8A%A8%E6%80%81%E5%88%86%E6%B4%BE.jpg" alt=""></center>

<ul>
<li>根据以上论证，我们可以总结如下：目前的Java语言（JDK1.6）是一门<strong>静态多分派、动态单分派的语言</strong></li>
</ul>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://blog.csdn.net/ns_code/article/details/17965867" target="_blank" rel="external">传送门</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[类加载机制]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/23/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><ul>
<li>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载七个阶段。它们开始的顺序如下图所示：<br><br><br><center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.jpg" alt=""></center><br><br></li>
<li><p>其中<strong>类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。</strong>在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序<strong>开始</strong>，而不是按顺序<strong>进行</strong>或<strong>完成</strong>，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段</p>
<p>这里简要说明下Java中的绑定：绑定指的是把一个方法的调用与方法所在的类(方法主体)关联起来，对java来说，绑定分为静态绑定和动态绑定：</p>
<ul>
<li>静态绑定：即前期绑定。在程序执行前方法已经被绑定，此时由编译器或其它连接程序实现。针对java，简单的可以理解为程序编译期的绑定。java当中的方法只有final，static，private和构造方法是前期绑定的</li>
</ul>
</li>
<li><p>动态绑定：即晚期绑定，也叫运行时绑定。在运行时根据具体对象的类型进行绑定。在java中，几乎所有的方法都是后期绑定的</p>
<a id="more"></a>
</li>
</ul>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>加载时类加载过程的第一个阶段，在加载阶段，虚拟机需要完成以下三件事情：</p>
<ul>
<li><p>通过一个类的全限定名来获取其定义的二进制字节流。</p>
</li>
<li><p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>
</li>
<li><p>在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口</p>
</li>
</ul>
<p>注意，这里第1条中的二进制字节流并不只是单纯地从Class文件中获取，比如它还可以从Jar包中获取、从网络中获取（最典型的应用便是Applet）、由其他文件生成（JSP应用）等</p>
<ul>
<li><p>相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载</p>
</li>
<li><p>加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据</p>
</li>
</ul>
<h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><ul>
<li><p>类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远远不限于类的加载阶段。对于任意一个类，都需要由它的类加载器和这个类本身一同确定其在就Java虚拟机中的唯一性，也就是说，即使两个类来源于同一个Class文件，只要加载它们的类加载器不同，那这两个类就必定不相等。这里的“相等”包括了代表类的Class对象的equals（）、isAssignableFrom（）、isInstance（）等方法的返回结果，也包括了使用instanceof关键字对对象所属关系的判定结果</p>
<p>站在<strong>Java虚拟机</strong>的角度来讲，只存在两种不同的类加载器：</p>
</li>
<li><p>启动类加载器：它使用C++实现（这里仅限于Hotspot，也就是JDK1.5之后默认的虚拟机，有很多其他的虚拟机是用Java语言实现的），是虚拟机自身的一部分</p>
</li>
<li><p>所有其他的类加载器：这些类加载器都由Java语言实现，独立于虚拟机之外，并且全部继承自抽象类java.lang.ClassLoader，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类</p>
</li>
</ul>
<p>站在<strong>Java开发人员</strong>的角度来看，类加载器可以大致划分为以下三类：</p>
<ul>
<li><p>启动类加载器：Bootstrap ClassLoader，跟上面相同。它负责加载存放在JDK\jre\lib(JDK代表JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库（如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载）。启动类加载器是无法被Java程序直接引用的</p>
</li>
<li><p>扩展类加载器：Extension ClassLoader，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载JDK\jre\lib\ext目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.*开头的类），开发者可以直接使用扩展类加载器</p>
</li>
<li><p>应用程序类加载器：Application ClassLoader，该类加载器由sun.misc.Launcher$AppClassLoader来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器</p>
</li>
</ul>
<p>应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。<strong>因为JVM自带的ClassLoader只是懂得从本地文件系统加载标准的java class文件，因此如果编写了自己的ClassLoader，便可以做到如下几点：</strong></p>
<ul>
<li><p>在执行非置信代码之前，自动验证数字签名</p>
</li>
<li><p>动态地创建符合用户特定需要的定制化构建类</p>
</li>
<li><p>从特定的场所取得java class，例如数据库中和网络中</p>
</li>
</ul>
<p>事实上当使用Applet的时候，就用到了特定的ClassLoader，因为这时需要从网络上加载java class，并且要检查相关的安全信息，应用服务器也大都使用了自定义的ClassLoader技术</p>
<ul>
<li>这几种类加载器的层次关系如下图所示：</li>
</ul>
<p><br></p>
<p><center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B62.jpg" alt=""></center><br><br></p>
<ul>
<li><p>这种层次关系称为类加载器的<strong>双亲委派模型</strong>。我们把每一层上面的类加载器叫做当前层类加载器的父加载器，当然，它们之间的父子关系并不是通过继承关系来实现的，而是使用组合关系来复用父加载器中的代码。该模型在JDK1.2期间被引入并广泛应用于之后几乎所有的Java程序中，但它并不是一个强制性的约束模型，而是Java设计者们推荐给开发者的一种类的加载器实现方式</p>
</li>
<li><p>双亲委派模型的工作流程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类</p>
</li>
<li><p>使用双亲委派模型来组织类加载器之间的关系，<strong>有一个很明显的好处，就是Java类随着它的类加载器（说白了，就是它所在的目录）一起具备了一种带有优先级的层次关系</strong>，这对于保证Java程序的稳定运作很重要。例如，类java.lang.Object类存放在JDK\jre\lib下的rt.jar之中，因此无论是哪个类加载器要加载此类，最终都会委派给启动类加载器进行加载，这边保证了Object类在程序中的各种类加载器中都是同一个类</p>
</li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p> 验证的目的是为了确保Class文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。不同的虚拟机对类验证的实现可能会有所不同，但大致都会完成以下四个阶段的验证：<strong>文件格式的验证、元数据的验证、字节码验证和符号引用验证</strong></p>
<ul>
<li><p>文件格式的验证：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理，该验证的主要目的是保证输入的字节流能正确地解析并存储于方法区之内。经过该阶段的验证后，字节流才会进入内存的方法区中进行存储，后面的三个验证都是基于方法区的存储结构进行的</p>
</li>
<li><p>元数据验证：对类的元数据信息进行语义校验（其实就是对类中的各数据类型进行语法校验），保证不存在不符合Java语法规范的元数据信息</p>
</li>
<li><p>字节码验证：该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为</p>
</li>
<li><p>符号引用验证：这是最后一个阶段的验证，它发生在虚拟机将符号引用转化为直接引用的时候（解析阶段中发生该转化，后面会有讲解），主要是对类自身以外的信息（常量池中的各种符号引用）进行匹配性的校验</p>
</li>
</ul>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：</p>
<hr>
<h4 id="类变量分配内存"><a href="#类变量分配内存" class="headerlink" title="类变量分配内存"></a>类变量分配内存</h4><ul>
<li>这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中</li>
</ul>
<hr>
<h4 id="数据默认值"><a href="#数据默认值" class="headerlink" title="数据默认值"></a>数据默认值</h4><p>这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值</p>
<ul>
<li><p>假设一个类变量的定义为：public static int value = 3；</p>
</li>
<li><p>那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器’&lt;’clinit&gt;（）方法之中的，<strong>所以把value赋值为3的动作将在初始化阶段才会执行</strong></p>
</li>
<li><p>下表列出了Java中所有基本数据类型以及reference类型的默认零值：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>数据类型</th>
<th style="text-align:center">默认零值</th>
</tr>
</thead>
<tbody>
<tr>
<td>int</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td>long</td>
<td style="text-align:center">0L</td>
</tr>
<tr>
<td>short</td>
<td style="text-align:center">(short)0</td>
</tr>
<tr>
<td>char</td>
<td style="text-align:center">‘\u0000’</td>
</tr>
<tr>
<td>byte</td>
<td style="text-align:center">(byte)0</td>
</tr>
<tr>
<td>boolean</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td>float</td>
<td style="text-align:center">0.0f</td>
</tr>
<tr>
<td>double</td>
<td style="text-align:center">0.0d</td>
</tr>
<tr>
<td>reference</td>
<td style="text-align:center">null</td>
</tr>
</tbody>
</table>
<p>这里还需要注意如下几点：</p>
<ul>
<li><p>对基本数据类型来说，对于类变量（static）和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过</p>
</li>
<li><p>对于同时被static和final修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被final修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值</p>
</li>
<li><p>对于引用数据类型reference来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即null。</p>
</li>
<li><p>如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值</p>
</li>
</ul>
<hr>
<h4 id="ConstantValue属性"><a href="#ConstantValue属性" class="headerlink" title="ConstantValue属性"></a>ConstantValue属性</h4><p>如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值</p>
<ul>
<li><p>假设上面的类变量value被定义为： public static final int value = 3；</p>
</li>
<li><p>编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为3。回忆 <a href="http://www.qiuchengjia.cn/2016/07/23/JVM/%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96/">上一篇博文</a> 中对象被动引用的第2个例子，便是这种情况。<strong>我们可以理解为static final常量在编译期就将其结果放入了调用它的类的常量池中</strong></p>
</li>
</ul>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ul>
<li><p>解析阶段是虚拟机将常量池中的符号引用转化为直接引用的过程。在Class类文件结构一文中已经比较过了符号引用和直接引用的区别和关联，这里不再赘述。前面说解析阶段可能开始于初始化之前，也可能在初始化之后开始，虚拟机会根据需要来判断，到底是在类被加载器加载时就对常量池中的符号引用进行解析（初始化之前），还是等到一个符号引用将要被使用前才去解析它（初始化之后）</p>
</li>
<li><p>对同一个符号引用进行多次解析请求时很常见的事情，虚拟机实现可能会对第一次解析的结果进行缓存（在运行时常量池中记录直接引用，并把常量标示为已解析状态），从而避免解析动作重复进行</p>
</li>
<li><p>解析动作主要针对类或接口、字段、类方法、接口方法四类符号引用进行，分别对应于常量池中的CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info、CONSTANT_InterfaceMethodref_info四种常量类型</p>
</li>
</ul>
<h4 id="类或接口的解析"><a href="#类或接口的解析" class="headerlink" title="类或接口的解析"></a>类或接口的解析</h4><ul>
<li>判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析</li>
</ul>
<h4 id="字段解析"><a href="#字段解析" class="headerlink" title="字段解析"></a>字段解析</h4><ul>
<li>对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束，查找流程如下图所示：</li>
</ul>
<p><br></p>
<p><center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B63.jpg" alt=""></center><br><br></p>
<ul>
<li>从下面一段代码的执行结果中很容易看出来字段解析的搜索顺序：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">11</span>;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"执行了super类静态语句块"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Super</span></span>&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">33</span>;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"执行了父类静态语句块"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"执行了子类静态语句块"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        System.out.println(Child.m);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>执行结果如下：</li>
</ul>
<blockquote>
<p>执行了super类静态语句块<br>    执行了父类静态语句块<br>    33</p>
</blockquote>
<ul>
<li>如果注释掉Father类中对m定义的那一行，则输出结果如下：</li>
</ul>
<blockquote>
<p>  执行了super类静态语句块<br>    11</p>
</blockquote>
<ul>
<li><p>另外，很明显这就是<a href="http://www.qiuchengjia.cn/2016/07/23/JVM/%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96/">上篇博文</a>中的第1个例子的情况，这里我们便可以分析如下：static变量发生在静态解析阶段，也即是初始化之前，此时已经将字段的符号引用转化为了内存引用，也便将它与对应的类关联在了一起，由于在子类中没有查找到与m相匹配的字段，那么m便不会与子类关联在一起，因此并不会触发子类的初始化</p>
</li>
<li><p><strong>最后需要注意：理论上是按照上述顺序进行搜索解析，但在实际应用中，虚拟机的编译器实现可能要比上述规范要求的更严格一些。如果有一个同名字段同时出现在该类的接口和父类中，或同时在自己或父类的接口中出现，编译器可能会拒绝编译。</strong>如果对上面的代码做些修改，将Super改为接口，并将Child类继承Father类且实现Super接口，那么在编译时会报出如下错误：</p>
</li>
</ul>
<blockquote>
<p>StaticTest.java:24: 对 m 的引用不明确，Father 中的 变量 m 和 Super 中的 变量 m<br>都匹配<br>                System.out.println(Child.m);<br>                                        ^<br>1 错误</p>
</blockquote>
<h4 id="类方法解析"><a href="#类方法解析" class="headerlink" title="类方法解析"></a>类方法解析</h4><ul>
<li>对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口</li>
</ul>
<h4 id="接口方法解析"><a href="#接口方法解析" class="headerlink" title="接口方法解析"></a>接口方法解析</h4><ul>
<li>与类方法解析步骤类似，知识接口不会有父类，因此，只递归向上搜索父接口就行了</li>
</ul>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>初始化是类加载过程的最后一步，到了此阶段，才真正开始执行类中定义的Java程序代码。在准备阶段，类变量已经被赋过一次系统要求的初始值，而在初始化阶段，则是根据程序员通过程序指定的主观计划去初始化类变量和其他资源，或者可以从另一个角度来表达：初始化阶段是执行类构造器<clinit>()方法的过程</clinit></li>
</ul>
<h4 id="‘-lt-’clinit-gt-（）方法的执行规则"><a href="#‘-lt-’clinit-gt-（）方法的执行规则" class="headerlink" title="‘&lt;’clinit&gt;（）方法的执行规则"></a>‘&lt;’clinit&gt;（）方法的执行规则</h4><ul>
<li><p>‘&lt;’clinit&gt;（）方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句中可以赋值，但是不能访。</p>
</li>
<li><p>‘&lt;’clinit&gt;（）方法与实例构造器<init>（）方法（类的构造函数）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的’&lt;’clinit&gt;（）方法执行之前，父类的’&lt;’clinit&gt;（）方法已经执行完毕。因此，在虚拟机中第一个被执行的’&lt;’clinit&gt;（）方法的类肯定是java.lang.Object</init></p>
</li>
<li><p>‘&lt;’clinit&gt;（）方法对于类或接口来说并不是必须的，如果一个类中没有静态语句块，也没有对类变量的赋值操作，那么编译器可以不为这个类生成’&lt;’clinit&gt;（）方法</p>
</li>
<li><p>接口中不能使用静态语句块，但仍然有类变量（final static）初始化的赋值操作，因此接口与类一样会生成’&lt;’clinit&gt;（）方法。但是接口鱼类不同的是：执行接口的’&lt;’clinit&gt;（）方法不需要先执行父接口的’&lt;’clinit&gt;（）方法，只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也一样不会执行接口的’&lt;’clinit&gt;（）方法</p>
</li>
<li><p>虚拟机会保证一个类的’&lt;’clinit&gt;（）方法在多线程环境中被正确地加锁和同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的’&lt;’clinit&gt;（）方法，其他线程都需要阻塞等待，直到活动线程执行’&lt;’clinit&gt;（）方法完毕。如果在一个类的’&lt;’clinit&gt;（）方法中有耗时很长的操作，那就可能造成多个线程阻塞，在实际应用中这种阻塞往往是很隐蔽的</p>
</li>
</ul>
<p>下面给出一个简单的例子，以便更清晰地说明如上规则：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        a = <span class="number">2</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> b = a;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClinitTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        System.out.println(Child.b);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>执行上面的代码，会打印出2，也就是说b的值被赋为了2</p>
</li>
<li><p>我们来看得到该结果的步骤。首先在准备阶段为类变量分配内存并设置类变量初始值，这样A和B均被赋值为默认值0，而后再在调用’&lt;’clinit&gt;（）方法时给他们赋予程序中指定的值。当我们调用Child.b时，触发Child的’&lt;’clinit&gt;（）方法，根据规则2，在此之前，要先执行完其父类Father的’&lt;’clinit&gt;（）方法，又根据规则1，在执行’&lt;’clinit&gt;（）方法时，需要按static语句或static变量赋值操作等在代码中出现的顺序来执行相关的static语句，因此当触发执行Father的’&lt;’clinit&gt;（）方法时，会先将a赋值为1，再执行static语句块中语句，将a赋值为2，而后再执行Child类的’&lt;’clinit&gt;（）方法，这样便会将b的赋值为2</p>
</li>
<li><p>如果我们颠倒一下Father类中“public static int a = 1;”语句和“static语句块”的顺序，程序执行后，则会打印出1。很明显是根据规则1，执行Father的’&lt;’clinit&gt;（）方法时，根据顺序先执行了static语句块中的内容，后执行了“public static int a = 1;”语句</p>
</li>
<li><p>另外，在颠倒二者的顺序之后，如果在static语句块中对a进行访问（比如将a赋给某个变量），在编译时将会报错，因为根据规则1，它只能对a进行赋值，而不能访问</p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>整个类加载过程中，除了在加载阶段用户应用程序可以自定义类加载器参与之外，其余所有的动作完全由虚拟机主导和控制。到了初始化才开始执行类中定义的Java程序代码（亦及字节码），但这里的执行代码只是个开端，它仅限于’&lt;’clinit&gt;（）方法。类加载过程中主要是将Class文件（准确地讲，应该是类的二进制字节流）加载到虚拟机内存中，真正执行字节码的操作，在加载完成后才真正开始</li>
</ul>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://blog.csdn.net/ns_code/article/details/17881581" target="_blank" rel="external">传送门</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[类初始化]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/23/JVM/%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="主动引用"><a href="#主动引用" class="headerlink" title="主动引用"></a>主动引用</h3><p>类初始化是类加载过程的最后一个阶段，到初始化阶段，才真正开始执行类中的Java程序代码。<strong>虚拟机规范严格规定了有且只有四种情况必须立即对类进行初始化：</strong></p>
<ul>
<li><p>遇到new、getstatic、putstatic、invokestatic这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。生成这四条指令最常见的Java代码场景是：使用new关键字实例化对象时、读取或设置一个类的静态字段（static）时（被static修饰又被final修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时</p>
</li>
<li><p>使用Java.lang.refect包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化</p>
</li>
<li><p>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化</p>
</li>
<li><p>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类</p>
<p>虚拟机规定只有这四种情况才会触发类的初始化，称为对一个类进行主动引用，除此之外所有引用类的方式都不会触发其初始化，称为被动引用</p>
</li>
</ul>
<a id="more"></a>
<h3 id="被动引用"><a href="#被动引用" class="headerlink" title="被动引用"></a>被动引用</h3><h4 id="子类引用父类"><a href="#子类引用父类" class="headerlink" title="子类引用父类"></a>子类引用父类</h4><ul>
<li>通过子类引用父类中的静态字段，这时对子类的引用为被动引用，因此不会初始化子类，只会初始化父类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">33</span>;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"父类被初始化"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125; </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"子类被初始化"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        System.out.println(Child.m);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行后输出的结果如下：</p>
<blockquote>
<p>父类被初始化<br>  33</p>
</blockquote>
<ul>
<li>对于静态字段，只有直接定义这个字段的类才会被初始化，因此，通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化</li>
</ul>
<h4 id="类的常量池"><a href="#类的常量池" class="headerlink" title="类的常量池"></a>类的常量池</h4><ul>
<li>常量在编译阶段会存入调用它的类的常量池中，本质上没有直接引用到定义该常量的类，因此不会触发定义常量的类的初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Const</span></span>&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"我是常量"</span>;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"初始化Const类"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        System.out.println(Const.NAME);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 执行后输出的结果如下：</p>
<blockquote>
<p>我是常量</p>
</blockquote>
<ul>
<li>虽然程序中引用了const类的常量NAME，但是在编译阶段将此常量的值“我是常量”存储到了调用它的类FinalTest的常量池中，对常量Const.NAME的引用实际上转化为了FinalTest类对自身常量池的引用。也就是说，实际上FinalTest的Class文件之中并没有Const类的符号引用入口，这两个类在编译成Class文件后就不存在任何联系了</li>
</ul>
<h4 id="数组引用类"><a href="#数组引用类" class="headerlink" title="数组引用类"></a>数组引用类</h4><ul>
<li>通过数组定义来引用类，不会触发类的初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Const</span></span>&#123;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"初始化Const类"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        Const[] con = <span class="keyword">new</span> Const[<span class="number">5</span>];  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p> 执行后不输出任何信息，说明Const类并没有被初始化</p>
</blockquote>
<ul>
<li>但这段代码里触发了另一个名为“LLConst”的类的初始化，它是一个由虚拟机自动生成的、直接继承于java.lang.Object的子类，创建动作由字节码指令newarray触发，很明显，这是一个对数组引用类型的初初始化，而该数组中的元素仅仅包含一个对Const类的引用，并没有对其进行初始化。如果我们加入对con数组中各个Const类元素的实例化代码，便会触发Const类的初始化，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Const</span></span>&#123;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"初始化Const类"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        Const[] con = <span class="keyword">new</span> Const[<span class="number">5</span>];  </div><div class="line">        <span class="keyword">for</span>(Const a:con)  </div><div class="line">            a = <span class="keyword">new</span> Const();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这样便会得到如下输出结果：</p>
<blockquote>
<p>初始化Const类</p>
</blockquote>
<ul>
<li>根据四条规则的第一条，这里的new触发了Const类</li>
</ul>
<h3 id="接口和类初始化的不同"><a href="#接口和类初始化的不同" class="headerlink" title="接口和类初始化的不同"></a>接口和类初始化的不同</h3><ul>
<li><p>接口也有初始化过程，上面的代码中我们都是用静态语句块来输出初始化信息的，而在接口中不能使用“static{}”语句块，但编译器仍然会为接口生成<clinit>类构造器，用于初始化接口中定义的成员变量（实际上是static final修饰的全局常量）</clinit></p>
</li>
<li><p>二者在初始化时最主要的区别是：当一个类在初始化时，要求其父类全部已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量），才会初始化该父接口。这点也与类初始化的情况很不同，回过头来看第2个例子就知道，调用类中的static final常量时并不会 触发该类的初始化，但是调用接口中的static final常量时便会触发该接口的初始化</p>
</li>
</ul>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://blog.csdn.net/ns_code/article/details/17845821" target="_blank" rel="external">传送门</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Class类文件结构]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/18/JVM/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h3 id="平台无关性"><a href="#平台无关性" class="headerlink" title="平台无关性"></a>平台无关性</h3><ul>
<li>如图，源码经过编译得到的字节码文件可以由运行Java虚拟机的机器运行，因此可以说字节码是Java语言跨平台的基石，同样也是其他语言跨平台的有效途径</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png" alt=""></center>

<ul>
<li>只要目标语言的编译器按照Java字节码存储规范进行编译，那么得到的class文件都可以被正确执行</li>
</ul>
<a id="more"></a>
<h3 id="Class文件结构"><a href="#Class文件结构" class="headerlink" title="Class文件结构"></a>Class文件结构</h3><ul>
<li><p>Class文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件中，中间没有添加任何分隔符，这使得整个Class文件中存储的内容几乎全部都是程序运行的必要数据。根据Java虚拟机规范的规定，Class文件格式采用一种类似于C语言结构体的伪结构来存储，这种伪结构中只有两种数据类型：<strong>无符号数和表</strong></p>
</li>
<li><p>无符号数属于基本数据类型，主要可以用来描述数字、索引符号、数量值或者按照UTF-8编码构成的字符串值，大小使用u1、u2、u4、u8分别表示1字节、2字节、4字节和8字节</p>
</li>
<li><p>表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有的表都习惯以“_info”结尾。那么表是干嘛的呢？<strong>表主要用于描述有层次关系的复合结构的数据，比如方法、字段</strong>。需要注意的是class文件是没有分隔符的，所以每个的二进制数据类型都是严格定义的</p>
</li>
<li><p>整个Class文件本质上就是一张表，它由如下所示的数据项构成</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>u4</td>
<td>magic(魔术)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>u2</td>
<td>minor_version(次版本号)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>u2</td>
<td>major_version(主版本号)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>u2</td>
<td>constant_pool_count(常量个数)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>cp_info</td>
<td>constant_pool(常量池表)</td>
<td style="text-align:center">constant_pool_count - 1</td>
</tr>
<tr>
<td>u2</td>
<td>access_flags(类的访问控制权限)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>u2</td>
<td>this_class(类名)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>u2</td>
<td>super_class(父类名)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>u2</td>
<td>interfaces_count(接口个数)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>u2</td>
<td>interfaces(接口名)</td>
<td style="text-align:center">interfaces_count</td>
</tr>
<tr>
<td>u2</td>
<td>fields_count(域个数)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>field_info</td>
<td>fields(域的表)</td>
<td style="text-align:center">fields_count</td>
</tr>
<tr>
<td>u2</td>
<td>methods_count(方法的个数)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>method_info</td>
<td>methods(方法表)</td>
<td style="text-align:center">methods_count</td>
</tr>
<tr>
<td>u2</td>
<td>attribute_count(附加属性的个数)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>attribute_info</td>
<td>attributes(附加属性的表)</td>
<td style="text-align:center">attributes_count</td>
</tr>
</tbody>
</table>
<ul>
<li><p>从表中可以看出，无论是无符号数还是表，当需要描述同一类型但数量不定的多个数据时，经常会使用一个前置的容量计数器加若干个连续的该数据项的形式，称这一系列连续的摸一个类型的数据为某一类型的集合，比如，fields_count个field_info表数据构成了字段表集合。这里需要说明的是：Class文件中的数据项，都是严格按照上表中的顺序和数量被严格限定的，每个字节代表的含义，长度，先后顺序等都不允许改变</p>
</li>
<li><p>在class文件中，主要分为魔数、Class文件的版本号、常量池、访问标志、类索引（还包括父类索引和接口索引集合）、字段表集合、方法表集合、属性表集合。下面就分别对每一种文件进行说明</p>
</li>
</ul>
<h3 id="魔数与Class文件版本号"><a href="#魔数与Class文件版本号" class="headerlink" title="魔数与Class文件版本号"></a>魔数与Class文件版本号</h3><ul>
<li><p>每个class字节码文件头4个字节为魔数，作用是用于确定该文件是否能被虚拟机接受，固定为0xCAFEBABE</p>
</li>
<li><p>第5和第6个字节是次版本号，第7和第8是主版本号。因此，字节码文件的版本号确定了能执行该程序的虚拟机JDK版本。</p>
</li>
<li><p>用Sublime text打开自己的一个class文件，主版本号是50，因此要求JDK至少是1.6以上版本</p>
</li>
</ul>
<blockquote>
<p>cafe babe 0000 0032 00f1 0a00 3d00 7707<br>0078 0800 790a 0002 007a 0700 7b0a 0005<br>0077 0800 7c0a 0005 007d 0800 7e0a 0005<br>007f 0a00 8000 810a 001a 0082 0a00 1a00<br>830a 001a 0084 0700 850a 000f 0077 0800<br>860b 0087 0088 0700 890b 008a 008b 0800<br>8c08 008d 0800 8e07 008f 0800 9007 0091<br>0700 9207 0093 0700 940a 001d 007a 0a00<br>1c00 950a 001b 0096 0a00 1b00 9708 0098<br>0a00 9900 9a08 009b 0800 9c0a 001a 009d</p>
</blockquote>
<h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><ul>
<li><p>常量池可以简单理解为class文件的资源从库，这种数据类型是Class文件结构中与其他项目关联最多的数据类型，也是占用Class文件空间最大的项目之一</p>
</li>
<li><p>常量池中主要存放两大类常量：字面量和符号引用。字面量比较接近于Java层面的常量概念，如文本字符串、被声明为final的常量值等。而符号引用总结起来则包括了下面三类常量：</p>
</li>
<li><p><strong>类和接口的全限定名（即带有包名的Class名，如：org.lxh.test.TestClass）</strong></p>
</li>
<li><p><strong>字段的名称和描述符（private、static等描述符）</strong></p>
</li>
<li><p><strong>方法的名称和描述符（private、static等描述符）</strong></p>
</li>
</ul>
<p>虚拟机在加载Class文件时才会进行动态连接，也就是说，Class文件中不会保存各个方法和字段的最终内存布局信息，因此，这些字段和方法的符号引用不经过转换是无法直接被虚拟机使用的。当虚拟机运行时，需要从常量池中获得对应的符号引用，再在类加载过程中的解析阶段将其替换为直接引用，并翻译到具体的内存地址中</p>
<h4 id="符号引用和直接引用的区别与关联"><a href="#符号引用和直接引用的区别与关联" class="headerlink" title="符号引用和直接引用的区别与关联"></a>符号引用和直接引用的区别与关联</h4><ul>
<li><p>符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到了内存中</p>
</li>
<li><p>直接引用：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。<strong>如果有了直接引用，那说明引用的目标必定已经存在于内存之中了</strong></p>
</li>
</ul>
<p>在常量池中每一项常量都是一个表，在jdk1.7中共有14中常量类型，所以常量池的项目就对应14张表，这14张表的每种类型都不一样。但是有一个共同特点：表开始的第一位都是一个u1类型的标志位，代表这个常量属于哪种类型</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>标记</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONSTANT_Utf8_info</td>
<td>1</td>
<td>UTF-8编码的字符串</td>
</tr>
<tr>
<td>CONSTANT_Integer_info</td>
<td>3</td>
<td>整形字面量</td>
</tr>
<tr>
<td>CONSTANT_Float_info</td>
<td>4</td>
<td>浮点型字面量</td>
</tr>
<tr>
<td>CONSTANT_Long_info</td>
<td>5</td>
<td>长整形字面量</td>
</tr>
<tr>
<td>CONSTANT_Double_info</td>
<td>6</td>
<td>双精度字面量</td>
</tr>
<tr>
<td>CONSTANT_Class_info</td>
<td>7</td>
<td>类&amp;接口符号引用</td>
</tr>
<tr>
<td>CONSTANT_String_info</td>
<td>8</td>
<td>字符串类型字面量</td>
</tr>
<tr>
<td>CONSTANT_Fieldref_info</td>
<td>9</td>
<td>字段符号引用</td>
</tr>
<tr>
<td>CONSTANT_Methodref_info</td>
<td>10</td>
<td>类中方法符号引用</td>
</tr>
<tr>
<td>CONSTANT_InterfaceMethodref_info</td>
<td>11</td>
<td>接口方法符号引用</td>
</tr>
<tr>
<td>CONSTANT_NameAndType_info</td>
<td>12</td>
<td>字段&amp;方法部分符号引用</td>
</tr>
</tbody>
</table>
<ul>
<li>需要注意的是，在Class文件中，方法、字段都需要引用CONSTANT-Utf8_info类型的常量，所以这种类型的常量的长度有一定的限制，也就是Java中方法、字段的最大长度。在CONSTANT-Utf8_info中，其length的值u2，<strong>说明Java虚拟机只能编译最大大约64KB的变量或者方法名。超过的话将不会进行编译</strong></li>
</ul>
<h3 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h3><ul>
<li>常量池之后的数据结构是访问标志(access_flags),这个标志主要用于识别一些类或者接口层次的访问信息，主要包括：这个Class是类还是接口、是否定义public、是否定义abstract类型；如果是类的话是否被声明为final等。具体的标志访问如下：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%844.jpg" alt=""></center>

<h3 id="类索引、父类索引和接口索引集合"><a href="#类索引、父类索引和接口索引集合" class="headerlink" title="类索引、父类索引和接口索引集合"></a>类索引、父类索引和接口索引集合</h3><ul>
<li>这个数据项主要用于确定这个类的继承关系。其中类索引和父类所以都是一个u2类型的数据，而接口索引集合是一组u2类型的数据。在Java中由于不允许多继承，所以父类索引是唯一的，但是一个类可以实现多个接口，所以得到的接口索引是一个集合，表示这个类实现了哪些接口</li>
</ul>
<h3 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h3><p>字段表用于描述接口或者类中声明的变量。字段包括类级变量和实例级变量，但是不包括方法内部声明的局部变量（这些变量是存储在Java虚拟机栈中的局部变量表中的）。自然，描述一个字段的信息包括：字段的作用域（public、protected、private）、实例变量与否（static）、可变性（final）、并发可见性（volatile）、可否被序列化（transient）、字段数据类型（基本数据类型、对象、数组）、字段名称。字段的信息也被存放在一张表中，其字段表包括三种类型：</p>
<ul>
<li><p>u2类型访问标志（access_flags）</p>
</li>
<li><p>u2类型的name_index（字段的简单名称）</p>
</li>
<li><p>u2类型的描述符（descriptor_index）</p>
</li>
</ul>
<p>其访问标志在access_flags中，如下图所示：</p>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%843.jpg" alt=""></center>

<ul>
<li>上面出现了简单名称，上文中出现了全限定名，以及这里出现的描述符，三者有什么区别呢？其中全限定名称比较好理解，就是类的完整路径信息。而简单名称则是指没有类型和参数修饰的方法或者字段名称，比如一个方法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    System.out.println(a+b);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么这个方法的简单名称就是inc。</p>
<ul>
<li>相对于以上两者，描述符相对复杂一些。描述符的主要的作用是描述字段的数据类型、方法的参数列表和返回值。其中我们熟悉的void，在Class文件中用V表示。下面是完整的描述符标志的含义：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%842.jpg" alt=""></center>

<ul>
<li><p>对于数组类型，每一维度使用一个前置的“[”字符描述，如果是二维数组，那么就有两个“[”符号。比如“java.lang.String[][]”会被记录成“[[Ljava.lang.String;”</p>
</li>
<li><p>对于方法，则是按照县参数列表后返回值的顺序进行描述的。比如方法int inc(int a,int[] b,char[][] c,int d)的描述符是“(I[I[[CI)I”</p>
</li>
</ul>
<h3 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h3><ul>
<li><p>JVM中堆方法表的描述与字段表是一致的，包括了：访问标志、名称索引、描述符索引、属性表集合。方法表单额结构与字段表是一致的，区别在于访问标志的不同.在方法中不能了用volatile和transient关键字修饰，所以这两个标志不能用在方法表中。在方法中添加了字段不能使用的访问标志，比如方法可以使用synchronized、native、strictfp、abstract关键字修饰，所以在方法表中就增加了相应的访问标志</p>
</li>
<li><p>要注意的是，如果父类方法没有在子类中重写，那么在方法中不会自动出现来自父类的方法信息。同样的，有可能添加编译器自动增加的方法，比如方法</p>
</li>
</ul>
<h3 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h3><ul>
<li>前面的Class文件、字段表和方法表都可以携带自己的属性信息，这个信息用属性表进行描述，用于描述某些场景专有的信息。在属性表中没有类似Class文件的数据项目类型和顺序的严格要求，只要新的属性不与现有的属性名重复，任何人都可以向属性表中写入自己定义的属性信息</li>
</ul>
<h4 id="Code属性"><a href="#Code属性" class="headerlink" title="Code属性"></a>Code属性</h4><ul>
<li>Java程序方法体中的代码经过javac编译最终编译成的字节码指令就保存在Code属性中。但是并非所有的方法表都必须存在这个属性。Code属性是Class文件中最重要的一个属性，如果把一个Java程序中的信息分为代码（Code）和元数据（Metadata，包括类、字段、方法定义及其其他信息）两部分，那么在整个Class文件中，Code属性用于描述代码，所有其他的数据项目都用于描述元数据</li>
</ul>
<h4 id="Exceptions属性"><a href="#Exceptions属性" class="headerlink" title="Exceptions属性"></a>Exceptions属性</h4><ul>
<li>这个属性的作用是列举出方法中可能抛出的受查异常（Checked Exception），也就是描述throws 后的列举的异常</li>
</ul>
<h4 id="LineNumberTable属性"><a href="#LineNumberTable属性" class="headerlink" title="LineNumberTable属性"></a>LineNumberTable属性</h4><ul>
<li>主要用于描述Java源代码行号与字节码行号之间的对应关系。这个属性也不是必须的。如果没有这个属性，对程序的直接影响就是当抛出异常的时候无法显示对应的行号；并且在调试的时候无法通过设置断点的方法是调试程序</li>
</ul>
<h4 id="LocalVariableTable属性"><a href="#LocalVariableTable属性" class="headerlink" title="LocalVariableTable属性"></a>LocalVariableTable属性</h4><ul>
<li>用于描述栈帧中局部变量表中的变量与Java源码中定义的变量的之间的关系。也不属于必须的属性。如果没有这个属性，产生的直接影响就是当别人引用这个方法的时候，所有的参数名称都会丢失，IDE将会使用诸如args0、args1之类的参数进行显示。自然，当调试程序的时候，显示的参数名称是不可知的</li>
</ul>
<h4 id="SourceFile属性"><a href="#SourceFile属性" class="headerlink" title="SourceFile属性"></a>SourceFile属性</h4><ul>
<li>用于记录这个Class文件的源码文件名称。如果不使用这个属性，那么当抛出异常的时候，堆栈中将不会显示出错代码所属的文件名</li>
</ul>
<h4 id="ConstantValue属性"><a href="#ConstantValue属性" class="headerlink" title="ConstantValue属性"></a>ConstantValue属性</h4><p>作用是通知虚拟机自动为静态变量赋值。要注意的是，只有被static关键字修饰的额变量才可以使用这个属性（类变量）。对于非类变量，初始化是在方法中进行的；对于类变量可以选择两种方式进行变量的初始化：一是在类构造器方法中使用；二是是ConstantValue属性。目前Sun Hotspot的选择原则是：如果一个变量同时使用static和final关键字修饰，并且这个变量是基本数据类型或者java.lang.String类型的话，就使用ConstantValue属性进行初始化。如果没有被final修饰或者并非是基本数据类型，那么将会选择使用方法进行初始化</p>
<h4 id="InnerClass属性"><a href="#InnerClass属性" class="headerlink" title="InnerClass属性"></a>InnerClass属性</h4><ul>
<li>这个属性主要用于记录内部类与宿主类之间的关联关系</li>
</ul>
<h4 id="Deprecated以及Synthetic属性"><a href="#Deprecated以及Synthetic属性" class="headerlink" title="Deprecated以及Synthetic属性"></a>Deprecated以及Synthetic属性</h4><ul>
<li><p>这两个属性都属于标志类型的布尔属性，只存在有没有的区别。</p>
</li>
<li><p>Deprecated属性用于表示某个类、字段或者方法，已经被程序作者定为不再推荐使用，可以通过注解@deprecated实现</p>
</li>
<li><p>Synthetic属性代表此字段并不是由Java源码产生的，而是通过编译器自行添加的</p>
</li>
</ul>
<h4 id="StackMapTable属性"><a href="#StackMapTable属性" class="headerlink" title="StackMapTable属性"></a>StackMapTable属性</h4><ul>
<li>该属性的目的在于代替以前比较消耗性能的基于数据流分析的类型推导验证器</li>
</ul>
<h4 id="Signature属性"><a href="#Signature属性" class="headerlink" title="Signature属性"></a>Signature属性</h4><ul>
<li>这个属性是专门用来记录泛型类型的，因为在Java语言采用的是擦除法实现的泛型，在字节码（Code属性）中，泛型信息编译之后会被擦除。擦除法的优点是能够节省泛型所占的内存空间，缺点是在运行期间无法通过反射得到泛型信息，而Signature属性则弥补了这一缺陷。现在的Java反射API已经能够得到泛型信息，功劳就在于这个属性</li>
</ul>
<h4 id="BootstrapMethods属性"><a href="#BootstrapMethods属性" class="headerlink" title="BootstrapMethods属性"></a>BootstrapMethods属性</h4><ul>
<li>这个属性用于保存invokedynamic指令引用的引导方法限定符。（该指令用于在运行时动态解析出调用点限定符所引用的方法，并执行该方法）</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NexT主题配置]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/16/%E5%8D%9A%E5%AE%A2/NexT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="添加站内搜索"><a href="#添加站内搜索" class="headerlink" title="添加站内搜索"></a>添加站内搜索</h3><ul>
<li><p>添加百度/谷歌/本地 自定义站点内容搜索</p>
</li>
<li><p>安装hexo-generator-search</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
<ul>
<li>在站点的 _config.yml中增加</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java内存区域与内存溢出]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/16/JVM/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</url>
      <content type="html"><![CDATA[<h3 id="Java内存区域"><a href="#Java内存区域" class="headerlink" title="Java内存区域"></a>Java内存区域</h3><p><center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA.png" alt=""></center><br><a id="more"></a></p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><ul>
<li><p>当前线程所执行的字节码的行号指示器</p>
</li>
<li><p>当前线程私有</p>
</li>
<li><p>不会出现OutOfMemoryError情况</p>
</li>
</ul>
<h3 id="java虚拟机栈"><a href="#java虚拟机栈" class="headerlink" title="java虚拟机栈"></a>java虚拟机栈</h3><ul>
<li><p>线程私有，生命周期与线程相同</p>
</li>
<li><p>java方法执行的内存模型，每个方法执行的同时都会创建一个栈帧，存储局部变量表(基本类型、对象引用)、操作数栈、动态链接、方法出口等信息</p>
</li>
<li><p>在编译程序代码时，栈帧中需要多大的局部变量表、多深的操作数栈都已经完全确定了，并且写入了方法表的Code属性之中。因此，一个栈帧需要分配多少内存，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现</p>
</li>
<li><p>StackOverflowError异常：当线程请求的栈深度大于虚拟机所允许的深度</p>
</li>
<li><p>OutOfMemoryError异常：如果栈的扩展时无法申请到足够的内存</p>
</li>
</ul>
<h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><ul>
<li><p>局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量</p>
</li>
<li><p>存放的数据的类型是编译期可知的各种基本数据类型、对象引用（reference）和returnAddress类型（它指向了一条字节码指令的地址）</p>
</li>
<li><p>局部变量表所需的内存空间在编译期间完成分配，即在Java程序被编译成Class文件时，就确定了所需分配的最大局部变量表的容量</p>
</li>
<li><p>当进入一个方法时，这个方法需要在栈中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小</p>
</li>
</ul>
<h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><ul>
<li><p>操作数栈又称为操作栈 </p>
</li>
<li><p>操作数栈的最大深度在编译的时候确定</p>
</li>
<li><p>Java虚拟机的解释执行引擎称为“基于栈的执行引擎”，其中所指的“栈”就是操作数栈。因此我们也称Java虚拟机是基于栈的，这点不同于Android虚拟机，Android虚拟机是基于寄存器的</p>
</li>
<li><p>基于栈的指令集最主要的优点是可移植性强，主要的缺点是执行速度相对会慢些；而由于寄存器由硬件直接提供，所以基于寄存器指令集最主要的优点是执行速度快，主要的缺点是可移植性差</p>
</li>
</ul>
<h4 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h4><ul>
<li>每个栈帧都包含一个指向运行时常量池（在方法区中，后面介绍）中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。Class文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如final、static域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接</li>
</ul>
<h4 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h4><ul>
<li>当一个方法被执行后，有两种方式退出该方法：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者的PC计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息</li>
</ul>
<ul>
<li>方法退出的过程实际上等同于把当前栈帧出站，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令</li>
</ul>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><ul>
<li>与虚拟机栈相似，主要为虚拟机使用到的Native方法服务，在HotSpot虚拟机中直接把本地方法栈与虚拟机栈二合一</li>
</ul>
<h3 id="Java堆-Java-Heap"><a href="#Java堆-Java-Heap" class="headerlink" title="Java堆(Java Heap)"></a>Java堆(Java Heap)</h3><ul>
<li><p>Java Heap是Java虚拟机所管理的内存中最大的一块，它是所有线程共享的一块内存区域</p>
</li>
<li><p>几乎所有的对象实例和数组都在这类分配内存 </p>
</li>
<li><p>Java Heap是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆” </p>
</li>
<li><p>Java堆只要求在逻辑上是连续的</p>
</li>
<li><p>在虚拟机启动时创建</p>
</li>
<li><p>OutOfMemoryError异常：当在堆中没有内存完成实例分配，且堆也无法再扩展时</p>
</li>
</ul>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ul>
<li><p>线程间共享</p>
</li>
<li><p>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</p>
</li>
<li><p>OutOfMemoryError异常：当方法区无法满足内存的分配需求时</p>
</li>
</ul>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><ul>
<li><p>方法区的一部分</p>
</li>
<li><p>用于存放编译期生成的各种字面量与符号引用</p>
</li>
<li><p>OutOfMemoryError异常：当常量池无法再申请到内存时</p>
</li>
</ul>
<h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><ul>
<li><p>NIO可以使用Native函数库直接分配堆外内存，堆中的DirectByteBuffer对象作为这块内存的引用进行操作</p>
</li>
<li><p>大小不受Java堆大小的限制，受本机(服务器)内存限制</p>
</li>
<li><p>OutOfMemoryError异常：系统内存不足时</p>
</li>
</ul>
<h3 id="HotSpot虚拟机"><a href="#HotSpot虚拟机" class="headerlink" title="HotSpot虚拟机"></a>HotSpot虚拟机</h3><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><p>虚拟机遇到一条new指令时，首先将去检查这个对象的参数是否在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，必须先执行类的加载过程。<br>在类加载检查通过后，虚拟机将为新生对象分配内存。对象所需内存大小再类加载完成后便可确定。内存分配可以采用“指针碰撞”与“空闲列表”的方式</p>
<h4 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h4><p>java程序需要通过栈上的reference数据来操作堆上的具体对象。访问方式有使用句柄和直接指针两种。</p>
<ul>
<li>句柄访问 java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息</li>
</ul>
<p><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BAvern%E9%80%9A%E8%BF%87%E5%8F%A5%E6%9F%84%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1.jpg" alt=""></p>
<ul>
<li>直接指针访问 java堆对象的布局中必须考虑如何放置访问类型数据的相关信息，reference中存储的就是对象地址</li>
</ul>
<p><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BAvern%E9%80%9A%E8%BF%87%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1.jpg" alt=""></p>
<h4 id="两种访问方式的比较"><a href="#两种访问方式的比较" class="headerlink" title="两种访问方式的比较"></a>两种访问方式的比较</h4><ul>
<li><p>使用句柄访问最大的好处是reference中存储的是稳定的句柄地址，在对象被移动（GC时移动对象是很普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要修改</p>
</li>
<li><p>使用直接指针访问方式的最大好处是速度更快，它节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本</p>
</li>
<li><p>HotSpot虚拟机采用指针访问方式进行对象访问，从整个软件开发范围看，各种语言和框架使用句柄来访问的情况也非常常见</p>
</li>
</ul>
<h3 id="内存溢出测试方法"><a href="#内存溢出测试方法" class="headerlink" title="内存溢出测试方法"></a>内存溢出测试方法</h3><table>
<thead>
<tr>
<th>内存区域</th>
<th style="text-align:left">内存溢出的测试方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>Java堆</td>
<td style="text-align:left">无限循环地new对象出来，在List中保存引用，以不被垃圾收集器回收。另外，该区域也有可能发生内存泄露（Memory Leak），出现问题时，要注意区别</td>
</tr>
<tr>
<td>方法区</td>
<td style="text-align:left">生成大量的动态类，或无线循环调用String的intern()方法产生不同的String对象实例，并在List中保存其引用，以不被垃圾收集器回收。后者测试常量池，前者测试方法区的非常量池部分</td>
</tr>
<tr>
<td>虚拟机栈和本地方法栈</td>
<td style="text-align:left">单线程：递归调用一个简单的方法（如不断累积的方法）会抛出StackOverError <br><br>多线程：无限循环地创建线程，并为每个线程无限循环地增加内存，会抛出OutOfMemoryError</td>
</tr>
</tbody>
</table>
<ul>
<li>这里有一点要重点说明，在多线程情况下，给每个线程的栈分配的内存越大，反而越容易产生内存溢出异常</li>
</ul>
<h3 id="OutOfMemoryError异常实例"><a href="#OutOfMemoryError异常实例" class="headerlink" title="OutOfMemoryError异常实例"></a>OutOfMemoryError异常实例</h3><ul>
<li><p>内存泄露，对象已经死了，无法通过垃圾收集器进行自动回收，通过找出泄露的代码位置和原因，才好确定解决方案</p>
</li>
<li><p>内存溢出，内存中的对象都还必须存活着，这说明Java堆分配空间不足，检查堆设置大小（-Xmx与-Xms），检查代码是否存在对象生命周期太长、持有状态时间过长的情况</p>
</li>
</ul>
<h4 id="Java堆溢出"><a href="#Java堆溢出" class="headerlink" title="Java堆溢出"></a>Java堆溢出</h4><ul>
<li><p>Java堆用于存储对象实例，我们只要不断创建对象，并且保证GC Roots到对象之间有可达路径来避免GC清除这些对象，就会在对象数量到达最大堆的容量限制后产生内存溢出异常</p>
</li>
<li><p>VM Args: -Xms10m -Xmx10m</p>
</li>
<li><p>-XX:+HeapDumpOnOutOfMemoryError</p>
</li>
<li><p>XX:+HeapDumpOnOutOfMemoryError这个参数可以让虚拟机在出现内存溢出异常时Dump出当前的内存堆转储快照以便事后进行分析。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList; </div><div class="line"><span class="keyword">import</span> java.util.List; </div><div class="line"><span class="comment">/**</span></div><div class="line"> * VM Args: -Xms10m -Xmx10m -XX:+HeapDumpOnOutOfMemoryError</div><div class="line"> */ </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapOOM</span> </span>&#123; </div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span></span>&#123; </div><div class="line">        <span class="keyword">private</span> String name; </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OOMObject</span><span class="params">(String name)</span> </span>&#123; </div><div class="line">            <span class="keyword">this</span>.name = name; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">        List&lt;OOMObject&gt; list = <span class="keyword">new</span> ArrayList&lt;OOMObject&gt;(); </div><div class="line">        <span class="keyword">long</span> i = <span class="number">1</span>; </div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123; </div><div class="line">            list.add(<span class="keyword">new</span> OOMObject(<span class="string">"IpConfig..."</span> + i++)); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>抛出的异常：</li>
</ul>
<blockquote>
<p>Dumping heap to java_pid27828.hprof …<br>Heap dump file created [14123367 bytes in 0.187 secs]<br>Exception in thread “main” java.lang.OutOfMemoryError: Java heap space<br>at java.lang.AbstractStringBuilder.&lt;init&gt;(AbstractStringBuilder.java:45)<br>at java.lang.StringBuilder.&lt;init&gt;(StringBuilder.java:92)<br>at com.baoxian.HeapOOM.main(HeapOOM.java:22)</p>
</blockquote>
<p>注：出现Java堆内存溢出时，异常堆栈信息java.lang.OutOfMemoryError后面会紧跟着JavaHeapSpace。</p>
<p>要解决这个异常，一般手段是首先通过内存映像分析工具比如Eclipse Memory Analyzer对dump出来的堆转储快照进行分析，重点是确认内存中对象是否是必要的，也就是要弄清楚到底是出现了内存泄露Memory Leak还是内存溢出Memory Overflow。</p>
<p>如果是内存泄露，可进一步通过工具查看泄露对象到GC Roots的引用链。于是就能找到泄露对象时通过怎样的路径与GC Roots相关联并导致垃圾收集器无法自动回收它们。掌握了泄露对象的类型信息，以及GC Roots引用链的信息，就可以比较准确的定位出泄露代码的位置了。</p>
<p>如果不存在泄露，那么就该修改-Xms和-Xms堆参数看能否加大点。</p>
<h4 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h4><ul>
<li>-Xoss参数设置本地方法栈大小，对于HotSpot没用。栈容量只由-Xss参数设定</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * VM Args: -Xss128k</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */ </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVMStackSOF</span> </span>&#123; </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stackLength = <span class="number">1</span>; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeak</span><span class="params">()</span> </span>&#123; </div><div class="line">        stackLength++; </div><div class="line">        stackLeak(); </div><div class="line">    &#125; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable</span>&#123; </div><div class="line">        JavaVMStackSOF oom = <span class="keyword">new</span> JavaVMStackSOF(); </div><div class="line">        <span class="keyword">try</span> &#123; </div><div class="line">            oom.stackLeak(); </div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123; </div><div class="line">            System.out.println(<span class="string">"stack length: "</span> + oom.stackLength); </div><div class="line">            <span class="keyword">throw</span> e; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>抛出异常：</li>
</ul>
<blockquote>
<p>stack length: 1007<br>Exception in thread “main” java.lang.StackOverflowError<br>at com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)<br>at com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)<br>at com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)<br>at com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)</p>
</blockquote>
<h4 id="运行时常量池溢出"><a href="#运行时常量池溢出" class="headerlink" title="运行时常量池溢出"></a>运行时常量池溢出</h4><ul>
<li>运行时常量池分配在方法区内，可以通过-XX:PermSize和-XX:MaxPermSize限制方法区大小，从而间接限制其中常量池的容量。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList; </div><div class="line"><span class="keyword">import</span> java.util.List; </div><div class="line"><span class="comment">/**</span></div><div class="line"> * VM Args: -XX:PermSize=10M -XX:MaxPermSize=10M</div><div class="line"> */ </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeConstantPoolOOM</span> </span>&#123; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">        <span class="comment">// 使用List保持着常量池引用，避免Full GC回收常量池行为 </span></div><div class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;;(); </div><div class="line">        <span class="comment">// 10MB的PermSize在integer范围内足够产生OOM了 </span></div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>; </div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123; </div><div class="line">            list.add(String.valueOf(i++).intern()); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>异常：</li>
</ul>
<blockquote>
<p>Exception in thread “main” java.lang.OutOfMemoryError: PermGen space<br>at java.lang.String.intern(Native Method)<br>at com.baoxian.RuntimeConstantPoolOOM.main(RuntimeConstantPoolOOM.java:18)</p>
</blockquote>
<ul>
<li>运行时常量池溢出，在java.lang.OutOfMemoryError后面紧跟着是PermGen space</li>
</ul>
<h4 id="方法区溢出"><a href="#方法区溢出" class="headerlink" title="方法区溢出"></a>方法区溢出</h4><ul>
<li><p>方法区用于存放Class的相关信息，如类名、访问修饰符、常量池、字段描述符、方法描述等。对于这个区域的测试，基本的思路是运行时产生大量的类去填满方法区，直到溢出。比如动态代理会生成动态类</p>
</li>
<li><p>使用CGLib技术直接操作字节码运行，生成大量的动态类。当前很多主流框架如Spring和Hibernate对类进行增强都会使用CGLib这类字节码技术，增强的类越多，就需要越大的方法区来保证动态生成的Class可以加载入内存</p>
</li>
<li><p>异常：</p>
</li>
</ul>
<blockquote>
<p>Exception in thread “main” java.lang.OutOfMemoryError: PermGen space at java.lang.String.intern(Native Method)</p>
</blockquote>
<ul>
<li><p>同样，跟常量池一样，都是PermGen space字符串出现</p>
</li>
<li><p>方法区溢出也是一种常见的内存溢出异常，一个类如果要被垃圾收集器回收，判定条件是非常苛刻的。在经常动态生成大量Class的应用中，需要特别注意类的回收状况。这类场景除了上面提到的程序使用GCLib字节码技术外，常见的还有：大量JSP或动态产生的JSP文件的应用（JSP第一次运行时需要编译为Java类）、基于OSGi应用等</p>
</li>
</ul>
<h4 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h4><ul>
<li><p>DirectMemory容量可以通过-XX:MaxDirectMemorySize指定，如果不指定，则默认与Java堆的最大值-Xmx指定一样。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * VM Args: -Xmx20M -XX:MaxDirectMemorySize=10M</div><div class="line"> */ </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectMemoryOOM</span> </span>&#123; </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">        Field unsafeField = Unsafe.class.getDeclaredFields()[<span class="number">0</span>]; </div><div class="line">        unsafeField.setAccessible(<span class="keyword">true</span>); </div><div class="line">        Unsafe unsafe = (Unsafe) unsafeField.get(<span class="keyword">null</span>); </div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123; </div><div class="line">            unsafe.allocateMemory(_1MB); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在OutOfMemoryError后面不会有任何东西了，这就是DirectMemory内存溢出了</p>
</li>
</ul>
<h3 id="Java中获取JVM内存使用情况"><a href="#Java中获取JVM内存使用情况" class="headerlink" title="Java中获取JVM内存使用情况"></a>Java中获取JVM内存使用情况</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.text.DecimalFormat;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 显示JVM总内存，JVM最大内存和总空闲内存</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayAvailableMemory</span><span class="params">()</span> </span>&#123;</div><div class="line"> </div><div class="line">DecimalFormat df = <span class="keyword">new</span> DecimalFormat(“<span class="number">0.00</span>″) ;</div><div class="line"> </div><div class="line"><span class="comment">//显示JVM总内存</span></div><div class="line"><span class="keyword">long</span> totalMem = Runtime.getRuntime().totalMemory();</div><div class="line"> </div><div class="line">System.out.println(df.format(totalMem <span class="number">1000000F</span>) + ” MB”);</div><div class="line"> </div><div class="line"><span class="comment">//显示JVM尝试使用的最大内存</span></div><div class="line"><span class="keyword">long</span> maxMem = Runtime.getRuntime().maxMemory();</div><div class="line">System.out.println(df.format(maxMem <span class="number">1000000F</span>) + ” MB”);</div><div class="line"> </div><div class="line"><span class="comment">//空闲内存</span></div><div class="line"><span class="keyword">long</span> freeMem = Runtime.getRuntime().freeMemory();</div><div class="line">System.out.println(df.format(freeMem <span class="number">1000000F</span>) + ” MB”);</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* Starts the program</div><div class="line">* <span class="doctag">@param</span> args the command line arguments</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">new</span> Main().displayAvailableMemory();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[有趣代码注释]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/12/%E9%80%9A%E7%94%A8/%E6%9C%89%E8%B6%A3%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A/</url>
      <content type="html"><![CDATA[<h3 id="佛祖保佑"><a href="#佛祖保佑" class="headerlink" title="佛祖保佑"></a>佛祖保佑</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                   _ooOoo_</div><div class="line">                  o8888888o</div><div class="line">                  88" . "88</div><div class="line">                  (| -_- |)</div><div class="line">                  O\  =  /O</div><div class="line">               ____/`---'\____</div><div class="line">             .'  \\|     |//  `.</div><div class="line">            /  \\|||  :  |||//  \</div><div class="line">           /  _||||| -:- |||||-  \</div><div class="line">           |   | \\\  -  /// |   |</div><div class="line">           | \_|  ''\---/''  |   |</div><div class="line">           \  .-\__  `-`  ___/-. /</div><div class="line">         ___`. .'  /--.--\  `. . __</div><div class="line">      ."" '&lt;  `.___\_&lt;|&gt;_/___.'  &gt;'"".</div><div class="line">     | | :  `- \`.;`\ _ /`;.`/ - ` : | |</div><div class="line">     \  \ `-.   \_ __\ /__ _/   .-` /  /</div><div class="line">======`-.____`-.___\_____/___.-`____.-'======</div><div class="line">                   `=---='</div><div class="line">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</div><div class="line">         佛祖保佑       永无BUG</div><div class="line">*/</div><div class="line"><span class="comment">//          佛曰:  </span></div><div class="line"><span class="comment">//                  写字楼里写字间，写字间里程序员；  </span></div><div class="line"><span class="comment">//                  程序人员写程序，又拿程序换酒钱。  </span></div><div class="line"><span class="comment">//                  酒醒只在网上坐，酒醉还来网下眠；  </span></div><div class="line"><span class="comment">//                  酒醉酒醒日复日，网上网下年复年。  </span></div><div class="line"><span class="comment">//                  但愿老死电脑间，不愿鞠躬老板前；  </span></div><div class="line"><span class="comment">//                  奔驰宝马贵者趣，公交自行程序员。  </span></div><div class="line"><span class="comment">//                  别人笑我忒疯癫，我笑自己命太贱；  </span></div><div class="line"><span class="comment">//                  不见满街漂亮妹，哪个归得程序员？</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="神兽草泥马"><a href="#神兽草泥马" class="headerlink" title="神兽草泥马"></a>神兽草泥马</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">*</div><div class="line">*          ┌─┐       ┌─┐</div><div class="line">*       ┌──┘ ┴───────┘ ┴──┐</div><div class="line">*       │                 │</div><div class="line">*       │       ───       │</div><div class="line">*       │  ─┬┘       └┬─  │</div><div class="line">*       │                 │</div><div class="line">*       │       ─┴─       │</div><div class="line">*       │                 │</div><div class="line">*       └───┐         ┌───┘</div><div class="line">*           │         │</div><div class="line">*           │         │</div><div class="line">*           │         │</div><div class="line">*           │         └──────────────┐</div><div class="line">*           │                        │</div><div class="line">*           │                        ├─┐</div><div class="line">*           │                        ┌─┘</div><div class="line">*           │                        │</div><div class="line">*           └─┐  ┐  ┌───────┬──┐  ┌──┘</div><div class="line">*             │ ─┤ ─┤       │ ─┤ ─┤</div><div class="line">*             └──┴──┘       └──┴──┘</div><div class="line">*                 神兽保佑</div><div class="line">*                 代码无BUG!</div><div class="line">*/</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *   ┏┓　　　┏┓</div><div class="line"> * ┏┛┻━━━┛┻┓</div><div class="line"> * ┃　　　　　　　┃</div><div class="line"> * ┃　　　━　　　┃</div><div class="line"> * ┃　┳┛　┗┳　┃</div><div class="line"> * ┃　　　　　　　┃</div><div class="line"> * ┃　　　┻　　　┃</div><div class="line"> * ┃　　　　　　　┃</div><div class="line"> * ┗━┓　　　┏━┛</div><div class="line"> *    ┃　　　┃   </div><div class="line"> *    ┃　　　┃   </div><div class="line"> *    ┃　　　┗━━━┓</div><div class="line"> *    ┃　　　　　　　┣┓</div><div class="line"> *    ┃　　　　　　　┏┛</div><div class="line"> *    ┗┓┓┏━┳┓┏┛</div><div class="line"> *      ┃┫┫　┃┫┫</div><div class="line"> *      ┗┻┛　┗┻┛</div><div class="line"> *        神兽保佑 </div><div class="line"> *        代码无BUG! </div><div class="line"> */</div></pre></td></tr></table></figure>
<h3 id="胜利手势"><a href="#胜利手势" class="headerlink" title="胜利手势"></a>胜利手势</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//                      d*##$.</span></div><div class="line"><span class="comment">// zP"""""$e.           $"    $o</span></div><div class="line"><span class="comment">//4$       '$          $"      $</span></div><div class="line"><span class="comment">//'$        '$        J$       $F</span></div><div class="line"><span class="comment">// 'b        $k       $&gt;       $</span></div><div class="line"><span class="comment">//  $k        $r     J$       d$</span></div><div class="line"><span class="comment">//  '$         $     $"       $~</span></div><div class="line"><span class="comment">//   '$        "$   '$E       $</span></div><div class="line"><span class="comment">//    $         $L   $"      $F ...</span></div><div class="line"><span class="comment">//     $.       4B   $      $$$*"""*b</span></div><div class="line"><span class="comment">//     '$        $.  $$     $$      $F</span></div><div class="line"><span class="comment">//      "$       R$  $F     $"      $</span></div><div class="line"><span class="comment">//       $k      ?$ u*     dF      .$</span></div><div class="line"><span class="comment">//       ^$.      $$"     z$      u$$$$e</span></div><div class="line"><span class="comment">//        #$b             $E.dW@e$"    ?$</span></div><div class="line"><span class="comment">//         #$           .o$$# d$$$$c    ?F</span></div><div class="line"><span class="comment">//          $      .d$$#" . zo$&gt;   #$r .uF</span></div><div class="line"><span class="comment">//          $L .u$*"      $&amp;$$$k   .$$d$$F</span></div><div class="line"><span class="comment">//           $$"            ""^"$$$P"$P9$</span></div><div class="line"><span class="comment">//          JP              .o$$$$u:$P $$</span></div><div class="line"><span class="comment">//          $          ..ue$"      ""  $"</span></div><div class="line"><span class="comment">//         d$          $F              $</span></div><div class="line"><span class="comment">//         $$     ....udE             4B</span></div><div class="line"><span class="comment">//          #$    """"` $r            @$</span></div><div class="line"><span class="comment">//           ^$L        '$            $F</span></div><div class="line"><span class="comment">//             RN        4N           $</span></div><div class="line"><span class="comment">//              *$b                  d$</span></div><div class="line"><span class="comment">//               $$k                 $F</span></div><div class="line"><span class="comment">//               $$b                $F</span></div><div class="line"><span class="comment">//                 $""               $F</span></div><div class="line"><span class="comment">//                 '$                $</span></div><div class="line"><span class="comment">//                  $L               $</span></div><div class="line"><span class="comment">//                  '$               $</span></div><div class="line"><span class="comment">//                   $               $</span></div></pre></td></tr></table></figure>
<h3 id="围棋棋盘"><a href="#围棋棋盘" class="headerlink" title="围棋棋盘"></a>围棋棋盘</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//                             _______________________________________  </span></div><div class="line"><span class="comment">//                            /  ___________________________________  \</span></div><div class="line"><span class="comment">//     _--""""--_            /  /_/_/_/_/_|_|_|_|_|_|_|_|_|_\_\_\_\_\  \</span></div><div class="line"><span class="comment">//    /          \          /  /_/_/_/_J__L_L_L_|_|_|_J_J_J__L_\_\_\_\  \</span></div><div class="line"><span class="comment">//   /\          /\        /  /_/_/_J__L_J__L_L_|_|_|_J_J__L_J__L_\_\_\  \</span></div><div class="line"><span class="comment">//   L ""-____-"" J       /  /_/_J__L_J__L_J_J__L_|_J__L_L_J__L_J__L_\_\  \</span></div><div class="line"><span class="comment">//   \            /      /  /_/__L_/__L_J__L_J__L_|_J__L_J__L_J__\_J__\_\  \</span></div><div class="line"><span class="comment">//    \_        _/      /  /_J__/_J__/__L_J__|__L_|_J__|__L_J__\__L_\__L_\  \</span></div><div class="line"><span class="comment">//  _--"""""--_"       /  /  F /  F J  J  |  F J  |  F J  |  F  F J  \ J  \  \</span></div><div class="line"><span class="comment">// /           \      /  /--/-J--/--L--|--L-J--J--|--L--L-J--|--J--\--L-\--\  \</span></div><div class="line"><span class="comment">///\           /\    /  /__/__L_J__J___L_J__J__|__|__|__L__L_J___L__L_J__\__\  \</span></div><div class="line"><span class="comment">//L ""-_____-"" J   /  /  /  /  F  F  J  J  |  |  |  |  |  F  F  J  J  \  \  \  \</span></div><div class="line"><span class="comment">//\             /  /  /--/--/--/--J---L--|--|--|--o--|--|--|--J---L--\--\--\--\  \</span></div><div class="line"><span class="comment">// \_         _/  /  /__/__J__J___L__J___L__L__L__|__J__J__J___L__J___L__L__\__\  \</span></div><div class="line"><span class="comment">//   "--___--"   /  /  /   F  F  J   F  J  J   F  |  J   F  F  J   F  J  J   \  \  \</span></div><div class="line"><span class="comment">//              /  /--/---/--J---L--J---L--|--J---|---L--|--J---L--J---L--\---\--\  \</span></div><div class="line"><span class="comment">//             /  /__J___/___L__/___L__J___L__J___|___L__J___L__J___\__J___\___L__\  \</span></div><div class="line"><span class="comment">//            /  /   F  J   /  J   J   |  J   J   |   F   F  |   F   F  \   F  J   \  \</span></div><div class="line"><span class="comment">//           /  /---/---L--J---L---L---L--|---|---|---|---|--J---J---J---L--J---\---\  \</span></div><div class="line"><span class="comment">//          /  /___/___/___L__J___J___J___|___|___|___|___|___L___L___L__J___\___\___\  \</span></div><div class="line"><span class="comment">//         /  /   /   /   /   F   F   F   F   F   |   J   J   J   J   J   \   \   \   \  \</span></div><div class="line"><span class="comment">//        /  /___/___J___J___J___J___J____L___L___|___J___J____L___L___L___L___L___\___\  \</span></div><div class="line"><span class="comment">//       /  /   /    F   F   F   |   |   J    F   |   J    F   |   |   J   J   J    \   \  \</span></div><div class="line"><span class="comment">//      /  /___J____/___/___J____L___L___|___J____|____L___|___J___J____L___\___\____L___\  \</span></div><div class="line"><span class="comment">//     /  /    F   /   J    F   J   J    |   J    |    F   |    F   F   J    F   \   J    \  \</span></div><div class="line"><span class="comment">//    /  /____/___J____L___/____L___|____L___|____|____|___J____|___J____\___J____L___\____\  \</span></div><div class="line"><span class="comment">//   /  /    /    F   /   J    J    F   J    F    |    J    F   J    F    F   \   J    \    \  \</span></div><div class="line"><span class="comment">//  /  /____/____/___J____L____|____L___J____L____|____J____L___J____|____J____L___\____\____\  \</span></div><div class="line"><span class="comment">// /                                                                                             \</span></div><div class="line"><span class="comment">///_______________________________________________________________________________________________\</span></div><div class="line"><span class="comment">//|                                                                                               |</span></div><div class="line"><span class="comment">//| hs                                                                                            |</span></div><div class="line"><span class="comment">//|_______________________________________________________________________________________________|</span></div></pre></td></tr></table></figure>
<h3 id="书本"><a href="#书本" class="headerlink" title="书本"></a>书本</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//                .-~~~~~~~~~-._       _.-~~~~~~~~~-.</span></div><div class="line"><span class="comment">//            __.'              ~.   .~              `.__</span></div><div class="line"><span class="comment">//          .'//                  \./                  \\`.</span></div><div class="line"><span class="comment">//        .'//                     |                     \\`.</span></div><div class="line"><span class="comment">//      .'// .-~"""""""~~~~-._     |     _,-~~~~"""""""~-. \\`.</span></div><div class="line"><span class="comment">//    .'//.-"                 `-.  |  .-'                 "-.\\`.</span></div><div class="line"><span class="comment">//  .'//______.============-..   \ | /   ..-============.______\\`.</span></div><div class="line"><span class="comment">//.'______________________________\|/______________________________`.</span></div></pre></td></tr></table></figure>
<h3 id="微软金典图标"><a href="#微软金典图标" class="headerlink" title="微软金典图标"></a>微软金典图标</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                       __</div><div class="line">                  ,-~¨^  ^¨-,           _,</div><div class="line">                 /          / ;^-._...,¨/</div><div class="line">                /          / /         /</div><div class="line">               /          / /         /</div><div class="line">              /          / /         /</div><div class="line">             /,.-:''-,_ / /         /</div><div class="line">             _,.-:--._ ^ ^:-._ __../</div><div class="line">           /^         / /¨:.._¨__.;</div><div class="line">          /          / /      ^  /</div><div class="line">         /          / /         /</div><div class="line">        /          / /         /</div><div class="line">       /_,.--:^-._/ /         /</div><div class="line">      ^            ^¨¨-.___.:^  (R) - G33K</div><div class="line">     </div><div class="line">      */</div></pre></td></tr></table></figure>
<h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">          ___                _</div><div class="line">         / __|___  ___  __ _| |___</div><div class="line">        | (_ / _ \/ _ \/ _` |   -_)</div><div class="line">         \___\___/\___/\__, |_\___|</div><div class="line">                       |___/</div><div class="line">         </div><div class="line">        */</div></pre></td></tr></table></figure>
<h3 id="奥运五环"><a href="#奥运五环" class="headerlink" title="奥运五环"></a>奥运五环</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">             _.-"""""-._         _.-"""""-._         _.-"""""-._</div><div class="line">          ,'           `.     ,'           `.     ,'           `.</div><div class="line">         /               \   /               \   /               \</div><div class="line">        |                 | |                 | |                 |</div><div class="line">       |                   |                   |                   |</div><div class="line">       |                   |                   |                   |</div><div class="line">        |             _.-"|"|"-._         _.-"|"|"-._             |</div><div class="line">         \          ,'   /   \   `.     ,'   /   \   `.          /</div><div class="line">          `.       /   ,'     `.   \   /   ,'     `.   \       ,'</div><div class="line">            `-..__|..-'         `-..|_|..-'         `-..|__..-'</div><div class="line">                 |                   |                   |</div><div class="line">                 |                   |                   |</div><div class="line">                  |                 | |                 |</div><div class="line">                   \               /   \               /</div><div class="line">                    `.           ,'     `.           ,'</div><div class="line">                      `-..___..-'         `-..___..-'</div><div class="line"></div><div class="line">        */</div></pre></td></tr></table></figure>
<h3 id="七龙珠比克"><a href="#七龙珠比克" class="headerlink" title="七龙珠比克"></a>七龙珠比克</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                      _.---..._</div><div class="line">                  ./^         ^-._</div><div class="line">                ./^C===.         ^\.   /\</div><div class="line">               .|'     \\        _ ^|.^.|</div><div class="line">          ___.--'_     ( )  .      ./ /||</div><div class="line">         /.---^T\      ,     |     / /|||</div><div class="line">        C'   ._`|  ._ /  __,-/    / /-,||</div><div class="line">             \ \/    ;  /O  / _    |) )|,</div><div class="line">              i \./^O\./_,-^/^    ,;-^,'</div><div class="line">               \ |`--/ ..-^^      |_-^</div><div class="line">                `|  \^-           /|:</div><div class="line">                 i.  .--         / '|.</div><div class="line">                  i   =='       /'  |\._</div><div class="line">                _./`._        //    |.  ^-ooo.._</div><div class="line">         _.oo../'  |  ^-.__./X/   . `|    |#######b</div><div class="line">        d####     |'      ^^^^   /   |    _\#######</div><div class="line">        #####b ^^^^^^^^--. ...--^--^^^^^^^_.d######</div><div class="line">        ######b._         Y            _.d#########</div><div class="line">        ##########b._     |        _.d#############</div><div class="line"></div><div class="line">                                       "Piccolo" no. 2</div><div class="line">                                          (from Dragonball Z)</div><div class="line">                                               --- Steven J. Simmons</div><div class="line">        */</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                             /^_.-^  _  --^=_</div><div class="line">                          ./'-^__    _&gt;=\^^==^-.</div><div class="line">                          |'/^^_/  /^    \ \.^\\\/\</div><div class="line">                         ,|/| '  /'  _____\ `\|.^.|</div><div class="line">                         |'/   /_--^^ .   ^^-./ /||</div><div class="line">                         |/,--^  ,     |     / /||'</div><div class="line">                       ._|/   \ /  __,-/    / /-,||</div><div class="line">                       \ '/    ;  /O  / _    |) )|,</div><div class="line">                        i \./^O\./_,-^/^    ,;-^,'</div><div class="line">                         \ |`--/ ..-^^      |_-^</div><div class="line">                          `|  \^-_,/^Y\      | ^^\</div><div class="line">                          _i.  \".--V_/     /| \. ^\._____...--.&gt;^^^^^^-------...._</div><div class="line">                         /  i   ^--^^     /'|' |\. |./'        |                  ;</div><div class="line">       ___...----/^^^^---|.  `._\  /^   /' |'_/' \ `|         |'               ,/'</div><div class="line">                |'        \   _|^-.__./'__.^^\     .|        ,|            _.-^</div><div class="line">                `\       ,|`_./^^-----^^._    ` ./ /        /^        _.-^^/</div><div class="line">                         |'  ^                  /-^                ./^    /</div><div class="line">       \                 `\_     __.-&lt;       _,/                 ./'     |'</div><div class="line">        `\.        `i       ^^--/._____...--^            .      ./       |.</div><div class="line">          `|        |                                   /       /        `|</div><div class="line"></div><div class="line"></div><div class="line">                                       "Piccolo"</div><div class="line">                                          (from Dragonball Z)</div><div class="line">                                               --- Steven J. Simmons         </div><div class="line">       */</div></pre></td></tr></table></figure>
<h3 id="七龙珠孙悟空"><a href="#七龙珠孙悟空" class="headerlink" title="七龙珠孙悟空"></a>七龙珠孙悟空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                           _</div><div class="line">                           \"-._ _.--"~~"--._</div><div class="line">                            \   "            ^.    ___</div><div class="line">                            /                  \.-~_.-~</div><div class="line">                     .-----'     /\/"\ /~-._      /</div><div class="line">                    /  __      _/\-.__\L_.-/\     "-.</div><div class="line">                   /.-"  \    ( ` \_o&gt;"&lt;o_/  \  .--._\</div><div class="line">                  /'      \    \:     "     :/_/     "`</div><div class="line">                          /  /\ "\    ~    /~"</div><div class="line">                          \ I  \/]"-._ _.-"[</div><div class="line">                       ___ \|___/ ./    l   \___   ___</div><div class="line">                  .--v~   "v` ( `-.__   __.-' ) ~v"   ~v--.</div><div class="line">               .-&#123;   |     :   \_    "~"    _/   :     |   &#125;-.</div><div class="line">              /   \  |           ~-.,___,.-~           |  /   \</div><div class="line">             ]     \ |                                 | /     [</div><div class="line">             /\     \|     :                     :     |/     /\</div><div class="line">            /  ^._  _K.___,^                     ^.___,K_  _.^  \</div><div class="line">           /   /  "~/  "\                           /"  \~"  \   \</div><div class="line">          /   /    /     \ _          :          _ /     \    \   \</div><div class="line">        .^--./    /       Y___________l___________Y       \    \.--^.</div><div class="line">        [    \   /        |        [/    ]        |        \   /    ]</div><div class="line">        |     "v"         l________[____/]________j  -Row   &#125;r"     /</div><div class="line">        &#125;------t          /                       \       /`-.     /</div><div class="line">        |      |         Y                         Y     /    "-._/</div><div class="line">        &#125;-----v'         |         :               |     7-.     /</div><div class="line">        |   |_|          |         l               |    / . "-._/</div><div class="line">        l  .[_]          :          \              :  r[]/_.  /</div><div class="line">         \_____]                     "--.             "-.____/</div><div class="line"></div><div class="line">                                            "Dragonball Z"</div><div class="line">                                                        ---Row</div><div class="line">         </div><div class="line">        */</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                               MMMMM</div><div class="line">                                 MMMMMM</div><div class="line">                                   MMMMMMM</div><div class="line">                                    MMMMMMMM     .</div><div class="line">                                     MMMMMMMMM</div><div class="line">                                     HMMMMMMMMMM</div><div class="line">                                      MMMMMMMMMMMM  M</div><div class="line">                                      MMMMMMMMMMMMM  M</div><div class="line">                                       MMMMMMMMMMMMM  M</div><div class="line">                                       MMMMMMMMMMMMM:</div><div class="line">                                       oMMMMMMMMMMMMMM</div><div class="line">             .MMMMMMMMMMMMMMo           MMMMMMMMMMMMMMM M</div><div class="line">       MMMMMMMMMMMMMMMMMMMMMMMMMMM      MMMMMMMMMMMMMMMM</div><div class="line">         MMMMMMMMMMMMMMMMMMMMMMMMMMMM.  oMMMMMMMMMMMMMMM.M</div><div class="line">           MMMMMMMMMMMMMMMMMMMMMMMMMMMM  MMMMMMMMMMMMMMMM</div><div class="line">             MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">               oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                 MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                   MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM:                     H</div><div class="line">                    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                  .         MMM</div><div class="line">                     MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM              M       MMMMMM</div><div class="line">                      .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM          M   MMMMMMMMMM</div><div class="line">               MM.      MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM       M MMMMMMMMMMMM</div><div class="line">                   MM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM    .MMMMMMMMMMMMMM</div><div class="line">                     MM  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                       MM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">              .MMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMM.MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                 HMMMMMMMMMMMMMMMMMMMMM.MMMMMMMMM.MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                    MMMMMMMMMMMMMMM MMM.oMMMMMMM..MMMMMMMMM:MMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                      MMMMMMMMMMMMMM MM..MMMMMMM...MMMMMMM. MMMMMMMMMMMMMMMMMMMMM</div><div class="line">                        MMMMMMMMMMMMMMM ..MMMMMM...MMMMMM ..MMMMMMMMMMMMMMMMMMM</div><div class="line">                         MMMMMMM:M.MMM.M.. MMMMM M..MMMMM...MMMMMMMMMMMMMMMMMM  MMM</div><div class="line">                           MMMM. .M..MM.M...MMMMMM..MMMMM.. MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM .</div><div class="line">                            MMMM..M....M.....:MMM .MMMMMM..MMMMMMM...MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                             MMM.M.. ...M......MM.MMMMM.......MHM.M  .MMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                        MMMMMMMM..MM. . MMM.....MMMMMM.M.....M ..MM..M MMMMMMMMMMMMMMMMMMM</div><div class="line">                           .MMMMMHMM. ..MMMM. MMM............o..... . .MMMMMMMMMMMMMMM</div><div class="line">                              MMM. M... .........................M..:.MMMMMMMMMMMM</div><div class="line">                                oMMM............ .................M.M.MMMMMMMMM</div><div class="line">                                   .....MM........................ . MMMMMM</div><div class="line">                                  M.....M.....................o.MM.MMMMMMMM.</div><div class="line">                                   M........................M.. ...MMMMMMMMMMMMMo</div><div class="line">                                     :....MMM..............MMM..oMMMMMMM</div><div class="line">                                      M...MMM.............MMMMMMM</div><div class="line">                                         .............:MMMMMMMM</div><div class="line">                                         M..... MMM.....M</div><div class="line">                                         M M.............</div><div class="line">                                         ................M</div><div class="line">                                      ooM.................MM  MoMMMMMoooM</div><div class="line">                                 MMoooM......................MoooooooH..oMM</div><div class="line">                             MHooooMoM.....................MMooooooM........M</div><div class="line">                           oooooooMoooM......... o........MoooooooM............</div><div class="line">                           Mooooooooooo.......M.........Moooooooo:..............M</div><div class="line">                          MooMoooooooooM...M........:Mooooooooooo:..............M</div><div class="line">                         M..oooooooooooo .........Mooooooooooooooo..............M</div><div class="line">                        M...Mooo:oooooooo.M....ooooooooooooooooooo..M...........M</div><div class="line">                         ...oooooMoooooooM..Mooooooooooooo:oooooooM.M...........M.</div><div class="line">                        M...ooooooMoo:ooooMoooooooooooooHoooooooooH:M. ...........:</div><div class="line">                        M..MoooooooMoooooooooooooooooo:ooooooMooooMoM..............M</div><div class="line">                        M..ooooooooooMooooooooooooooHoooooooMooHooooM...............M</div><div class="line">                        ...ooooooooooooooooooo:MooooooooooooooMoMoooM................</div><div class="line">                       M...oooooooooooooooooooooooooooooooooooooMooMM................M</div><div class="line">                       ...MooooooooooooooooooooooooooooooooooooooooMo ................</div><div class="line">                       ...MooooooooooooooooooooooooooooooooooooooooM M................M</div><div class="line">                      M...ooooooooooooooooooooooooooooooooooooooooM   ................M</div><div class="line">                      ...MoooooooooooooooooooooooooooooooooooooooMM   .:...............</div><div class="line">                      .....MooooooooooooooooooooooooooooooooooooMoo       .............M</div><div class="line">                      M...... ooooooooooooooooooooooooooooooooooooM       M..............M</div><div class="line">                      M........MooooMMM MM MM  MMMMMMMMMooooooooM         M...............M</div><div class="line">                      .........HM     M:  MM :MMMMMM          M           M...............</div><div class="line">                     M..........M     M   MoM M                           M................M</div><div class="line">                     M.........:M  MoH  M M M MooooHoooMM.   M             M...............M</div><div class="line">                     M..........Moooo MMooM    oooooMooooooooM              M..............H</div><div class="line">                     M.........MooooM  Mooo  : ooooooMooooMoooM              M........ . .o.M</div><div class="line">                     H..  .....ooooo   oooo  M MooooooooooooooM               M... MMMMMMMMMMM</div><div class="line">                     MMMMMMMMMMooooM M oooo  .  ooooooMooooooooM              .MMMMMMMMMMMMMMM</div><div class="line">                     MMMMMMMMMMooooH : ooooH    oooooooooooooooo               MMMMMMMMMMMMMMM</div><div class="line">                     MMMMMMMMMMoooo    ooooM    Moooooooooooooooo              .MMMMMMMMMMMMMMM</div><div class="line">                     MMMMMMMMMMoooo    ooooM    MooooooooooooooooM              MMMMMMMMMMMMMMM</div><div class="line">                     MMMMMMMMMMoooM    ooooM     ooooooooooooooooo               MMMMMMMMMMM:M</div><div class="line">                     MMMMMMMMMMoooM   MooooM     oooooooooooMoooooo               MH...........</div><div class="line">                      . ......Mooo.   MooooM     oooooooooooooooooo              M............M</div><div class="line">                     M.M......oooo    MooooM     Moooooooooooooooooo:           .........M.....</div><div class="line">                     M.M.....Moooo    MooooM      ooooooooooooooooooM            .M............</div><div class="line">                     .......MooooH    MooooM      oooooooooMoooooooooo          M..o...M..o....M</div><div class="line">                     .o....HMooooM    MooooH      MooooooooMooooooooooM          .:M...M.......M</div><div class="line">                    M..M.....MoooM    :oooo:    .MooooooooHooMoooooooooM         M M... ..oM.M</div><div class="line">                     M...M.:.Mooo. MMMMooooo   oooooooooooMoooooooooooooM          ....M. M</div><div class="line">                      M:M..o.Moooooooooooooo MooooooooooooooMooooooooooooM          .Mo</div><div class="line">                             MooooooooooooooMooooooooooooMoMoooooooooooooo</div><div class="line">                             Mooooooooooooooo:ooooooooooooooooooooooooooooo</div><div class="line">                             ooooooooooooooooMooooooooooMoooooooooooooooooo</div><div class="line">                             ooooooooooooooooMoooooooooooMooooooooooooooooHo</div><div class="line">                             ooMooooooooooooooMoooooooooooooooooooooooooooMoM</div><div class="line">                            MooMoooooooooooooo.ooooooooooooooooooooooooooo:oM</div><div class="line">                            MoooooooooooooooooooooooooooooooooooooooooooooooM</div><div class="line">                            MoooMooooooooooooooMooooooooooooooooooooooooooooo.</div><div class="line">                            MoooMooooooooooooooMoooooooooooooooooooooooooMooooM</div><div class="line">                            MooooooooooooooooooMoooooooooooooooooooooooooMoooooM</div><div class="line">                            MooooMoooooooooooooMoooooooooooooooooooooooooMoHooooM</div><div class="line">                            ooooooMooooooooooooooooooooooooooooooooooooooooMoMoooM</div><div class="line">                           MooooooooooooooooooooMooooooooooooooooooooooooooMoooooH:</div><div class="line">                           MoooooooMooooooooooooMoooooooooooooooooooooooooooooHoooM</div><div class="line">                           MooooooooMoooooooooooMoooooooooooooooooooooooooMoooMooooM</div><div class="line">                           Moooooooooooooooooooooooooooooooooooooooooooooo.oooMooooo</div><div class="line">                           MoooooooooooooooooooooooooooooooooooooooooooooMoooooooooM</div><div class="line">                            MooooooooooooooooooooMoooooooooooooooooooooooooooooooooM</div><div class="line">                             MooooooooooooooooooooMHooooooooooooooooooooMoooo:ooooo</div><div class="line">                              MMooooooooooooooooooMoMHoooooooooooooooooooooooMooooo</div><div class="line">                               MMoooooooooooooooMMooo MMooooooooooooooooooooooooooM</div><div class="line">                               MMMoooooooooooooMooooo  oooooooooooooooooooooMooooo</div><div class="line">                               MooMMoooooooooMoooMMoM  ooooHooooooooooooooooMooooM</div><div class="line">                               MooooMooooooMooooMoooM  MoooooMoooooooooooooMooooo</div><div class="line">                               ooooooMMooooooooMooooM  MoooooooooMooooooooooooooM</div><div class="line">                               HooooooMoooooooMooooM    HoooooooHooMooooooooooooo</div><div class="line">                                oooMoooooooooHoooM         MoooooooooMoooooooooM</div><div class="line">                                 HooooooooooooHM             MooooooooMMoooooooM</div><div class="line">                                  MMMMMMMMMMMMMM                Moooooo:MooooHMM</div><div class="line">                                   MMMMMMM: ...                  MMMMMMMMMMMMMM</div><div class="line">                                  M............M                  MMMMMMMMM ....</div><div class="line">                                  M.MM..........                  M.............M</div><div class="line">                               M ..............MM                 M..............</div><div class="line">                            MMMMM............MMMM                 ..MMMMMMMM ....M</div><div class="line">                          MMMMMMMMMMMMMMMMMMMMMMMM               MMMMMMMMMMMMM...M</div><div class="line">                       .MMMMMMMMMMMMMMMMMMMMMMMMMM               MMMMMMMMMMMMMMMMMM</div><div class="line">                       MMMMMMMMMMMMMMMMMMMMMMMMM                MMMMMMMMMMMMMMMMMMM</div><div class="line">                       :MMMMMMMMMMMMMMMMMMH                     MMMMMMMMMMMMMMMMMMM</div><div class="line">                          By EBEN Jérôme                        MMMMMMMMMMMMMMMMMM</div><div class="line">                                                                MMMMMMMMMMMMMMM</div><div class="line">                                                                 HMMMMMM</div><div class="line">        </div><div class="line">       */</div></pre></td></tr></table></figure>
<h3 id="皮卡丘"><a href="#皮卡丘" class="headerlink" title="皮卡丘"></a>皮卡丘</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">       quu..__</div><div class="line">        $$$b  `---.__</div><div class="line">         "$$b        `--.                          ___.---uuudP</div><div class="line">          `$$b           `.__.------.__     __.---'      $$$$"              .</div><div class="line">            "$b          -'            `-.-'            $$$"              .'|</div><div class="line">              ".                                       d$"             _.'  |</div><div class="line">                `.   /                              ..."             .'     |</div><div class="line">                  `./                           ..::-'            _.'       |</div><div class="line">                   /                         .:::-'            .-'         .'</div><div class="line">                  :                          ::''\          _.'            |</div><div class="line">                 .' .-.             .-.           `.      .'               |</div><div class="line">                 : /'$$|           .@"$\           `.   .'              _.-'</div><div class="line">                .'|$u$$|          |$$,$$|           |  &lt;            _.-'</div><div class="line">                | `:$$:'          :$$$$$:           `.  `.       .-'</div><div class="line">                :                  `"--'             |    `-.     \</div><div class="line">               :##.       ==             .###.       `.      `.    `\</div><div class="line">               |##:                      :###:        |        &gt;     &gt;</div><div class="line">               |#'     `..'`..'          `###'        x:      /     /</div><div class="line">                \                                   xXX|     /    ./</div><div class="line">                 \                                xXXX'|    /   ./</div><div class="line">                 /`-.                                  `.  /   /</div><div class="line">                :    `-  ...........,                   | /  .'</div><div class="line">                |         ``:::::::'       .            |&lt;    `.</div><div class="line">                |             ```          |           x| \ `.:``.</div><div class="line">                |                         .'    /'   xXX|  `:`M`M':.</div><div class="line">                |    |                    ;    /:' xXXX'|  -'MMMMM:'</div><div class="line">                `.  .'                   :    /:'       |-'MMMM.-'</div><div class="line">                 |  |                   .'   /'        .'MMM.-'</div><div class="line">                 `'`'                   :  ,'          |MMM&lt;</div><div class="line">                   |                     `'            |tbap\</div><div class="line">                    \                                  :MM.-'</div><div class="line">                     \                 |              .''</div><div class="line">                      \.               `.            /</div><div class="line">                       /     .:::::::.. :           /</div><div class="line">                      |     .:::::::::::`.         /</div><div class="line">                      |   .:::------------\       /</div><div class="line">                     /   .''               &gt;::'  /</div><div class="line">                     `',:                 :    .'</div><div class="line">                                          `:.:'</div><div class="line"></div><div class="line">        </div><div class="line">       */</div></pre></td></tr></table></figure>
<h3 id="电脑图像"><a href="#电脑图像" class="headerlink" title="电脑图像"></a>电脑图像</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                    ,----------------,              ,---------,</div><div class="line">               ,-----------------------,          ,"        ,"|</div><div class="line">             ,"                      ,"|        ,"        ,"  |</div><div class="line">            +-----------------------+  |      ,"        ,"    |</div><div class="line">            |  .-----------------.  |  |     +---------+      |</div><div class="line">            |  |                 |  |  |     | -==----'|      |</div><div class="line">            |  |  I LOVE DOS!    |  |  |     |         |      |</div><div class="line">            |  |  Bad command or |  |  |/----|`---=    |      |</div><div class="line">            |  |  C:\&gt;_          |  |  |   ,/|==== ooo |      ;</div><div class="line">            |  |                 |  |  |  // |(((( [33]|    ,"</div><div class="line">            |  `-----------------'  |," .;'| |((((     |  ,"</div><div class="line">            +-----------------------+  ;;  | |         |,"</div><div class="line">               /_)______________(_/  //'   | +---------+</div><div class="line">          ___________________________/___  `,</div><div class="line">         /  oooooooooooooooo  .o.  oooo /,   \,"-----------</div><div class="line">        / ==ooooooooooooooo==.o.  ooo= //   ,`\--&#123;)B     ,"</div><div class="line">       /_==__==========__==_ooo__ooo=_/'   /___________,"</div><div class="line">        </div><div class="line">       */</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                                   _________</div><div class="line">                                  /         /.</div><div class="line">           .-------------.       /_________/ |</div><div class="line">          /             / |      |         | |</div><div class="line">         /+============+\ |      | |====|  | |</div><div class="line">         ||C:\&gt;        || |      |         | |</div><div class="line">         ||            || |      | |====|  | |</div><div class="line">         ||            || |      |   ___   | |</div><div class="line">         ||            || |      |  |166|  | |</div><div class="line">         ||            ||/@@@    |   ---   | |</div><div class="line">         \+============+/    @   |_________|./.</div><div class="line">                            @          ..  ....'</div><div class="line">         ..................@     __.'.'  ''</div><div class="line">        /oooooooooooooooo//     ///</div><div class="line">       /................//     /_/</div><div class="line">       ------------------</div><div class="line">       */</div></pre></td></tr></table></figure>
<h3 id="龙"><a href="#龙" class="headerlink" title="龙"></a>龙</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">        11111111111111111111111111111111111111001111111111111111111111111</div><div class="line">        11111111111111111111111111111111111100011111111111111111111111111</div><div class="line">        11111111111111111111111111111111100001111111111111111111111111111</div><div class="line">        11111111111111111111111111111110000111111111111111111111111111111</div><div class="line">        11111111111111111111111111111000000111111111111111111111111111111</div><div class="line">        11111111111111111111111111100000011110001100000000000000011111111</div><div class="line">        11111111111111111100000000000000000000000000000000011111111111111</div><div class="line">        11111111111111110111000000000000000000000000000011111111111111111</div><div class="line">        11111111111111111111111000000000000000000000000000000000111111111</div><div class="line">        11111111111111111110000000000000000000000000000000111111111111111</div><div class="line">        11111111111111111100011100000000000000000000000000000111111111111</div><div class="line">        11111111111111100000110000000000011000000000000000000011111111111</div><div class="line">        11111111111111000000000000000100111100000000000001100000111111111</div><div class="line">        11111111110000000000000000001110111110000000000000111000011111111</div><div class="line">        11111111000000000000000000011111111100000000000000011110001111111</div><div class="line">        11111110000000011111111111111111111100000000000000001111100111111</div><div class="line">        11111111000001111111111111111111110000000000000000001111111111111</div><div class="line">        11111111110111111111111111111100000000000000000000000111111111111</div><div class="line">        11111111111111110000000000000000000000000000000000000111111111111</div><div class="line">        11111111111111111100000000000000000000000000001100000111111111111</div><div class="line">        11111111111111000000000000000000000000000000111100000111111111111</div><div class="line">        11111111111000000000000000000000000000000001111110000111111111111</div><div class="line">        11111111100000000000000000000000000000001111111110000111111111111</div><div class="line">        11111110000000000000000000000000000000111111111110000111111111111</div><div class="line">        11111100000000000000000001110000001111111111111110001111111111111</div><div class="line">        11111000000000000000011111111111111111111111111110011111111111111</div><div class="line">        11110000000000000001111111111111111100111111111111111111111111111</div><div class="line">        11100000000000000011111111111111111111100001111111111111111111111</div><div class="line">        11100000000001000111111111111111111111111000001111111111111111111</div><div class="line">        11000000000001100111111111111111111111111110000000111111111111111</div><div class="line">        11000000000000111011111111111100011111000011100000001111111111111</div><div class="line">        11000000000000011111111111111111000111110000000000000011111111111</div><div class="line">        11000000000000000011111111111111000000000000000000000000111111111</div><div class="line">        11001000000000000000001111111110000000000000000000000000001111111</div><div class="line">        11100110000000000001111111110000000000000000111000000000000111111</div><div class="line">        11110110000000000000000000000000000000000111111111110000000011111</div><div class="line">        11111110000000000000000000000000000000001111111111111100000001111</div><div class="line">        11111110000010000000000000000001100000000111011111111110000001111</div><div class="line">        11111111000111110000000000000111110000000000111111111110110000111</div><div class="line">        11111110001111111100010000000001111100000111111111111111110000111</div><div class="line">        11111110001111111111111110000000111111100000000111111111111000111</div><div class="line">        11111111001111111111111111111000000111111111111111111111111100011</div><div class="line">        11111111101111111111111111111110000111111111111111111111111001111</div><div class="line">        11111111111111111111111111111110001111111111111111111111100111111</div><div class="line">        11111111111111111111111111111111001111111111111111111111001111111</div><div class="line">        11111111111111111111111111111111100111111111111111111111111111111</div><div class="line">        11111111111111111111111111111111110111111111111111111111111111111</div><div class="line"></div><div class="line"></div><div class="line">        */</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                                                    __----~~~~~~~~~~~------___</div><div class="line">                                         .  .   ~~//====......          __--~ ~~</div><div class="line">                         -.            \_|//     |||\\  ~~~~~~::::... /~</div><div class="line">                      ___-==_       _-~o~  \/    |||  \\            _/~~-</div><div class="line">              __---~~~.==~||\=_    -_--~/_-~|-   |\\   \\        _/~</div><div class="line">          _-~~     .=~    |  \\-_    '-~7  /-   /  ||    \      /</div><div class="line">        .~       .~       |   \\ -_    /  /-   /   ||      \   /</div><div class="line">       /  ____  /         |     \\ ~-_/  /|- _/   .||       \ /</div><div class="line">       |~~    ~~|--~~~~--_ \     ~==-/   | \~--===~~        .\</div><div class="line">                '         ~-|      /|    |-~\~~       __--~~</div><div class="line">                            |-~~-_/ |    |   ~\_   _-~            /\</div><div class="line">                                 /  \     \__   \/~                \__</div><div class="line">                             _--~ _/ | .-~~____--~-/                  ~~==.</div><div class="line">                            ((-&gt;/~   '.|||' -_|    ~~-/ ,              . _||</div><div class="line">                                       -_     ~\      ~~---l__i__i__i--~~_/</div><div class="line">                                       _-~-__   ~)  \--______________--~~</div><div class="line">                                     //.-~~~-~_--~- |-------~~~~~~~~</div><div class="line">                                            //.-~~~--\</div><div class="line"></div><div class="line">        </div><div class="line">       */</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//                       )      (</span></div><div class="line"><span class="comment">//                  /+++=))    ((=+++\</span></div><div class="line"><span class="comment">//             /++++++++//      \\+++++++++\</span></div><div class="line"><span class="comment">//          /++++++++++//(  /\  )\\++++++++++\</span></div><div class="line"><span class="comment">//        /+++++++++++//  \\^^//  \\+++++++++++\</span></div><div class="line"><span class="comment">//     _/++++++++++++//  &#123;&#123;@::@&#125;&#125;  \\++++++++++++\_</span></div><div class="line"><span class="comment">//    /+++++++++++++((     &#123;\/&#125;     ))+++++++++++++\</span></div><div class="line"><span class="comment">//   /+++++++++++++++\\    &lt;**&gt;    //+++++++++++++++\</span></div><div class="line"><span class="comment">//  /+++++++++++++++++\\  / VV \  //+++++++++++++++++\</span></div><div class="line"><span class="comment">// /+++++++++++++++++++\\/******\//+++++++++++++++++++\</span></div><div class="line"><span class="comment">//|+/|++++++++++/\++++++(***/\***)++++++/\++++++++++|\+\</span></div><div class="line"><span class="comment">//|/ |+/\+/\+/\/  \+/\++\**|**|**/++/\+/  \/\+/\+/\+| \|</span></div><div class="line"><span class="comment">//v  |/  V  V  V   V  \+\|*|**|*|/+/  V   v  V  V  \|  v</span></div><div class="line"><span class="comment">//   v                 /*|*|**|*|*\...              v</span></div><div class="line"><span class="comment">//                    (**|*|**|*|**). .</span></div><div class="line"><span class="comment">//                   __\*|*|**|*|*/__. .</span></div><div class="line"><span class="comment">//                  (vvv(VVV)(VVV)vvv). .</span></div><div class="line"><span class="comment">//                      ............../ /</span></div><div class="line"><span class="comment">//                     / ............../</span></div><div class="line"><span class="comment">//                     ((</span></div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                 ___====-_  _-====___</div><div class="line">           _--^^^#####//      \\#####^^^--_</div><div class="line">        _-^##########// (    ) \\##########^-_</div><div class="line">       -############//  |\^^/|  \\############-</div><div class="line">     _/############//   (@::@)   \\############\_</div><div class="line">    /#############((     \\//     ))#############\</div><div class="line">   -###############\\    (oo)    //###############-</div><div class="line">  -#################\\  / VV \  //#################-</div><div class="line"> -###################\\/      \//###################-</div><div class="line">_#/|##########/\######(   /\   )######/\##########|\#_</div><div class="line">|/ |#/\#/\#/\/  \#/\##\  |  |  /##/\#/  \/\#/\#/\#| \|</div><div class="line">`  |/  V  V  `   V  \#\| |  | |/#/  V   '  V  V  \|  '</div><div class="line">   `   `  `      `   / | |  | | \   '      '  '   '</div><div class="line">                    (  | |  | |  )</div><div class="line">                   __\ | |  | | /__</div><div class="line">                  (vvv(VVV)(VVV)vvv)</div><div class="line">                  </div><div class="line">*/</div></pre></td></tr></table></figure>
<p><a href="http://shiyousan.com/post/635479912728885400" target="_blank" rel="external">参考博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[印象笔记快捷键]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/11/%E9%80%9A%E7%94%A8/%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><center><img src="http://o99dg8ap9.bkt.clouddn.com/%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E5%BF%AB%E6%8D%B7%E9%94%AE1.png" alt=""></center>

<a id="more"></a>
<h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><center><img src="http://o99dg8ap9.bkt.clouddn.com/%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E5%BF%AB%E6%8D%B7%E9%94%AE3.png" alt=""></center>

<h3 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h3><center><img src="http://o99dg8ap9.bkt.clouddn.com/%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E5%BF%AB%E6%8D%B7%E9%94%AE2.png" alt=""></center>


]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ AS中使用xUtils报错找不到org.apache.http.client.methods.HttpRequestBase的类文件]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/11/AndroidStudio/AS%E4%B8%AD%E4%BD%BF%E7%94%A8xUtils%E6%8A%A5%E9%94%99%E6%89%BE%E4%B8%8D%E5%88%B0org-apache-http-client-methods-HttpRequestBase%E7%9A%84%E7%B1%BB%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="AndroidStudio出现的错误"><a href="#AndroidStudio出现的错误" class="headerlink" title="AndroidStudio出现的错误"></a>AndroidStudio出现的错误</h3><ul>
<li>错误如下</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AS%E4%B8%AD%E4%BD%BF%E7%94%A8xUtils%E6%8A%A5%E9%94%99%E6%89%BE%E4%B8%8D%E5%88%B0org.apache.http.client.methods.HttpRequestBase%E7%9A%84%E7%B1%BB%E6%96%87%E4%BB%B61.png" alt=""></center>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul>
<li><p>打开对应module的build.gradle文件</p>
</li>
<li><p>将 useLibrary ‘org.apache.http.legacy’  将这一行代码添加到android{}根目录下 </p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useLibrary 'org.apache.http.legacy'</div></pre></td></tr></table></figure>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AS%E4%B8%AD%E4%BD%BF%E7%94%A8xUtils%E6%8A%A5%E9%94%99%E6%89%BE%E4%B8%8D%E5%88%B0org.apache.http.client.methods.HttpRequestBase%E7%9A%84%E7%B1%BB%E6%96%87%E4%BB%B62.png" alt=""></center>

<h3 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h3><ul>
<li>以后类似的错误也可以学着这样解决</li>
</ul>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一千零一夜bgm]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/09/%E6%96%87%E5%AD%A6%E7%94%B5%E5%BD%B1%E9%9F%B3%E4%B9%90%E8%AF%97%E6%AD%8C%E5%92%8C%E7%94%BB/%E4%B8%80%E5%8D%83%E9%9B%B6%E4%B8%80%E5%A4%9Cbgm/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>很喜欢梁文道老师的《一千零一夜》，里面的背景音乐听起来非常舒服，但是不知到叫什么名字，去网上找了也没找到，这个是我从视频里面截下来的</li>
</ul>
<ul>
<li>有知道的同学可以联系我哦！ <a href="http://www.qiuchengjia.cn/about/">联系方式</a></li>
</ul>
<h3 id="一千零一夜"><a href="#一千零一夜" class="headerlink" title="一千零一夜"></a>一千零一夜</h3><center><img src="http://o99dg8ap9.bkt.clouddn.com/%E4%B8%80%E5%8D%83%E9%9B%B6%E4%B8%80%E5%A4%9C.jpeg" alt=""></center>

<a id="more"></a>
<h3 id="背景音乐"><a href="#背景音乐" class="headerlink" title="背景音乐"></a>背景音乐</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://o99dg8ap9.bkt.clouddn.com/%E4%B8%80%E5%8D%83%E9%9B%B6%E4%B8%80%E5%A4%9Cbgm.mp3"><br></iframe>    



<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><ul>
<li><a href="http://pan.baidu.com/s/1cmhGHg" target="_blank" rel="external">传送门</a></li>
</ul>
<h3 id="一千零一夜节目"><a href="#一千零一夜节目" class="headerlink" title="一千零一夜节目"></a>一千零一夜节目</h3><h4 id="江南逢李龟年"><a href="#江南逢李龟年" class="headerlink" title="江南逢李龟年"></a>江南逢李龟年</h4><iframe height="498" width="510" src="http://player.youku.com/embed/XMTUxNTA3ODg2MA==" frameborder="0" allowfullscreen><br></iframe>

]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse Android ADT Bundle下载地址和genymotion插件]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/06/Android/Eclipse-Android-ADT-Bundle%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E5%92%8Cgenymotion%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h3><ul>
<li><p><a href="https://dl.google.com/android/adt/adt-bundle-windows-x86-20140702.zip" target="_blank" rel="external">win32</a></p>
</li>
<li><p><a href="https://dl.google.com/android/adt/adt-bundle-windows-x86_64-20140702.zip" target="_blank" rel="external">win64</a></p>
</li>
<li><p><a href="http://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip" target="_blank" rel="external">MAC64</a></p>
</li>
<li><p><a href="http://dl.google.com/android/adt/adt-bundle-linux-x86-20140702.zip" target="_blank" rel="external">Linux 86</a></p>
</li>
<li><p><a href="http://dl.google.com/android/adt/adt-bundle-linux-x86_64-20140702.zip" target="_blank" rel="external">Linux 64</a></p>
</li>
</ul>
<h3 id="百度云"><a href="#百度云" class="headerlink" title="百度云"></a>百度云</h3><ul>
<li><a href="http://pan.baidu.com/s/1hsHdxjQ" target="_blank" rel="external">传送门</a></li>
</ul>
<h3 id="Eclipse添加genymotion插件"><a href="#Eclipse添加genymotion插件" class="headerlink" title="Eclipse添加genymotion插件"></a>Eclipse添加genymotion插件</h3><ul>
<li><a href="http://pan.baidu.com/s/1mhV8gys" target="_blank" rel="external">传送门</a></li>
</ul>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[项目分类建立Config文件]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/04/%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE%E5%88%86%E7%B1%BB%E5%BB%BA%E7%AB%8BConfig%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="分类Config"><a href="#分类Config" class="headerlink" title="分类Config"></a>分类Config</h3><ul>
<li>以前做项目的时候总是将所以的配置写在一个Config文件中，导致我修改配置的时候非常费劲，所以我现在使用分类Config文件的方法，虽然文件多点，但是修改的效率肯定是显著提升的</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Config  <span class="comment">//主配置文件</span></div><div class="line">ConfigUI  <span class="comment">//界面对应的配置</span></div><div class="line">ConfigIO   <span class="comment">//文件，流操作等对应的配置</span></div><div class="line">ConfigNet  <span class="comment">//网络对应的配置</span></div><div class="line">ConfigSQL   <span class="comment">//数据库对应的配置</span></div><div class="line">ConfigGlobal  <span class="comment">//全局参数配置</span></div></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android api level对照表]]></title>
      <url>http://www.qiuchengjia.cn/2016/07/04/Android/Android-api-level%E5%AF%B9%E7%85%A7%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h3 id="Android-api-level对照表"><a href="#Android-api-level对照表" class="headerlink" title="Android api level对照表"></a>Android api level对照表</h3><table>
<thead>
<tr>
<th>Platform Version</th>
<th style="text-align:left">API Level</th>
<th style="text-align:left">VERSION_CODE</th>
<th style="text-align:center">Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>Android 6.0</td>
<td style="text-align:left">23</td>
<td style="text-align:left">M</td>
<td style="text-align:center">API Changes</td>
</tr>
<tr>
<td>Android 5.1</td>
<td style="text-align:left">22</td>
<td style="text-align:left">LOLLIPOP_MR1</td>
<td style="text-align:center">Platform Highlights</td>
</tr>
<tr>
<td>Android 5.0</td>
<td style="text-align:left">21</td>
<td style="text-align:left">LOLLIPOP</td>
<td style="text-align:center">.</td>
</tr>
<tr>
<td>Android 4.4W</td>
<td style="text-align:left">20</td>
<td style="text-align:left">KITKAT_WATCH</td>
<td style="text-align:center">KitKat for Wearables Only</td>
</tr>
<tr>
<td>Android 4.4</td>
<td style="text-align:left">19</td>
<td style="text-align:left">KITKAT</td>
<td style="text-align:center">Platform Highlights</td>
</tr>
<tr>
<td>Android 4.3</td>
<td style="text-align:left">18</td>
<td style="text-align:left">JELLY_BEAN_MR2</td>
<td style="text-align:center">Platform Highlights</td>
</tr>
<tr>
<td>Android 4.2, 4.2.2</td>
<td style="text-align:left">17</td>
<td style="text-align:left">JELLY_BEAN_MR1</td>
<td style="text-align:center">Platform Highlights</td>
</tr>
<tr>
<td>Android 4.1, 4.1.1</td>
<td style="text-align:left">16</td>
<td style="text-align:left">JELLY_BEAN</td>
<td style="text-align:center">Platform Highlights</td>
</tr>
<tr>
<td>Android 4.0.3, 4.0.4</td>
<td style="text-align:left">15</td>
<td style="text-align:left">ICE_CREAM_SANDWICH_MR1</td>
<td style="text-align:center">Platform Highlights</td>
</tr>
<tr>
<td>Android 4.0, 4.0.1, 4.0.2</td>
<td style="text-align:left">14</td>
<td style="text-align:left">ICE_CREAM_SANDWICH</td>
<td style="text-align:center">.    </td>
</tr>
<tr>
<td>Android 3.2</td>
<td style="text-align:left">13</td>
<td style="text-align:left">HONEYCOMB_MR2</td>
<td style="text-align:center">.    </td>
</tr>
<tr>
<td>Android 3.1.x</td>
<td style="text-align:left">12</td>
<td style="text-align:left">HONEYCOMB_MR1</td>
<td style="text-align:center">Platform Highlights</td>
</tr>
<tr>
<td>Android 3.0.x</td>
<td style="text-align:left">11</td>
<td style="text-align:left">HONEYCOMB</td>
<td style="text-align:center">Platform Highlights</td>
</tr>
<tr>
<td>Android 2.3.4</td>
<td style="text-align:left">.</td>
<td style="text-align:left">.</td>
<td style="text-align:center">.            </td>
</tr>
<tr>
<td>Android 2.3.3</td>
<td style="text-align:left">10</td>
<td style="text-align:left">GINGERBREAD_MR1</td>
<td style="text-align:center">Platform Highlights</td>
</tr>
<tr>
<td>Android 2.3.2</td>
<td style="text-align:left">.</td>
<td style="text-align:left">.</td>
<td style="text-align:center">.            </td>
</tr>
<tr>
<td>Android 2.3.1</td>
<td style="text-align:left">.</td>
<td style="text-align:left">.</td>
<td style="text-align:center">.            </td>
</tr>
<tr>
<td>Android 2.3</td>
<td style="text-align:left">9</td>
<td style="text-align:left">GINGERBREAD</td>
<td style="text-align:center">.    </td>
</tr>
<tr>
<td>Android 2.2.x</td>
<td style="text-align:left">8</td>
<td style="text-align:left">FROYO</td>
<td style="text-align:center">Platform Highlights</td>
</tr>
<tr>
<td>Android 2.1.x</td>
<td style="text-align:left">7</td>
<td style="text-align:left">ECLAIR_MR1</td>
<td style="text-align:center">Platform Highlights</td>
</tr>
<tr>
<td>Android 2.0.1</td>
<td style="text-align:left">6</td>
<td style="text-align:left">ECLAIR_0_1</td>
<td style="text-align:center">.    </td>
</tr>
<tr>
<td>Android 2.0</td>
<td style="text-align:left">5</td>
<td style="text-align:left">ECLAIR</td>
<td style="text-align:center">.    </td>
</tr>
<tr>
<td>Android 1.6</td>
<td style="text-align:left">4</td>
<td style="text-align:left">DONUT</td>
<td style="text-align:center">Platform Highlights</td>
</tr>
<tr>
<td>Android 1.5</td>
<td style="text-align:left">3</td>
<td style="text-align:left">CUPCAKE</td>
<td style="text-align:center">Platform Highlights</td>
</tr>
<tr>
<td>Android 1.1</td>
<td style="text-align:left">2</td>
<td style="text-align:left">BASE_1_1</td>
<td style="text-align:center">.    </td>
</tr>
<tr>
<td>Android 1.0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">BASE</td>
<td style="text-align:center">.</td>
</tr>
</tbody>
</table>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AndroidStudio快捷键和使用技巧]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/30/AndroidStudio/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h3 id="最常用快捷键"><a href="#最常用快捷键" class="headerlink" title="最常用快捷键"></a>最常用快捷键</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th style="text-align:center">用途描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ctrl+k</td>
<td style="text-align:center">commit到版本控制软件</td>
</tr>
<tr>
<td>ctrl+shift+K</td>
<td style="text-align:center">push到远程仓库</td>
</tr>
<tr>
<td>ctrl+T</td>
<td style="text-align:center">拉取版本到本地</td>
</tr>
<tr>
<td>shift+F10</td>
<td style="text-align:center">部署到模拟器运行</td>
</tr>
<tr>
<td>Ctrl+Shift+Space</td>
<td style="text-align:center">自动补全代码</td>
</tr>
<tr>
<td>Ctrl+Alt+L</td>
<td style="text-align:center">格式化代码</td>
</tr>
<tr>
<td>Ctrl + Shift + I</td>
<td style="text-align:center">快速查看定义</td>
</tr>
<tr>
<td>Ctrl＋E</td>
<td style="text-align:center">可以显示最近编辑的文件列表</td>
</tr>
<tr>
<td>Shift＋Click</td>
<td style="text-align:center">可以关闭文件</td>
</tr>
<tr>
<td>Ctrl＋[或]</td>
<td style="text-align:center">可以跳到大括号的开头结尾</td>
</tr>
<tr>
<td>Ctrl＋Shift＋Backspace</td>
<td style="text-align:center">可以跳转到上次编辑的地方</td>
</tr>
<tr>
<td>Ctrl＋F12</td>
<td style="text-align:center">可以显示当前文件的结构</td>
</tr>
<tr>
<td>Ctrl＋F7</td>
<td style="text-align:center">可以查询当前元素在当前文件中的引用，然后按F3可以选择</td>
</tr>
<tr>
<td>Ctrl＋N</td>
<td style="text-align:center">可以快速打开类</td>
</tr>
<tr>
<td>Ctrl＋Shift＋N</td>
<td style="text-align:center">可以快速打开文件</td>
</tr>
<tr>
<td>Alt＋Q</td>
<td style="text-align:center">可以看到当前方法的声明</td>
</tr>
<tr>
<td>Ctrl＋W</td>
<td style="text-align:center">可以选择单词继而语句继而行继而函数</td>
</tr>
<tr>
<td>Alt＋F1</td>
<td style="text-align:center">可以将正在编辑的元素在各个面板中定位</td>
</tr>
<tr>
<td>Ctrl＋P</td>
<td style="text-align:center">可以显示参数信息</td>
</tr>
<tr>
<td>Ctrl＋Shift＋Insert</td>
<td style="text-align:center">可以选择剪贴板内容并插入</td>
</tr>
<tr>
<td>Alt＋Insert</td>
<td style="text-align:center">可以生成构造器/Getter/Setter等</td>
</tr>
<tr>
<td>Ctrl＋Alt＋V</td>
<td style="text-align:center">可以引入变量。例如把括号内的SQL赋成一个变量</td>
</tr>
<tr>
<td>Ctrl＋Alt＋T</td>
<td style="text-align:center">可以把代码包在一块内，例如try/catch</td>
</tr>
<tr>
<td>Alt＋Up and Alt＋Down</td>
<td style="text-align:center">可在方法间快速移动</td>
</tr>
<tr>
<td>Esc</td>
<td style="text-align:center">该操作仅仅把光标移回编辑器。</td>
</tr>
<tr>
<td>Shift + Esc</td>
<td style="text-align:center">该操作会关闭当前面板，然后把光标移回到编辑器</td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td style="text-align:center">展现当前类的大纲，并可以快速跳转</td>
</tr>
<tr>
<td>Ctrl + Tab</td>
<td style="text-align:center">切换器,可以用来快速打开文件</td>
</tr>
<tr>
<td>Alt + `</td>
<td style="text-align:center">版本控制操作弹窗</td>
</tr>
<tr>
<td>Ctrl + Alt + M</td>
<td style="text-align:center">提取方法</td>
</tr>
<tr>
<td>Ctrl + Alt + P</td>
<td style="text-align:center">提取参数</td>
</tr>
<tr>
<td>Ctrl + Shift + J</td>
<td style="text-align:center">合并行和文本</td>
</tr>
<tr>
<td>Ctrl + J</td>
<td style="text-align:center">动态模版，非常好用</td>
</tr>
<tr>
<td>Ctrl + Shift + Up/Down</td>
<td style="text-align:center">上下移动方法</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th style="text-align:center">用途描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + Shift + F12</td>
<td style="text-align:center">隐藏所有面板</td>
</tr>
<tr>
<td>Ctrl + Shift + “+”/ “-“</td>
<td style="text-align:center">展开/折叠代码</td>
</tr>
<tr>
<td>Alt+回车</td>
<td style="text-align:center">导入包,自动修正</td>
</tr>
<tr>
<td>Ctrl+N</td>
<td style="text-align:center">查找类</td>
</tr>
<tr>
<td>Ctrl+Shift+N</td>
<td style="text-align:center">查找文件</td>
</tr>
<tr>
<td>Ctrl+Alt+O</td>
<td style="text-align:center">优化导入的类和包</td>
</tr>
<tr>
<td>Alt+Insert</td>
<td style="text-align:center">生成代码(如get,set方法,构造函数等)</td>
</tr>
<tr>
<td>Ctrl+E或者Alt+Shift+C</td>
<td style="text-align:center">最近访问的文件</td>
</tr>
<tr>
<td>Ctrl+shift+E</td>
<td style="text-align:center">打开最近修改的文件</td>
</tr>
<tr>
<td>Ctrl+R</td>
<td style="text-align:center">替换文本</td>
</tr>
<tr>
<td>Ctrl+F</td>
<td style="text-align:center">查找文本</td>
</tr>
<tr>
<td>Ctrl+Shift+Space</td>
<td style="text-align:center">自动补全代码</td>
</tr>
<tr>
<td>Ctrl+空格</td>
<td style="text-align:center">代码提示</td>
</tr>
<tr>
<td>Ctrl+Alt+Space</td>
<td style="text-align:center">类名或接口名提示</td>
</tr>
<tr>
<td>Ctrl+P</td>
<td style="text-align:center">方法参数提示</td>
</tr>
<tr>
<td>Ctrl+Shift+Alt+N</td>
<td style="text-align:center">查找类中的方法或变量</td>
</tr>
<tr>
<td>Alt+Shift+C</td>
<td style="text-align:center">对比最近修改的代码</td>
</tr>
<tr>
<td>Shift+F6</td>
<td style="text-align:center">重构-重命名</td>
</tr>
<tr>
<td>Ctrl+Shift+Up/Down</td>
<td style="text-align:center">上下移动本行代码</td>
</tr>
<tr>
<td>Ctrl+X</td>
<td style="text-align:center">剪切行</td>
</tr>
<tr>
<td>Ctrl+Y</td>
<td style="text-align:center">删除行</td>
</tr>
<tr>
<td>Ctrl+D</td>
<td style="text-align:center">复制行</td>
</tr>
<tr>
<td>Ctrl+/ 或 Ctrl+Shift+/</td>
<td style="text-align:center">注释（// 或者 /**/）</td>
</tr>
<tr>
<td>Ctrl+J</td>
<td style="text-align:center">自动代码</td>
</tr>
<tr>
<td>Ctrl+E</td>
<td style="text-align:center">最近访问的文件</td>
</tr>
<tr>
<td>Ctrl+H</td>
<td style="text-align:center">显示类结构图</td>
</tr>
<tr>
<td>Ctrl+Q</td>
<td style="text-align:center">显示注释文档</td>
</tr>
<tr>
<td>Alt+F1</td>
<td style="text-align:center">查找代码所在位置</td>
</tr>
<tr>
<td>Alt+1</td>
<td style="text-align:center">快速打开或隐藏工程面板</td>
</tr>
<tr>
<td>Ctrl+Alt+ left/right</td>
<td style="text-align:center">返回至上次浏览的位置</td>
</tr>
<tr>
<td>Alt+ left/right</td>
<td style="text-align:center">切换代码视图</td>
</tr>
<tr>
<td>Alt+ Up/Down</td>
<td style="text-align:center">在方法间快速移动定位</td>
</tr>
<tr>
<td>Ctrl+Shift+Up/Down</td>
<td style="text-align:center">代码向上/下移动</td>
</tr>
</tbody>
</table>
<h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><h4 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h4><ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzA3ODY0MzEyMA==&amp;mid=2657236292&amp;idx=1&amp;sn=7584243ad7f7559d42410eda4468b01c&amp;scene=0#wechat_redirect" target="_blank" rel="external">传送门</a></li>
</ul>
<h4 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h4><ul>
<li><p>添加/移除书签：F3(OS X) 、F11(Windows/Linux);</p>
</li>
<li><p>添加/移除书签(带标记)：Alt + F3(OS X)、Ctrl + F11(Windows/Linux);</p>
</li>
<li><p>显示全部书签：Cmd + F3(OS X) 、Shift + F11(Windows/Linux)，显示所有的书签列表，并且是可以搜索的</p>
</li>
<li><p>上一个/下一个书签：无，可以在设置中设置快捷键</p>
</li>
<li><p>更多：当你为某个书签指定了标记，你可以使用快捷键 Ctrl + 标记 来快速跳转到标记处，比如输入Ctrl + 1，跳到标记为1的书签处</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A71.gif" alt=""></center>

<h4 id="与分支比对"><a href="#与分支比对" class="headerlink" title="与分支比对"></a>与分支比对</h4><ul>
<li><p>描述：假如你的项目是使用git来管理的，你可以将当前文件或者文件夹与其他的分支进行比对。比较有用的是可以让你了解到你与主分支有多少差别。</p>
</li>
<li><p>调用：Menu → VCS → Git → Compare With Branch</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A72.gif" alt=""></center>

<h4 id="在外部打开文件"><a href="#在外部打开文件" class="headerlink" title="在外部打开文件"></a>在外部打开文件</h4><ul>
<li><p>描述：通过这个快捷键，简单地点击Tab，就可以打开当前文件所在的位置或者该文件的任意上层路径。</p>
</li>
<li><p>快捷键：Cmd + 单击Tab(OS X)、Ctrl + 点击Tab(Windows/Linux);</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A73.gif" alt=""></center>

<h4 id="Select-In"><a href="#Select-In" class="headerlink" title="Select In"></a>Select In</h4><ul>
<li><p>描述：拿着当前文件然后问你在哪里选中该文件。恕我直言，最有用的就是在项目结构或者资源管理器中打开 该文件。每一个操作都有数字或者字母作为前缀，可以通过这个前缀来快速跳转。通常，我会 Alt + F1 然后 回车(Enter) 来打开项目视图，然后 再用 Alt + F1 在OS X的Finder里找到文件。你可以在文件中或者直接在项目视图里使用该操作</p>
</li>
<li><p>快捷键：Alt + F1</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A74.gif" alt=""></center>


<h4 id="Sublime-Text式的多处选择"><a href="#Sublime-Text式的多处选择" class="headerlink" title="Sublime Text式的多处选择"></a>Sublime Text式的多处选择</h4><ul>
<li><p>描述：这个功能超级赞！该操作会识别当前选中字符串，选择下一个同样的字符串，并且添加一个光标。这意味着你可以在同一个文件里拥有多个光标，你可以同时在所有光标处输入任何东西</p>
</li>
<li><p>快捷键：Ctrl + G(OS X)、Alt + Ｊ（Windows、Linux）</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A75.gif" alt=""></center>

<h4 id="编写正则表达式"><a href="#编写正则表达式" class="headerlink" title="编写正则表达式"></a>编写正则表达式</h4><ul>
<li><p>描述：使用Java编写正则表达式是一件很困难的事，主要原因是：</p>
</li>
<li><p>你必须得避开反斜杠；</p>
</li>
<li><p>说实话，正则很难；</p>
</li>
<li><p>看第二条。</p>
</li>
<li><p>IDE能帮我们干点啥呢？当然是一个舒服的界面来编写和测试正则啦~ - 快捷键：Alt + Enter → check regexp</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A76.gif" alt=""></center>

<h4 id="使用Enter和Tab进行代码补全的差别"><a href="#使用Enter和Tab进行代码补全的差别" class="headerlink" title="使用Enter和Tab进行代码补全的差别"></a>使用Enter和Tab进行代码补全的差别</h4><ul>
<li><p>描述：代码补全时，可以使用Enter或Tab来进行补全操作，但是两者是有差别的</p>
</li>
<li><p>使用Enter时：从光标处插入补全的代码，对原来的代码不做任何操作</p>
</li>
<li><p>使用Tab时：从光标处插入补全的代码，并删除后面的代码，直到遇到点号、圆括号、分号或空格为止</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A77.gif" alt=""></center>

<h4 id="提取变量"><a href="#提取变量" class="headerlink" title="提取变量"></a>提取变量</h4><ul>
<li><p>描述：这是一个提取变量的快捷操作。当你在没有写变量声明的直接写下值的时候，这是一个很方便生成变量声明的操作，同时还会给出一个建议的变量命名</p>
</li>
<li><p>调用：Menu → Refactor → Extract → Variable</p>
</li>
<li><p>快捷键：Cmd + Alt + V(OS X)、Ctrl + Alt + V(Windows/Linux)；</p>
</li>
<li><p>更多：当你需要改变变量声明的类型，例如使用 List 替代 ArrayList，可以按下Shift + Tab，就会显示所有可用的变量类型</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A78.gif" alt=""></center>

<h4 id="取反补全"><a href="#取反补全" class="headerlink" title="取反补全"></a>取反补全</h4><ul>
<li><p>描述：有时你自动补全一个布尔值，然后回到该值的前面添加一个感叹号来完成取反操作，现在通过使用输入!代替enter完成补全操作，就可以跳过这些繁琐的操作了</p>
</li>
<li><p>快捷键：代码补全的时候，按下!即可（有时需要上下键选中候选项）</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A79.gif" alt=""></center>

<h4 id="包裹代码"><a href="#包裹代码" class="headerlink" title="包裹代码"></a>包裹代码</h4><ul>
<li><p>描述： 该操作可以用特定代码结构包裹住选中的代码块，通常是if语句，循环，try/catch语句或者runnable语句。 如果你没有选中任何东西，该操作会包裹当前一整行</p>
</li>
<li><p>快捷键：Cmd + Alt + T(OS X)、Ctrl + Alt + T(Windows/Linux)</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A710.gif" alt=""></center>

<h4 id="移除包裹代码"><a href="#移除包裹代码" class="headerlink" title="移除包裹代码"></a>移除包裹代码</h4><ul>
<li><p>描述：该操作会移除周围的代码，它可能是一条if语句，一个while循环，一个try/catch语句甚至是一个runnable语句。该操作恰恰和包裹代码（Surround With）相反</p>
</li>
<li><p>快捷键：Cmd + Shift + Delete(OS X)、Ctrl + Shift + Delete(Windows/Linux)</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A711.gif" alt=""></center>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AndroidStudio指定git的忽略文件]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/30/Android/AndroidStudio%E6%8C%87%E5%AE%9Agit%E7%9A%84%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="AndroidStudio自动忽略"><a href="#AndroidStudio自动忽略" class="headerlink" title="AndroidStudio自动忽略"></a>AndroidStudio自动忽略</h3><ul>
<li>现在的AndroidStudio已经很智能了，当创建项目的时候自动给我们创建了一个</li>
</ul>
<p>.gitignore 并给我们忽略了一些文件</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">*.iml</div><div class="line">.gradle</div><div class="line">/local.properties</div><div class="line">/.idea/workspace.xml</div><div class="line">/.idea/libraries</div><div class="line">.DS_Store</div><div class="line">/build</div><div class="line">/captures</div></pre></td></tr></table></figure>
<h3 id="手动忽略"><a href="#手动忽略" class="headerlink" title="手动忽略"></a>手动忽略</h3><ul>
<li>我们还可以在项目创建完成之后手动指定要忽略的文件</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.idea 文件夹</div><div class="line">.gradle 文件夹</div><div class="line">所有的 build 文件夹</div><div class="line">所有的 .iml 文件</div><div class="line">local.properties 文件</div></pre></td></tr></table></figure>
<ul>
<li>AndroidStudio如图配置就可以实现</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E6%8C%87%E5%AE%9Agit%E7%9A%84%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6.png" alt=""></center>

<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[他妈的-尧十三]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/28/%E6%96%87%E5%AD%A6%E7%94%B5%E5%BD%B1%E9%9F%B3%E4%B9%90%E8%AF%97%E6%AD%8C%E5%92%8C%E7%94%BB/%E4%BB%96%E5%A6%88%E7%9A%84-%E5%B0%A7%E5%8D%81%E4%B8%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">我多么希望，有一个门口，早晨，阳光照在草上。我们站着，扶着自己的门窗，门很低，但太阳是明亮的。草在结它的种子，风在摇它的叶子，我们站着，不说话，就十分美好  –顾城</blockquote>

<h3 id="歌曲"><a href="#歌曲" class="headerlink" title="歌曲"></a>歌曲</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=29771089&auto=0&height=66"><br></iframe>

<h3 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h3><p>作曲 : 尧十三　作词 : 尧十三　演唱：尧十三</p>
<p>妈妈，我爱上一个姑娘　　　　　　　　　　妈妈，我做了一个梦<br>可是她在别人的床上呻吟　　　　　　　　　我梦见我在红色的天空飞翔<br>我想知道，她是不是真的快乐　　　　　　　可是妈妈，我知道我没有翅膀<br>我去问她，她没有回答　　　　　　　　　　所以我死了，就像我出生一样</p>
<hr>
<p>我深爱的那个姑娘　　　　　　　　　　　　妈妈，我做了一个梦<br>她一点一点吃掉我的眼睛　　　　　　　　　梦见彩虹，终于出现在我的天空<br>我的世界，只剩下红色　　　　　　　　　　可是我，已经忘记了彩虹的颜色</p>
<p>妈妈，我爱上一个姑娘　　　　　　　　　　彩虹的尽头，会是什么样子<br>我把青春，都留在她的身体里　　　　　　　我深爱的那个姑娘<br>可是我，已经忘记了她的名字　　　　　　　她一点一点吃掉我的眼睛<br>忘记了她的模样　　　　　　　　　　　　　我的世界，只剩下红色</p>
<p>　　　　　　　　　　　　　　　　　　　　如果时间可以倒流<br>　　　　　　　　　　　　　　　　　　　　我会在第一天就闭上眼<br>　　　　　　　　　　　　　　　　　　　　然后什么都看不见</p>
<hr>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><ul>
<li>一个人要帮助弱者，应当自己成为强者，而不是和他们一样变成弱者</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%845.jpg" alt=""></center>

<ul>
<li>只要有一双真诚的眼睛陪我哭泣，就值得我为生命受苦</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%8415.jpg" alt=""></center>


<a id="more"></a>
<ul>
<li>一个人的性格决定他的际遇。如果你喜欢保持你的性格，那么，你就无权拒绝你的际遇</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%841.jpg" alt=""></center>

<ul>
<li>一个人的性格决定他的际遇。如果你喜欢保持你的性格，那么，你就无权拒绝你的际遇</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%842.jpg" alt=""></center>

<ul>
<li>宿命论是那些缺乏意志力的弱者的借口</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%843.jpg" alt=""></center>

<ul>
<li>天才免不了有障碍，因为障碍会创造天才</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%844.jpg" alt=""></center>

<ul>
<li>当你知道世界上受苦的不是只有你，你会减少痛苦，也会在绝望中燃起希望</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%847.jpg" alt=""></center>

<ul>
<li>有些事情是不能告诉别人的，有些事情是不必告诉别人的，有些事情是根本没有办法告诉别人的，而且有些事情是，即使告诉了别人，你也会马上后悔的</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%848.jpg" alt=""></center>

<ul>
<li>世上只有一种英雄主义，就是在认清生活真相之后依然热爱生活</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%849.jpg" alt=""></center>

<ul>
<li>没有一个人是完全幸福的。所谓幸福，是在于认清一个人的限度而安于这个限度</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%846.jpg" alt=""></center>

<ul>
<li>你一定有过这种感觉，当你心事重重，渴望找个人谈一谈的时候，他来了，可是你们的谈话成了两条歪七扭八的曲线，就那么凄凉地、乏力地延伸下去。你敷衍着、笑着，装做很投机的样子。但是，你心里渴望他离去，让你静下来，静下来啃噬那属于你自己的寂寞</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%8410.jpg" alt=""></center>

<ul>
<li>真实的、永恒的、最高级的快乐，只能从三样东西中取得：工作、自我克制和爱</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%8411.jpg" alt=""></center>

<ul>
<li>大部分人在二三十岁上就死去了，因为过了这个年龄，他们只是自己的影子，此后的余生则是在模仿自己中度过，日复一日，更机械，更装腔作势地重复他们在有生之年的所作所为，所思所想，所爱所恨</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%8412.jpg" alt=""></center>

<ul>
<li>从来没有人读书，只有人在书中读自己，发现自己或检查自己</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%8413.jpg" alt=""></center>

<ul>
<li>人生有如一股奔流，没有暗礁，激不起美丽的浪花</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%8414.jpg" alt=""></center>


<ul>
<li>人生的钟摆永远在两极中摇晃，幸福也是其中的一极：要使钟摆停止在它一极上，只能把钟摆折断</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%8416.jpg" alt=""></center>

<ul>
<li>一个人不怕自讨苦吃的时候，才是爱情最强的时候</li>
</ul>
<center><img src="http://o9fnxzb1g.bkt.clouddn.com/%E5%B0%A7%E5%8D%81%E4%B8%89%E4%BB%96%E5%A6%88%E7%9A%8417.jpg" alt=""></center>

<ul>
<li><a href="http://www.mtyyw.com/14950/" target="_blank" rel="external">参考博客</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Socket简易聊天工具]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/28/JAVA/Socket%E7%AE%80%E6%98%93%E8%81%8A%E5%A4%A9%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><ul>
<li>代码运行如图，看起来还不错，哈哈哈</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/socket%E8%81%8A%E5%A4%A9%E5%B7%A5%E5%85%B7%E5%95%8A.png" alt=""></center>


<a id="more"></a>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> qiu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.awt.print.Printable;</div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.util.Calendar;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JPanel;</div><div class="line"><span class="keyword">import</span> javax.swing.JScrollPane;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextArea;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  简单聊天软件的服务器</div><div class="line"> * */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</div><div class="line">    </div><div class="line">	JTextArea jTextArea =<span class="keyword">null</span>;<span class="comment">//用来显示纯文本的单行区域</span></div><div class="line">	JTextField jTextField=<span class="keyword">null</span>;<span class="comment">//可以允许用来编辑单行文本</span></div><div class="line">	JButton sendButton=<span class="keyword">null</span>;</div><div class="line">	JPanel jPanel=<span class="keyword">null</span>;</div><div class="line">	JScrollPane jScrollPane =<span class="keyword">null</span>;</div><div class="line">	<span class="comment">//把信息发给客户端对象</span></div><div class="line">	PrintWriter printWriter =<span class="keyword">null</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line">  *  服务端的主函数</div><div class="line">  * */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">       <span class="keyword">new</span> MyServer();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  服务端的构造函数,用来进行初始化</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyServer</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//这里是对GUI的初始化</span></div><div class="line">	jTextArea = <span class="keyword">new</span> JTextArea();</div><div class="line">	jTextField= <span class="keyword">new</span> JTextField(<span class="number">20</span>);</div><div class="line">	sendButton= <span class="keyword">new</span> JButton(<span class="string">"发送"</span>);</div><div class="line">	sendButton.addActionListener(<span class="keyword">this</span>);</div><div class="line">	sendButton.setActionCommand(<span class="string">"send"</span>);</div><div class="line">	jScrollPane= <span class="keyword">new</span> JScrollPane(jTextArea);</div><div class="line">	jPanel = <span class="keyword">new</span> JPanel();</div><div class="line">	jPanel.add(jTextField);<span class="comment">//添加编辑框</span></div><div class="line">	jPanel.add(sendButton);<span class="comment">//添加按钮</span></div><div class="line">		</div><div class="line">	<span class="comment">//将两个面板添加布局</span></div><div class="line">	<span class="keyword">this</span>.add(jScrollPane,BorderLayout.CENTER);</div><div class="line">	<span class="keyword">this</span>.add(jPanel,BorderLayout.SOUTH);</div><div class="line">		</div><div class="line">	<span class="keyword">this</span>.setSize(<span class="number">400</span>,<span class="number">300</span>);</div><div class="line">	<span class="keyword">this</span>.setTitle(<span class="string">"聊天服务器"</span>);</div><div class="line">	<span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<span class="comment">//设置退出按钮</span></div><div class="line">	<span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">this</span>.setResizable(<span class="keyword">true</span>);	</div><div class="line">        </div><div class="line">    <span class="comment">//下面是socket服务器的搭建</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">//服务器监听</span></div><div class="line">       	ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">9988</span>);</div><div class="line">		<span class="comment">//等待客户端连接</span></div><div class="line">       	Socket socket = ss.accept();</div><div class="line">       	<span class="comment">//获得客户端发送过来的数据的流</span></div><div class="line">       	BufferedReader br = <span class="keyword">new</span> BufferedReader</div><div class="line">      			(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</div><div class="line">       	printWriter = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(),<span class="keyword">true</span>);</div><div class="line">       	<span class="comment">//读取从客户端发送过来的信息</span></div><div class="line">       	<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">      		String info = br.readLine();</div><div class="line">       		jTextArea.append(<span class="string">"客户端 "</span>+getTime()+<span class="string">"\r\n"</span>+info+<span class="string">"\r\n"</span>);</div><div class="line">       	&#125;</div><div class="line">			</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;   &#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用来获取当前的时间</div><div class="line"> * <span class="doctag">@return</span> 当前的时间</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTime</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//可以对每个单独时间域进行修改</span></div><div class="line">	Calendar c = Calendar.getInstance();</div><div class="line">	<span class="keyword">int</span> hour = c.get(Calendar.HOUR_OF_DAY);<span class="comment">//获取小时</span></div><div class="line">	<span class="keyword">int</span> minute = c.get(Calendar.MINUTE);</div><div class="line">	<span class="keyword">int</span> second = c.get(Calendar.SECOND);</div><div class="line">		</div><div class="line">	<span class="keyword">return</span> hour+<span class="string">":"</span>+minute+<span class="string">":"</span>+second;	</div><div class="line">   &#125;</div><div class="line">	</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 当button被点击的时候调用</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	<span class="comment">//当按钮按下的时候调用</span></div><div class="line">	<span class="keyword">if</span>(e.getActionCommand().equals(<span class="string">"send"</span>))&#123;</div><div class="line">		<span class="comment">//把服务器在jTextField写的内容发送给客户端</span></div><div class="line">		String info= jTextField.getText();</div><div class="line">		jTextArea.append(<span class="string">"服务器 "</span>+getTime()+<span class="string">"\r\n"</span>+info+<span class="string">"\r\n"</span>);</div><div class="line">		printWriter.println(info);</div><div class="line">		<span class="comment">//清楚发送框内容</span></div><div class="line">		jTextField.setText(<span class="string">""</span>);</div><div class="line">			</div><div class="line">		&#125;	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> qiu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.net.UnknownHostException;</div><div class="line"><span class="keyword">import</span> java.util.Calendar;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JPanel;</div><div class="line"><span class="keyword">import</span> javax.swing.JScrollPane;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextArea;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 简单聊天软件的客户端</div><div class="line"> * */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClient</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</div><div class="line">    </div><div class="line">	JTextArea jTextArea=<span class="keyword">null</span>;</div><div class="line">	JTextField jTextField=<span class="keyword">null</span>;</div><div class="line">	JPanel jPanel=<span class="keyword">null</span>;</div><div class="line">	JScrollPane jScrollPane=<span class="keyword">null</span>;</div><div class="line">	JButton sendButton=<span class="keyword">null</span>;</div><div class="line">	PrintWriter printWriter=<span class="keyword">null</span>;</div><div class="line">	</div><div class="line"><span class="comment">/**</span></div><div class="line">  *  客户端的主函数</div><div class="line">  * */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">      <span class="keyword">new</span> MyClient();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 客户端构造函数用来初始化</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyClient</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//GUI初始化</span></div><div class="line">	jTextArea= <span class="keyword">new</span> JTextArea();</div><div class="line">	jTextField=<span class="keyword">new</span> JTextField(<span class="number">20</span>);</div><div class="line">	sendButton= <span class="keyword">new</span> JButton(<span class="string">"发送"</span>);</div><div class="line">	sendButton.addActionListener(<span class="keyword">this</span>);</div><div class="line">	sendButton.setActionCommand(<span class="string">"send"</span>);</div><div class="line">	jScrollPane=<span class="keyword">new</span> JScrollPane(jTextArea);</div><div class="line">	jPanel=<span class="keyword">new</span> JPanel();</div><div class="line">	</div><div class="line">	jPanel.add(jTextField);</div><div class="line">	jPanel.add(sendButton);</div><div class="line">		</div><div class="line">	<span class="keyword">this</span>.add(jScrollPane,BorderLayout.CENTER);</div><div class="line">	<span class="keyword">this</span>.add(jPanel,BorderLayout.SOUTH);</div><div class="line">		</div><div class="line">	<span class="keyword">this</span>.setSize(<span class="number">400</span>, <span class="number">300</span>);</div><div class="line">	<span class="keyword">this</span>.setTitle(<span class="string">"聊天客户端"</span>);</div><div class="line">	<span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">	<span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">this</span>.setResizable(<span class="keyword">true</span>);	</div><div class="line">        </div><div class="line">    <span class="comment">//socket通信代码</span></div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">    	Socket s= <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">9988</span>);</div><div class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader</div><div class="line">				(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</div><div class="line">		printWriter= <span class="keyword">new</span> PrintWriter(s.getOutputStream(),<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">          	<span class="comment">//不停的读取服务器发过来的信息</span></div><div class="line">            String string=br.readLine();</div><div class="line">            jTextArea.append(<span class="string">"服务器 "</span>+getTime()+<span class="string">"\r\n"</span>+string+<span class="string">"\r\n"</span>);</div><div class="line">            &#125;</div><div class="line">			</div><div class="line">	&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 用来获取当前的时间</div><div class="line">  * <span class="doctag">@return</span> 当前的时间</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTime</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//可以对每个单独时间域进行修改</span></div><div class="line">	Calendar c = Calendar.getInstance();</div><div class="line">	<span class="keyword">int</span> hour = c.get(Calendar.HOUR_OF_DAY);<span class="comment">//获取小时</span></div><div class="line">	<span class="keyword">int</span> minute = c.get(Calendar.MINUTE);</div><div class="line">	<span class="keyword">int</span> second = c.get(Calendar.SECOND);</div><div class="line">		</div><div class="line">	<span class="keyword">return</span> hour+<span class="string">":"</span>+minute+<span class="string">":"</span>+second;	</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  * 当button被点击的时候调用</div><div class="line">  */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	<span class="keyword">if</span>(sendButton.getActionCommand().equals(<span class="string">"send"</span>))&#123;</div><div class="line">		String info= jTextField.getText();</div><div class="line">		<span class="comment">//将客户端发送的信息发送给服务端</span></div><div class="line">		jTextArea.append(<span class="string">"客户端 "</span>+getTime()+<span class="string">"\r\n"</span>+info+<span class="string">"\r\n"</span>);</div><div class="line">		printWriter.println(info);</div><div class="line">		jTextField.setText(<span class="string">""</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git命令参考手册]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/27/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/git%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/</url>
      <content type="html"><![CDATA[<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ul>
<li><p><a href="https://git.oschina.net/progit/index.html" target="_blank" rel="external">Pro Git（中文版）</a></p>
</li>
<li><p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的官方文档</a></p>
</li>
</ul>
<ul>
<li><a href="http://gitref.org/zh/" target="_blank" rel="external">git参考手册</a></li>
</ul>
<h3 id="总结版本"><a href="#总结版本" class="headerlink" title="总结版本"></a>总结版本</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">git init                    # 初始化本地git仓库（创建新仓库）</div><div class="line">git config --global user.name "xxx"          # 配置用户名</div><div class="line">git config --global user.email "xxx@xxx.com"         # 配置邮件</div><div class="line">git config --global color.ui true       # git status等命令自动着色</div><div class="line">git config --global color.status auto</div><div class="line">git config --global color.diff auto</div><div class="line">git config --global color.branch auto</div><div class="line">git config --global color.interactive auto</div><div class="line">git clone git+ssh://git@192.168.53.168/VT.git    # clone远程仓库</div><div class="line">git status              # 查看当前版本状态（是否修改）</div><div class="line">git add xyz             # 添加xyz文件至index</div><div class="line">git add .           # 增加当前子目录下所有更改过的文件至index</div><div class="line">git commit -m 'xxx'                 # 提交</div><div class="line">git commit --amend -m 'xxx'      # 合并上一次提交（用于反复修改）</div><div class="line">git commit -am 'xxx'             # 将add和commit合为一步</div><div class="line">git rm xxx                      # 删除index中的文件</div><div class="line">git rm -r *                 # 递归删除</div><div class="line">git log                       # 显示提交日志</div><div class="line">git log -1                      # 显示1行日志 -n为n行</div><div class="line">git log -5</div><div class="line">git log --stat        # 显示提交日志及相关变动文件</div><div class="line">git log -p -m</div><div class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818  # 显示某个提交的详细内容</div><div class="line">git show dfb02          # 可只用commitid的前几位</div><div class="line">git show HEAD               # 显示HEAD提交日志</div><div class="line">git show HEAD^     # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</div><div class="line">git tag                   # 显示已存在的tag</div><div class="line">git tag -a v2.0 -m 'xxx'            # 增加v2.0的tag</div><div class="line">git show v2.0         # 显示v2.0的日志及详细内容</div><div class="line">git log v2.0                # 显示v2.0的日志</div><div class="line">git diff              # 显示所有未添加至index的变更</div><div class="line">git diff --cached      # 显示所有已添加index但还未commit的变更</div><div class="line">git diff HEAD^     # 比较与上一个版本的差异</div><div class="line">git diff HEAD -- ./lib       # 比较与HEAD版本lib目录的差异</div><div class="line">git diff origin/master..master      # 比较远程分支master上有本地分支master上没有的</div><div class="line">git diff origin/master..master --stat        # 只显示差异的文件，不显示具体内容</div><div class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）</div><div class="line">git branch                 # 显示本地分支</div><div class="line">git branch --contains 50089        # 显示包含提交50089的分支</div><div class="line">git branch -a                    # 显示所有分支</div><div class="line">git branch -r         # 显示所有原创分支</div><div class="line">git branch --merged          # 显示所有已合并到当前分支的分支</div><div class="line">git branch --no-merged          # 显示所有未合并到当前分支的分支</div><div class="line">git branch -m master master_copy       # 本地分支改名</div><div class="line">git checkout -b master_copy            # 从当前分支创建新分支master_copy并检出</div><div class="line">git checkout -b master master_copy     # 上面的完整版</div><div class="line">git checkout features/performance      # 检出已存在的features/performance分支</div><div class="line">git checkout --track hotfixes/BJVEP933       # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</div><div class="line">git checkout v2.0            # 检出版本v2.0</div><div class="line">git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出</div><div class="line">git checkout -- README            # 检出head版本的README文件（可用于修改错误回退）</div><div class="line">git merge origin/master      # 合并远程master分支至当前分支</div><div class="line">git cherry-pick ff44785404a8e    # 合并提交ff44785404a8e的修改</div><div class="line">git push origin master        # 将当前分支push到远程master分支</div><div class="line">git push origin :hotfixes/BJVEP933           # 删除远程仓库的hotfixes/BJVEP933分支</div><div class="line">git push --tags            # 把所有tag推送到远程仓库</div><div class="line">git fetch               # 获取所有远程分支（不更新本地分支，另需merge）</div><div class="line">git fetch --prune              # 获取所有原创分支并清除服务器上已删掉的分支</div><div class="line">git pull origin master          # 获取远程分支master并merge到当前分支</div><div class="line">git mv README README2      # 重命名文件README为README2</div><div class="line">git reset --hard HEAD      # 将当前版本重置为HEAD（通常用于merge失败回退）</div><div class="line">git rebase</div><div class="line">git branch -d hotfixes/BJVEP933        # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</div><div class="line">git branch -D hotfixes/BJVEP933    # 强制删除分支hotfixes/BJVEP933</div><div class="line">git ls-files          # 列出git index包含的文件</div><div class="line">git show-branch        # 图示当前分支历史</div><div class="line">git show-branch --all         # 图示所有分支历史</div><div class="line">git whatchanged           # 显示提交历史对应的文件修改</div><div class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</div><div class="line">git ls-tree HEAD           # 内部命令：显示某个git对象</div><div class="line">git rev-parse v2.0       # 内部命令：显示某个ref对于的SHA1 HASH</div><div class="line">git reflog         # 显示所有提交，包括孤立节点</div><div class="line">git show HEAD@&#123;5&#125;</div><div class="line">git show master@&#123;yesterday&#125;      # 显示master分支昨天的状态</div><div class="line">git log --pretty=format:'%h %s' --graph        # 图示提交日志</div><div class="line">git show HEAD~3</div><div class="line">git show -s --pretty=raw 2be7fcb476</div><div class="line">git stash     # 暂存当前修改，将所有至为HEAD状态</div><div class="line">git stash list         # 查看所有暂存</div><div class="line">git stash show -p stash@&#123;0&#125;    # 参考第一次暂存</div><div class="line">git stash apply stash@&#123;0&#125;       # 应用第一次暂存</div><div class="line">git grep "delete from"    # 文件中搜索文本“delete from”</div><div class="line">git grep -e '#define' --and -e SORT_DIRENT</div><div class="line">git gc</div><div class="line">git fsck</div></pre></td></tr></table></figure>
<h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><ul>
<li>用户的git配置文件~/.gitconfig</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git init                    #初始化本地git仓库（创建新仓库）</div><div class="line">git config --global user.name <span class="string">"xxx"</span>     #配置用户名</div><div class="line">git config --global user.email <span class="string">"xxx@xxx.com"</span>   # 配置邮件</div><div class="line">git config --global color.ui <span class="literal">true</span>    <span class="meta"># git status等命令自动着色</span></div><div class="line">git config --global alias.co checkout</div><div class="line">git config --global alias.ci commit</div><div class="line">git config --global alias.st status</div><div class="line">git config --global alias.br branch</div><div class="line">git config --global core.editor <span class="string">"mate -w"</span>    # 设置Editor使用textmate</div><div class="line">git config -l  # 列举所有配置</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h3><h4 id="查看、添加、提交、删除、找回，重置修改文件"><a href="#查看、添加、提交、删除、找回，重置修改文件" class="headerlink" title="查看、添加、提交、删除、找回，重置修改文件"></a>查看、添加、提交、删除、找回，重置修改文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">git help &lt;command&gt;  # 显示command的help</div><div class="line">git show            # 显示某次提交的内容</div><div class="line">git show $id</div><div class="line"></div><div class="line">git co  -- &lt;file&gt;   # 抛弃工作区修改</div><div class="line">git co  .           # 抛弃工作区修改</div><div class="line"></div><div class="line">git add &lt;file&gt;      # 将工作文件修改提交到本地暂存区</div><div class="line">git add .           # 将所有修改过的工作文件提交暂存区</div><div class="line"></div><div class="line">git rm &lt;file&gt;       # 从版本库中删除文件</div><div class="line">git rm &lt;file&gt; --cached  # 从版本库中删除文件，但不删除文件</div><div class="line"></div><div class="line">git reset &lt;file&gt;    # 从暂存区恢复到工作文件</div><div class="line">git reset -- .      # 从暂存区恢复到工作文件</div><div class="line">git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</div><div class="line"></div><div class="line">git ci &lt;file&gt;</div><div class="line">git ci .</div><div class="line">git ci -a           # 将git add, git rm和git ci等操作都合并在一起做</div><div class="line">git ci -am <span class="string">"some comments"</span></div><div class="line">git ci --amend      # 修改最后一次提交记录</div><div class="line"></div><div class="line">git revert &lt;$id&gt;    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</div><div class="line">git revert HEAD     # 恢复最后一次提交的状态</div><div class="line"></div><div class="line">### 查看文件diff</div><div class="line"></div><div class="line">shell</div><div class="line">git diff &lt;file&gt;     # 比较当前文件和暂存区文件差异</div><div class="line">git diff</div><div class="line">git diff &lt;$id1&gt; &lt;$id2&gt;   # 比较两次提交之间的差异</div><div class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较 </div><div class="line">git diff --staged   # 比较暂存区和版本库差异</div><div class="line">git diff --cached   # 比较暂存区和版本库差异</div><div class="line">git diff --stat     # 仅仅比较统计信息</div></pre></td></tr></table></figure>
<h4 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span></div><div class="line">git <span class="built_in">log</span> &lt;file&gt;      # 查看该文件每次提交记录</div><div class="line">git <span class="built_in">log</span> -p &lt;file&gt;   # 查看每次详细修改内容的diff</div><div class="line">git <span class="built_in">log</span> -p <span class="number">-2</span>       # 查看最近两次详细修改内容的diff</div><div class="line">git <span class="built_in">log</span> --stat      # 查看提交统计信息</div></pre></td></tr></table></figure>
<h4 id="tig"><a href="#tig" class="headerlink" title="tig"></a>tig</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mac上可以使用tig代替diff和<span class="built_in">log</span>，brew install tig</div></pre></td></tr></table></figure>
<h3 id="Git-本地分支管理"><a href="#Git-本地分支管理" class="headerlink" title="Git 本地分支管理"></a>Git 本地分支管理</h3><h4 id="查看、切换、创建和删除分支"><a href="#查看、切换、创建和删除分支" class="headerlink" title="查看、切换、创建和删除分支"></a>查看、切换、创建和删除分支</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">git br -r           # 查看远程分支</div><div class="line">git br &lt;new_branch&gt; # 创建新的分支</div><div class="line">git br -v           # 查看各个分支最后提交信息</div><div class="line">git br --merged     # 查看已经被合并到当前分支的分支</div><div class="line">git br --no-merged  # 查看尚未被合并到当前分支的分支</div><div class="line"></div><div class="line">git co &lt;branch&gt;     # 切换到某个分支</div><div class="line">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</div><div class="line">git co -b &lt;new_branch&gt; &lt;branch&gt;  # 基于branch创建新的new_branch</div><div class="line"></div><div class="line">git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</div><div class="line">git co $id -b &lt;new_branch&gt;  # 把某次历史提交记录checkout出来，创建成一个分支</div><div class="line"></div><div class="line">git br -d &lt;branch&gt;  # 删除某个分支</div><div class="line">git br -D &lt;branch&gt;  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</div></pre></td></tr></table></figure>
<h4 id="分支合并和rebase"><a href="#分支合并和rebase" class="headerlink" title="分支合并和rebase"></a>分支合并和rebase</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git merge &lt;branch&gt;               # 将branch分支合并到当前分支</div><div class="line">git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交</div><div class="line"></div><div class="line">git rebase master &lt;branch&gt;       # 将master rebase到branch，相当于：</div><div class="line">git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</div></pre></td></tr></table></figure>
<h3 id="Git补丁管理-方便在多台机器上开发同步时用"><a href="#Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a>Git补丁管理(方便在多台机器上开发同步时用)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git diff &gt; ../sync.patch         # 生成补丁</div><div class="line">git apply ../sync.patch          # 打补丁</div><div class="line">git apply --check ../sync.patch  # 测试补丁能否成功</div></pre></td></tr></table></figure>
<h3 id="Git暂存管理"><a href="#Git暂存管理" class="headerlink" title="Git暂存管理"></a>Git暂存管理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git stash                        # 暂存</div><div class="line">git stash <span class="built_in">list</span>                   # 列所有stash</div><div class="line">git stash apply                  # 恢复暂存的内容</div><div class="line">git stash drop                   # 删除暂存区</div></pre></td></tr></table></figure>
<h3 id="Git远程分支管理"><a href="#Git远程分支管理" class="headerlink" title="Git远程分支管理"></a>Git远程分支管理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">git pull                         # 抓取远程仓库所有分支更新并合并到本地</div><div class="line">git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</div><div class="line">git fetch origin                 # 抓取远程仓库更新</div><div class="line">git merge origin/master          # 将远程主分支合并到本地当前分支</div><div class="line">git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支</div><div class="line">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  # 基于远程分支创建本地分支，功能同上</div><div class="line"></div><div class="line">git push                         <span class="meta"># push所有分支</span></div><div class="line">git push origin master           # 将本地主分支推到远程主分支</div><div class="line">git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</div><div class="line">git push origin &lt;local_branch&gt;   # 创建远程分支， origin是远程仓库名</div><div class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  # 创建远程分支</div><div class="line">git push origin :&lt;remote_branch&gt;  #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</div></pre></td></tr></table></figure>
<h3 id="Git远程仓库管理"><a href="#Git远程仓库管理" class="headerlink" title="Git远程仓库管理"></a>Git远程仓库管理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git remote -v                    # 查看远程服务器地址和仓库名称</div><div class="line">git remote show origin           # 查看远程服务器仓库状态</div><div class="line">git remote add origin git@github:robbin/robbin_site.git         # 添加远程仓库地址</div><div class="line">git remote <span class="built_in">set</span>-url origin git@github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)</div><div class="line">git remote rm &lt;repository&gt;       # 删除远程仓库</div></pre></td></tr></table></figure>
<h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库</div><div class="line">scp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上</div><div class="line"></div><div class="line">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</div><div class="line">git remote add origin git@github.com:robbin/robbin_site.git    # 设置远程仓库地址</div><div class="line">git push -u origin master                                      # 客户端首次提交</div><div class="line">git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track</div><div class="line"></div><div class="line">git remote <span class="built_in">set</span>-head origin master   # 设置远程仓库的HEAD指向master分支</div></pre></td></tr></table></figure>
<h4 id="也可以命令设置跟踪远程库和本地库"><a href="#也可以命令设置跟踪远程库和本地库" class="headerlink" title="也可以命令设置跟踪远程库和本地库"></a>也可以命令设置跟踪远程库和本地库</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch --<span class="built_in">set</span>-upstream master origin/master</div><div class="line">git branch --<span class="built_in">set</span>-upstream develop origin/develop</div></pre></td></tr></table></figure>
<h3 id="常用命令图示"><a href="#常用命令图示" class="headerlink" title="常用命令图示"></a>常用命令图示</h3><center><img src="http://o99dg8ap9.bkt.clouddn.com/git%E5%91%BD%E4%BB%A4%E6%9F%A5%E8%AF%A2%E6%89%8B%E5%86%8C1.jpg" alt=""></center>

<h3 id="流程指引"><a href="#流程指引" class="headerlink" title="流程指引"></a>流程指引</h3><p><img src="http://o99dg8ap9.bkt.clouddn.com/git%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C.png" class="full-image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[米店]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/25/%E6%96%87%E5%AD%A6%E7%94%B5%E5%BD%B1%E9%9F%B3%E4%B9%90%E8%AF%97%E6%AD%8C%E5%92%8C%E7%94%BB/%E7%B1%B3%E5%BA%97/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">时间是个收破烂的，你本想将破烂扔给他，却不小心把自己也扔了。 ——王朔《时间说》</blockquote>


<h3 id="歌曲"><a href="#歌曲" class="headerlink" title="歌曲"></a>歌曲</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=26494698&auto=0&height=66"><br></iframe>

<h3 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h3><p>词曲 : 张玮玮　演唱 : 张玮玮 郭龙　编曲：赵永庆　吉他：赵永庆</p>
<p>三月的烟雨飘摇的南方　　　　　　　　　　三月的烟雨飘摇的南方<br>你坐在你空空的米店　　　　　　　　　　　你坐在你空空的米店<br>你一手拿着苹果一手拿着命运　　　　　　　你一手拿着苹果一手拿着命运<br>在寻找你自己的　　　　　　　　　　　　　香在寻找你自己的香<br>窗外的人们匆匆忙忙　　　　　　　　　　　窗外的人们匆匆忙忙<br>把眼光丢在潮湿的路上　　　　　　　　　　把眼光丢在潮湿的路上<br>你的舞步划过空空的房间　　　　　　　　　你的舞步划过空空的房间<br>时光就变成了烟　　　　　　　　　　　　　时光就变成了烟<br>爱人 你可感到明天已经来临　　　　　　　　爱人 你可感到明天已经来临<br>码头上停着我们的船　　　　　　　　　　　码头上停着我们的船<br>我会洗干净头发爬上桅杆　　　　　　　　　我会洗干净头发爬上桅杆<br>撑起我们葡萄枝嫩叶般的家　　　　　　　　撑起我们葡萄枝嫩叶般的家
　　</p>
<hr>
<h3 id="Vtlander的水彩插画"><a href="#Vtlander的水彩插画" class="headerlink" title="Vtlander的水彩插画"></a>Vtlander的水彩插画</h3><center><img src="http://o99dg8ap9.bkt.clouddn.com/%E8%8E%89%E8%8E%89%E5%AE%8912.jpg" alt=""></center>

<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E8%8E%89%E8%8E%89%E5%AE%8911.jpg" alt=""></center>

<a id="more"></a>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E8%8E%89%E8%8E%89%E5%AE%891.jpg" alt=""></center>

<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E8%8E%89%E8%8E%89%E5%AE%892.jpg" alt=""></center>

<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E8%8E%89%E8%8E%89%E5%AE%893.jpg" alt=""></center>

<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E8%8E%89%E8%8E%89%E5%AE%894.jpg" alt=""></center><br><center><img src="http://o99dg8ap9.bkt.clouddn.com/%E8%8E%89%E8%8E%89%E5%AE%895.jpg" alt=""></center>

<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E8%8E%89%E8%8E%89%E5%AE%896.jpg" alt=""></center>

<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E8%8E%89%E8%8E%89%E5%AE%897.jpg" alt=""></center>

<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E8%8E%89%E8%8E%89%E5%AE%898.jpg" alt=""></center>

<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E8%8E%89%E8%8E%89%E5%AE%899.jpg" alt=""></center>

<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E8%8E%89%E8%8E%89%E5%AE%8910.jpg" alt=""></center>


]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[你渴望的离开，只是无处停摆《理想三旬》陈鸿宇]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/25/%E6%96%87%E5%AD%A6%E7%94%B5%E5%BD%B1%E9%9F%B3%E4%B9%90%E8%AF%97%E6%AD%8C%E5%92%8C%E7%94%BB/%E4%BD%A0%E6%B8%B4%E6%9C%9B%E7%9A%84%E7%A6%BB%E5%BC%80%EF%BC%8C%E5%8F%AA%E6%98%AF%E6%97%A0%E5%A4%84%E5%81%9C%E6%91%86%E3%80%8A%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC%E3%80%8B%E9%99%88%E9%B8%BF%E5%AE%87/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">为了自己想过的生活，勇于放弃一些东西。这个世界没有公正之处，你也永远得不到两全之法。若要自由，就得牺牲安全。若要闲散，就不能获得别人评价中的成就。若要愉悦，就无需计较身边人给予的态度。若要前行，就得离开你现在停留的地方。——弗朗西斯·梅斯《托斯卡纳艳阳下》</blockquote>

<h3 id="歌曲"><a href="#歌曲" class="headerlink" title="歌曲"></a>歌曲</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=31445772&auto=0&height=66"><br></iframe>


<h3 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h3><p>作曲 : 陈鸿宇　作词 : 唐映枫　编曲：陈鸿宇/马雨阳　混音：马雨阳<br><br>雨后有车驶来　　　　　　　　　　　　　　归途也还可爱<br> 驶过暮色苍白　　　　　　　　　　　　　　琴弦少了姿态<br> 旧铁皮往南开，恋人已不在　　　　　　　　再不见那夜里，听歌的小孩<br> 收听浓烟下的　　　　　　　　　　　　　　时光匆匆独白<br> 诗歌电台　　　　　　　　　　　　　　　　将颠沛磨成卡带<br> 不动情的咳嗽，至少看起来　　　　　　　　已枯卷的情怀，踏碎成年代<br></p>
<hr>
<p> wu　　　　　　　　　　　　　　　　　　　wu<br> 就老去吧，孤独别醒来　　　　　　　　　　青春又醉倒在<br> 你渴望的离开　　　　　　　　　　　　　　籍籍无名的怀<br> 只是无处停摆　　　　　　　　　　　　　　靠嬉笑来虚度，聚散得慷慨</p><p>就歌唱吧，眼睛眯起来　　　　　　　　　　辗转却去不到<br> 而热泪的崩坏　　　　　　　　　　　　　　对的站台<br> 只是没抵达的存在　　　　　　　　　　　　如果漂泊是成长，必经的路牌<br> </p>
<hr>
<p></p><p>你迷醒岁月中　　　　　　　　　　　　　　就歌唱吧，眼睛眯起来<br> 那贫瘠的未来　　　　　　　　　　　　　　而热泪的崩坏<br> 像遗憾季节里，未结果的爱　　　　　　　　只是没抵达的存在<br> 弄脏了每一页诗　　　　　　　　　　　　　就甜蜜地忍耐<br> 吻最疼痛的告白　　　　　　　　　　　　　繁星润湿窗台<br> 而风声吹到这，已不需要释怀　　　　　　　光影跳动着像在，困倦里说爱</p><p>就老去吧，孤独别醒来　　　　　　　　　　再无谓的感慨<br> 你渴望的离开　　　　　　　　　　　　　　以为明白<br> 只是无处停摆　　　　　　　　　　　　　　梦倒塌的地方，今已爬满青苔</p><p></p>
<h3 id="油画"><a href="#油画" class="headerlink" title="油画"></a>油画</h3><ul>
<li>春水初生，春林初盛，春风十里，不如你</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC7.jpg" alt=""></center>

<ul>
<li>你挺悲观的，但是不彻底，所以才拧巴</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC11.jpg" alt=""></center>

<a id="more"></a>
<ul>
<li>我想，一把茶壶，茶叶在茶壶里泡过一段时间，即使茶水被喝光了，即使茶叶被倒出来了，茶气还是在的。北京是个大茶壶。太多性情中人象茶叶似的在北京泡过，即使性情被耗没了，即使人可能也死掉了，但是人气还在，仿佛茶气</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC1.jpg" alt=""></center>

<ul>
<li>男子如果遇上真正对的女子，不用打坐、静观、修心，一个恍惚就能体会到了悟，在同一时，一切都空，一切都有，生死无间</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC2.jpg" alt=""></center>

<ul>
<li>有些人像报纸，他们的故事全写在脸上，有些人像收音机，关着的时候是个死物，可是如果找对了开关，选对了台，他们会喋喋不休，直到你把他们关上，或是电池耗光</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC3.jpg" alt=""></center>

<ul>
<li>我要用尽我的万种风情，让你在将来任何不和我在一起的时候，内心无法安宁</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC4.jpg" alt=""></center>

<ul>
<li>一个人应该用一生去明白欲望就是虚幻呢，还是用一生来追求一个又一个欲望的满足</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC5.jpg" alt=""></center>

<ul>
<li>我说我许了一个愿，你想不想知道。她说不想。我说不想也得告诉你，否则将来你会怪我欺负你。我要用尽我的万种风情，让你在将来任何不和我在一起的时候，内心无法安宁。她一言不发，我借着酒劲儿，说了很多漫无边际的话，其中有一句烂俗无比，我说：“我不要天上的星星，我要尘世的幸福。”</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC6.jpg" alt=""></center>

<ul>
<li>黑夜其实从来就不是黑的，黑夜里，合欢花还是红的。毛绒绒的紫藤花还是紫白色得，和黑夜还是白天没有关系。就像，我想你，和黑夜还是白天没有关系，和晴天和下雨没有关系，甚至和你知道不知道都没有关系，尽管我还是会尽量让你知道，想到这里，于是欢喜</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC8.jpg" alt=""></center>

<ul>
<li>可遇不可求的事<br>后海有树的院子<br>夏代有工的玉<br>此时此刻的云<br>二十来岁的你</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC9.jpg" alt=""></center>

<ul>
<li>抱你 不知道下次在哪里，所以 再抱你 再大一点力气 你就小到 我风衣口袋里</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC10.jpg" alt=""></center>

<ul>
<li>妈妈们一面暗示女孩男人的凶险无聊以及要洁身自好，一方面教导女儿对颜色的品位以及衣服搭配作为将来勾引男人的理论指导</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC12.jpg" alt=""></center>

<ul>
<li>心里很近的朋友，是会想念的，是隔上一个月两个月必定要见一次面的，不说什么，在一起就觉得很温暖</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC13.jpg" alt=""></center>

<ul>
<li>愿有岁月可回首，且以情深共白头</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC14.jpg" alt=""></center>

<ul>
<li>我是混蛋我是懦夫<br>我替老天管好自己<br>不去祸害人间不去祸害你</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC15.jpg" alt=""></center>

<ul>
<li>我把月亮戳到天上，天就是我的。我把脚踩入地里，地就是我的。我把唇压进你的脸庞，你就是我的</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC16.jpg" alt=""></center>

<ul>
<li>佛说，香飘的每一刹那都是确定的，但是每下一个刹那都是不确定的。一期一会，冥冥中自有定数</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC17.jpg" alt=""></center>

<ul>
<li>不知道喜欢你什么，实在不知道，如果确定知道喜欢你什么，是不够喜欢你。因为不确定具体喜欢你什么，所以喜欢你所有一切及其他</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC18.jpg" alt=""></center>

<ul>
<li>实在放不下的时候，去趟重症病房或者墓地，你容易明白，你已经得到太多，再要就是贪婪，时间太少，好玩儿的事儿太多，从尊重生命的角度，不必纠缠</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC19.jpg" alt=""></center>

<ul>
<li>想生个女儿，头发顺长，肉薄心窄，眼神忧郁。用牛奶，豆浆，米汤和可口可乐浇灌，一二十年后长成祸水</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC20.jpg" alt=""></center>

<ul>
<li>如果她是一种植物，我的眼光就是水，这样浇灌了三年，或许她从来没有想过她如此滋润的原因</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E6%97%AC22.jpg" alt=""></center>

<h3 id="油画作者"><a href="#油画作者" class="headerlink" title="油画作者"></a>油画作者</h3><blockquote>
<p>以上油画来自俄罗斯油画家Vladimir Volegov，Vladimir 鲜明的色彩和大胆的笔触，创建了一个永恒的感性形象的图画</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法复杂度速查表]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%92%8C%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h3 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h3><table><tr><td bgcolor="#53d000">绝佳</td><td bgcolor="#c8ea00">不错</td><td bgcolor="#ff0">一般</td><td bgcolor="#ffc543">不佳</td><td bgcolor="#ff8989">糟糕</td></tr></table>


<h3 id="数组排序算法"><a href="#数组排序算法" class="headerlink" title="数组排序算法"></a>数组排序算法</h3><table> <thead> <tr> <th bgcolor="#F9F9F9">算法</th> <th bgcolor="#F9F9F9" colspan="3">时间复杂度</th> <th bgcolor="#F9F9F9">空间复杂度</th> </tr> <tr> <th bgcolor="#F9F9F9"></th> <th bgcolor="#F9F9F9">最佳</th> <th bgcolor="#F9F9F9">平均</th> <th bgcolor="#F9F9F9">最差</th> <th bgcolor="#F9F9F9">最差</th> </tr> </thead> <tbody> <tr> <td><a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank">Quicksort</a></td> <td bgcolor="#ffc543">O(n log(n))</td> <td bgcolor="#ffc543">O(n log(n))</td> <td bgcolor="#ff8989">O(n^2)</td> <td bgcolor="#c8ea00">O(log(n))</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Mergesort</a></td> <td bgcolor="#ffc543">O(n log(n))</td> <td bgcolor="#ffc543">O(n log(n))</td> <td bgcolor="#ffc543">O(n log(n))</td> <td bgcolor="#ff0">O(n)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Timsort" target="_blank">Timsort</a></td> <td bgcolor="#53d000">O(n)</td> <td bgcolor="#ffc543">O(n log(n))</td> <td bgcolor="#ffc543">O(n log(n))</td> <td bgcolor="#ff0">O(n)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Heapsort" target="_blank">Heapsort</a></td> <td bgcolor="#ffc543">O(n log(n))</td> <td bgcolor="#ffc543">O(n log(n))</td> <td bgcolor="#ffc543">O(n log(n))</td> <td bgcolor="#53d000">O(1)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble Sort</a></td> <td bgcolor="#53d000">O(n)</td> <td bgcolor="#ff8989">O(n^2)</td> <td bgcolor="#ff8989">O(n^2)</td> <td bgcolor="#53d000">O(1)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion Sort</a></td> <td bgcolor="#53d000">O(n)</td> <td bgcolor="#ff8989">O(n^2)</td> <td bgcolor="#ff8989">O(n^2)</td> <td bgcolor="#53d000">O(1)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Selection_sort" target="_blank">Selection Sort</a></td> <td bgcolor="#ff8989">O(n^2)</td> <td bgcolor="#ff8989">O(n^2)</td> <td bgcolor="#ff8989">O(n^2)</td> <td bgcolor="#53d000">O(1)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Shellsort" target="_blank">Shell Sort</a></td> <td bgcolor="#53d000">O(n)</td> <td bgcolor="#ff8989">O((nlog(n))^2)</td> <td bgcolor="#ff8989">O((nlog(n))^2)</td> <td bgcolor="#53d000">O(1)</td> </tr> <tr> <td><a title="Only for integers. k is a number of buckets" href="http://en.wikipedia.org/wiki/Bucket_sort" rel="external" target="_blank">Bucket Sort</a></td> <td bgcolor="#53d000">O(n+k)</td> <td bgcolor="#53d000">O(n+k)</td> <td bgcolor="#ff8989">O(n^2)</td> <td bgcolor="#ff0">O(n)</td> </tr> <tr> <td><a title="Constant number of digits 'k'" href="http://en.wikipedia.org/wiki/Radix_sort" rel="external" target="_blank">Radix Sort</a></td> <td bgcolor="#53d000">O(nk)</td> <td bgcolor="#53d000">O(nk)</td> <td bgcolor="#53d000">O(nk)</td> <td bgcolor="#ff0">O(n+k)</td> </tr> </tbody> </table>

<a id="more"></a>
<h3 id="数据结构操作"><a href="#数据结构操作" class="headerlink" title="数据结构操作"></a>数据结构操作</h3><table> <thead> <tr> <th bgcolor="#F9F9F9">数据结构</th> <th bgcolor="#F9F9F9" colspan="8">时间复杂度</th> <th bgcolor="#F9F9F9">空间复杂度</th> </tr> <tr> <th bgcolor="#F9F9F9"></th> <th bgcolor="#F9F9F9" colspan="4">平均</th> <th bgcolor="#F9F9F9" colspan="4">最差</th> <th bgcolor="#F9F9F9">最差</th> </tr> <tr> <th></th> <th bgcolor="#F9F9F9">访问</th> <th bgcolor="#F9F9F9">搜索</th> <th bgcolor="#F9F9F9">插入</th> <th bgcolor="#F9F9F9">删除</th> <th bgcolor="#F9F9F9">访问</th> <th bgcolor="#F9F9F9">搜索</th> <th bgcolor="#F9F9F9">插入</th> <th bgcolor="#F9F9F9">删除</th> <th bgcolor="#F9F9F9"></th> </tr> </thead> <tbody> <tr> <td><a href="http://en.wikipedia.org/wiki/Array_data_structure" target="_blank">Array</a></td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Stack_(abstract_data_type)" target="_blank">Stack</a></td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#ff0">O(n)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Singly_linked_list#Singly_linked_lists" target="_blank">Singly-Linked List</a></td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#ff0">O(n)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Doubly_linked_list" target="_blank">Doubly-Linked List</a></td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#ff0">O(n)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Skip_list" target="_blank">Skip List</a></td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ffc543">O(n log(n))</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Hash_table" target="_blank">Hash Table</a></td> <td bgcolor="#F9F9F9">-</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#F9F9F9">-</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Binary_search_tree" target="_blank">Binary Search Tree</a></td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Cartesian_tree" target="_blank">Cartesian Tree</a></td> <td bgcolor="#F9F9F9">-</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#F9F9F9">-</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#ff0">O(n)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/B_tree" target="_blank">B-Tree</a></td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#ff0">O(n)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Red-black_tree" target="_blank">Red-Black Tree</a></td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#ff0">O(n)</td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Splay_tree" target="_blank">Splay Tree</a></td> <td bgcolor="#F9F9F9">-</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#F9F9F9">-</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#ff0">O(n)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/AVL_tree" target="_blank">AVL Tree</a></td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#ff0">O(n)</td> </tr> </tbody> </table> 



<h3 id="图操作"><a href="#图操作" class="headerlink" title="图操作"></a>图操作</h3><table> <tbody> <tr> <th bgcolor="#F9F9F9">节点 / 边界管理</th> <th bgcolor="#F9F9F9">存储</th> <th bgcolor="#F9F9F9">增加顶点</th> <th bgcolor="#F9F9F9">增加边界</th> <th bgcolor="#F9F9F9">移除顶点</th> <th bgcolor="#F9F9F9">移除边界</th> <th bgcolor="#F9F9F9">查询</th> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Adjacency_list" target="_blank">Adjacency list</a></td> <td bgcolor="#ff0">O(|V|+|E|)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#ff0">O(|V| + |E|)</td> <td bgcolor="#ff0">O(|E|)</td> <td bgcolor="#ff0">O(|V|)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Incidence_list" target="_blank">Incidence list</a></td> <td bgcolor="#ff0">O(|V|+|E|)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#ff0">O(|E|)</td> <td bgcolor="#ff0">O(|E|)</td> <td bgcolor="#ff0">O(|E|)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Adjacency_matrix" target="_blank">Adjacency matrix</a></td> <td bgcolor="#ff8989">O(|V|^2)</td> <td bgcolor="#ff8989">O(|V|^2)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#ff8989">O(|V|^2)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Incidence_matrix" target="_blank">Incidence matrix</a></td> <td bgcolor="#ff8989">O(|V| ⋅ |E|)</td> <td bgcolor="#ff8989">O(|V| ⋅ |E|)</td> <td bgcolor="#ff8989">O(|V| ⋅ |E|)</td> <td bgcolor="#ff8989">O(|V| ⋅ |E|)</td> <td bgcolor="#ff8989">O(|V| ⋅ |E|)</td> <td bgcolor="#ff0">O(|E|)</td> </tr> </tbody> </table> 

<h3 id="堆操作"><a href="#堆操作" class="headerlink" title="堆操作"></a>堆操作</h3><table> <thead> <tr> <th bgcolor="#F9F9F9">类型</th> <th bgcolor="#F9F9F9" colspan="7">时间复杂度</th> </tr> <tr> <th bgcolor="#F9F9F9"></th> <th bgcolor="#F9F9F9">Heapify</th> <th bgcolor="#F9F9F9">查找最大值</th> <th bgcolor="#F9F9F9">分离最大值</th> <th bgcolor="#F9F9F9">提升键</th> <th bgcolor="#F9F9F9">插入</th> <th bgcolor="#F9F9F9">删除</th> <th bgcolor="#F9F9F9">合并</th> </tr> </thead> <tbody> <tr> <td><a href="http://en.wikipedia.org/wiki/Linked_list" target="_blank">Linked List (sorted)</a></td> <td bgcolor="#F9F9F9">-</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#ff8989">O(n)</td> <td bgcolor="#ff8989">O(n)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#ff8989">O(m+n)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Linked_list" target="_blank">Linked List (unsorted)</a></td> <td bgcolor="#F9F9F9">-</td> <td bgcolor="#ff8989">O(n)</td> <td bgcolor="#ff8989">O(n)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#53d000">O(1)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Binary_heap" target="_blank">Binary Heap</a></td> <td bgcolor="#ff0">O(n)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#ff8989">O(m+n)</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Binomial_heap" target="_blank">Binomial Heap</a></td> <td bgcolor="#F9F9F9">-</td> <td bgcolor="#53d000" title="With aux pointer">O(1)</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#53d000" title="Amortized">O(1)</td> <td bgcolor="#c8ea00">O(log(n))</td> <td bgcolor="#c8ea00">O(log(n))</td> </tr> <tr> <td><a href="http://en.wikipedia.org/wiki/Fibonacci_heap" target="_blank">Fibonacci Heap</a></td> <td bgcolor="#F9F9F9">-</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#c8ea00" title="Amortized">O(log(n))</td> <td bgcolor="#53d000" title="Amortized">O(1)</td> <td bgcolor="#53d000">O(1)</td> <td bgcolor="#c8ea00" title="Amortized">O(log(n))</td> <td bgcolor="#53d000">O(1)</td> </tr> </tbody> </table> 


<h3 id="大-O-复杂度图表"><a href="#大-O-复杂度图表" class="headerlink" title="大 O 复杂度图表"></a>大 O 复杂度图表</h3><p><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%80%9F%E6%9F%A5%E8%A1%A8.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用RGB颜色]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/24/%E9%80%9A%E7%94%A8/%E5%B8%B8%E7%94%A8RGB%E9%A2%9C%E8%89%B2/</url>
      <content type="html"><![CDATA[<h3 id="常用RGB颜色列表"><a href="#常用RGB颜色列表" class="headerlink" title="常用RGB颜色列表"></a>常用RGB颜色列表</h3><table><tbody><tr><th>颜色名</th><th>十六进制颜色值</th><th>颜色</th></tr><tr><td><font color="AliceBlue">AliceBlue</font></td><td><font color="#F0F8FF">#F0F8FF</font></td><td bgcolor="#F0F8FF">rgb(240, 248, 255)</td></tr><tr><td><font color="AntiqueWhite">AntiqueWhite</font></td><td><font color="#FAEBD7">#FAEBD7</font></td><td bgcolor="#FAEBD7">rgb(250, 235, 215)</td></tr><tr><td><font color="Aqua">Aqua</font></td><td><font color="#00FFFF">#00FFFF</font></td><td bgcolor="#00FFFF">rgb(0, 255, 255)</td></tr><tr><td><font color="Aquamarine">Aquamarine</font></td><td><font color="#7FFFD4">#7FFFD4</font></td><td bgcolor="#7FFFD4">rgb(127, 255, 212)</td></tr><tr><td><font color="Azure">Azure</font></td><td><font color="#F0FFFF">#F0FFFF</font></td><td bgcolor="#F0FFFF">rgb(240, 255, 255)</td></tr><tr><td><font color="Beige">Beige</font></td><td><font color="#F5F5DC">#F5F5DC</font></td><td bgcolor="#F5F5DC">rgb(245, 245, 220)</td></tr><tr><td><font color="Bisque">Bisque</font></td><td><font color="#FFE4C4">#FFE4C4</font></td><td bgcolor="#FFE4C4">rgb(255, 228, 196)</td></tr><tr><td><font color="Black">Black</font></td><td><font color="#000000">#000000</font></td><td bgcolor="#000000">rgb(0, 0, 0)</td></tr><tr><td><font color="BlanchedAlmond">BlanchedAlmond</font></td><td><font color="#FFEBCD">#FFEBCD</font></td><td bgcolor="#FFEBCD">rgb(255, 235, 205)</td></tr><tr><td><font color="Blue">Blue</font></td><td><font color="#0000FF">#0000FF</font></td><td bgcolor="#0000FF">rgb(0, 0, 255)</td></tr><tr><td><font color="BlueViolet">BlueViolet</font></td><td><font color="#8A2BE2">#8A2BE2</font></td><td bgcolor="#8A2BE2">rgb(138, 43, 226)</td></tr><tr><td><font color="Brown">Brown</font></td><td><font color="#A52A2A">#A52A2A</font></td><td bgcolor="#A52A2A">rgb(165, 42, 42)</td></tr><tr><td><font color="BurlyWood">BurlyWood</font></td><td><font color="#DEB887">#DEB887</font></td><td bgcolor="#DEB887">rgb(222, 184, 135)</td></tr><tr><td><font color="CadetBlue">CadetBlue</font></td><td><font color="#5F9EA0">#5F9EA0</font></td><td bgcolor="#5F9EA0">rgb(95, 158, 160)</td></tr><tr><td><font color="Chartreuse">Chartreuse</font></td><td><font color="#7FFF00">#7FFF00</font></td><td bgcolor="#7FFF00">rgb(127, 255, 0)</td></tr><tr><td><font color="Chocolate">Chocolate</font></td><td><font color="#D2691E">#D2691E</font></td><td bgcolor="#D2691E">rgb(210, 105, 30)</td></tr><tr><td><font color="Coral">Coral</font></td><td><font color="#FF7F50">#FF7F50</font></td><td bgcolor="#FF7F50">rgb(255, 127, 80)</td></tr><tr><td><font color="CornflowerBlue">CornflowerBlue</font></td><td><font color="#6495ED">#6495ED</font></td><td bgcolor="#6495ED">rgb(100, 149, 237)</td></tr><tr><td><font color="Cornsilk">Cornsilk</font></td><td><font color="#FFF8DC">#FFF8DC</font></td><td bgcolor="#FFF8DC">rgb(255, 248, 220)</td></tr><tr><td><font color="Crimson">Crimson</font></td><td><font color="#DC143C">#DC143C</font></td><td bgcolor="#DC143C">rgb(220, 20, 60)</td></tr><tr><td><font color="Cyan">Cyan</font></td><td><font color="#00FFFF">#00FFFF</font></td><td bgcolor="#00FFFF">rgb(0, 255, 255)</td></tr><tr><td><font color="DarkBlue">DarkBlue</font></td><td><font color="#00008B">#00008B</font></td><td bgcolor="#00008B">rgb(0, 0, 139)</td></tr><tr><td><font color="DarkCyan">DarkCyan</font></td><td><font color="#008B8B">#008B8B</font></td><td bgcolor="#008B8B">rgb(0, 139, 139)</td></tr><tr><td><font color="DarkGoldenRod">DarkGoldenRod</font></td><td><font color="#B8860B">#B8860B</font></td><td bgcolor="#B8860B">rgb(184, 134, 11)</td></tr><tr><td><font color="DarkGray">DarkGray</font></td><td><font color="#A9A9A9">#A9A9A9</font></td><td bgcolor="#A9A9A9">rgb(169, 169, 169)</td></tr><tr><td><font color="DarkGreen">DarkGreen</font></td><td><font color="#006400">#006400</font></td><td bgcolor="#006400">rgb(0, 100, 0)</td></tr><tr><td><font color="DarkKhaki">DarkKhaki</font></td><td><font color="#BDB76B">#BDB76B</font></td><td bgcolor="#BDB76B">rgb(189, 183, 107)</td></tr><tr><td><font color="DarkMagenta">DarkMagenta</font></td><td><font color="#8B008B">#8B008B</font></td><td bgcolor="#8B008B">rgb(139, 0, 139)</td></tr><tr><td><font color="DarkOliveGreen">DarkOliveGreen</font></td><td><font color="#556B2F">#556B2F</font></td><td bgcolor="#556B2F">rgb(85, 107, 47)</td></tr><tr><td><font color="Darkorange">Darkorange</font></td><td><font color="#FF8C00">#FF8C00</font></td><td bgcolor="#FF8C00">rgb(255, 140, 0)</td></tr><tr><td><font color="DarkOrchid">DarkOrchid</font></td><td><font color="#9932CC">#9932CC</font></td><td bgcolor="#9932CC">rgb(153, 50, 204)</td></tr><tr><td><font color="DarkRed">DarkRed</font></td><td><font color="#8B0000">#8B0000</font></td><td bgcolor="#8B0000">rgb(139, 0, 0)</td></tr><tr><td><font color="DarkSalmon">DarkSalmon</font></td><td><font color="#E9967A">#E9967A</font></td><td bgcolor="#E9967A">rgb(233, 150, 122)</td></tr><tr><td><font color="DarkSeaGreen">DarkSeaGreen</font></td><td><font color="#8FBC8F">#8FBC8F</font></td><td bgcolor="#8FBC8F">rgb(143, 188, 143)</td></tr><tr><td><font color="DarkSlateBlue">DarkSlateBlue</font></td><td><font color="#483D8B">#483D8B</font></td><td bgcolor="#483D8B">rgb(72, 61, 139)</td></tr><tr><td><font color="DarkSlateGray">DarkSlateGray</font></td><td><font color="#2F4F4F">#2F4F4F</font></td><td bgcolor="#2F4F4F">rgb(47, 79, 79)</td></tr><tr><td><font color="DarkTurquoise">DarkTurquoise</font></td><td><font color="#00CED1">#00CED1</font></td><td bgcolor="#00CED1">rgb(0, 206, 209)</td></tr><tr><td><font color="DarkViolet">DarkViolet</font></td><td><font color="#9400D3">#9400D3</font></td><td bgcolor="#9400D3">rgb(148, 0, 211)</td></tr><tr><td><font color="DeepPink">DeepPink</font></td><td><font color="#FF1493">#FF1493</font></td><td bgcolor="#FF1493">rgb(255, 20, 147)</td></tr><tr><td><font color="DeepSkyBlue">DeepSkyBlue</font></td><td><font color="#00BFFF">#00BFFF</font></td><td bgcolor="#00BFFF">rgb(0, 191, 255)</td></tr><tr><td><font color="DimGray">DimGray</font></td><td><font color="#696969">#696969</font></td><td bgcolor="#696969">rgb(105, 105, 105)</td></tr><tr><td><font color="DodgerBlue">DodgerBlue</font></td><td><font color="#1E90FF">#1E90FF</font></td><td bgcolor="#1E90FF">rgb(30, 144, 255)</td></tr><tr><td><font color="Feldspar">Feldspar</font></td><td><font color="#D19275">#D19275</font></td><td bgcolor="#D19275">rgb(209, 146, 117)</td></tr><tr><td><font color="FireBrick">FireBrick</font></td><td><font color="#B22222">#B22222</font></td><td bgcolor="#B22222">rgb(178, 34, 34)</td></tr><tr><td><font color="FloralWhite">FloralWhite</font></td><td><font color="#FFFAF0">#FFFAF0</font></td><td bgcolor="#FFFAF0">rgb(255, 250, 240)</td></tr><tr><td><font color="ForestGreen">ForestGreen</font></td><td><font color="#228B22">#228B22</font></td><td bgcolor="#228B22">rgb(34, 139, 34)</td></tr><tr><td><font color="Fuchsia">Fuchsia</font></td><td><font color="#FF00FF">#FF00FF</font></td><td bgcolor="#FF00FF">rgb(255, 0, 255)</td></tr><tr><td><font color="Gainsboro">Gainsboro</font></td><td><font color="#DCDCDC">#DCDCDC</font></td><td bgcolor="#DCDCDC">rgb(220, 220, 220)</td></tr><tr><td><font color="GhostWhite">GhostWhite</font></td><td><font color="#F8F8FF">#F8F8FF</font></td><td bgcolor="#F8F8FF">rgb(248, 248, 255)</td></tr><tr><td><font color="Gold">Gold</font></td><td><font color="#FFD700">#FFD700</font></td><td bgcolor="#FFD700">rgb(255, 215, 0)</td></tr><tr><td><font color="GoldenRod">GoldenRod</font></td><td><font color="#DAA520">#DAA520</font></td><td bgcolor="#DAA520">rgb(218, 165, 32)</td></tr><tr><td><font color="Gray">Gray</font></td><td><font color="#808080">#808080</font></td><td bgcolor="#808080">rgb(128, 128, 128)</td></tr><tr><td><font color="Green">Green</font></td><td><font color="#008000">#008000</font></td><td bgcolor="#008000">rgb(0, 128, 0)</td></tr><tr><td><font color="GreenYellow">GreenYellow</font></td><td><font color="#ADFF2F">#ADFF2F</font></td><td bgcolor="#ADFF2F">rgb(173, 255, 47)</td></tr><tr><td><font color="HoneyDew">HoneyDew</font></td><td><font color="#F0FFF0">#F0FFF0</font></td><td bgcolor="#F0FFF0">rgb(240, 255, 240)</td></tr><tr><td><font color="HotPink">HotPink</font></td><td><font color="#FF69B4">#FF69B4</font></td><td bgcolor="#FF69B4">rgb(255, 105, 180)</td></tr><tr><td><font color="IndianRed">IndianRed</font></td><td><font color="#CD5C5C">#CD5C5C</font></td><td bgcolor="#CD5C5C">rgb(205, 92, 92)</td></tr><tr><td><font color="Indigo">Indigo</font></td><td><font color="#4B0082">#4B0082</font></td><td bgcolor="#4B0082">rgb(75, 0, 130)</td></tr><tr><td><font color="Ivory">Ivory</font></td><td><font color="#FFFFF0">#FFFFF0</font></td><td bgcolor="#FFFFF0">rgb(255, 255, 240)</td></tr><tr><td><font color="Khaki">Khaki</font></td><td><font color="#F0E68C">#F0E68C</font></td><td bgcolor="#F0E68C">rgb(240, 230, 140)</td></tr><tr><td><font color="Lavender">Lavender</font></td><td><font color="#E6E6FA">#E6E6FA</font></td><td bgcolor="#E6E6FA">rgb(230, 230, 250)</td></tr><tr><td><font color="LavenderBlush">LavenderBlush</font></td><td><font color="#FFF0F5">#FFF0F5</font></td><td bgcolor="#FFF0F5">rgb(255, 240, 245)</td></tr><tr><td><font color="LawnGreen">LawnGreen</font></td><td><font color="#7CFC00">#7CFC00</font></td><td bgcolor="#7CFC00">rgb(124, 252, 0)</td></tr><tr><td><font color="LemonChiffon">LemonChiffon</font></td><td><font color="#FFFACD">#FFFACD</font></td><td bgcolor="#FFFACD">rgb(255, 250, 205)</td></tr><tr><td><font color="LightBlue">LightBlue</font></td><td><font color="#ADD8E6">#ADD8E6</font></td><td bgcolor="#ADD8E6">rgb(173, 216, 230)</td></tr><tr><td><font color="LightCoral">LightCoral</font></td><td><font color="#F08080">#F08080</font></td><td bgcolor="#F08080">rgb(240, 128, 128)</td></tr><tr><td><font color="LightCyan">LightCyan</font></td><td><font color="#E0FFFF">#E0FFFF</font></td><td bgcolor="#E0FFFF">rgb(224, 255, 255)</td></tr><tr><td><font color="LightGoldenRodYellow">LightGoldenRodYellow</font></td><td><font color="#FAFAD2">#FAFAD2</font></td><td bgcolor="#FAFAD2">rgb(250, 250, 210)</td></tr><tr><td><font color="LightGrey">LightGrey</font></td><td><font color="#D3D3D3">#D3D3D3</font></td><td bgcolor="#D3D3D3">rgb(211, 211, 211)</td></tr><tr><td><font color="LightGreen">LightGreen</font></td><td><font color="#90EE90">#90EE90</font></td><td bgcolor="#90EE90">rgb(144, 238, 144)</td></tr><tr><td><font color="LightPink">LightPink</font></td><td><font color="#FFB6C1">#FFB6C1</font></td><td bgcolor="#FFB6C1">rgb(255, 182, 193)</td></tr><tr><td><font color="LightSalmon">LightSalmon</font></td><td><font color="#FFA07A">#FFA07A</font></td><td bgcolor="#FFA07A">rgb(255, 160, 122)</td></tr><tr><td><font color="LightSeaGreen">LightSeaGreen</font></td><td><font color="#20B2AA">#20B2AA</font></td><td bgcolor="#20B2AA">rgb(32, 178, 170)</td></tr><tr><td><font color="LightSkyBlue">LightSkyBlue</font></td><td><font color="#87CEFA">#87CEFA</font></td><td bgcolor="#87CEFA">rgb(135, 206, 250)</td></tr><tr><td><font color="LightSlateBlue">LightSlateBlue</font></td><td><font color="#8470FF">#8470FF</font></td><td bgcolor="#8470FF">rgb(132, 112, 255)</td></tr><tr><td><font color="LightSlateGray">LightSlateGray</font></td><td><font color="#778899">#778899</font></td><td bgcolor="#778899">rgb(119, 136, 153)</td></tr><tr><td><font color="LightSteelBlue">LightSteelBlue</font></td><td><font color="#B0C4DE">#B0C4DE</font></td><td bgcolor="#B0C4DE">rgb(176, 196, 222)</td></tr><tr><td><font color="LightYellow">LightYellow</font></td><td><font color="#FFFFE0">#FFFFE0</font></td><td bgcolor="#FFFFE0">rgb(255, 255, 224)</td></tr><tr><td><font color="Lime">Lime</font></td><td><font color="#00FF00">#00FF00</font></td><td bgcolor="#00FF00">rgb(0, 255, 0)</td></tr><tr><td><font color="LimeGreen">LimeGreen</font></td><td><font color="#32CD32">#32CD32</font></td><td bgcolor="#32CD32">rgb(50, 205, 50)</td></tr><tr><td><font color="Linen">Linen</font></td><td><font color="#FAF0E6">#FAF0E6</font></td><td bgcolor="#FAF0E6">rgb(250, 240, 230)</td></tr><tr><td><font color="Magenta">Magenta</font></td><td><font color="#FF00FF">#FF00FF</font></td><td bgcolor="#FF00FF">rgb(255, 0, 255)</td></tr><tr><td><font color="Maroon">Maroon</font></td><td><font color="#800000">#800000</font></td><td bgcolor="#800000">rgb(128, 0, 0)</td></tr><tr><td><font color="MediumAquaMarine">MediumAquaMarine</font></td><td><font color="#66CDAA">#66CDAA</font></td><td bgcolor="#66CDAA">rgb(102, 205, 170)</td></tr><tr><td><font color="MediumBlue">MediumBlue</font></td><td><font color="#0000CD">#0000CD</font></td><td bgcolor="#0000CD">rgb(0, 0, 205)</td></tr><tr><td><font color="MediumOrchid">MediumOrchid</font></td><td><font color="#BA55D3">#BA55D3</font></td><td bgcolor="#BA55D3">rgb(186, 85, 211)</td></tr><tr><td><font color="MediumPurple">MediumPurple</font></td><td><font color="#9370D8">#9370D8</font></td><td bgcolor="#9370D8">rgb(147, 112, 216)</td></tr><tr><td><font color="MediumSeaGreen">MediumSeaGreen</font></td><td><font color="#3CB371">#3CB371</font></td><td bgcolor="#3CB371">rgb(60, 179, 113)</td></tr><tr><td><font color="MediumSlateBlue">MediumSlateBlue</font></td><td><font color="#7B68EE">#7B68EE</font></td><td bgcolor="#7B68EE">rgb(123, 104, 238)</td></tr><tr><td><font color="MediumSpringGreen">MediumSpringGreen</font></td><td><font color="#00FA9A">#00FA9A</font></td><td bgcolor="#00FA9A">rgb(0, 250, 154)</td></tr><tr><td><font color="MediumTurquoise">MediumTurquoise</font></td><td><font color="#48D1CC">#48D1CC</font></td><td bgcolor="#48D1CC">rgb(72, 209, 204)</td></tr><tr><td><font color="MediumVioletRed">MediumVioletRed</font></td><td><font color="#C71585">#C71585</font></td><td bgcolor="#C71585">rgb(199, 21, 133)</td></tr><tr><td><font color="MidnightBlue">MidnightBlue</font></td><td><font color="#191970">#191970</font></td><td bgcolor="#191970">rgb(25, 25, 112)</td></tr><tr><td><font color="MintCream">MintCream</font></td><td><font color="#F5FFFA">#F5FFFA</font></td><td bgcolor="#F5FFFA">rgb(245, 255, 250)</td></tr><tr><td><font color="MistyRose">MistyRose</font></td><td><font color="#FFE4E1">#FFE4E1</font></td><td bgcolor="#FFE4E1">rgb(255, 228, 225)</td></tr><tr><td><font color="Moccasin">Moccasin</font></td><td><font color="#FFE4B5">#FFE4B5</font></td><td bgcolor="#FFE4B5">rgb(255, 228, 181)</td></tr><tr><td><font color="NavajoWhite">NavajoWhite</font></td><td><font color="#FFDEAD">#FFDEAD</font></td><td bgcolor="#FFDEAD">rgb(255, 222, 173)</td></tr><tr><td><font color="Navy">Navy</font></td><td><font color="#000080">#000080</font></td><td bgcolor="#000080">rgb(0, 0, 128)</td></tr><tr><td><font color="OldLace">OldLace</font></td><td><font color="#FDF5E6">#FDF5E6</font></td><td bgcolor="#FDF5E6">rgb(253, 245, 230)</td></tr><tr><td><font color="Olive">Olive</font></td><td><font color="#808000">#808000</font></td><td bgcolor="#808000">rgb(128, 128, 0)</td></tr><tr><td><font color="OliveDrab">OliveDrab</font></td><td><font color="#6B8E23">#6B8E23</font></td><td bgcolor="#6B8E23">rgb(107, 142, 35)</td></tr><tr><td><font color="Orange">Orange</font></td><td><font color="#FFA500">#FFA500</font></td><td bgcolor="#FFA500">rgb(255, 165, 0)</td></tr><tr><td><font color="OrangeRed">OrangeRed</font></td><td><font color="#FF4500">#FF4500</font></td><td bgcolor="#FF4500">rgb(255, 69, 0)</td></tr><tr><td><font color="Orchid">Orchid</font></td><td><font color="#DA70D6">#DA70D6</font></td><td bgcolor="#DA70D6">rgb(218, 112, 214)</td></tr><tr><td><font color="PaleGoldenRod">PaleGoldenRod</font></td><td><font color="#EEE8AA">#EEE8AA</font></td><td bgcolor="#EEE8AA">rgb(238, 232, 170)</td></tr><tr><td><font color="PaleGreen">PaleGreen</font></td><td><font color="#98FB98">#98FB98</font></td><td bgcolor="#98FB98">rgb(152, 251, 152)</td></tr><tr><td><font color="PaleTurquoise">PaleTurquoise</font></td><td><font color="#AFEEEE">#AFEEEE</font></td><td bgcolor="#AFEEEE">rgb(175, 238, 238)</td></tr><tr><td><font color="PaleVioletRed">PaleVioletRed</font></td><td><font color="#D87093">#D87093</font></td><td bgcolor="#D87093">rgb(216, 112, 147)</td></tr><tr><td><font color="PapayaWhip">PapayaWhip</font></td><td><font color="#FFEFD5">#FFEFD5</font></td><td bgcolor="#FFEFD5">rgb(255, 239, 213)</td></tr><tr><td><font color="PeachPuff">PeachPuff</font></td><td><font color="#FFDAB9">#FFDAB9</font></td><td bgcolor="#FFDAB9">rgb(255, 218, 185)</td></tr><tr><td><font color="Peru">Peru</font></td><td><font color="#CD853F">#CD853F</font></td><td bgcolor="#CD853F">rgb(205, 133, 63)</td></tr><tr><td><font color="Pink">Pink</font></td><td><font color="#FFC0CB">#FFC0CB</font></td><td bgcolor="#FFC0CB">rgb(255, 192, 203)</td></tr><tr><td><font color="Plum">Plum</font></td><td><font color="#DDA0DD">#DDA0DD</font></td><td bgcolor="#DDA0DD">rgb(221, 160, 221)</td></tr><tr><td><font color="PowderBlue">PowderBlue</font></td><td><font color="#B0E0E6">#B0E0E6</font></td><td bgcolor="#B0E0E6">rgb(176, 224, 230)</td></tr><tr><td><font color="Purple">Purple</font></td><td><font color="#800080">#800080</font></td><td bgcolor="#800080">rgb(128, 0, 128)</td></tr><tr><td><font color="Red">Red</font></td><td><font color="#FF0000">#FF0000</font></td><td bgcolor="#FF0000">rgb(255, 0, 0)</td></tr><tr><td><font color="RosyBrown">RosyBrown</font></td><td><font color="#BC8F8F">#BC8F8F</font></td><td bgcolor="#BC8F8F">rgb(188, 143, 143)</td></tr><tr><td><font color="RoyalBlue">RoyalBlue</font></td><td><font color="#4169E1">#4169E1</font></td><td bgcolor="#4169E1">rgb(65, 105, 225)</td></tr><tr><td><font color="SaddleBrown">SaddleBrown</font></td><td><font color="#8B4513">#8B4513</font></td><td bgcolor="#8B4513">rgb(139, 69, 19)</td></tr><tr><td><font color="Salmon">Salmon</font></td><td><font color="#FA8072">#FA8072</font></td><td bgcolor="#FA8072">rgb(250, 128, 114)</td></tr><tr><td><font color="SandyBrown">SandyBrown</font></td><td><font color="#F4A460">#F4A460</font></td><td bgcolor="#F4A460">rgb(244, 164, 96)</td></tr><tr><td><font color="SeaGreen">SeaGreen</font></td><td><font color="#2E8B57">#2E8B57</font></td><td bgcolor="#2E8B57">rgb(46, 139, 87)</td></tr><tr><td><font color="SeaShell">SeaShell</font></td><td><font color="#FFF5EE">#FFF5EE</font></td><td bgcolor="#FFF5EE">rgb(255, 245, 238)</td></tr><tr><td><font color="Sienna">Sienna</font></td><td><font color="#A0522D">#A0522D</font></td><td bgcolor="#A0522D">rgb(160, 82, 45)</td></tr><tr><td><font color="Silver">Silver</font></td><td><font color="#C0C0C0">#C0C0C0</font></td><td bgcolor="#C0C0C0">rgb(192, 192, 192)</td></tr><tr><td><font color="SkyBlue">SkyBlue</font></td><td><font color="#87CEEB">#87CEEB</font></td><td bgcolor="#87CEEB">rgb(135, 206, 235)</td></tr><tr><td><font color="SlateBlue">SlateBlue</font></td><td><font color="#6A5ACD">#6A5ACD</font></td><td bgcolor="#6A5ACD">rgb(106, 90, 205)</td></tr><tr><td><font color="SlateGray">SlateGray</font></td><td><font color="#708090">#708090</font></td><td bgcolor="#708090">rgb(112, 128, 144)</td></tr><tr><td><font color="Snow">Snow</font></td><td><font color="#FFFAFA">#FFFAFA</font></td><td bgcolor="#FFFAFA">rgb(255, 250, 250)</td></tr><tr><td><font color="SpringGreen">SpringGreen</font></td><td><font color="#00FF7F">#00FF7F</font></td><td bgcolor="#00FF7F">rgb(0, 255, 127)</td></tr><tr><td><font color="SteelBlue">SteelBlue</font></td><td><font color="#4682B4">#4682B4</font></td><td bgcolor="#4682B4">rgb(70, 130, 180)</td></tr><tr><td><font color="Tan">Tan</font></td><td><font color="#D2B48C">#D2B48C</font></td><td bgcolor="#D2B48C">rgb(210, 180, 140)</td></tr><tr><td><font color="Teal">Teal</font></td><td><font color="#008080">#008080</font></td><td bgcolor="#008080">rgb(0, 128, 128)</td></tr><tr><td><font color="Thistle">Thistle</font></td><td><font color="#D8BFD8">#D8BFD8</font></td><td bgcolor="#D8BFD8">rgb(216, 191, 216)</td></tr><tr><td><font color="Tomato">Tomato</font></td><td><font color="#FF6347">#FF6347</font></td><td bgcolor="#FF6347">rgb(255, 99, 71)</td></tr><tr><td><font color="Turquoise">Turquoise</font></td><td><font color="#40E0D0">#40E0D0</font></td><td bgcolor="#40E0D0">rgb(64, 224, 208)</td></tr><tr><td><font color="Violet">Violet</font></td><td><font color="#EE82EE">#EE82EE</font></td><td bgcolor="#EE82EE">rgb(238, 130, 238)</td></tr><tr><td><font color="VioletRed">VioletRed</font></td><td><font color="#D02090">#D02090</font></td><td bgcolor="#D02090">rgb(208, 32, 144)</td></tr><tr><td><font color="Wheat">Wheat</font></td><td><font color="#F5DEB3">#F5DEB3</font></td><td bgcolor="#F5DEB3">rgb(245, 222, 179)</td></tr><tr><td><font color="White">White</font></td><td><font color="#FFFFFF">#FFFFFF</font></td><td bgcolor="#FFFFFF">rgb(255, 255, 255)</td></tr><tr><td><font color="WhiteSmoke">WhiteSmoke</font></td><td><font color="#F5F5F5">#F5F5F5</font></td><td bgcolor="#F5F5F5">rgb(245, 245, 245)</td></tr><tr><td><font color="Yellow">Yellow</font></td><td><font color="#FFFF00">#FFFF00</font></td><td bgcolor="#FFFF00">rgb(255, 255, 0)</td></tr><tr><td><font color="YellowGreen">YellowGreen</font></td><td><font color="#9ACD32">#9ACD32</font></td><td bgcolor="#9ACD32">rgb(154, 205, 50)</td></tr></tbody></table>

<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown使用技巧]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/24/%E9%80%9A%E7%94%A8/markdown%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h3 id="资料专栏"><a href="#资料专栏" class="headerlink" title="资料专栏"></a>资料专栏</h3><ul>
<li><a href="http://46aae4d1e2371e4aa769798941cef698.devproxy.yunshipei.com/column/details/markdown.html" target="_blank" rel="external">传送门</a></li>
</ul>
<h3 id="设置markdown背景色"><a href="#设置markdown背景色" class="headerlink" title="设置markdown背景色"></a>设置markdown背景色</h3><ul>
<li>借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色的功能</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#7FFFD4</span>&gt;</span>这里的背景色是：Aquamarine，  十六进制颜色值：#7FFFD4， rgb(127, 255, 212)</div><div class="line">     <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>效果</li>
</ul>
<table><tr><td bgcolor="#00FF00">这里的背景色是：Lime，十六进制颜色值：#00FF00， rgb(0, 255, 0)</td></tr></table>


<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[帮程序员和站长减压放松的10个良心网站]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/24/%E9%80%9A%E7%94%A8/%E5%B8%AE%E7%A8%8B%E5%BA%8F%E5%91%98%E5%92%8C%E7%AB%99%E9%95%BF%E5%87%8F%E5%8E%8B%E6%94%BE%E6%9D%BE%E7%9A%8410%E4%B8%AA%E8%89%AF%E5%BF%83%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<h3 id="1-Calm"><a href="#1-Calm" class="headerlink" title="1.Calm"></a>1.<a href="http://www.calm.com/" target="_blank" rel="external">Calm</a></h3><center><img src="http://7xstki.com1.z0.glb.clouddn.com/%E5%B8%AE%E7%A8%8B%E5%BA%8F%E5%91%98%E6%94%BE%E6%9D%BE%E7%9A%84%E5%8D%81%E4%B8%AA%E7%BD%91%E7%AB%997.jpg" alt=""></center>

<ul>
<li><p>这是同类型中最火的网站了，站如其名，「平和」，通过自然的图像（阳光下的暖流、淙淙的小溪等）与缓缓的音乐，帮你在短时间内放松下来</p>
</li>
<li><p>左侧有时间设定，从2分钟到20分钟，右底部可以改变音频、图像，调节音量等。还有IOS客户端下载呦</p>
</li>
</ul>
<h3 id="2-Do-Nothing-For-2-Minutes"><a href="#2-Do-Nothing-For-2-Minutes" class="headerlink" title="2.Do Nothing For 2 Minutes"></a>2.<a href="http://www.donothingfor2minutes.com/" target="_blank" rel="external">Do Nothing For 2 Minutes</a></h3><center><img src="http://7xstki.com1.z0.glb.clouddn.com/%E5%B8%AE%E7%A8%8B%E5%BA%8F%E5%91%98%E6%94%BE%E6%9D%BE%E7%9A%84%E5%8D%81%E4%B8%AA%E7%BD%91%E7%AB%999.jpg" alt=""></center>

<ul>
<li><p>木头人，两分钟，这是一个简单到极致的网站，当你打开的时候，自动开始计时，这时间你不能触碰键盘和鼠标，否则2分钟会重置</p>
</li>
<li><p>你需要做的，就是放下手头的工作，静静地享受潮声，这也很棒，不是吗？两分钟足够你冷静下来，休息一下了</p>
</li>
</ul>
<a id="more"></a>
<h3 id="3-Get-Relaxed"><a href="#3-Get-Relaxed" class="headerlink" title="3.Get Relaxed"></a>3.<a href="http://www.getrelaxed.com/" target="_blank" rel="external">Get Relaxed</a></h3><center><img src="http://7xstki.com1.z0.glb.clouddn.com/%E5%B8%AE%E7%A8%8B%E5%BA%8F%E5%91%98%E6%94%BE%E6%9D%BE%E7%9A%84%E5%8D%81%E4%B8%AA%E7%BD%91%E7%AB%992.jpg" alt=""></center>

<ul>
<li><p>如果两分钟不足以让你彻底放松，试试这个。如下图，打开网站后，头枕着双手往后仰，欣赏自然风光，聆听网站为你精心挑选的音乐</p>
</li>
<li><p>图像3秒一换，有15种，每种持续大概2 – 4分钟，现在，开始吧！</p>
</li>
<li><p>提醒：网站有简陋广告，稍微影响体验</p>
</li>
</ul>
<h3 id="4-LoungeV-Studio"><a href="#4-LoungeV-Studio" class="headerlink" title="4.LoungeV Studio"></a>4.<a href="http://www.loungev.com/" target="_blank" rel="external">LoungeV Studio</a></h3><center><img src="http://7xstki.com1.z0.glb.clouddn.com/%E5%B8%AE%E7%A8%8B%E5%BA%8F%E5%91%98%E6%94%BE%E6%9D%BE%E7%9A%84%E5%8D%81%E4%B8%AA%E7%BD%91%E7%AB%996.jpg" alt=""></center>

<ul>
<li>前三个都是图像，现在来个新鲜的。这个网站提供高清的自然风光视频 + 音乐。有沙滩、瀑布、水下景色等等，网站背景是一个温馨的客厅，右侧有视频可选，对喜欢看视频的同学来说，还是蛮不错的</li>
</ul>
<h3 id="5-A-Soft-Murmur"><a href="#5-A-Soft-Murmur" class="headerlink" title="5.A Soft Murmur"></a>5.<a href="http://asoftmurmur.com/" target="_blank" rel="external">A Soft Murmur</a></h3><center><img src="http://7xstki.com1.z0.glb.clouddn.com/%E5%B8%AE%E7%A8%8B%E5%BA%8F%E5%91%98%E6%94%BE%E6%9D%BE%E7%9A%84%E5%8D%81%E4%B8%AA%E7%BD%91%E7%AB%991.jpg" alt=""></center>

<ul>
<li><p>这个网站太棒了！博主玩了好久都舍不得停下来。网站让你自由创造美妙的声音。你可以通过混合不同的声音（雨声、火柴燃烧的声音、打雷声、海潮声…..不一而足。但是，总有一款令你爱不释手！）当然，声音的大小也可以自己调节</p>
</li>
<li><p>如果你对混合的声音非常满意，也可以分享到脸书、谷歌等….</p>
</li>
</ul>
<h3 id="6-Nature-Sounds-For-Me"><a href="#6-Nature-Sounds-For-Me" class="headerlink" title="6.Nature Sounds For Me"></a>6.<a href="http://naturesoundsfor.me/" target="_blank" rel="external">Nature Sounds For Me</a></h3><center><img src="http://7xstki.com1.z0.glb.clouddn.com/%E5%B8%AE%E7%A8%8B%E5%BA%8F%E5%91%98%E6%94%BE%E6%9D%BE%E7%9A%84%E5%8D%81%E4%B8%AA%E7%BD%91%E7%AB%998.jpg" alt=""></center>

<ul>
<li><p>这个比上面那个界面稍逊，但是玩起来更嗨！它提供的声音除了以上的自然类声音，还有很多你想不到的：绵羊咩咩、骏马跺脚喷气、不同的鸟叫声，甚至是心脏跳动、厨房叮当的声音，不仅令人身临其境，而且搭配起来简直不能更欢乐！</p>
</li>
<li><p>当然，它还有IOS客户端。</p>
</li>
</ul>
<h3 id="7-Noisli"><a href="#7-Noisli" class="headerlink" title="7.Noisli"></a>7.<a href="http://www.noisli.com/" target="_blank" rel="external">Noisli</a></h3><center><img src="http://7xstki.com1.z0.glb.clouddn.com/%E5%B8%AE%E7%A8%8B%E5%BA%8F%E5%91%98%E6%94%BE%E6%9D%BE%E7%9A%84%E5%8D%81%E4%B8%AA%E7%BD%91%E7%AB%9910.jpg" alt=""></center>


<ul>
<li><p>这个网站根据你的情绪变化，选择不同的音乐和背景颜色。颜色大多朴素平和，背景声音也有对应的图标可以选择。还有一点贴心的设计是，网站右侧有便签本，你可以一边享受静谧时光一边随手记点事。</p>
</li>
<li><p>为了造福大众，网站还提供IOS 版。</p>
</li>
</ul>
<h3 id="8-Soundrown"><a href="#8-Soundrown" class="headerlink" title="8.Soundrown"></a>8.<a href="http://soundrown.com/" target="_blank" rel="external">Soundrown</a></h3><center><img src="http://7xstki.com1.z0.glb.clouddn.com/%E5%B8%AE%E7%A8%8B%E5%BA%8F%E5%91%98%E6%94%BE%E6%9D%BE%E7%9A%84%E5%8D%81%E4%B8%AA%E7%BD%91%E7%AB%995.jpg" alt=""></center>

<ul>
<li>网站一进去，有3个关键词：放松、专注、逃离。的确，它成功做到了这一点。它有10种不同的声音帮助你放松心情，也可以混合使用。不同的声音对应不同的背景，网站非常有设计感，相信你会重新回来体验一次</li>
</ul>
<h3 id="9-The-Thoughts-Room"><a href="#9-The-Thoughts-Room" class="headerlink" title="9.The Thoughts Room"></a>9.<a href="http://thequietplaceproject.com/" target="_blank" rel="external">The Thoughts Room</a></h3><center><img src="http://7xstki.com1.z0.glb.clouddn.com/%E5%B8%AE%E7%A8%8B%E5%BA%8F%E5%91%98%E6%94%BE%E6%9D%BE%E7%9A%84%E5%8D%81%E4%B8%AA%E7%BD%91%E7%AB%993.jpg" alt=""></center>

<ul>
<li>一句话简洁：世界的秘密——树洞类网站。你可以在这里向全世界倾诉你的任何想法，网站支持37种语言，不过看了一下，没有中国…</li>
</ul>
<h3 id="10-Raining-Fm"><a href="#10-Raining-Fm" class="headerlink" title="10.Raining.Fm"></a>10.<a href="http://raining.fm/" target="_blank" rel="external">Raining.Fm</a></h3><center><img src="http://7xstki.com1.z0.glb.clouddn.com/%E5%B8%AE%E7%A8%8B%E5%BA%8F%E5%91%98%E6%94%BE%E6%9D%BE%E7%9A%84%E5%8D%81%E4%B8%AA%E7%BD%91%E7%AB%994.jpg" alt=""></center>

<ul>
<li>有时候，我们需要的仅仅是一点点雨声来帮助我们平静。网站专门提供雨声，因为单一，所以也更加专业。网站有3种不同的雨声类型，右侧有定时器可以在你放松时提醒你，简单也好用的一个网站，赞一个</li>
</ul>
<p>参考博客：<a href="https://www.licoy.cn/624.html" target="_blank" rel="external">传送门</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[优秀网站和博客]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/24/%E9%80%9A%E7%94%A8/%E4%BC%98%E7%A7%80%E7%BD%91%E7%AB%99%E5%92%8C%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul>
<li><p><a href="http://www.lrdup.net/" target="_blank" rel="external">键盘上的舞者</a> 东哥博客，主要是ios，其他编程啊之类的东西都有，很不错的一个站点，极力推荐</p>
</li>
<li><p><a href="http://blog.csdn.net/whjkm" target="_blank" rel="external">Just do it!</a> 杰哥博客，极力推荐</p>
</li>
</ul>
<ul>
<li><p><a href="https://www.licoy.cn/resource-sharing/fun-station" target="_blank" rel="external">憧憬点滴记忆</a>  比较综合的一个博客，技术文章，资源，项目，音乐，WEB等等都有</p>
</li>
<li><p><a href="http://tutuge.me/" target="_blank" rel="external">土土哥的技术Blog</a> 阿里的大神，iOS，Android等</p>
</li>
<li><p><a href="http://openhome.cc/Gossip/index.html" target="_blank" rel="external">台湾博主</a> 台湾的一个博主，有很多资料，主要是有Java资料，不过是繁体字</p>
</li>
<li><p><a href="http://0opslab.com/" target="_blank" rel="external">方丈</a> Java,JS,linux,python等等</p>
</li>
</ul>
<h3 id="技术网站"><a href="#技术网站" class="headerlink" title="技术网站"></a>技术网站</h3><ul>
<li><p><a href="http://www.v2ex.com/?tab=tech" target="_blank" rel="external">v2ex</a> 国内的IT论坛</p>
</li>
<li><p><a href="http://stackoverflow.com/" target="_blank" rel="external">stackoverflow</a> 全球最大的IT论坛</p>
</li>
<li><p><a href="http://www.nowcoder.com/" target="_blank" rel="external">牛客网</a> 面试题网站</p>
</li>
<li><p><a href="https://www.livecoding.tv/" target="_blank" rel="external">livecoding</a> 代码直播平台</p>
</li>
<li><p><a href="https://handmadehero.org" target="_blank" rel="external">handMadeHero</a> 游戏开发视频网站</p>
</li>
<li><p><a href="https://next.36kr.com/posts/collections/61" target="_blank" rel="external">NEXT</a> H5界面制作工具集合</p>
</li>
<li><p><a href="http://www.rrxiu.net/" target="_blank" rel="external">人人秀</a> H5制作网站</p>
</li>
</ul>
<h3 id="资料网站"><a href="#资料网站" class="headerlink" title="资料网站"></a>资料网站</h3><ul>
<li><p><a href="http://www.runoob.com" target="_blank" rel="external">runoob</a> 编程语言参考手册，有语法，使用规范之类的，包含很多语言</p>
</li>
<li><p><a href="http://tool.oschina.net/apidocs/api" target="_blank" rel="external">常用 API</a> 常用API文档索引合集</p>
</li>
<li><p><a href="http://tool.oschina.net/" target="_blank" rel="external">在线工具</a> 常用的编程在线工具，录入正则表达式，API，RGB对照表之类的</p>
</li>
<li><p><a href="https://github.com/JustinSDK/JavaSE6Tutorial" target="_blank" rel="external">Java SE 6 技术手册</a></p>
</li>
<li><p><a href="http://www.easyicon.net/" target="_blank" rel="external">easyicon</a> icon图标搜索引擎，非常不错的东西</p>
</li>
</ul>
<h3 id="影视网站"><a href="#影视网站" class="headerlink" title="影视网站"></a>影视网站</h3><ul>
<li><a href="http://www.zhaifu.cc/bl/dianying/" target="_blank" rel="external">腐宅资源站</a> 各种电影电视剧动画资源</li>
</ul>
<h3 id="音乐网站"><a href="#音乐网站" class="headerlink" title="音乐网站"></a>音乐网站</h3><ul>
<li><p><a href="http://www.mtyyw.com" target="_blank" rel="external">麦田音乐网</a> 主要是轻音乐，民谣，电台，歌单，摇滚，原声，影像，还有有文艺范的画，故事等等……</p>
</li>
<li><p><a href="https://music.douban.com/" target="_blank" rel="external">豆瓣音乐</a> 豆瓣，情怀，不解释</p>
</li>
<li><p><a href="http://www.top100.cn/" target="_blank" rel="external">巨鲸音乐</a> 看起来挺简洁，符合我的风格，先试试</p>
</li>
<li><p><a href="https://yahoo.streetvoice.com/" target="_blank" rel="external">奇摩音乐</a> 看起来还不错的样子~</p>
</li>
<li><p><a href="http://music.weibo.com/" target="_blank" rel="external">微博音乐</a> 草根比较多，应该还可以~</p>
</li>
</ul>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NexT主题内置标签]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/18/%E5%8D%9A%E5%AE%A2/NexT%E4%B8%BB%E9%A2%98%E5%86%85%E7%BD%AE%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<ul>
<li>具体用法参考NexT文档 <a href="http://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="external">传送门</a></li>
</ul>
<h3 id="文本居中的引用"><a href="#文本居中的引用" class="headerlink" title="文本居中的引用"></a>文本居中的引用</h3><p>此标签将生成一个带上下分割线的引用，同时引用内文本将自动居中。 文本居中时，多行文本若长度不等，视觉上会显得不对称，因此建议在引用单行文本的场景下使用。 例如作为文章开篇引用 或者 结束语之前的总结引用</p>
<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ul>
<li><p>HTML方式：使用这种方式时，给 img 添加属性 class=”blockquote-center” 即可</p>
</li>
<li><p>标签方式：使用 centerquote 或者 简写 cq</p>
</li>
</ul>
<blockquote>
<p>此标签要求 NexT 的版本在 0.4.5 或以上。 若你正在使用的版本比较低，可以选择使用 HTML 方式</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 其中 class="blockquote-center" 是必须的 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>blah blah blah<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span></div><div class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 标签别名 --&gt;</span></div><div class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</div></pre></td></tr></table></figure>
<p>效果示例:</p>
<center><img src="http://theme-next.iissnan.com/uploads/tags/blockquote-center.png" alt=""></center>

<a id="more"></a>
<h3 id="突破容器宽度限制的图片"><a href="#突破容器宽度限制的图片" class="headerlink" title="突破容器宽度限制的图片"></a>突破容器宽度限制的图片</h3><p>当使用此标签引用图片时，图片将自动扩大 26%，并突破文章容器的宽度。 此标签使用于需要突出显示的图片, 图片的扩大与容器的偏差从视觉上提升图片的吸引力。 此标签有两种调用方式（详细参看底下示例）：</p>
<h4 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h4><ul>
<li><p>HTML方式：使用这种方式时，为 img 添加属性 class=”full-image”即可。</p>
</li>
<li><p>标签方式：使用 fullimage 或者 简写 fi， 并传递图片地址、 alt 和 title 属性即可。 属性之间以逗号分隔</p>
</li>
</ul>
<blockquote>
<p>此标签要求 NexT 的版本在 0.4.5 或以上。 若你正在使用的版本比较低，可以选择使用 HTML 方式。<br>如果要在图片下显示图片的标题，请使用 标签方式 并给定 title 属性</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 其中 class="full-image" 是必须的 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/image-url"</span> <span class="attr">class</span>=<span class="string">"full-image"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span></div><div class="line">&#123;% fullimage /image-url, alt, title %&#125;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 别名 --&gt;</span></div><div class="line">&#123;% fi /image-url, alt, title %&#125;</div></pre></td></tr></table></figure>
<p>效果示例:</p>
<center><img src="http://theme-next.iissnan.com/uploads/tags/full-image.jpg" class="full-image"></center>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[海明校验码]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%92%8C%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E6%B5%B7%E6%98%8E%E6%A0%A1%E9%AA%8C%E7%A0%81/</url>
      <content type="html"><![CDATA[<ul>
<li>定义</li>
</ul>
<p>海明码（Hamming Code）是利用奇偶性来检错和纠错的校验方法。海明码的构成方法是在数据位之间的确定位置插入k个校验位，通过扩大码距来实现检错和纠错。对于数据位m的数据，加入k位的校验码,它应满足：</p>
<h3 id="m-k-1-lt-2-k"><a href="#m-k-1-lt-2-k" class="headerlink" title="m+k+1&lt;2^k"></a>m+k+1&lt;2^k</h3><ul>
<li>例子</li>
</ul>
<p>设数据为01101001，试采用校验位求其偶校验方式的海明码。<br>     （1）确定数据位D和校验位Ｐ在海明码中的位置：<br>　　　　由海明码编码规则可知：<br>             pi在海明码的第2i-1<br>             比如P4=2^(4-1)=8，所以位于第8位</p>
<center><img src="http://7xstki.com1.z0.glb.clouddn.com/%E6%B5%B7%E6%98%8E%E6%A0%A1%E9%AA%8C%E7%A0%81%E5%9B%BE1.png" alt=""></center>

<a id="more"></a>
<p>（2）确定校验关系<br>         这个难点在于如何确定校验位组。<br>         举一个例子来说：H3=D0,海明码下标为3，我们必须用已知的校验位（P1,P2,P3,P4）来表示3，这里3就可以等于1+2。</p>
<center><img src="http://7xstki.com1.z0.glb.clouddn.com/%E6%B5%B7%E6%98%8E%E6%A0%A1%E9%AA%8C%E5%9B%BE2.png" alt=""></center>

<p>比如P1 的校验位为表格中红色标记出来所对应的海明码的位数<br>       故：P1校验：P1,D0,D1,D3,D4,D6<br>               P1=D0⊕D1⊕D3⊕D4⊕D6=1⊕0⊕1⊕0⊕1=1<br>               ⊕符号：代表异或，相同则为0，不同则为1。只要仔细一定可以计算正确。<br>               P2、P3、P4的海明码计算也是如此，关键是要找出正确的校验位组，所以海明校验码：011001001101</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[课程设计之二叉树遍历]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%92%8C%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<ul>
<li><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><center><img src="http://7xstki.com1.z0.glb.clouddn.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1.gif" alt=""></center>
</li>
<li><h3 id="二叉树遍历演示要求"><a href="#二叉树遍历演示要求" class="headerlink" title="二叉树遍历演示要求"></a>二叉树遍历演示要求</h3></li>
</ul>
<p>演示遍历二叉树的过程，所以首先建立二叉树，并用图形显示出树的形状。建立的过程是采用前序便利的方法来创建，设计两种生成树的方式：一种是系统随机生成，另一种是人工输入。考虑到屏幕界面的有限性，限定二叉树不超过5层，最多26个字符，输入字符小数点“.”代表NULL。初始树为某种颜色的结点，三种情况的遍历采用填充另外一种醒目的颜色，来表示当前遍历的结点，同时显示该结点的访问序号。同时在遍历的过程中在遍历图形的下方显示出遍历序列</p>
<a id="more"></a>
<ul>
<li><h3 id="环境需求"><a href="#环境需求" class="headerlink" title="环境需求"></a>环境需求</h3><p><a href="http://7xstki.com1.z0.glb.clouddn.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E7%B1%BB%E5%BA%93%E8%B5%84%E6%96%99.zip" target="_blank" rel="external">传送门</a></p>
</li>
<li><h3 id="图片资料"><a href="#图片资料" class="headerlink" title="图片资料"></a>图片资料</h3></li>
</ul>
<p>在D盘下新建一个datas目录，将资料 <a href="http://7xstki.com1.z0.glb.clouddn.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E5%9B%BE%E7%89%87%E8%B5%84%E6%96%99.zip" target="_blank" rel="external">传送门</a> 解压缩到datas文件夹中</p>
<!-- more -->
<ul>
<li><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;graphics.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span> </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> flag;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">generationMode</span><span class="params">()</span></span>;</div><div class="line"><span class="comment">//二叉树结点  </span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> BiTNode&#123;  </div><div class="line">    <span class="keyword">int</span> data,xx,yy,size;  </div><div class="line">    <span class="keyword">struct</span> BiTNode *lchild,*rchild;  </div><div class="line">&#125;BiTNode,*BiTree;<span class="comment">//用来记录二叉树节点，最多五层</span></div><div class="line">BiTNode tree[<span class="number">31</span>];</div><div class="line"><span class="keyword">char</span> userchar[<span class="number">32</span>];</div><div class="line"><span class="keyword">int</span> width=<span class="number">960</span>,height=<span class="number">720</span>;</div><div class="line"><span class="keyword">int</span> result=<span class="number">1</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line">  设置遍历之前的二叉树的节点图标，输入的是坐标</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTreeBegin</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> width,<span class="keyword">int</span> height)</span></span>&#123;</div><div class="line">	 IMAGE img1;	<span class="comment">// 定义 IMAGE 对象</span></div><div class="line">	loadimage(&amp;img1, <span class="string">"D:\\datas\\tree11.jpg"</span>,width,height);	<span class="comment">// 读取图片到 img 对象中</span></div><div class="line">	putimage(x, y, &amp;img1);	<span class="comment">// 在坐标 (0, 0) 位置显示 IMAGE 对象</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  设置记录遍历顺序的小红点图标</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTreeRed</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> width,<span class="keyword">int</span> height)</span></span>&#123;</div><div class="line">	 IMAGE img1;	<span class="comment">// 定义 IMAGE 对象</span></div><div class="line">	loadimage(&amp;img1, <span class="string">"D:\\datas\\red.jpg"</span>,width,height);	<span class="comment">// 读取图片到 img 对象中</span></div><div class="line">	putimage(x, y, &amp;img1);	<span class="comment">// 在坐标 (0, 0) 位置显示 IMAGE 对象</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  设置遍历之后的二叉树的节点图标，输入的是坐标</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTreeEnd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> width,<span class="keyword">int</span> height)</span></span>&#123;</div><div class="line">	 IMAGE img1;	<span class="comment">// 定义 IMAGE 对象</span></div><div class="line">	loadimage(&amp;img1, <span class="string">"D:\\datas\\tree22.jpg"</span>,width,height);	<span class="comment">// 读取图片到 img 对象中</span></div><div class="line">	putimage(x,y,  &amp;img1);	<span class="comment">// 在坐标 (0, 0) 位置显示 IMAGE 对象</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  用来初始化背景</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBackground</span><span class="params">()</span></span>&#123;</div><div class="line">   	<span class="comment">//创建一个窗口</span></div><div class="line">	initgraph(width,height);</div><div class="line">	IMAGE img;	<span class="comment">// 定义 IMAGE 对象</span></div><div class="line">	loadimage(&amp;img, <span class="string">"D:\\datas\\background.jpg"</span>);	<span class="comment">// 读取图片到 img 对象中</span></div><div class="line">	putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;img);	<span class="comment">// 在坐标 (0, 0) 位置显示 IMAGE 对象</span></div><div class="line">	setcolor(RED);</div><div class="line">	LOGFONT f;</div><div class="line">    getfont(&amp;f);                          <span class="comment">// 获取当前字体设置</span></div><div class="line">    f.lfHeight = <span class="number">27</span>;                      <span class="comment">// 设置字体高度为 40</span></div><div class="line">    <span class="built_in">strcpy</span>(f.lfFaceName, <span class="string">"黑体"</span>);         <span class="comment">// 设置字体为“宋体”</span></div><div class="line">    f.lfQuality = ANTIALIASED_QUALITY;    <span class="comment">// 设置输出效果为抗锯齿  </span></div><div class="line">    setfont(&amp;f);<span class="comment">// 设置字体样式</span></div><div class="line">    setbkmode( TRANSPARENT);<span class="comment">//透明背景</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> 得到一个小于n的随机整数</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRandom</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">	srand( (<span class="keyword">unsigned</span>)time( <span class="literal">NULL</span> ) );<span class="comment">//srand()函数产生一个以当前时间开始的随机种子.应该放在for等循环语句前面 不然要很长时间等待</span></div><div class="line">	<span class="keyword">return</span> rand()%n;<span class="comment">//MAX为最大值，其随机域为0~MAX-1</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> 二叉树生成之后的退出函数</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span></span>&#123;</div><div class="line">   <span class="comment">//按任意键退出</span></div><div class="line">    getch();</div><div class="line">	closegraph();</div><div class="line">	generationMode();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">   用来在遍历之后连接子节点和父节点的线段</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">  	setcolor(BLUE);</div><div class="line">	setlinestyle(PS_SOLID, <span class="literal">NULL</span>, <span class="number">3</span>);	<span class="comment">// 设置线宽为 2</span></div><div class="line">	<span class="keyword">if</span>(n!=<span class="number">0</span>)&#123;</div><div class="line">	   <span class="comment">//用来连接每个节点之间的线段</span></div><div class="line">	    line(tree[(n<span class="number">-1</span>)/<span class="number">2</span>].xx+<span class="number">30</span>,tree[(n<span class="number">-1</span>)/<span class="number">2</span>].yy+<span class="number">60</span>,tree[n].xx+<span class="number">30</span>,tree[n].yy);</div><div class="line">	&#125;    </div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  用来访问节点</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">visited</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(tree[n].data!=<span class="number">-1</span>)&#123;</div><div class="line">       	<span class="comment">//改变图标</span></div><div class="line">   setTreeEnd(tree[n].xx,tree[n].yy,tree[n].size,tree[n].size); </div><div class="line">   setTreeRed(tree[n].xx<span class="number">-20</span>,tree[n].yy<span class="number">-20</span>,<span class="number">30</span>,<span class="number">30</span>); <span class="comment">//设置记录顺序的角标</span></div><div class="line">   </div><div class="line">   <span class="comment">//将数字转换成char类型</span></div><div class="line">   <span class="keyword">char</span> s[<span class="number">10</span>];</div><div class="line">   <span class="built_in">sprintf</span>(s,<span class="string">"%d"</span>,result);</div><div class="line">   outtextxy(tree[n].xx<span class="number">-13</span>,tree[n].yy<span class="number">-13</span>,s);</div><div class="line">   result++;</div><div class="line">  </div><div class="line">   	setcolor(BLACK);</div><div class="line">    <span class="comment">//将数字转换成char类型</span></div><div class="line">		   <span class="keyword">char</span> str[<span class="number">10</span>];</div><div class="line">		   <span class="built_in">sprintf</span>(str,<span class="string">"%d"</span>,tree[n].data);</div><div class="line">        outtextxy(tree[n].xx+<span class="number">18</span>,tree[n].yy+<span class="number">18</span>,str);</div><div class="line"></div><div class="line">		 link(n);</div><div class="line">       <span class="comment">//用来设置线段的颜色和宽度</span></div><div class="line">		Sleep(<span class="number">1000</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  先序遍历</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fristOrder</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;<span class="comment">//先序</span></div><div class="line">	  <span class="keyword">if</span>(n&lt;<span class="number">31</span>)&#123;</div><div class="line">    	<span class="comment">//访问根节点</span></div><div class="line">	   visited(n);</div><div class="line">	   <span class="comment">//访问左子节点</span></div><div class="line">	   fristOrder(n*<span class="number">2</span>+<span class="number">1</span>);</div><div class="line">	   <span class="comment">//访问右子节点</span></div><div class="line">	   fristOrder(n*<span class="number">2</span>+<span class="number">2</span>);</div><div class="line">	&#125;</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">2</span>)&#123;<span class="comment">//中序</span></div><div class="line">	    <span class="keyword">if</span>(n&lt;<span class="number">31</span>)&#123;</div><div class="line">    </div><div class="line">	   <span class="comment">//访问左子节点</span></div><div class="line">	   fristOrder(n*<span class="number">2</span>+<span class="number">1</span>);</div><div class="line">	   	<span class="comment">//访问根节点</span></div><div class="line">	   visited(n);</div><div class="line">	   <span class="comment">//访问右子节点</span></div><div class="line">	   fristOrder(n*<span class="number">2</span>+<span class="number">2</span>);</div><div class="line">	&#125;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;<span class="comment">//后序</span></div><div class="line">	   <span class="keyword">if</span>(n&lt;<span class="number">31</span>)&#123;</div><div class="line">    </div><div class="line">	   <span class="comment">//访问左子节点</span></div><div class="line">	   fristOrder(n*<span class="number">2</span>+<span class="number">1</span>);</div><div class="line">	  </div><div class="line">	   <span class="comment">//访问右子节点</span></div><div class="line">	   fristOrder(n*<span class="number">2</span>+<span class="number">2</span>);</div><div class="line">	    	<span class="comment">//访问根节点</span></div><div class="line">	   visited(n);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">   <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  系统随机生成二叉树时用来对满二叉树进行初始化</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initFullBinaryTree</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> index=<span class="number">1</span>,tree_index=<span class="number">0</span>;</div><div class="line">   <span class="keyword">int</span> x,y=<span class="number">40</span>,temp;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</div><div class="line">	   <span class="keyword">int</span> j;</div><div class="line">	   <span class="keyword">if</span>(i!=<span class="number">5</span>)&#123;</div><div class="line">	      x=width/(index+<span class="number">1</span>);</div><div class="line">	     <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=index;j++)&#123;</div><div class="line">	       setTreeBegin(x,y,<span class="number">60</span>,<span class="number">60</span>);</div><div class="line">		   tree[tree_index].xx=x;</div><div class="line">		   tree[tree_index].yy=y;</div><div class="line">		   tree[tree_index].size=<span class="number">60</span>;</div><div class="line">		   <span class="comment">//存入一个随机整数</span></div><div class="line">		   temp=getRandom(<span class="number">100</span>);</div><div class="line">		   <span class="comment">//将数字转换成char类型</span></div><div class="line">		   <span class="keyword">char</span> str[<span class="number">10</span>];</div><div class="line">		   <span class="built_in">sprintf</span>(str,<span class="string">"%d"</span>,(temp*j+i)%<span class="number">100</span>);</div><div class="line">		    outtextxy(x+<span class="number">18</span>,y+<span class="number">18</span>,str);</div><div class="line">		   tree[tree_index].data=(temp*j+i)%<span class="number">100</span>;</div><div class="line">	    	tree_index++;</div><div class="line">		   x+=<span class="number">100</span>;</div><div class="line">		 &#125; </div><div class="line">	   &#125;<span class="keyword">else</span>&#123;</div><div class="line">	     x=<span class="number">15</span>;</div><div class="line">	     <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=index;j++)&#123;</div><div class="line">	       setTreeBegin(x,y,<span class="number">50</span>,<span class="number">50</span>);</div><div class="line">		   tree[tree_index].size=<span class="number">50</span>;</div><div class="line">		   tree[tree_index].xx=x;</div><div class="line">		   tree[tree_index].yy=y;</div><div class="line">		    <span class="comment">//存入一个随机整数</span></div><div class="line">		    temp=getRandom(<span class="number">100</span>);</div><div class="line">			 <span class="comment">//将数字转换成char类型</span></div><div class="line">		   <span class="keyword">char</span> str[<span class="number">10</span>];</div><div class="line">		   <span class="built_in">sprintf</span>(str,<span class="string">"%d"</span>,(temp*j+i)%<span class="number">100</span>);</div><div class="line">		    outtextxy(x+<span class="number">15</span>,y+<span class="number">15</span>,str);</div><div class="line">		   tree[tree_index].data=(temp*j+i)%<span class="number">100</span>;</div><div class="line">	       tree_index++;</div><div class="line">		   x+=<span class="number">60</span>;</div><div class="line">		 &#125; </div><div class="line">	   </div><div class="line">	   &#125;</div><div class="line">	   y+=<span class="number">130</span>;</div><div class="line">	   index*=<span class="number">2</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">//用来设置线段的颜色和宽度</span></div><div class="line">   	setcolor(RED);</div><div class="line">	setlinestyle(PS_SOLID, <span class="literal">NULL</span>, <span class="number">2</span>);	<span class="comment">// 设置线宽为 2</span></div><div class="line">    <span class="comment">//用来连接每个节点之间的线段</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> f=<span class="number">0</span>;f&lt;<span class="number">15</span>;f++)&#123;</div><div class="line">	    line(tree[f].xx+<span class="number">30</span>,tree[f].yy+<span class="number">60</span>,tree[f*<span class="number">2</span>+<span class="number">1</span>].xx+<span class="number">30</span>,tree[f*<span class="number">2</span>+<span class="number">1</span>].yy);</div><div class="line">		line(tree[f].xx+<span class="number">30</span>,tree[f].yy+<span class="number">60</span>,tree[f*<span class="number">2</span>+<span class="number">2</span>].xx+<span class="number">30</span>,tree[f*<span class="number">2</span>+<span class="number">2</span>].yy);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//用来进行先序遍历</span></div><div class="line">   fristOrder(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  系统随机生成二叉树</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">randomTree</span><span class="params">()</span></span>&#123;</div><div class="line">   setBackground();</div><div class="line">   <span class="comment">//用来进行初始化</span></div><div class="line">   initFullBinaryTree();</div><div class="line">   <span class="built_in">exit</span>();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  用户输入模式用来访问节点</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">userVisited</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(tree[n].data!=<span class="number">-1</span>)&#123;</div><div class="line">       	<span class="comment">//改变图标</span></div><div class="line">   setTreeEnd(tree[n].xx,tree[n].yy,tree[n].size,tree[n].size); </div><div class="line"></div><div class="line">   setTreeRed(tree[n].xx<span class="number">-20</span>,tree[n].yy<span class="number">-20</span>,<span class="number">30</span>,<span class="number">30</span>); <span class="comment">//设置记录顺序的角标</span></div><div class="line">   </div><div class="line">   <span class="comment">//将数字转换成char类型</span></div><div class="line">   <span class="keyword">char</span> s[<span class="number">10</span>];</div><div class="line">   <span class="built_in">sprintf</span>(s,<span class="string">"%d"</span>,result);</div><div class="line">   outtextxy(tree[n].xx<span class="number">-13</span>,tree[n].yy<span class="number">-13</span>,s);</div><div class="line">   result++;</div><div class="line"></div><div class="line">   	setcolor(BLACK);</div><div class="line">    <span class="comment">//将数字转换成char类型</span></div><div class="line">		   <span class="keyword">char</span> str[<span class="number">10</span>];</div><div class="line">		   <span class="built_in">sprintf</span>(str,<span class="string">"%d"</span>,tree[n].data);</div><div class="line">        outtextxy(tree[n].xx+<span class="number">18</span>,tree[n].yy+<span class="number">18</span>,str);</div><div class="line"></div><div class="line">		 link(n);</div><div class="line">       <span class="comment">//用来设置线段的颜色和宽度</span></div><div class="line">		Sleep(<span class="number">1000</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  用户输入模式先序遍历</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">userFristOrder</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;<span class="comment">//先序</span></div><div class="line">	  	<span class="keyword">if</span>(n&lt;<span class="number">31</span>)&#123;</div><div class="line">    	<span class="comment">//访问根节点</span></div><div class="line">	   userVisited(n);</div><div class="line">	   <span class="comment">//访问左子节点</span></div><div class="line">	   fristOrder(n*<span class="number">2</span>+<span class="number">1</span>);</div><div class="line">	   <span class="comment">//访问右子节点</span></div><div class="line">	   fristOrder(n*<span class="number">2</span>+<span class="number">2</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">2</span>)&#123;<span class="comment">//中序</span></div><div class="line">	  	<span class="keyword">if</span>(n&lt;<span class="number">31</span>)&#123;</div><div class="line">    </div><div class="line">	   <span class="comment">//访问左子节点</span></div><div class="line">	   fristOrder(n*<span class="number">2</span>+<span class="number">1</span>);</div><div class="line">	   	<span class="comment">//访问根节点</span></div><div class="line">	   userVisited(n);</div><div class="line">	   <span class="comment">//访问右子节点</span></div><div class="line">	   fristOrder(n*<span class="number">2</span>+<span class="number">2</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;<span class="comment">//后序</span></div><div class="line">	   	<span class="keyword">if</span>(n&lt;<span class="number">31</span>)&#123;</div><div class="line">    </div><div class="line">	   <span class="comment">//访问左子节点</span></div><div class="line">	   fristOrder(n*<span class="number">2</span>+<span class="number">1</span>);</div><div class="line">	   </div><div class="line">	   <span class="comment">//访问右子节点</span></div><div class="line">	   fristOrder(n*<span class="number">2</span>+<span class="number">2</span>);</div><div class="line">	   	<span class="comment">//访问根节点</span></div><div class="line">	   userVisited(n);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">   <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  用户输入初始化树</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initUserFullBinaryTree</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> index=<span class="number">1</span>,tree_index=<span class="number">0</span>;</div><div class="line">   <span class="keyword">int</span> x,y=<span class="number">40</span>,temp;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</div><div class="line">	   <span class="keyword">int</span> j;</div><div class="line">	   <span class="keyword">if</span>(i!=<span class="number">5</span>)&#123;</div><div class="line">	      x=width/(index+<span class="number">1</span>);</div><div class="line">	     <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=index;j++)&#123;</div><div class="line">			 <span class="keyword">if</span>(tree[tree_index].data!=<span class="number">-1</span>)&#123;</div><div class="line">		   setTreeBegin(x,y,<span class="number">60</span>,<span class="number">60</span>);</div><div class="line">		   tree[tree_index].xx=x;</div><div class="line">		   tree[tree_index].yy=y;</div><div class="line">		   tree[tree_index].size=<span class="number">60</span>;</div><div class="line">		   <span class="comment">//整数</span></div><div class="line">		   temp=tree[tree_index].data<span class="number">-48</span>;</div><div class="line">		   <span class="comment">//将数字转换成char类型</span></div><div class="line">		   <span class="keyword">char</span> str[<span class="number">10</span>];</div><div class="line">		   <span class="built_in">sprintf</span>(str,<span class="string">"%d"</span>,(temp*j+i)%<span class="number">100</span>);</div><div class="line">		    outtextxy(x+<span class="number">18</span>,y+<span class="number">18</span>,str);</div><div class="line">		   tree[tree_index].data=(temp*j+i)%<span class="number">100</span>;</div><div class="line">			 &#125;</div><div class="line">	    	tree_index++;</div><div class="line">		   x+=<span class="number">100</span>;</div><div class="line">		 &#125; </div><div class="line">	   &#125;<span class="keyword">else</span>&#123;</div><div class="line">	     x=<span class="number">30</span>;</div><div class="line">	     <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=index;j++)&#123;</div><div class="line">			 <span class="keyword">if</span>(tree[tree_index].data!=<span class="number">-1</span>)&#123;</div><div class="line">			setTreeBegin(x,y,<span class="number">50</span>,<span class="number">50</span>);</div><div class="line">		   tree[tree_index].size=<span class="number">50</span>;</div><div class="line">		   tree[tree_index].xx=x;</div><div class="line">		   tree[tree_index].yy=y;</div><div class="line">		    <span class="comment">//整数</span></div><div class="line">		   temp=tree[tree_index].data<span class="number">-48</span>;</div><div class="line">			 <span class="comment">//将数字转换成char类型</span></div><div class="line">		   <span class="keyword">char</span> str[<span class="number">10</span>];</div><div class="line">		   <span class="built_in">sprintf</span>(str,<span class="string">"%d"</span>,(temp*j+i)%<span class="number">100</span>);</div><div class="line">		    outtextxy(x+<span class="number">15</span>,y+<span class="number">15</span>,str);</div><div class="line">		   tree[tree_index].data=(temp*j+i)%<span class="number">100</span>;</div><div class="line">			 &#125;</div><div class="line">	       tree_index++;</div><div class="line">		   x+=<span class="number">60</span>;</div><div class="line">		 &#125; </div><div class="line">	   </div><div class="line">	   &#125;</div><div class="line">	   y+=<span class="number">130</span>;</div><div class="line">	   index*=<span class="number">2</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">//用来设置线段的颜色和宽度</span></div><div class="line">   	setcolor(RED);</div><div class="line">	setlinestyle(PS_SOLID, <span class="literal">NULL</span>, <span class="number">2</span>);	<span class="comment">// 设置线宽为 2</span></div><div class="line">    <span class="comment">//用来连接每个节点之间的线段</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> f=<span class="number">0</span>;f&lt;<span class="number">15</span>;f++)&#123;</div><div class="line">		<span class="keyword">if</span>(tree[f*<span class="number">2</span>+<span class="number">1</span>].data!=<span class="number">-1</span>)&#123;</div><div class="line">		    line(tree[f].xx+<span class="number">30</span>,tree[f].yy+<span class="number">60</span>,tree[f*<span class="number">2</span>+<span class="number">1</span>].xx+<span class="number">30</span>,tree[f*<span class="number">2</span>+<span class="number">1</span>].yy);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(tree[f*<span class="number">2</span>+<span class="number">2</span>].data!=<span class="number">-1</span>)&#123;</div><div class="line">		line(tree[f].xx+<span class="number">30</span>,tree[f].yy+<span class="number">60</span>,tree[f*<span class="number">2</span>+<span class="number">2</span>].xx+<span class="number">30</span>,tree[f*<span class="number">2</span>+<span class="number">2</span>].yy);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//用来进行先序遍历</span></div><div class="line">   userFristOrder(<span class="number">0</span>);</div><div class="line">	</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  用户输入生成二叉树</div><div class="line">1</div><div class="line">34</div><div class="line">2354</div><div class="line">12..32..</div><div class="line">1243....3254....</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">userTree</span><span class="params">()</span></span>&#123;  </div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"输入数据，最多五层，只能是数字！\n"</span>);</div><div class="line">	<span class="comment">//录入用户数据</span></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">31</span>;i++)&#123;</div><div class="line">	  <span class="built_in">cin</span>&gt;&gt;userchar[i];</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//将数据录入结构体数组</span></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">31</span>;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(userchar[i]!=<span class="string">'.'</span>)&#123;</div><div class="line">		   tree[i].data=(userchar[i]+<span class="string">'0'</span><span class="number">-48</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">		  tree[i].data=<span class="number">-1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">   setBackground();</div><div class="line">   initUserFullBinaryTree();</div><div class="line">   <span class="built_in">exit</span>();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">   用来监听用户输入，确定用户选择生成二叉树</div><div class="line">   的方式</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">generationMode</span><span class="params">()</span></span>&#123;</div><div class="line">   	<span class="keyword">int</span> select;</div><div class="line">	<span class="comment">//给用户两种选择，一种是系统随机生成，一种是用户输入</span></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;	</div><div class="line">		result=<span class="number">1</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"*****************选择生成方式*****************\n\n"</span>);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"1---&gt;系统随机生成二叉树\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"2---&gt;用户输入节点生成二叉树\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"3---&gt;结束程序\n"</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;select);</div><div class="line">    	system(<span class="string">"cls"</span>);</div><div class="line">	<span class="keyword">if</span>(select==<span class="number">1</span>)&#123;</div><div class="line">	  <span class="built_in">printf</span>(<span class="string">"*************系统随机生成二叉树*************\n"</span>);</div><div class="line">	  <span class="built_in">printf</span>(<span class="string">"1---&gt;先序遍历\n"</span>);</div><div class="line">	  <span class="built_in">printf</span>(<span class="string">"2---&gt;中序遍历\n"</span>);</div><div class="line">	  <span class="built_in">printf</span>(<span class="string">"3---&gt;后序遍历\n"</span>);</div><div class="line">	  <span class="built_in">printf</span>(<span class="string">"4---&gt;结束程序\n"</span>);</div><div class="line">	  	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;flag);</div><div class="line">	  <span class="keyword">if</span>(flag==<span class="number">4</span>)&#123;</div><div class="line">	     <span class="built_in">printf</span>(<span class="string">"*************退出程序，感谢你的使用*************\n"</span>);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">	  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;<span class="comment">//先序遍历</span></div><div class="line">		  <span class="built_in">printf</span>(<span class="string">"\n*************先序遍历*************\n"</span>);</div><div class="line">	     </div><div class="line">	  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">2</span>)&#123;<span class="comment">//中序遍历</span></div><div class="line">		  <span class="built_in">printf</span>(<span class="string">"\n*************中序遍历*************\n"</span>);</div><div class="line">	  </div><div class="line">	  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">3</span>)&#123;<span class="comment">//后序遍历</span></div><div class="line">		  <span class="built_in">printf</span>(<span class="string">"\n*************后序遍历*************\n"</span>);</div><div class="line">	  </div><div class="line">	  &#125;<span class="keyword">else</span>&#123;</div><div class="line">	     <span class="built_in">printf</span>(<span class="string">"\n*************输入错误，请重新输入*************\n"</span>);</div><div class="line">	  &#125;</div><div class="line">	  randomTree();</div><div class="line">	  system(<span class="string">"cls"</span>);</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(select==<span class="number">2</span>)&#123;</div><div class="line">	  <span class="built_in">printf</span>(<span class="string">"*************用户输入生成二叉树*************\n"</span>);</div><div class="line">	  <span class="built_in">printf</span>(<span class="string">"1---&gt;先序遍历\n"</span>);</div><div class="line">	  <span class="built_in">printf</span>(<span class="string">"2---&gt;中序遍历\n"</span>);</div><div class="line">	  <span class="built_in">printf</span>(<span class="string">"3---&gt;后序遍历\n"</span>);</div><div class="line">	  <span class="built_in">printf</span>(<span class="string">"4---&gt;结束程序\n"</span>);</div><div class="line">	  	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;flag);</div><div class="line">	  <span class="keyword">if</span>(flag==<span class="number">4</span>)&#123;</div><div class="line">	     <span class="built_in">printf</span>(<span class="string">"*************退出程序，感谢你的使用*************\n"</span>);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">	  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;<span class="comment">//先序遍历</span></div><div class="line">		  <span class="built_in">printf</span>(<span class="string">"\n*************先序遍历*************\n"</span>);</div><div class="line">		  <span class="built_in">printf</span>(<span class="string">"例如\n1\n34\n2354\n12..32..\n1243....3254....\n"</span>);</div><div class="line">	     </div><div class="line">	  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">2</span>)&#123;<span class="comment">//中序遍历</span></div><div class="line">		  <span class="built_in">printf</span>(<span class="string">"\n*************中序遍历*************\n"</span>);</div><div class="line">		   <span class="built_in">printf</span>(<span class="string">"例如\n1\n34\n2354\n12..32..\n1243....3254....\n"</span>);</div><div class="line">	  </div><div class="line">	  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">3</span>)&#123;<span class="comment">//后序遍历</span></div><div class="line">		  <span class="built_in">printf</span>(<span class="string">"\n*************后序遍历*************\n"</span>);</div><div class="line">		   <span class="built_in">printf</span>(<span class="string">"例如\n1\n34\n2354\n12..32..\n1243....3254....\n"</span>);</div><div class="line">	  </div><div class="line">	  &#125;<span class="keyword">else</span>&#123;</div><div class="line">	     <span class="built_in">printf</span>(<span class="string">"\n*************输入错误，请重新输入*************\n"</span>);</div><div class="line">	  &#125;</div><div class="line">	   userTree();</div><div class="line">	   system(<span class="string">"cls"</span>);</div><div class="line">	  </div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(select==<span class="number">3</span>)&#123;</div><div class="line">	  <span class="built_in">printf</span>(<span class="string">"*************退出程序，感谢你的使用*************\n"</span>);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">	  <span class="built_in">printf</span>(<span class="string">"\n*************输入错误，请重新输入*************\n"</span>);</div><div class="line">	&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  主函数</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  generationMode();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客添加图片，音乐，视频]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/07/%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E9%9F%B3%E4%B9%90%EF%BC%8C%E8%A7%86%E9%A2%91/</url>
      <content type="html"><![CDATA[<ul>
<li>插入外部链接图片</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">“图片描述”</span>](<span class="link">“图片地址”</span>)</div></pre></td></tr></table></figure>
<ul>
<li>添加本地图片</li>
</ul>
<p>在\hexo\source目录下新建文件夹，命名为images或者其他你喜欢的名字，然后编辑你的md博文，插入下面的代码样式：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">“图片描述”</span>](<span class="link">/images/你的图片名字.JPG</span>)</div></pre></td></tr></table></figure>
<ul>
<li>插入音乐</li>
</ul>
<p>比如网易云音乐，找到喜欢的歌曲，点击分享按钮，把里面的代码复制下来，直接粘贴到博文中即可</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> </span></div><div class="line">	<span class="attr">src</span>=<span class="string">"http://music.163.com/outchain/player?type=2&amp;id=25706282&amp;auto=0&amp;height=66"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure>
<center><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=25706282&auto=0&height=66"><br></iframe><br></center>

<ul>
<li>插入视频</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Idina Menze和Caleb Hyles激情对唱Let It Go：</div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> </span></div><div class="line">	<span class="attr">height</span>=<span class="string">498</span> <span class="attr">width</span>=<span class="string">510</span> </div><div class="line">	<span class="attr">src</span>=<span class="string">"http://player.youku.com/embed/XNjcyMDU4Njg0"</span> </div><div class="line">	<span class="attr">frameborder</span>=<span class="string">0</span> <span class="attr">allowfullscreen</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure>
<center><br>Idina Menze和Caleb Hyles激情对唱Let It Go：<br><iframe height="498" width="510" src="http://player.youku.com/embed/XNjcyMDU4Njg0" frameborder="0" allowfullscreen><br></iframe><br></center>

<a id="more"></a>
<p>参考博客：<a href="http://blog.wleyuan.me/2015/07/18/Hexo-AddSoundPicMovie/" target="_blank" rel="external">传送门</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo博客添加域名实现双线部署（github和coding）]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/07/SEO/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2%EF%BC%88github%E5%92%8Ccoding%EF%BC%89/</url>
      <content type="html"><![CDATA[<ul>
<li><p>首先申请一个域名</p>
</li>
<li><p>在hexo目录下的source目录下新建一个文件CNAME，不要带后缀，也就是没有文件类型，可以使用命令来创建</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd source</div><div class="line">touch CNAME</div></pre></td></tr></table></figure>
<ul>
<li><p>然后添加自己申请的域名,不带 http 和 www </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qiuchengjia.cn</div></pre></td></tr></table></figure>
</li>
<li><p>我建议到 <a href="https://www.dnspod.cn/" target="_blank" rel="external">dnspod</a> 进行解析管理，我们可以在这里实现国内用户走coding，国外用户<br>走github</p>
</li>
</ul>
<ul>
<li>首先进入coding pages页面，添加自己的域名</li>
</ul>
<center><img src="http://7xstki.com1.z0.glb.clouddn.com/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D3.png" alt=""></center>

<a id="more"></a>
<ul>
<li>然后进入 dnspod 进行配置，如图</li>
</ul>
<center><img src="http://7xstki.com1.z0.glb.clouddn.com/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%9F%9F%E5%90%8D2.png" alt=""></center>

<ul>
<li>NS记录的记录值</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f1g1ns1.dnspod.net.</div><div class="line">f1g1ns2.dnspod.net.</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo做SEO（添加sitemap和baidusitemap）]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/06/SEO/hexo%E5%81%9ASEO%EF%BC%88%E6%B7%BB%E5%8A%A0sitemap%E5%92%8Cbaidusitemap%EF%BC%89/</url>
      <content type="html"><![CDATA[<ul>
<li>添加站点地图</li>
</ul>
<p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站</p>
<ul>
<li>安装插件</li>
</ul>
<p>打开hexo目录下的dos命令行，分别安装百度和google插件</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap --save</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>
<ul>
<li>在博客目录的_config.yml中添加如下代码</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 自动生成sitemap</div><div class="line">sitemap:</div><div class="line">path: sitemap.xml</div><div class="line">baidusitemap:</div><div class="line">path: baidusitemap.xml</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>编译你的博客</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
<ul>
<li><p>如果你在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了</p>
</li>
<li><p>修改 node_modules\hexo-generator-baidu-sitemap\baidusitemap.ejs<br>文件，将红色框内的地址换成自己的地址</p>
</li>
</ul>
<center><img src="http://7xstki.com1.z0.glb.clouddn.com/hexo%E5%81%9Aseo%E5%9B%BE%E7%89%872.png" alt=""></center>

<ul>
<li>修改 node_modules\hexo-generator-sitemap\sitemap.xml文件，将红色<br>框内的地址换成自己的地址</li>
</ul>
<center><img src="http://7xstki.com1.z0.glb.clouddn.com/hexo%E5%81%9Aseo%E5%9B%BE%E7%89%871.png" alt=""></center>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个客户端设置多个github账号]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/04/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E4%B8%80%E4%B8%AA%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BE%E7%BD%AE%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/</url>
      <content type="html"><![CDATA[<ul>
<li><h3 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h3></li>
<li><p>至少有两个github账号 (假设有两个账号 一个为 one ，另一个为 two)</p>
</li>
<li>取消git全局设置</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global --unset user.name</div><div class="line">git config --global --unset user.email</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h3></li>
<li><p>生成 id_rsa 私钥 , id_rsa.pub 公钥<br>one可以直接回车，默认生成id_rsa和id_rsa.pub</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"one@126.com"</span></div></pre></td></tr></table></figure>
<ul>
<li>但是two会出现提示输入文件名，输入与默认配置不一样的文件名，比如: id_rsa_two</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div><div class="line">ssh-keygen -t rsa -C <span class="string">"two@126.com"</span>  # 之后会提示输入文件名</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><p>github添加公钥 id_rsa.pub , id_rsa_two.pub<br>分别登陆one,two的账号，在 Account Settings 的 SSH Keys 里，点 Add SSH Keys ，将公钥(.pub文件)中的内容粘贴到”Key”中，并输入”Title”</p>
</li>
<li><p>添加 ssh key</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-add ~/.ssh/id_rsa</div><div class="line">ssh-add ~/.ssh/id_rsa_two</div></pre></td></tr></table></figure>
<ul>
<li>可以在添加前使用下面命令删除所有的key</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add -D</div></pre></td></tr></table></figure>
<ul>
<li>最后可以通过下面命令，查看key的设置</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add -l</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="修改ssh-config文件"><a href="#修改ssh-config文件" class="headerlink" title="修改ssh config文件"></a>修改ssh config文件</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh/</div><div class="line">touch config</div></pre></td></tr></table></figure>
<ul>
<li>打开.ssh文件夹下的config文件，进行配置</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># default</span></div><div class="line">Host one</div><div class="line">HostName github.com</div><div class="line">User git</div><div class="line">IdentityFile ~/.ssh/id_rsa</div><div class="line"></div><div class="line"><span class="meta"># two</span></div><div class="line">Host two  # 前缀名可以任意设置</div><div class="line">HostName github.com</div><div class="line">User git</div><div class="line">IdentityFile ~/.ssh/id_rsa_two</div></pre></td></tr></table></figure>
<p>这里必须采用这样的方式设置，否则push时会出现以下错误:</p>
<blockquote>
<h3 id="ERROR-Permission-to-two-two-github-com-git-denied-to-one"><a href="#ERROR-Permission-to-two-two-github-com-git-denied-to-one" class="headerlink" title="ERROR: Permission to two/two.github.com.git denied to one."></a>ERROR: Permission to two/two.github.com.git denied to one.</h3></blockquote>
<ul>
<li>简单分析下原因，我们可以发现 ssh 客户端是通过类似:<br>git@github.com:one/one.github.com.git<br>这样的 git 地址中的 User 和 Host 来识别使用哪个本地私钥的。<br>很明显，如果 User 和 Host 始终为 git 和 github.com，那么就只能使用一个私钥。<br>所以需要上面的方式配置，每个账号使用了自己的 Host，每个 Host 的域名做 CNAME 解析到 github.com，这样 ssh 在连接时就可以区别不同的账号了。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ssh -T git@one        # 测试one ssh连接</div><div class="line">#Hi ***! You've successfully authenticated, but GitHub does not provide shell access.</div><div class="line">ssh -T git@two    # 测试two ssh连接</div><div class="line">#Hi ***! You've successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>
<p>但是这样还没有完，下面还有关联的设置</p>
<ul>
<li><h3 id="新建git项目或者clone已有的项目"><a href="#新建git项目或者clone已有的项目" class="headerlink" title="新建git项目或者clone已有的项目"></a>新建git项目或者clone已有的项目</h3></li>
<li><p>可以用 git init 或者 git clone 创建本地项目</p>
</li>
<li>分别在one和two的git项目目录下，使用下面的命令设置账号关联</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config user.name <span class="string">"__name__"</span>  # <span class="number">__</span>name__ 例如 one</div><div class="line">git config user.email <span class="string">"__email__"</span>   # <span class="number">__</span>email__ 例如 one@<span class="number">126.</span>com</div></pre></td></tr></table></figure>
<ul>
<li>查看git项目的配置</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --<span class="built_in">list</span></div></pre></td></tr></table></figure>
<ul>
<li>查看one的remote.origin.url=git@github.com:one/one.github.com.git<br>查看two的remote.origin.url=git@github.com:two/two.github.com.git<br>由于one使用的是默认的Host，所以不需要修改，但是two使用的是two.github.com，则需要进行修改</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git remote rm origin</div><div class="line">git remote add origin git@two:yourname/yourRepertory.git</div><div class="line"><span class="comment">//git remote add gittwo git@two:yourname/yourRepertory.git</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="上传更改"><a href="#上传更改" class="headerlink" title="上传更改"></a>上传更改</h3></li>
<li><p>上面所有的设置无误后，可以修改代码，然后上传了</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add -A</div><div class="line">git commit -m <span class="string">"your comments"</span></div><div class="line">git push origin master</div><div class="line"><span class="comment">//git pull gittwo master</span></div></pre></td></tr></table></figure>
<ul>
<li>如果遇到warning</li>
</ul>
<blockquote>
<h3 id="warning-push-default-is-unset-its-implicit-value-is-changing-in-Git-2-0-from-‘matching’-to-‘simple’-To-squelch-this-messageand-maintain-the-current-behavior-after-the-default-changes-use…"><a href="#warning-push-default-is-unset-its-implicit-value-is-changing-in-Git-2-0-from-‘matching’-to-‘simple’-To-squelch-this-messageand-maintain-the-current-behavior-after-the-default-changes-use…" class="headerlink" title="warning: push.default is unset; its implicit value is changing in Git 2.0 from ‘matching’ to ‘simple’. To squelch this messageand maintain the current behavior after the default changes, use…"></a>warning: push.default is unset; its implicit value is changing in Git 2.0 from ‘matching’ to ‘simple’. To squelch this messageand maintain the current behavior after the default changes, use…</h3></blockquote>
<ul>
<li>推荐使用下面命令设置</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global push.<span class="keyword">default</span> simple</div></pre></td></tr></table></figure>
<ul>
<li>参考博客 <a href="http://tmyam.github.io/blog/2014/05/07/duo-githubzhang-hu-she-zhi/" target="_blank" rel="external">传送门</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo搭建个人博客]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/03/%E5%8D%9A%E5%AE%A2/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<ul>
<li><p>首先我们应该学会看官方文档，文档是最好的资料 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">传送门</a></p>
</li>
<li><p>首先我们需要安装Git <a href="https://git-scm.com/" target="_blank" rel="external">传送门</a>和 Node.js <a href="https://nodejs.org/en/" target="_blank" rel="external">传送门</a></p>
</li>
</ul>
<h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><ul>
<li>打开dos命令行，安装需要的组件</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div><div class="line">npm install hexo --save</div><div class="line">#如果命令无法运行，可以尝试更换taobao的npm源</div><div class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></div></pre></td></tr></table></figure>
<h3 id="Hexo初始化配置"><a href="#Hexo初始化配置" class="headerlink" title="Hexo初始化配置"></a>Hexo初始化配置</h3><ul>
<li>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init &lt;folder&gt;</div><div class="line">cd &lt;folder&gt;</div><div class="line">npm install</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="安装Hexo插件"><a href="#安装Hexo插件" class="headerlink" title="安装Hexo插件"></a>安装Hexo插件</h4><ul>
<li>如果想不出错，就将下面的插件都安装完</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-index --save</div><div class="line">npm install hexo-generator-archive --save</div><div class="line">npm install hexo-generator-category --save</div><div class="line">npm install hexo-generator-tag --save</div><div class="line">npm install hexo-server --save</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install hexo-deployer-heroku --save</div><div class="line">npm install hexo-deployer-rsync --save</div><div class="line">npm install hexo-deployer-openshift --save</div><div class="line">npm install hexo-renderer-marked@<span class="number">0.2</span> --save</div><div class="line">npm install hexo-renderer-stylus@<span class="number">0.2</span> --save</div><div class="line">npm install hexo-generator-feed@<span class="number">1</span> --save</div><div class="line">npm install hexo-generator-sitemap@<span class="number">1</span> --save</div></pre></td></tr></table></figure>
<h4 id="本地查看效果"><a href="#本地查看效果" class="headerlink" title="本地查看效果"></a>本地查看效果</h4><ul>
<li>执行下面语句，执行完即可登录localhost:4000查看效果</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul>
<li>安装 hexo-deployer-git</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h4 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h4><ul>
<li>我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并运行:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/. ssh</div></pre></td></tr></table></figure>
<h4 id="创建一对新的SSH密钥-keys"><a href="#创建一对新的SSH密钥-keys" class="headerlink" title="创建一对新的SSH密钥(keys)"></a>创建一对新的SSH密钥(keys)</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C "your_email@example.com"</div><div class="line">#这将按照你提供的邮箱地址，创建一对密钥</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</div></pre></td></tr></table></figure>
<h4 id="在GitHub账户中添加你的公钥"><a href="#在GitHub账户中添加你的公钥" class="headerlink" title="在GitHub账户中添加你的公钥"></a>在GitHub账户中添加你的公钥</h4><ul>
<li>将公钥的内容复制到系统粘贴板(clipboard)中</li>
</ul>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure>
<ul>
<li>然后会看到：</li>
</ul>
<blockquote>
<p>Hi qiuchengjia! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
<h4 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"cnfeat"</span><span class="comment">//用户名</span></div><div class="line">git config --global user.email  <span class="string">"cnfeat@gmail.com"</span><span class="comment">//填写自己的邮箱</span></div></pre></td></tr></table></figure>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><ul>
<li>修改配置</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: &lt;repository url&gt;</div><div class="line">  branch: [branch]</div><div class="line">  message: [message]</div></pre></td></tr></table></figure>
<h4 id="部署进-github-或-coding"><a href="#部署进-github-或-coding" class="headerlink" title="部署进 github 或 coding"></a>部署进 github 或 coding</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<ul>
<li>还有一点注意事项，如果要添加 README.md 文件的话，我们可以在本地<br>写好，然后放入public文件夹下，如图：</li>
</ul>
<center><img src="http://7xstki.com1.z0.glb.clouddn.com/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.png" alt=""></center>

<ul>
<li><p>此文只是安装hexo的主要流程，具体事项参考hexo官方文档 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">传送门</a></p>
</li>
<li><p>我的hexo博客搭建在github <a href="https://github.com/qiuchengjia/qiuchengjia.github.io" target="_blank" rel="external">传送门</a>，coding上 <a href="https://coding.net/u/qiuchengjia/p/qiuchengjia/git" target="_blank" rel="external">传送门</a>，喜欢可以star一下</p>
</li>
</ul>
<center><img src="http://7xstki.com1.z0.glb.clouddn.com/github%E5%9B%BE%E7%89%875.png" alt=""></center>

<p><br><br><img src="http://7xstki.com1.z0.glb.clouddn.com/github%E5%9B%BE%E7%89%877.png" alt=""></p>
<p><br></p>
<center><img src="http://7xstki.com1.z0.glb.clouddn.com/github%E5%9B%BE%E7%89%873.png" alt=""></center>


<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://my.oschina.net/ryaneLee/blog/638440" target="_blank" rel="external">小白独立搭建博客–Github Pages和Hexo简明教程</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ ACM常用数学公式汇总]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/02/ACM/ACM%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<ul>
<li><p>扇形面积<br>S=1/2×弧长×半径，S扇=（n/360）πR²</p>
</li>
<li><p>三角函数定义</p>
<center><img src="http://7xstki.com1.z0.glb.clouddn.com/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F.png" alt=""></center>
</li>
<li><p>三角函数特殊角</p>
</li>
</ul>
<center><img src="http://img.blog.csdn.net/20160524155156479" alt=""></center>

<a id="more"></a>
<ul>
<li>正弦定理</li>
</ul>
<p>对于边长为a,b和c而相应角为A,B和C的三角形，有：<br>sinA / a = sinB / b = sinC/c<br>也可表示为：a/sinA=b/sinB=c/sinC=2R<br>变形：a=2RsinA,b=2RsinB,c=2RsinC<br>其中R是三角形的外接圆半径。</p>
<ul>
<li>余弦定理</li>
</ul>
<p>对于边长为a、b、c而相应角为A、B、C的三角形，有：<br>a² = b² + c²- 2bc·cosA<br>b² = a² + c² - 2ac·cosB<br>c² = a² + b² - 2ab·cosC</p>
<ul>
<li><p>正切定理<br>对于边长为a,b和c而相应角为A,B和C的三角形，有：<br>(a+b)/(a-b) = tan[(A+B)/2]/tan[(A-B)/2]</p>
</li>
<li><p>三角形面积<br>  s=a<em>b</em>sinC/2</p>
</li>
<li><p>多边形面积</p>
</li>
</ul>
<p>计算几何，求多边形的面积，实例：<a href="http://blog.csdn.net/qq_26891045/article/details/51493840" target="_blank" rel="external">传送门</a></p>
<p>只要记住这个公式：</p>
<center><img src="http://acm.hdu.edu.cn/data/images/2528-2.jpg" alt=""></center>

<p>如果逆时针给出点坐标，值为正，<br>如果顺时针给出点坐标，值为负。<br>当i=n-1  i+1就是n所代表的点就是第一个点。</p>
<ul>
<li>圆的摆线留下的面积</li>
</ul>
<p>摆线留下的面积等于圆的三倍  实例：<a href="http://blog.csdn.net/qq_26891045/article/details/51407311" target="_blank" rel="external">传送门</a></p>
<ul>
<li>点到直线的距离(直线AX+BY+C=0)：</li>
</ul>
<center><img src="http://img.blog.csdn.net/20160524203038020" alt=""></center>

<ul>
<li>两平行线之间的距离(直线AX+BY+C=0)：</li>
</ul>
<center><img src="http://img.blog.csdn.net/20160524203059141" alt=""></center>

<ul>
<li>两直线的夹角(直线AX+BY+C=0)：</li>
</ul>
<center><img src="http://img.blog.csdn.net/20160524203250663" alt=""></center>

<ul>
<li>三角形重心</li>
</ul>
<p>设某个三角形的重心为G（cx，cy），顶点坐标分别为A1（x1，y1），A2（x2，y2），A3（x3，y3），则有cx = (x1 + x2 + x3)/3.同理求得cy</p>
<ul>
<li>多边形重心</li>
</ul>
<p>cx = (∑ cx[i]<em>s[i]) / （3</em>∑s[i]）;  cy = (∑ cy[i]<em>s[i] ) / （3</em>∑s[i]）;其中（cx[i], cy[i]）, s[i]分别是所划分的第i个三角形的重心坐标和面积   示例：<a href="http://blog.csdn.net/qq_26891045/article/details/51464782" target="_blank" rel="external">传送门</a></p>
<ul>
<li><p>锐角三角形判定公式<br>锐角三角形计算公式：a<em>a+b</em>b&gt;c*c</p>
</li>
<li><p>向量之间的夹角</p>
</li>
</ul>
<center><img src="http://img.blog.csdn.net/20160525135016850" alt=""></center>

<ul>
<li>三角形的面积</li>
</ul>
<center><img src="http://img.blog.csdn.net/20160525133627281" alt=""></center>

<ul>
<li>多边形的面积</li>
</ul>
<center><img src="http://img.blog.csdn.net/20160525133815657" alt=""><br>或<br><img src="http://img.blog.csdn.net/20160525133820958" alt=""></center>

<ul>
<li>向量叉积判断多边形凹凸</li>
</ul>
<p>对于连续的三个点p0,p1,p2，另向量a=p1-p0，b=p2-p1若是凸多边形，那么b相对于a一定是向逆时针方向旋转的<br>判断两向量的旋转方向，可以使用向量的叉积  a×b ＝ x1×y2 － x2×y1</p>
<p>a×b &gt; 0 b在a的逆时针方向<br>a×b = 0 b平行于a（共线）<br>a×b &lt; 0 b在a的顺时针方向<br>要注意的是，对于最后一个点pn，还要和起始的两个点p0,p1判断一次</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ STL之map和multimap总结]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/02/C++/STL%E4%B9%8Bmap%E5%92%8Cmultimap%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<ul>
<li>map和multimap都是有序关联容器，所有元素都会根据元素的键值自动被排序,包含具有唯一键的键值对。键使用比较函数Compare比较来进行排序。搜索，删除和插入操作具有对数复杂性。map和multimap通常实现为红黑树。multimap相对map来说能够允许重复值的存在</li>
</ul>
<ul>
<li><h3 id="构造，赋值，析构"><a href="#构造，赋值，析构" class="headerlink" title="构造，赋值，析构"></a>构造，赋值，析构</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span> c <span class="comment">//默认构造函数；创建一个空map/multimap  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="built_in">map</span> <span class="title">c</span><span class="params">(op)</span> <span class="comment">//创建一个空map/multimap，并以op原则作为排序准则  </span></span></div><div class="line">  </div><div class="line"><span class="built_in">map</span> <span class="title">c</span><span class="params">(c2)</span> <span class="comment">//复制构造函数；创建一个新的map/multimap</span></div><div class="line"><span class="comment">//作为c2的副本（所有元素都被复制）  </span></div><div class="line">  </div><div class="line"><span class="built_in">map</span> c = c2 <span class="comment">//复制构造函数；创建一个新的map</span></div><div class="line"><span class="comment">//作为c2的副本（所有元素都被复制）  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="built_in">map</span> <span class="title">c</span><span class="params">(rv)</span> <span class="comment">//移动构造函数；使用右值对象rv创建一个新map/multimap  </span></span></div><div class="line">  </div><div class="line"><span class="built_in">map</span> c = rv <span class="comment">//移动构造函数；使用右值对象rv创建一个新map/multimap  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="built_in">map</span> <span class="title">c</span><span class="params">(beg,end)</span> <span class="comment">//创建一个map/multimap，并使用</span></span></div><div class="line"><span class="comment">//beg到end范围内的值进行初始化  </span></div><div class="line">  </div><div class="line"><span class="built_in">map</span> <span class="title">c</span><span class="params">(beg,end,op)</span> <span class="comment">//创建一个map/multimap，</span></div><div class="line"><span class="comment">//并使用beg到end范围内以op原则排序后的值进行初始化  </span></div><div class="line">  </div><div class="line"><span class="built_in">map</span> <span class="title">c</span><span class="params">(initlist)</span> </div><div class="line"><span class="comment">//创建一个map/multimap，并使用初始化列表进行初始化  </span></div><div class="line">  </div><div class="line"><span class="built_in">map</span> c = initlist </div><div class="line"><span class="comment">//创建一个map/multimap，并使用初始化列表进行初始化  </span></div><div class="line">  </div><div class="line">c.~<span class="built_in">map</span>() <span class="comment">//销毁所有元素并释放内存</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>在这里map可能是如下的一种：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span>&lt;Key,Val&gt; <span class="comment">//以less&lt;&gt;为排序准则的map  </span></div><div class="line">  </div><div class="line"><span class="built_in">map</span>&lt;Key,Val,Op&gt; <span class="comment">//以op为排序准则的map  </span></div><div class="line">  </div><div class="line"><span class="built_in">multimap</span>&lt;Key,Val&gt; <span class="comment">//以less&lt;&gt;为排序准则的multimap  </span></div><div class="line">  </div><div class="line"><span class="built_in">multimap</span>&lt;Key,Val,Op&gt; <span class="comment">//以op为排序准则的multimap</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="非变动性操作"><a href="#非变动性操作" class="headerlink" title="非变动性操作"></a>非变动性操作</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">c.key_comp() <span class="comment">//返回比较准则  </span></div><div class="line">  </div><div class="line">c.value_comp() <span class="comment">//返回对值比较的标准 (与key_comp()相同)  </span></div><div class="line">  </div><div class="line">c.empty() <span class="comment">//判断容器是否为空，与size()==0相同，但可能更快  </span></div><div class="line">  </div><div class="line">c.size() <span class="comment">//返回当前元素数量  </span></div><div class="line">  </div><div class="line">c.max_size() <span class="comment">//返回可容纳的元素最大数量  </span></div><div class="line">  </div><div class="line">c1 == c2 <span class="comment">//判断c1与c2是否相等  </span></div><div class="line">  </div><div class="line">c1 != c2 <span class="comment">//判断c1与c2是否不相等，等同于!(c1==c2)  </span></div><div class="line">  </div><div class="line">c1 &lt; c2 <span class="comment">//判断c1是否小于c2  </span></div><div class="line">  </div><div class="line">c1 &gt; c2 <span class="comment">//判断c1是否大于c2  </span></div><div class="line">  </div><div class="line">c1 &lt;= c2 <span class="comment">//判断c1是否小于等于c2  </span></div><div class="line">  </div><div class="line">c1 &gt;= c2 <span class="comment">//判断c1是否大于等于c2</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="特殊查询操作"><a href="#特殊查询操作" class="headerlink" title="特殊查询操作"></a>特殊查询操作</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">c.count(key) <span class="comment">//返回键值为key的元素个数  </span></div><div class="line">  </div><div class="line">c.find(key) <span class="comment">//返回第一个键值为key的位置，若没找到返回end()  </span></div><div class="line">  </div><div class="line">c.lower_bound(key) <span class="comment">//返回键值为key的第一个可插入的</span></div><div class="line"><span class="comment">//位置，也就是键值 &gt;= key的第一个元素位置  </span></div><div class="line">  </div><div class="line">c.upper_bound(key) <span class="comment">//返回键值为key的最后一个可插入的位置，</span></div><div class="line"><span class="comment">//也就是键值 &gt; key的第一个元素位置  </span></div><div class="line">  </div><div class="line">c.equal_range(key) <span class="comment">//返回键值为key的可插入的第一个位置和最后一个位置的区间，</span></div><div class="line"><span class="comment">//也就是键值 == key的元素区间</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">c = c2 <span class="comment">//将c2所有元素赋值给c  </span></div><div class="line">  </div><div class="line">c = rv <span class="comment">//将右值对象rv的所有元素移动赋值给c  </span></div><div class="line">  </div><div class="line">c = initlist <span class="comment">//使用初始化列表进行赋值  </span></div><div class="line">  </div><div class="line">c1.swap(c2) <span class="comment">//交换c1和c2的数  </span></div><div class="line">  </div><div class="line">swap(c1,c2) <span class="comment">//交换c1和c2的数</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="迭代器相关函数"><a href="#迭代器相关函数" class="headerlink" title="迭代器相关函数"></a>迭代器相关函数</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">c.begin() <span class="comment">//返回一个双向迭代器，指向第一个元素  </span></div><div class="line">  </div><div class="line">c.end() <span class="comment">//返回一个双向迭代器，指向最后一个元素  </span></div><div class="line">  </div><div class="line">c.cbegin() <span class="comment">//返回一个双向常迭代器，指向第一个元素  </span></div><div class="line">  </div><div class="line">c.cend() <span class="comment">//返回一个双向常迭代器，指向最后一个元素  </span></div><div class="line">  </div><div class="line">c.rbegin() <span class="comment">//返回一个逆向迭代器，指向逆向迭代的第一个元素  </span></div><div class="line">  </div><div class="line">c.rend() <span class="comment">//返回一个逆向迭代器，指向逆向迭代的最后一个元素  </span></div><div class="line">  </div><div class="line">c.crbegin() <span class="comment">//返回一个逆向常迭代器，指向逆向迭代的第一个元素  </span></div><div class="line">  </div><div class="line">c.crend() <span class="comment">//返回一个逆向常迭代器，指向逆向迭代的最后一个元素</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="插入和移除元素"><a href="#插入和移除元素" class="headerlink" title="插入和移除元素"></a>插入和移除元素</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">c.insert(val) <span class="comment">//插入一个val的副本，返回新元素位置（对map来说不论成功与否）  </span></div><div class="line">  </div><div class="line">c.insert(pos,val) <span class="comment">//插入一个val副本，返回新元素位置（pos应该是插入的搜寻起点）  </span></div><div class="line">  </div><div class="line">c.insert(beg,end) <span class="comment">//将范围beg到end的所有元素的副本插入到c（无返回值）  </span></div><div class="line">  </div><div class="line">c.insert(initlist) <span class="comment">//插入初始化列表的所有元素的副本（无返回值）  </span></div><div class="line">  </div><div class="line">c.emplace(args...) <span class="comment">//插入一个使用args初始化的元素副本，返回新元素位置（对map来说不论成功与否）  </span></div><div class="line">  </div><div class="line">c.emplace_hint(pos,args...) <span class="comment">//插入一个使用args初始化的元素副本，返回新元素</span></div><div class="line"><span class="comment">//位置（pos应该是插入的搜寻起点）  </span></div><div class="line">  </div><div class="line">c.erase(val) <span class="comment">//移除所有与val值相等的元素，并返移除的元素个数  </span></div><div class="line">  </div><div class="line">c.erase(pos) <span class="comment">//移除迭代器位置的元素，并返回下个元素的位置  </span></div><div class="line">  </div><div class="line">c.erase(beg,end) <span class="comment">//移除beg到end范围内的所有元素，并</span></div><div class="line"><span class="comment">//返回下个元素的位置  </span></div><div class="line">  </div><div class="line">c.clear() <span class="comment">//移除所以元素，清空容器</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="键值对转递"><a href="#键值对转递" class="headerlink" title="键值对转递"></a>键值对转递</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用value_type  </span></div><div class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="keyword">float</span>&gt; coll;  </div><div class="line">  </div><div class="line">coll.insert(<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="keyword">float</span>&gt;::value_type(<span class="string">"otto"</span>,<span class="number">22.3</span>));  </div><div class="line">  </div><div class="line"><span class="comment">//使用pair&lt;&gt;  </span></div><div class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="keyword">float</span>&gt; coll;  </div><div class="line">  </div><div class="line">coll.insert(<span class="built_in">std</span>::pair&lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="keyword">float</span>&gt;(<span class="string">"otto"</span>,<span class="number">22.3</span>));  </div><div class="line">  </div><div class="line"><span class="comment">//使用make_pair()  </span></div><div class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="keyword">float</span>&gt; coll;  </div><div class="line">  </div><div class="line">coll.insert(<span class="built_in">std</span>::make_pair(<span class="string">"otto"</span>,<span class="number">22.3</span>));</div></pre></td></tr></table></figure>
<ul>
<li>当作关联数组使用</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">c[key] <span class="comment">//返回一个指向键值为key的元素的引用，如果不存在就插入这个元素  </span></div><div class="line">  </div><div class="line">c.at(key) <span class="comment">//返回一个指向键值为key的元素的引用</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="实例：map集合的插入和遍历"><a href="#实例：map集合的插入和遍历" class="headerlink" title="实例：map集合的插入和遍历"></a>实例：map集合的插入和遍历</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="comment">/** </span></div><div class="line">   map集合的插入和遍历 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </div><div class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; coll;  </div><div class="line">    coll.insert(pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;(<span class="string">"1"</span>,<span class="number">12</span>));  </div><div class="line">    coll.insert(pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;(<span class="string">"2"</span>,<span class="number">10</span>));  </div><div class="line">    coll.insert(pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;(<span class="string">"3"</span>,<span class="number">11</span>));  </div><div class="line">     <span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator</div><div class="line">     it=coll.begin();it!=coll.end();it++)&#123;  </div><div class="line">         <span class="keyword">int</span> len=distance(coll.begin(),it);  </div><div class="line">         <span class="built_in">printf</span>(<span class="string">"元素在集合中的位置=%d\n"</span>,len);  </div><div class="line">         pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; p=*it;  </div><div class="line">         <span class="built_in">printf</span>(<span class="string">"元素的值=%d\n"</span>,p.second);  </div><div class="line">         <span class="built_in">printf</span>(<span class="string">"元素的键="</span>);  </div><div class="line">         <span class="built_in">cout</span>&lt;&lt;p.first&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">         <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">     &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ STL之set和multiset总结]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/02/C++/STL%E4%B9%8Bset%E5%92%8Cmultiset%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<ul>
<li>使用set或multiset之前，必须加入头文件<set></set></li>
<li>Set、multiset都是集合类，差别在与set中不允许有重复元素，multiset中允许有重复元素。</li>
<li>sets和multiset内部以平衡二叉树实现</li>
</ul>
<ul>
<li><h3 id="构造，析构"><a href="#构造，析构" class="headerlink" title="构造，析构"></a>构造，析构</h3></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">set c  //创建空集合,不包含任何元素  </div><div class="line">  </div><div class="line">set c(op)  //以op为排序准则，产生一个空的set  </div><div class="line">  </div><div class="line">set c1(c2)  //复制c2中的元素到c1中  </div><div class="line">  </div><div class="line">set c(const value_type *first, const value_type* last)  </div><div class="line">//复制[first, last)之间元素构成新集合  </div><div class="line">  </div><div class="line">set c(const value_type *first, const value_type* last,op)  </div><div class="line">//以op为排序准则，复制[first, last)之间元素构成新集合。  </div><div class="line">  </div><div class="line">c.~set()  </div><div class="line">//销毁所有元素，释放内存  </div><div class="line">  </div><div class="line">multiset mc  //创建空集合,不包含任何元素  </div><div class="line">  </div><div class="line">multiset mc(op)  //以op为排序准则，产生一个空的set  </div><div class="line">  </div><div class="line">multiset c1(c2)  //复制c2中的元素到c1中  </div><div class="line">  </div><div class="line">multiset c(const value_type *first, const value_type* last)  </div><div class="line">//复制[first, last)之间元素构成新集合  </div><div class="line">  </div><div class="line">multiset c(const value_type *first, const value_type* last,op)  </div><div class="line">//以op为排序准则，复制[first, last)之间元素构成新集合。  </div><div class="line">  </div><div class="line">c.~set()  //销毁所有元素，释放内存</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><h3 id="支持的操作符"><a href="#支持的操作符" class="headerlink" title="支持的操作符"></a>支持的操作符</h3></li>
</ul>
<center><img src="http://7xstki.com1.z0.glb.clouddn.com/hexo%E5%8D%9A%E5%AE%A2set%E5%9B%BE%E7%89%87.png" alt=""></center>

<ul>
<li><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">c.size() <span class="comment">//返回有容器中有多少元素  </span></div><div class="line">  </div><div class="line">c.max_size()  <span class="comment">//返回容器可以存放的最大数据的个数  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span>  <span class="comment">//返回容器元素个数  </span></span></div><div class="line">  </div><div class="line"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span>  <span class="comment">//判断容器是否为空，若返回true，表明容器已空</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="增加删除"><a href="#增加删除" class="headerlink" title="增加删除"></a>增加删除</h3></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">pair&lt;iterator,bool&gt; insert( x)  //插入元素x  </div><div class="line">  </div><div class="line">iterator insert(iterator it,x)  //在迭代器it处插入元素x  </div><div class="line">  </div><div class="line">void insert(const value_type *first,const value_type *last) </div><div class="line">//插入[first, last)之间元素  </div><div class="line">  </div><div class="line">iterator erase(iterator it)  //删除迭代器指针it处元素  </div><div class="line">  </div><div class="line">iterator erase(iterator first,iterator last)  </div><div class="line">//删除[first, last)之间元素  </div><div class="line">  </div><div class="line">size_type erase(const Key&amp; key)  //删除元素值等于key的元素  </div><div class="line">  </div><div class="line">c.clear()  //移除所有元素，使得容器变为空</div></pre></td></tr></table></figure>
<ul>
<li>set和multiset提供的这两个插入函数返回值有所不同<br>set提供的插入函数</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pair&lt;iterator,<span class="keyword">bool</span>&gt; insert(<span class="keyword">const</span> value_type&amp; elem);  </div><div class="line">  </div><div class="line"><span class="function">iterator  <span class="title">insert</span><span class="params">(iterator pos_hint, <span class="keyword">const</span> value_type&amp; elem)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>multiset提供的插入函数：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">iterator  <span class="title">insert</span><span class="params">(<span class="keyword">const</span> value_type&amp; elem)</span></span>;  </div><div class="line">  </div><div class="line"><span class="function">iterator  <span class="title">insert</span><span class="params">(iterator pos_hint, <span class="keyword">const</span> value_type&amp; elem)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="迭代器相关函数"><a href="#迭代器相关函数" class="headerlink" title="迭代器相关函数"></a>迭代器相关函数</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span>  <span class="comment">//返回首元素的迭代器指针  </span></span></div><div class="line">  </div><div class="line">iterator <span class="title">end</span><span class="params">()</span>  <span class="comment">//返回尾元素的迭代器指针  </span></div><div class="line">  </div><div class="line">reverse_iterator <span class="title">rbegin</span><span class="params">()</span>  <span class="comment">//返回尾元素的逆向迭代器指针  </span></div><div class="line">  </div><div class="line">reverse_iterator <span class="title">rend</span><span class="params">()</span>  <span class="comment">//返回首元素前一个位置的迭代器指针</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">const_iterator lower_bound(const Key&amp; key)  //返回容器中大于等于key的迭代器指针  </div><div class="line">  </div><div class="line">const_iterator upper_bound(const Key&amp; key)  //返回容器中大于key的迭代器指针  </div><div class="line">  </div><div class="line">int count(const Key&amp; key) const  </div><div class="line">//返回容器中元素等于key的元素的个数  </div><div class="line">  </div><div class="line">s.equal_range(elem)  </div><div class="line">//返回 elem 可以安插的第一个位置和最后一个位置，</div><div class="line">//也就是(元素值 == elem) 的元素区间  </div><div class="line">  </div><div class="line">//因为 set 不允许重复，面 multiset 允许重复，</div><div class="line">//所以他们的 insert 操作有不有同的返回值  </div><div class="line">//set 提供的接口  </div><div class="line">pair&lt;iterator, bool&gt; insert(const value_type&amp; elem); </div><div class="line">//返回 pair&lt;&gt;  </div><div class="line">//因为 set 不允许元素重复，所以如果插入相同的元素，将会返回失败。  </div><div class="line">//Pari 的 secode 成员表示插入是否成功。  </div><div class="line">//Pair 的 first 成员返回新元素的位置。  </div><div class="line">  </div><div class="line">const_iterator find(const Key&amp; key) const  </div><div class="line">//查找功能，返回元素值等于key的迭代器指针</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">c1==c2  <span class="comment">//将c2所有的元素赋给c1  </span></div><div class="line">  </div><div class="line"><span class="keyword">void</span> swap(<span class="built_in">set</span>&amp; s)  <span class="comment">//交换集合元素  </span></div><div class="line">  </div><div class="line"><span class="keyword">void</span> swap(<span class="built_in">multiset</span>&amp; s)  <span class="comment">//交换多集合元素</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">#include &lt;cstdio&gt;  </div><div class="line">#include &lt;iostream&gt;  </div><div class="line">#include &lt;stdio.h&gt;  </div><div class="line">#include &lt;string&gt;  </div><div class="line">#include &lt;set&gt;  </div><div class="line">using namespace std;  </div><div class="line">struct haha&#123;  </div><div class="line">    int a,b;  </div><div class="line">    char s;  </div><div class="line">    //重写了operator方法  </div><div class="line">    friend bool operator&lt;(struct haha a,struct haha b)&#123;  </div><div class="line">        return a.s&lt;b.s;  </div><div class="line">    &#125;  </div><div class="line">&#125;;  </div><div class="line">struct compare//自定义排序方式  </div><div class="line">&#123;  </div><div class="line">    bool operator ()(string s1,string s2)  </div><div class="line">    &#123;  </div><div class="line">        return s1&gt;s2;  </div><div class="line">    &#125;</div><div class="line">    //自定义一个仿函数  </div><div class="line">&#125;;  </div><div class="line">/** </div><div class="line">  用来打印set集合的元素 </div><div class="line">*/  </div><div class="line">void printSet(set&lt;int&gt;s)&#123;  </div><div class="line">    set&lt;int&gt;::iterator i;  </div><div class="line">    printf("集合元素=");  </div><div class="line">    for(i=s.begin(); i!=s.end(); i++)  </div><div class="line">        printf("%d ",*i);  </div><div class="line">    cout&lt;&lt;endl;  </div><div class="line">&#125;  </div><div class="line">int main()&#123;  </div><div class="line">    /***************set集合元素插入实例****************************/  </div><div class="line">    printf(" /***************set集合元素插入实例*****</div><div class="line">    ***********************/\n");  </div><div class="line">        set&lt;int&gt; s1; //创建空的set对象，元素类型为int，  </div><div class="line">        for (int i = 0; i &lt; 5; i++)  </div><div class="line">          s1.insert(i*10);  </div><div class="line">        //打印集合元素  </div><div class="line">        printSet(s1);  </div><div class="line">        cout&lt;&lt;"s1再次插入20"&lt;&lt;endl;;  </div><div class="line">        if (s1.insert(20).second)//再次插入20  </div><div class="line">            cout&lt;&lt;"插入成功！"&lt;&lt;endl;  </div><div class="line">        else  </div><div class="line">            cout&lt;&lt;"插入失败！"&lt;&lt;endl;  </div><div class="line">        cout&lt;&lt;"s1再次插入50"&lt;&lt;endl;  </div><div class="line">        if (s1.insert(50).second)&#123;  </div><div class="line">            cout&lt;&lt;"插入成功！"&lt;&lt;endl;  </div><div class="line">            printSet(s1);  </div><div class="line">        &#125;  </div><div class="line">        else  </div><div class="line">            cout&lt;&lt;"插入失败！"&lt;&lt;endl;  </div><div class="line">        pair&lt;set&lt;int&gt;::iterator, bool&gt; p;  </div><div class="line">        p = s1.insert(60);  </div><div class="line">        if (p.second)&#123;  </div><div class="line">            cout&lt;&lt;"插入成功!"&lt;&lt;endl; printSet(s1);  </div><div class="line">       printf("60插入的位置=%d\n",distance(s1.begin(),s1.end()));  </div><div class="line">        &#125;  </div><div class="line">        else  </div><div class="line">            cout&lt;&lt;"插入失败!"&lt;&lt;endl;  </div><div class="line">  </div><div class="line">  </div><div class="line">     /***************set集合删除特定值实例***********</div><div class="line">     *****************/  </div><div class="line">     printf("/***************set集合删除特定值实例*****</div><div class="line">     ***********************/\n");  </div><div class="line">     printf("原始集合s1\n");  </div><div class="line">     printSet(s1);  </div><div class="line">    while (!s1.empty())&#123;  </div><div class="line">       cout &lt;&lt;" "&lt;&lt; *s1.begin();  </div><div class="line">       //删除集合开头的元素  </div><div class="line">       s1.erase(s1.begin());  </div><div class="line">    &#125;  </div><div class="line">    printf("\n删除之后的元素\n");  </div><div class="line">    if(s1.size()==0)&#123;  </div><div class="line">       printf("集合为空\n");  </div><div class="line">    &#125;else&#123;  </div><div class="line">       printSet(s1);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /***************set集合结构体使用实例********</div><div class="line">    ********************/  </div><div class="line">    printf("\n/***************set集合结构体使用实例*****</div><div class="line">    ***********************/\n");  </div><div class="line">    set&lt;struct haha&gt;element;  </div><div class="line">    struct haha a,b,c,d,t;  </div><div class="line">    a.a=1; a.s='b';  </div><div class="line">    b.a=2; b.s='c';  </div><div class="line">    c.a=4; c.s='d';  </div><div class="line">    d.a=3; d.s='a';  </div><div class="line">    element.insert(d);  </div><div class="line">    element.insert(b);  </div><div class="line">    element.insert(c);  </div><div class="line">    element.insert(a);  </div><div class="line">    set&lt;struct haha&gt;::iterator it;  </div><div class="line">    for(it=element.begin(); it!=element.end();it++)  </div><div class="line">        cout&lt;&lt;(*it).a&lt;&lt;" ";  </div><div class="line">    cout&lt;&lt;endl;  </div><div class="line">    for(it=element.begin(); it!=element.end();it++)  </div><div class="line">        cout&lt;&lt;(*it).s&lt;&lt;" ";  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<center><img src="http://img.blog.csdn.net/20160523221836216" alt=""></center>


]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++基础：各种输入方法总结，cin、cin.get()、cin.getline()、getline()、gets()、getchar()]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/02/C++/C++%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%90%84%E7%A7%8D%E8%BE%93%E5%85%A5%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93%EF%BC%8Ccin%E3%80%81cin.get()%E3%80%81cin.getline()%E3%80%81getline()%E3%80%81gets()%E3%80%81getchar()/</url>
      <content type="html"><![CDATA[<ul>
<li><p>输入原理简述：程序的输入都建有一个缓冲区，即输入缓冲区。每次输入过程是这样的，当一次键盘输入结束时会将输入的数据存入输入缓冲区</p>
</li>
<li><h3 id="cin"><a href="#cin" class="headerlink" title="cin"></a>cin</h3></li>
</ul>
<p>根据cin&gt;&gt;sth 中sth的变量类型读取数据，这里变量类型可以为int，float,char,char*,string等诸多类型。这一输入操作，在遇到结束符（Space、Tab、Enter）就结束，且对于结束符，并不保存到sth中</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_input</span><span class="params">()</span></span>&#123;  </div><div class="line">    <span class="keyword">char</span> ch1[<span class="number">10</span>],ch2[<span class="number">10</span>];  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入两个字符串："</span>&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    <span class="built_in">cin</span>&gt;&gt;ch1;  </div><div class="line">    <span class="built_in">cin</span>&gt;&gt;ch2;  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"两个字符串分别为："</span>&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ch1&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ch2&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20140510165644250" alt=""></p>
<a id="more"></a>
<ul>
<li><h3 id="cin-get-字符数组名，接收长度，结束符"><a href="#cin-get-字符数组名，接收长度，结束符" class="headerlink" title="cin.get(字符数组名，接收长度，结束符)"></a>cin.get(字符数组名，接收长度，结束符)</h3></li>
</ul>
<p>其中结束符意味着遇到该符号结束字符串读取,默认为ENTER，读取的字符个数最多为（长度-1），因为最后一个为”\n”。要注意的是，cin.get()操作遇到结束符停止读取，但并不会将结束符从缓冲区丢弃</p>
<ul>
<li><h3 id="cin-getline-字符数组名，接收长度，结束符"><a href="#cin-getline-字符数组名，接收长度，结束符" class="headerlink" title="cin.getline(字符数组名，接收长度，结束符)"></a>cin.getline(字符数组名，接收长度，结束符)</h3></li>
</ul>
<p>其用法与cin.get(字符数组名，接收长度，结束符)极为类似。cin.get()当输入的字符串超长时，不会引起cin函数的错误，后面若有cin操作，会继续执行，只是直接从缓冲区中取数据。但是cin.getline()当输入超长时，会引起cin函数的错误，后面的cin操作将不再执行。如下代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_input</span><span class="params">()</span></span>&#123;  </div><div class="line">    <span class="keyword">char</span> ch1,ch2[<span class="number">10</span>];  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入字符串："</span>&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    <span class="built_in">cin</span>.getline(ch2,<span class="number">6</span>);<span class="comment">//在不遇到结束符的情况下，最多可接收6-1=5个字符到ch2中  </span></div><div class="line">    <span class="built_in">cin</span>&gt;&gt;ch1;  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ch2&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ch1&lt;&lt;<span class="string">"\n"</span>&lt;&lt;(<span class="keyword">int</span>)ch1&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：如下图，输入zifuchuan[Enter]，长度大于最大长度5，就会导致cin函数错误，其后既没有像cin.get()一样直接从输入缓冲区直接读数据，也没有从键盘输入。所以此处可以注意，考虑在用cin.getline()时，适度设置其最大接受长度大一点</p>
<p><img src="http://img.blog.csdn.net/20140511001809093" alt=""></p>
<ul>
<li><h3 id="getline-istream-is-string-str-结束符"><a href="#getline-istream-is-string-str-结束符" class="headerlink" title="getline(istream is,string str,结束符)"></a>getline(istream is,string str,结束符)</h3></li>
</ul>
<p>同样，此处结束符为可选参数（默认依然为Enter）。然而，getline()与前面的诸多存在的差别在于，它string库函数下，而非前面的istream流，所有调用前要在前面加入#include<string>。与之对应这一方法读入时第二个参数为string类型，而不再是char*，要注意区别。另外，该方法也不是遇到空格就结束输入的</string></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_input</span><span class="params">()</span></span>&#123;  </div><div class="line">    <span class="built_in">string</span> str;  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入string内容："</span>&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    getline(<span class="built_in">cin</span>,str,<span class="string">'a'</span>);  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20140511001924250" alt=""><br><img src="http://img.blog.csdn.net/20140511001928703" alt=""></p>
<p>通过以上第二个图还可以看出，这一方法只有在遇到结束符（此处为‘a’）才结束，对空格甚至回车都不敏感</p>
<ul>
<li><h3 id="gets-char-ch"><a href="#gets-char-ch" class="headerlink" title="gets(char *ch)"></a>gets(char *ch)</h3></li>
</ul>
<p>gets()方法同样接受一个字符串，但是与getline()不同，它的参数为char*，而不是string，另外若定义char ch[n]，长度为n，则样注意输入的字符串长度不要大于n，否则会报错。同样gets()对空格也不敏感</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_input</span><span class="params">()</span></span>&#123;  </div><div class="line">    <span class="keyword">char</span> ch[<span class="number">10</span>];  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入char*内容："</span>&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    gets(ch);  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ch&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20140511002001531" alt=""><br><img src="http://img.blog.csdn.net/20140511002005640" alt=""></p>
<p>好吧，就到这里吧，其实还有getchar()、getch()等，这里就不一一赘述了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ STL之算法总结]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/02/C++/STL%E4%B9%8B%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<ul>
<li>STL算法部分主要由头文件<algorithm>,<numeric>,<functional>组成。<br>要使用 STL中的算法函数必须包含头文件<algorithm>，<br>对于数值算法须包含<numeric>，<functional>中则定义了一些模板类，用来声明函数对象。<br>STL中算法大致分为四类：<br>①非可变序列算法：指不直接修改其所操作的容器内容的算法。<br>②可变序列算法：指可以修改它们所操作的容器内容的算法。<br>③排序算法：包括对序列进行排序和合并的算法、搜索算法以及有序序列上的集合操作。<br>④数值算法：对容器内容进行数值计算。</functional></numeric></algorithm></functional></numeric></algorithm></li>
</ul>
<ul>
<li><h3 id="查找算法-13个-：判断容器中是否包含某个值"><a href="#查找算法-13个-：判断容器中是否包含某个值" class="headerlink" title="查找算法(13个)：判断容器中是否包含某个值"></a>查找算法(13个)：判断容器中是否包含某个值</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">adjacent_find  </div><div class="line"><span class="comment">//在iterator对标识元素范围内，查找一对相邻    </span></div><div class="line"><span class="comment">//重复元素，找到则返回指向这对元素的第一个元素的ForwardIterator。  </span></div><div class="line"><span class="comment">//否则返回last。重载版本使用输入的二元操作符代替相等的判断。    </span></div><div class="line">    </div><div class="line">binary_search  </div><div class="line"><span class="comment">//在有序序列中查找value，找到返回true。 </span></div><div class="line"><span class="comment">//重载的版本实用指定的比较函数对象或函数指针来判断相等。  </span></div><div class="line">  </div><div class="line">includes  <span class="comment">//判断区间1是否包含2，是binary_search的扩展  </span></div><div class="line">    </div><div class="line">count  </div><div class="line"><span class="comment">//利用等于操作符，把标志范围内的元素与输入值比较，返回相等元素个数。    </span></div><div class="line">    </div><div class="line">count_if  </div><div class="line"><span class="comment">//利用输入的操作符，对标志范围内的元素进行操作，</span></div><div class="line"><span class="comment">//返回结果为true的个数。    </span></div><div class="line">    </div><div class="line">equal_range  </div><div class="line"><span class="comment">//功能类似equal，返回一对iterator，    </span></div><div class="line"><span class="comment">//第一个表示lower_bound，第二个表示upper_bound。    </span></div><div class="line">    </div><div class="line">find  </div><div class="line"><span class="comment">//利用底层元素的等于操作符，对指定范围内的元素    </span></div><div class="line"><span class="comment">//与输入值进行比较。当匹配时，结束搜索，</span></div><div class="line"><span class="comment">//返回该元素的一个InputIterator。    </span></div><div class="line">    </div><div class="line">find_end  </div><div class="line"><span class="comment">//在指定范围内查找"由输入的另外一对iterator标志    </span></div><div class="line"><span class="comment">//的第二个序列"的最后一次出现。找到则返回最后一对的    </span></div><div class="line"><span class="comment">//第一个ForwardIterator，否则返回输入的"另外一对"的    </span></div><div class="line"><span class="comment">//第一个ForwardIterator。重载版本使用用户输入的操作符代替等于操作。    </span></div><div class="line">    </div><div class="line">find_first_of  </div><div class="line"><span class="comment">//在指定范围内查找"由输入的另外一对iterator标志    </span></div><div class="line"><span class="comment">//的第二个序列"中任意一个元素的第一次出现</span></div><div class="line"><span class="comment">//重载版本中使用了用户自定义操作符。    </span></div><div class="line">    </div><div class="line">find_if  <span class="comment">//使用输入的函数代替等于操作符执行find。    </span></div><div class="line">    </div><div class="line">lower_bound  </div><div class="line"><span class="comment">//返回一个ForwardIterator，指向在有序    </span></div><div class="line"><span class="comment">//序列范围内的可以插入指定值而不破坏容器顺序的第一个    </span></div><div class="line"><span class="comment">//位置。重载函数使用自定义比较操作。    </span></div><div class="line">    </div><div class="line">upper_bound  </div><div class="line"><span class="comment">//返回一个ForwardIterator，指向在    </span></div><div class="line"><span class="comment">//有序序列范围内插入value而不破坏容器顺序的最后    </span></div><div class="line"><span class="comment">//一个位置，该位置标志一个大于value的值。</span></div><div class="line"><span class="comment">//重载函数使用自定义比较操作。    </span></div><div class="line">    </div><div class="line">search  <span class="comment">//给出两个范围，返回一个ForwardIterator，    </span></div><div class="line"><span class="comment">//查找成功指向第一个范围内第一次出现子序列(第二个范围)    </span></div><div class="line"><span class="comment">//的位置，查找失败指向last1。重载版本使用自定义的比较操作。    </span></div><div class="line">    </div><div class="line">search_n  </div><div class="line"><span class="comment">//在指定范围内查找val出现n次的子序列。重载版本使用自定义的比较操作。</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><h3 id="排序和通用算法-14个-：提供元素排序策略"><a href="#排序和通用算法-14个-：提供元素排序策略" class="headerlink" title="排序和通用算法(14个)：提供元素排序策略"></a>排序和通用算法(14个)：提供元素排序策略</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">inplace_merge  </div><div class="line"><span class="comment">//合并两个有序序列，结果序列覆盖两端范围。</span></div><div class="line"><span class="comment">//重载版本使用输入的操作进行排序。  </span></div><div class="line">  </div><div class="line">merge  </div><div class="line"><span class="comment">//合并两个有序序列，存放到另一个序列。重载版本使用自定义的比较。  </span></div><div class="line">  </div><div class="line">nth_element  </div><div class="line"><span class="comment">//将范围内的序列重新排序，使所有小于第n个元素的元素  </span></div><div class="line"><span class="comment">//都出现在它前面，而大于它的都出现在后面。</span></div><div class="line"><span class="comment">//重载版本使用自定义的比较操作。  </span></div><div class="line">  </div><div class="line">partial_sort  </div><div class="line"><span class="comment">//对序列做部分排序，被排序元素个数正好可以被放到范围内。  </span></div><div class="line"><span class="comment">//重载版本使用自定义的比较操作。  </span></div><div class="line">  </div><div class="line">partial_sort_copy  <span class="comment">//与partial_sort类似，不过将经过排序的序列复制到另一个容器。  </span></div><div class="line">  </div><div class="line">partition  </div><div class="line"><span class="comment">//对指定范围内元素重新排序，使用输入的函数，</span></div><div class="line"><span class="comment">//把结果为true的元素放在结果为false的元素之前。  </span></div><div class="line">  </div><div class="line">random_shuffle  </div><div class="line"><span class="comment">//对指定范围内的元素随机调整次序。重载版本输入一个随机数产生操作。  </span></div><div class="line">  </div><div class="line">reverse  <span class="comment">//将指定范围内元素重新反序排序。  </span></div><div class="line">  </div><div class="line">reverse_copy  <span class="comment">//与reverse类似，不过将结果写入另一个容器。  </span></div><div class="line">  </div><div class="line">rotate  </div><div class="line"><span class="comment">//将指定范围内元素移到容器末尾，由middle指向的</span></div><div class="line">元素成为容器第一个元素。  </div><div class="line">  </div><div class="line">rotate_copy  <span class="comment">//与rotate类似，不过将结果写入另一个容器。  </span></div><div class="line">  </div><div class="line">sort  </div><div class="line"><span class="comment">//以升序重新排列指定范围内的元素。重载版本使用自定义的比较操作。  </span></div><div class="line">  </div><div class="line">stable_sort  <span class="comment">//与sort类似，不过保留相等元素之间的顺序关系。  </span></div><div class="line">  </div><div class="line">stable_partition  </div><div class="line"><span class="comment">//与partition类似，不过不保证保留容器中的相对顺序。</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="删除和替换算法-15个"><a href="#删除和替换算法-15个" class="headerlink" title="删除和替换算法(15个)"></a>删除和替换算法(15个)</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">copy  <span class="comment">//复制序列  </span></div><div class="line">  </div><div class="line">copy_backward <span class="comment">//与copy相同，不过元素是以相反顺序被拷贝。  </span></div><div class="line">  </div><div class="line">iter_swap  <span class="comment">//交换两个ForwardIterator的值。  </span></div><div class="line">  </div><div class="line">remove  </div><div class="line"><span class="comment">//删除指定范围内所有等于指定元素的元素。注意，  </span></div><div class="line"><span class="comment">//该函数不是真正删除函数。内置函数不适合使用remove和remove_if函数。  </span></div><div class="line">  </div><div class="line">remove_copy  <span class="comment">//将所有不匹配元素复制到一个制定容器，  </span></div><div class="line"><span class="comment">//返回OutputIterator指向被拷贝的末元素的下一个位置。  </span></div><div class="line">  </div><div class="line">remove_if  <span class="comment">//删除指定范围内输入操作结果为true的所有元素。  </span></div><div class="line">  </div><div class="line">remove_copy_if  <span class="comment">//将所有不匹配元素拷贝到一个指定容器。  </span></div><div class="line">  </div><div class="line">replace  <span class="comment">//将指定范围内所有等于vold的元素都用vnew代替。  </span></div><div class="line">  </div><div class="line">replace_copy  <span class="comment">//与replace类似，不过将结果写入另一个容器。  </span></div><div class="line">  </div><div class="line">replace_if  <span class="comment">//将指定范围内所有操作结果为true的元素用新值代替。  </span></div><div class="line">  </div><div class="line">replace_copy_if  <span class="comment">//与replace_if，不过将结果写入另一个容器。  </span></div><div class="line">  </div><div class="line">swap  <span class="comment">//交换存储在两个对象中的值。  </span></div><div class="line">  </div><div class="line">swap_range  <span class="comment">//将指定范围内的元素与另一个序列元素值进行交换。  </span></div><div class="line">  </div><div class="line">unique  </div><div class="line"><span class="comment">//清除序列中重复元素，和remove类似，它也不能  </span></div><div class="line"><span class="comment">//真正删除元素。重载版本使用自定义比较操作。  </span></div><div class="line">  </div><div class="line">unique_copy  <span class="comment">//与unique类似，不过把结果输出到另一个容器。</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="排列组合算法-2个-：提供计算给定集合按一定顺序的所有可能排列组合"><a href="#排列组合算法-2个-：提供计算给定集合按一定顺序的所有可能排列组合" class="headerlink" title="排列组合算法(2个)：提供计算给定集合按一定顺序的所有可能排列组合"></a>排列组合算法(2个)：提供计算给定集合按一定顺序的所有可能排列组合</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">next_permutation  </div><div class="line"><span class="comment">//取出当前范围内的排列，并重新排序为  </span></div><div class="line"><span class="comment">//下一个排列。重载版本使用自定义的比较操作。  </span></div><div class="line">  </div><div class="line">prev_permutation  </div><div class="line"><span class="comment">//取出指定范围内的序列并将它重新排序  </span></div><div class="line"><span class="comment">//为上一个序列。如果不存在上一个序列则返回false。</span></div><div class="line"><span class="comment">//重载版本使用自定义的比较操作。</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="算术算法-4个"><a href="#算术算法-4个" class="headerlink" title="算术算法(4个)"></a>算术算法(4个)</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">accumulate  <span class="comment">//iterator对标识的序列段元素之和，加到一个由  </span></div><div class="line"><span class="comment">//val指定的初始值上。重载版本不再做加法，而是传进来的</span></div><div class="line"><span class="comment">//二元操作符被应用到元素上。  </span></div><div class="line">  </div><div class="line">partial_sum  <span class="comment">//创建一个新序列，其中每个元素值代表指定  </span></div><div class="line"><span class="comment">//范围内该位置前所有元素之和。重载版本使用自定义操作代替加法。  </span></div><div class="line">  </div><div class="line">inner_product  <span class="comment">//对两个序列做内积(对应元素相乘，再求和)并  </span></div><div class="line"><span class="comment">//将内积加到一个输入的初始值上。重载版本使用用户定义的操作。  </span></div><div class="line">  </div><div class="line">adjacent_difference  <span class="comment">//创建一个新序列，新序列中每个新值代表  </span></div><div class="line"><span class="comment">//当前元素与上一个元素的差。重载版本用指定二元操作计算相邻元素的差。</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="生成和异变算法-6个"><a href="#生成和异变算法-6个" class="headerlink" title="生成和异变算法(6个)"></a>生成和异变算法(6个)</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">fill  <span class="comment">//将输入值赋给标志范围内的所有元素。  </span></div><div class="line">  </div><div class="line">fill_n  <span class="comment">//将输入值赋给first到first+n范围内的所有元素。  </span></div><div class="line">  </div><div class="line">for_each  <span class="comment">//用指定函数依次对指定范围内所有元素进行迭代访问，  </span></div><div class="line"><span class="comment">//返回所指定的函数类型。该函数不得修改序列中的元素。  </span></div><div class="line">  </div><div class="line">generate  <span class="comment">//连续调用输入的函数来填充指定的范围。  </span></div><div class="line">  </div><div class="line">generate_n  </div><div class="line"><span class="comment">//与generate函数类似，填充从指定iterator开始的n个元素。  </span></div><div class="line">  </div><div class="line">transform  </div><div class="line"><span class="comment">//将输入的操作作用与指定范围内的每个元素，并产生一个新的序列。  </span></div><div class="line"><span class="comment">//重载版本将操作作用在一对元素上，另外一个元素来自输入的</span></div><div class="line"><span class="comment">//另外一个序列。结果输出到指定容器</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="关系算法-8个"><a href="#关系算法-8个" class="headerlink" title="关系算法(8个)"></a>关系算法(8个)</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">equal  <span class="comment">//如果两个序列在标志范围内元素都相等，返回true。  </span></div><div class="line"><span class="comment">//重载版本使用输入的操作符代替默认的等于操作符。  </span></div><div class="line">  </div><div class="line">includes  <span class="comment">//判断第一个指定范围内的所有元素是否都被第二个  </span></div><div class="line"><span class="comment">//范围包含，使用底层元素的&lt;操作符，成功返回true。</span></div><div class="line"><span class="comment">//重载版本使用用户输入的函数。  </span></div><div class="line">  </div><div class="line">lexicographical_compare  <span class="comment">//比较两个序列。重载版本使用用户自定义比较操作。  </span></div><div class="line">  </div><div class="line">max  <span class="comment">//返回两个元素中较大一个。重载版本使用自定义比较操作。  </span></div><div class="line">  </div><div class="line">max_element  <span class="comment">//返回一个ForwardIterator，指出序列中最大的</span></div><div class="line"><span class="comment">//元素。重载版本使用自定义比较操作。  </span></div><div class="line">  </div><div class="line">min  <span class="comment">//返回两个元素中较小一个。重载版本使用自定义比较操作。  </span></div><div class="line">  </div><div class="line">min_element  <span class="comment">//返回一个ForwardIterator，指出序列中最小的</span></div><div class="line"><span class="comment">//元素。重载版本使用自定义比较操作。  </span></div><div class="line">  </div><div class="line">mismatch  <span class="comment">//并行比较两个序列，指出第一个</span></div><div class="line"><span class="comment">//不匹配的位置，返回一对iterator，  </span></div><div class="line"><span class="comment">//标志第一个不匹配元素位置。如果都匹配，返回每个</span></div><div class="line"><span class="comment">//容器的last。重载版本使用自定义的比较操作。</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="集合算法-4个"><a href="#集合算法-4个" class="headerlink" title="集合算法(4个)"></a>集合算法(4个)</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">set_union  <span class="comment">//构造一个有序序列，包含两个序列中所有的不重复</span></div><div class="line"><span class="comment">//元素。重载版本使用自定义的比较操作。  </span></div><div class="line">  </div><div class="line">set_intersection  <span class="comment">//构造一个有序序列，其中元素在两个序列中</span></div><div class="line"><span class="comment">//都存在。重载版本使用自定义的比较操作。  </span></div><div class="line">  </div><div class="line">set_difference  </div><div class="line"><span class="comment">//构造一个有序序列，该序列仅保留第一个序列中存在的而  </span></div><div class="line"><span class="comment">//第二个中不存在的元素。重载版本使用自定义的比较操作。  </span></div><div class="line">  </div><div class="line">set_symmetric_difference  <span class="comment">//构造一个有序序列，该序列取两个序列的对称差集(并集-交集)。</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="堆算法-4个"><a href="#堆算法-4个" class="headerlink" title="堆算法(4个)"></a>堆算法(4个)</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">make_heap  </div><div class="line"><span class="comment">//把指定范围内的元素生成一个堆。重载版本使用自定义比较操作。  </span></div><div class="line">  </div><div class="line">pop_heap  </div><div class="line"><span class="comment">//并不真正把最大元素从堆中弹出，而是重新排序堆。它把  </span></div><div class="line"><span class="comment">//first和last-1交换，然后重新生成一个堆。可使用容器的back来访问  </span></div><div class="line"><span class="comment">//被"弹出"的元素或者使用pop_back进行真正的删除。重载版本</span></div><div class="line"><span class="comment">//使用自定义的比较操作。  </span></div><div class="line">  </div><div class="line">push_heap  </div><div class="line"><span class="comment">//假设first到last-1是一个有效堆，要被加入到堆的元素存放在  </span></div><div class="line"><span class="comment">//位置last-1，重新生成堆。在指向该函数前，必须先把元素插入</span></div><div class="line"><span class="comment">//容器后。重载版本使用指定的比较操作。  </span></div><div class="line">  </div><div class="line">sort_heap  <span class="comment">//对指定范围内的序列重新排序，它假设该序列是</span></div><div class="line"><span class="comment">//个有序堆。重载版本使用自定义比较操作。</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="常用算法图示"><a href="#常用算法图示" class="headerlink" title="常用算法图示"></a>常用算法图示</h3></li>
</ul>
<center><img src="http://img.blog.csdn.net/20160519155043788" alt=""></center>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ STL之priority_queue（优先队列）]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/02/C++/STL%E4%B9%8Bpriority-queue%EF%BC%88%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%89/</url>
      <content type="html"><![CDATA[<ul>
<li>构造，析构</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">priority_queue() <span class="comment">//默认构造函数，生成一个空的排序队列  </span></div><div class="line">  </div><div class="line">priority_queue(<span class="keyword">const</span> <span class="built_in">queue</span>&amp;);  <span class="comment">//拷贝构造函数  </span></div><div class="line">  </div><div class="line">priority_queue(<span class="keyword">const</span> Compare&amp; comp);</div><div class="line"><span class="comment">//构造生成一个空的priority_queue对象，</span></div><div class="line"><span class="comment">//使用comp作为priority_queue的comparison  </span></div><div class="line">  </div><div class="line">priority_queue(<span class="keyword">const</span> value_type* first, <span class="keyword">const</span> value_type* last); </div><div class="line"><span class="comment">//带有两个参数的构造函数，  </span></div><div class="line"><span class="comment">//使用默认的Comparison作为第三个参数  </span></div><div class="line">  </div><div class="line">priority_queue&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> priority_queue &amp;);   </div><div class="line"><span class="comment">//赋值运算符重载  </span></div><div class="line">  </div><div class="line">c.~priority_queue() <span class="comment">//销毁所有元素并释放内存</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">empty();<span class="comment">//判断是否为空  </span></div><div class="line">  </div><div class="line">push(Elem e);<span class="comment">//队列尾部增加一元素  </span></div><div class="line">  </div><div class="line">pop();<span class="comment">//队列头部数据出队  </span></div><div class="line">  </div><div class="line">top();<span class="comment">//返回头部数据  </span></div><div class="line">  </div><div class="line">size();<span class="comment">//返回栈中元素个数</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><h3 id="改变排列顺序"><a href="#改变排列顺序" class="headerlink" title="改变排列顺序"></a>改变排列顺序</h3></li>
</ul>
<p>priority_queue &lt; Type, Container, Functional ><br> 如果我们把后面俩个参数缺省的话，优先队列就是大顶堆，<br> 队头元素最大。在很多时候，我们需要的不一定是最大值，<br> 也有可能是最小值。这是就需要我们来改变priority_queue中的顺序。<br> 方法有两种：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.如果加入优先队列的是基本类型，那么我们就可以这样，我们以int为例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">//注意greater&lt;int&gt; &gt;这之间有一个空格    </span></div><div class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt;Q;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.对于自定义数据类型的话，我们不论是要改变排序方式，还是不改变都要这样 –  重载 小于( &lt; ) 运算符：<br>        因为，如果你不重载比较运算符的话，编译器无法比较自定义数据类型的大小关系。然而又因为在priority_queue的内部，只需用到 小于号（&lt;），所以我们只需要重载小于号即可。当然对于自定义数据类型来说，也是必须重载，否则将无法使用priority_queue。重载小于号，我们可以有两种方式，一种用成员函数，一种使用友元函数（这里就不多说了，不会的同学，自己在好好复习复习C++）</p>
<ul>
<li><h3 id="优先队列的使用范例"><a href="#优先队列的使用范例" class="headerlink" title="优先队列的使用范例"></a>优先队列的使用范例</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  优先级队列的使用范例 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </div><div class="line">    <span class="comment">//优先队列默认是使用vector作为容器  </span></div><div class="line">    priority_queue&lt;<span class="keyword">int</span>&gt; a;  </div><div class="line">   <span class="comment">// priority_queue&lt;int,list&lt;int&gt;&gt; b;//可以这样定义，但无法使用  </span></div><div class="line">   <span class="keyword">int</span> i;  </div><div class="line">   <span class="comment">//压入数据  </span></div><div class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;  </div><div class="line">      a.push(i*<span class="number">2</span><span class="number">-5</span>);  </div><div class="line">      <span class="comment">//b.push(i);//编译错误  </span></div><div class="line">   &#125;  </div><div class="line">   <span class="built_in">printf</span>(<span class="string">"优先队列的大小=%d\n"</span>,a.size());  </div><div class="line">   <span class="keyword">while</span>(!a.empty())&#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a.top());  </div><div class="line">        a.pop();<span class="comment">//出队  </span></div><div class="line">   &#125;  </div><div class="line">   <span class="built_in">putchar</span>(<span class="string">'\n'</span>);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="优先队列带比较函数示例（针对结构体）"><a href="#优先队列带比较函数示例（针对结构体）" class="headerlink" title="优先队列带比较函数示例（针对结构体）"></a>优先队列带比较函数示例（针对结构体）</h3></li>
</ul>
<p>下面程序是针对结构体的，对数据的比较是通过对结构体重载operator()。<br>程序功能是模拟排队过程，每人有姓名和优先级，优先级相同则比较姓名，开始有5个人进入队列，然后队头2个人出队，再有3个人进入队列，最后所有人都依次出队，程序会输出离开队伍的顺序</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  结构体 </div><div class="line">*/  </div><div class="line"><span class="keyword">struct</span> Node&#123;  </div><div class="line">    <span class="keyword">char</span> szName[<span class="number">20</span>];<span class="comment">//人名  </span></div><div class="line">    <span class="keyword">int</span>  priority;<span class="comment">//优先级  </span></div><div class="line">    <span class="comment">//构造函数  </span></div><div class="line">    Node(<span class="keyword">int</span> nri, <span class="keyword">char</span> *pszName)&#123;  </div><div class="line">        <span class="built_in">strcpy</span>(szName, pszName);  </div><div class="line">        priority = nri;  </div><div class="line">    &#125;  </div><div class="line">&#125;;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  结构体的比较方法 改写operator() </div><div class="line">*/  </div><div class="line"><span class="keyword">struct</span> NodeCmp&#123;  </div><div class="line"><span class="comment">//重写operator()方法,注意这里重写的写法，operator()(参数1，...)  </span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> Node &amp;na, <span class="keyword">const</span> Node &amp;nb)</span></span>&#123;  </div><div class="line">        <span class="keyword">if</span> (na.priority != nb.priority)  </div><div class="line">            <span class="keyword">return</span> na.priority &lt;= nb.priority;  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">            <span class="keyword">return</span> <span class="built_in">strcmp</span>(na.szName, nb.szName) &gt; <span class="number">0</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  打印节点 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintfNode</span><span class="params">(Node na)</span></span>&#123;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>, na.szName, na.priority);  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </div><div class="line">    <span class="comment">//优先级队列默认是使用vector作容器，底层数据结构为堆。  </span></div><div class="line">    priority_queue&lt;Node, <span class="built_in">vector</span>&lt;Node&gt;, NodeCmp&gt; a;  </div><div class="line">  </div><div class="line">    <span class="comment">//有5个人进入队列  </span></div><div class="line">    a.push(Node(<span class="number">5</span>, <span class="string">"小谭"</span>));  </div><div class="line">    a.push(Node(<span class="number">3</span>, <span class="string">"小刘"</span>));  </div><div class="line">    a.push(Node(<span class="number">1</span>, <span class="string">"小涛"</span>));  </div><div class="line">    a.push(Node(<span class="number">5</span>, <span class="string">"小王"</span>));  </div><div class="line">  </div><div class="line">    <span class="comment">//队头的2个人出队  </span></div><div class="line">    PrintfNode(a.top());  </div><div class="line">    a.pop();  </div><div class="line">    PrintfNode(a.top());  </div><div class="line">    a.pop();  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"--------------------\n"</span>);  </div><div class="line">  </div><div class="line">    <span class="comment">//再进入3个人  </span></div><div class="line">    a.push(Node(<span class="number">2</span>, <span class="string">"小白"</span>));  </div><div class="line">    a.push(Node(<span class="number">2</span>, <span class="string">"小强"</span>));  </div><div class="line">    a.push(Node(<span class="number">3</span>, <span class="string">"小新"</span>));  </div><div class="line">  </div><div class="line">    <span class="comment">//所有人都依次出队  </span></div><div class="line">    <span class="keyword">while</span> (!a.empty())&#123;  </div><div class="line">        PrintfNode(a.top());  </div><div class="line">        a.pop();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STL容器总结之stack和queue]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/02/C++/STL%E5%AE%B9%E5%99%A8%E6%80%BB%E7%BB%93%E4%B9%8Bstack%E5%92%8Cqueue/</url>
      <content type="html"><![CDATA[<ul>
<li>stack是一个比较简单的容器，它的使用也很简单，stack是LIFO容器，就是后进先出，最后添加进去的元素，第一个取出来</li>
</ul>
<ul>
<li><h3 id="stack初始化"><a href="#stack初始化" class="headerlink" title="stack初始化"></a>stack初始化</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; first;  </div><div class="line">  </div><div class="line"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; second(first);  </div><div class="line">  </div><div class="line"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>;:<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; third; <span class="comment">//使用vector初始化stack</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="stack常用方法"><a href="#stack常用方法" class="headerlink" title="stack常用方法"></a>stack常用方法</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">empty();<span class="comment">//判断是否为空  </span></div><div class="line">  </div><div class="line">push(Elem e);<span class="comment">//栈顶压入一元素  </span></div><div class="line">  </div><div class="line">pop();<span class="comment">//弹出栈顶元素  </span></div><div class="line">  </div><div class="line">top();<span class="comment">//返回栈顶元素  </span></div><div class="line">  </div><div class="line">size();<span class="comment">//返回栈中元素个数</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><p>queue是一个比较简单的容器，它的使用也很简单，stack是先进先出容器，最先加进去的元素最先出来</p>
</li>
<li><h3 id="queue常用方法"><a href="#queue常用方法" class="headerlink" title="queue常用方法"></a>queue常用方法</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">push(x) <span class="comment">//将x压入队列的末端  </span></div><div class="line">  </div><div class="line">pop() <span class="comment">//弹出队列的第一个元素(队顶元素)，注意此函数并不返回任何值  </span></div><div class="line">  </div><div class="line">front() <span class="comment">//返回第一个元素(队顶元素)  </span></div><div class="line">  </div><div class="line">back() <span class="comment">//返回最后被压入的元素(队尾元素)  </span></div><div class="line">  </div><div class="line">empty() <span class="comment">//当队列为空时，返回true  </span></div><div class="line">  </div><div class="line">size() <span class="comment">//返回队列的长度</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STL容器总结之deque]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/02/C++/STL%E5%AE%B9%E5%99%A8%E6%80%BB%E7%BB%93%E4%B9%8Bdeque/</url>
      <content type="html"><![CDATA[<ul>
<li>deque双向队列是一种双向开口的连续线性空间，可以高效的在头尾两端插入和删除元素，deque在接口上和vector非常相似，下面列出deque的常用成员函数</li>
</ul>
<ul>
<li><h3 id="构造，析构"><a href="#构造，析构" class="headerlink" title="构造，析构"></a>构造，析构</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">deque</span>&lt;Elem&gt; c <span class="comment">//创建一个空的deque  </span></div><div class="line">  </div><div class="line"><span class="built_in">deque</span>&lt;Elem&gt; c1(c2) <span class="comment">//赋值deque  </span></div><div class="line">  </div><div class="line"><span class="built_in">deque</span>&lt;Elem&gt; c(n) </div><div class="line"><span class="comment">//创建deque，含有n个数据，数据均有缺省结构函数产生  </span></div><div class="line">  </div><div class="line"><span class="built_in">deque</span>&lt;Elem&gt; c(n,Elem) <span class="comment">//创建一个含有n个Elem拷贝的deque  </span></div><div class="line">  </div><div class="line"><span class="built_in">deque</span>&lt;Elem&gt; c(begin,end) <span class="comment">//创建一个以[begin,end)区间的deque  </span></div><div class="line"><span class="comment">//利用int数组iArray，创建一个deque对象d  </span></div><div class="line"><span class="keyword">int</span> iArray[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;  </div><div class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; d(iArray, iArray+<span class="number">7</span>);  </div><div class="line">  </div><div class="line">c~<span class="built_in">deque</span>&lt;Elem&gt;() <span class="comment">//销毁所有数据，并释放内存</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">c.assign(begin,end) <span class="comment">//将[begin,end)区间中的数据赋值给c  </span></div><div class="line">  </div><div class="line">c.assign(n,Elem) <span class="comment">//将n个Elem的拷贝赋值给c  </span></div><div class="line">  </div><div class="line">c.swap(c2) <span class="comment">//将c2和c的元素互换</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><h3 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">c.at(index) <span class="comment">//返回索引index所指定的数据，如果index越界，抛出out_of_ranga  </span></div><div class="line">  </div><div class="line">c[index] <span class="comment">//返回容器指定位置的元素值  </span></div><div class="line">  </div><div class="line">c.front() <span class="comment">//返回第一个数据  </span></div><div class="line">  </div><div class="line">c.back() <span class="comment">//返回最后一个数据  </span></div><div class="line">  </div><div class="line">c.begin() <span class="comment">//返回指向第一个元素的迭代器  </span></div><div class="line">  </div><div class="line">c.end() <span class="comment">//返回指向最后一个数据的下一个位置的迭代器  </span></div><div class="line">  </div><div class="line">c.rbegin() </div><div class="line"><span class="comment">//返回逆向队列的第一个数据,也就是返回容器中倒数第一个元素的迭代器  </span></div><div class="line">  </div><div class="line">c.rend() </div><div class="line"><span class="comment">//返回指向逆向队列的最后一个数据的下一个位置的迭代器，  </span></div><div class="line"><span class="comment">//也就是返回容器中倒数最后一个元素之后的迭代器</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">c.push_back(Elem) <span class="comment">//在尾部加入一个数据  </span></div><div class="line">  </div><div class="line">c.push_front(Elem) <span class="comment">//在头部插入一个数据  </span></div><div class="line">  </div><div class="line">c.insert(pos,Elem) <span class="comment">//在pos位置插入一个Elem拷贝，返回新数据的位置  </span></div><div class="line">  </div><div class="line">c.insert(pos,n,Elem) <span class="comment">//在pos位置插入n个Elem数据，无返回值  </span></div><div class="line">  </div><div class="line">c.insert(pos,begin,end)</div><div class="line"><span class="comment">//在pos位置插入在[begin,end)区间的数据，无返回值</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">c.pop_back() <span class="comment">//删除最后一个数据  </span></div><div class="line">  </div><div class="line">c.pop_front() <span class="comment">//删除头部一个数据  </span></div><div class="line">  </div><div class="line">c.erase(pos) <span class="comment">//删除pos位置的数据，返回下一个数据的位置  </span></div><div class="line">  </div><div class="line">c.erase(begin,end) </div><div class="line"><span class="comment">//删除[begin,end)区间的数据，返回下一个数据的位置</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">c.empty() <span class="comment">//判断容器是否为空  </span></div><div class="line">  </div><div class="line">c.max_size() <span class="comment">//返回容器中最大数据的数量  </span></div><div class="line">  </div><div class="line">c.resize(num) <span class="comment">//重新指定队列的长度  </span></div><div class="line">  </div><div class="line">c.size() <span class="comment">//返回容器中实际数据的个数  </span></div><div class="line">  </div><div class="line">c1.swap(c2) <span class="comment">//将c1和c2元素互换  </span></div><div class="line">swap(c1,c2) <span class="comment">//同上</span></div></pre></td></tr></table></figure>
<ul>
<li>deque的实现比较复杂，内部会维护一个map（注意！不是STL中的map容器）即一小块连续的空间，该空间中每个元素都是指针，指向另一段（较大的）区域，这个区域称为缓冲区，缓冲区用来保存deque中的数据。因此deque在随机访问和遍历数据会比vector慢。具体的deque实现可以参考《STL源码剖析》，当然此书中使用的SGI STL与VS2008所使用的PJ STL的实现方法还是有区别的。下面给出了deque的结构图：</li>
</ul>
<p><img src="http://hi.csdn.net/attachment/201111/8/0_13207172099IU6.gif" alt=""></p>
<ul>
<li><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  双端队列queue </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </div><div class="line">    <span class="comment">//创建一个有20个元素的queue队列  </span></div><div class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; ideq(<span class="number">20</span>);  </div><div class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator pos;  </div><div class="line">    <span class="keyword">int</span> i;  </div><div class="line">    <span class="comment">//使用assign()赋值  assign在计算机中就是赋值的意思  </span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i)  </div><div class="line">        ideq[i] = i;  </div><div class="line">  </div><div class="line">    <span class="comment">//输出deque  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"输出deque中数据:\n"</span>);  </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i)  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, ideq[i]);  </div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);  </div><div class="line">  </div><div class="line">    <span class="comment">//在头尾加入新数据  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n在头尾加入新数据...\n"</span>);  </div><div class="line">    ideq.push_back(<span class="number">100</span>);  </div><div class="line">    ideq.push_front(i);  </div><div class="line">  </div><div class="line">    <span class="comment">//输出deque  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n输出deque中数据:\n"</span>);  </div><div class="line">    <span class="keyword">for</span> (pos = ideq.begin(); pos != ideq.end(); pos++)  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, *pos);  </div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);  </div><div class="line">  </div><div class="line">    <span class="comment">//查找  </span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> FINDNUMBER = <span class="number">19</span>;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n查找%d\n"</span>, FINDNUMBER);  </div><div class="line">    pos = find(ideq.begin(), ideq.end(), FINDNUMBER);  </div><div class="line">    <span class="keyword">if</span> (pos != ideq.end())  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"find %d success\n"</span>, *pos);  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"find failed\n"</span>);  </div><div class="line">  </div><div class="line">    <span class="comment">//在头尾删除数据  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n在头尾删除数据...\n"</span>);  </div><div class="line">    ideq.pop_back();  </div><div class="line">    ideq.pop_front();  </div><div class="line">  </div><div class="line">    <span class="comment">//输出deque  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n输出deque中数据:\n"</span>);  </div><div class="line">    <span class="keyword">for</span> (pos = ideq.begin(); pos != ideq.end(); pos++)  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, *pos);  </div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="http://hi.csdn.net/attachment/201111/8/0_1320717228QV1x.gif" alt=""></p>
<ul>
<li>另外要注意一点。对于deque和vector来说，尽量少用erase(pos)和erase(beg,end)。因为这在中间删除数据后会导致后面的数据向前移动，从而使效率低下。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STL容器总结之list]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/02/C++/STL%E5%AE%B9%E5%99%A8%E6%80%BB%E7%BB%93%E4%B9%8Blist/</url>
      <content type="html"><![CDATA[<ul>
<li><p>在使用std::list&lt;&gt;链表时，难免会对数据进行添加删除操作。而遍历链表则有两种方式：通过索引访问，象数组一样处理；通过std::list&lt;&gt;::iterator链表遍历器进行访问<br>STL 中的list 就是一 双向链表，可高效地进行插入删除元素。<br>list不支持随机访问。所以没有 at(pos)和operator[]。</p>
<p>list 对象list1, list2 分别有元素list1(1,2,3),list2(4,5,6) 。list&lt; int&gt;::iterator it;</p>
</li>
</ul>
<ul>
<li><h3 id="构造，析构"><a href="#构造，析构" class="headerlink" title="构造，析构"></a>构造，析构</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">list</span>&lt;Elem&gt; c <span class="comment">//创建一个空的list  </span></div><div class="line">  </div><div class="line"><span class="built_in">list</span>&lt;Elem&gt; c1(c2) <span class="comment">//复制另一个同类型元素的list  </span></div><div class="line">  </div><div class="line"><span class="built_in">list</span>&lt;Elem&gt;c(n) <span class="comment">//创建n个元素的list，每个元素值由默认构造函数确定  </span></div><div class="line">  </div><div class="line"><span class="built_in">list</span>&lt;Elem&gt;c(n,elem) <span class="comment">//创建n个元素的list，每个元素的值为elem  </span></div><div class="line">  </div><div class="line"><span class="built_in">list</span>&lt;Elem&gt;c(begin,end) <span class="comment">//由迭代器创建list,迭代区间为[begin,end)  </span></div><div class="line">  </div><div class="line">c.~<span class="built_in">list</span>();             <span class="comment">// 销毁所有元素,释放内存</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">c.size() <span class="comment">//返回容器的元素个数  </span></div><div class="line">  </div><div class="line">c.swap(c2) <span class="comment">//将c2和c的元素互换  </span></div><div class="line">  </div><div class="line">c.empty() <span class="comment">//判断容器是否为空  </span></div><div class="line">  </div><div class="line">c.max_size() <span class="comment">//返回容器中最大数据的数量  </span></div><div class="line">  </div><div class="line">c.resize(num) <span class="comment">//重新指定链表的长度  </span></div><div class="line">  </div><div class="line">c.reverse() <span class="comment">//反转链表  </span></div><div class="line">  </div><div class="line">c.sort() <span class="comment">//对列表进行排序，默认升序，可以自定义回调函数  </span></div><div class="line"><span class="comment">//示例  </span></div><div class="line"><span class="built_in">list</span> 对象L1(<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>)  </div><div class="line">L1.sort( );                 <span class="comment">// L1(1,3,4,4,5)  </span></div><div class="line">L1.sort( greater &lt;<span class="keyword">int</span> &gt;() ); <span class="comment">// L1(5,4,4,3,1)  </span></div><div class="line">  </div><div class="line">c.merge() <span class="comment">//合并两个有序列表使之有序  </span></div><div class="line"><span class="comment">//示例  </span></div><div class="line"><span class="comment">// 升序  </span></div><div class="line">list1.merge(list2); <span class="comment">// list1(1,2,3,4,5,6) list2 现为空  </span></div><div class="line"><span class="comment">// 降序  </span></div><div class="line">L1( <span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>), L2(<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>)  </div><div class="line">L1.merge(L2, greater &lt;<span class="keyword">int</span> &gt;() );</div><div class="line"><span class="comment">// list1(6,5,4,3,2,1) list2 现为空  </span></div><div class="line">  </div><div class="line">c.splice() </div><div class="line"><span class="comment">//对两个链表进行结合( 三个重载函数) 结合后第二个链表清空  </span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//示例  </span></div><div class="line">list1.splice( ++list1.begin(),list2);  </div><div class="line"><span class="comment">// list1(1,4,5,6,2,3) list2 为空  </span></div><div class="line">  list1.splice( ++list1.begin(),list2,list2.begin());  </div><div class="line"><span class="comment">// list1( 1,4,2,3); list2(5,6)  </span></div><div class="line">list1.splice( ++list1.begin(),list2,++list2.begin(),list2.end());  </div><div class="line"><span class="comment">//list1( 1, 5,6, 2,3); list2(4)</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">c.assign(begin,end) <span class="comment">//将[begin,end)区间中的数据赋值给c  </span></div><div class="line">  </div><div class="line">c.assign(n,Elem) <span class="comment">//将n个Elem的拷贝赋值给c  </span></div><div class="line">  </div><div class="line">c.swap(c2) <span class="comment">//将c2和c的元素互换</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">c.front() <span class="comment">//返回第一个数据  </span></div><div class="line">  </div><div class="line">c.back() <span class="comment">//返回最后一个数据  </span></div><div class="line">  </div><div class="line">c.begin() <span class="comment">//返回指向第一个元素的迭代器(指针)  </span></div><div class="line">  </div><div class="line">c.end() <span class="comment">//返回指向最后一个数据的下一个位置的迭代器(指针)  </span></div><div class="line">  </div><div class="line">c.rbegin() </div><div class="line"><span class="comment">//返回逆向队列的第一个数据,也就是返回容器中倒数第一个元素的迭代器  </span></div><div class="line">  </div><div class="line">c.rend() </div><div class="line"><span class="comment">//返回指向逆向队列的最后一个数据的下一个位置的迭代器，  </span></div><div class="line"><span class="comment">//也就是返回容器中倒数最后一个元素之后的迭代器</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">c.push_back(Elem) <span class="comment">//list元素尾部增加一个元素x  </span></div><div class="line">  </div><div class="line">c.push_front(Elem) <span class="comment">//list元素首元素钱添加一个元素X  </span></div><div class="line">  </div><div class="line">c.insert(pos,Elem) <span class="comment">//在pos位置插入一个Elem拷贝，返回新数据的位置  </span></div><div class="line">  </div><div class="line">c.insert(pos,n,Elem) <span class="comment">//在pos位置插入n个Elem数据，无返回值  </span></div><div class="line">  </div><div class="line">c.insert(pos,begin,end)</div><div class="line"><span class="comment">//在pos位置插入在[begin,end)区间的数据，无返回值</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">c.pop_back() <span class="comment">//删除容器尾元素，当且仅当容器不为空    </span></div><div class="line">    </div><div class="line">c.pop_front() <span class="comment">//删除容器首元素，当且仅当容器不为空    </span></div><div class="line">    </div><div class="line">c.remove(Elem) <span class="comment">//删除容器中所有元素值等于x的元素   </span></div><div class="line">  </div><div class="line"><span class="comment">/**  </span></div><div class="line"> remove_if()删除条件满足的元素(会遍历一次链表)  </div><div class="line">*/    </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove_if_test</span><span class="params">()</span></span>&#123;    </div><div class="line">ShowList(g_list1);    </div><div class="line">g_list1.remove_if(myFun);    </div><div class="line">ShowList(g_list1);    </div><div class="line">&#125;    </div><div class="line">    </div><div class="line">c.clear() <span class="comment">//删除容器中的所有元素    </span></div><div class="line">    </div><div class="line">c.erase(pos) <span class="comment">//删除pos位置的数据，返回下一个数据的位置    </span></div><div class="line">    </div><div class="line">c.erase(begin,end) </div><div class="line"><span class="comment">//删除[begin,end)区间的数据，返回下一个数据的位置    </span></div><div class="line">    </div><div class="line">c.unique() <span class="comment">//删除相邻重复元素    </span></div><div class="line"><span class="comment">//示例    </span></div><div class="line">L1( <span class="number">1</span>, <span class="number">1</span> ,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>)    </div><div class="line">L1.unique( );         <span class="comment">// L1(1,4,3,5,1)</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; g_list1;  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; g_list2;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  初始化全局列表 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">()</span></span>&#123;  </div><div class="line"><span class="comment">// push_back()增加一元素到链表尾  </span></div><div class="line">g_list1.push_back( <span class="number">1</span> );  </div><div class="line">g_list1.push_back( <span class="number">2</span> );  </div><div class="line">g_list1.push_back( <span class="number">3</span> );  </div><div class="line"><span class="comment">// push_front()增加一元素到链表头  </span></div><div class="line">g_list2.push_front( <span class="number">6</span> );  </div><div class="line">g_list2.push_front( <span class="number">5</span> );  </div><div class="line">g_list2.push_front( <span class="number">4</span> );  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  输出一个链表 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowList</span><span class="params">(<span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt;&amp; listTemp)</span></span>&#123;  </div><div class="line"><span class="comment">// size()返回链表中元素个数  </span></div><div class="line"><span class="built_in">cout</span> &lt;&lt; listTemp.size() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line"><span class="keyword">for</span> (<span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; ::iterator it = listTemp.begin();</div><div class="line">it != listTemp.end(); ++ it)&#123;  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; * it &lt;&lt; <span class="string">' '</span> ;  </div><div class="line">&#125;  </div><div class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  构造函数，空链表 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">constructor_test0</span><span class="params">()</span></span>&#123;  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp;  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; listTemp.size() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"> 构造函数，建一个含三个默认值是0的元素的链表 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">constructor_test1</span><span class="params">()</span></span>&#123;  </div><div class="line">  <span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp( <span class="number">3</span> );  </div><div class="line">  ShowList(listTemp);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  构造函数，建一个含五个元素的链表，值都是1 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">constructor_test2</span><span class="params">()</span></span>&#123;  </div><div class="line">  <span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp( <span class="number">5</span> , <span class="number">1</span> );  </div><div class="line">  ShowList(listTemp);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  构造函数，建一个g_list1的copy链表 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">constructor_test3</span><span class="params">()</span></span>&#123;  </div><div class="line"> <span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp(g_list1);  </div><div class="line"> ShowList(listTemp);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  构造函数，listTemp含g_list1一个区域的元素[_First, _Last) </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">constructor_test4</span><span class="params">()</span></span>&#123;  </div><div class="line"> <span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp(g_list1.begin(), g_list1.end());  </div><div class="line"> ShowList(listTemp);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"> assign()分配值，有两个重载 </div><div class="line"> template &lt;class InputIterator&gt; </div><div class="line"> void assign ( InputIterator first, InputIterator last ); </div><div class="line"> void assign ( size_type n, const T&amp; u ); </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign_test</span><span class="params">()</span></span>&#123;  </div><div class="line">  <span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp( <span class="number">5</span> , <span class="number">1</span> );  </div><div class="line">  ShowList(listTemp);  </div><div class="line">  listTemp.assign( <span class="number">4</span> , <span class="number">3</span> );  </div><div class="line">  ShowList(listTemp);  </div><div class="line">  </div><div class="line">  listTemp.assign( ++ g_list1.begin(), g_list1.end());  </div><div class="line">  ShowList(listTemp);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"> operator= </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator_equality_test</span><span class="params">()</span></span>&#123;  </div><div class="line"> g_list1 = g_list2;  </div><div class="line"> ShowList(g_list1);  </div><div class="line"> ShowList(g_list2);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  front()返回第一个元素的引用 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">front_test7</span><span class="params">()</span></span>&#123;  </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; g_list1.front() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  back()返回最后一元素的引用 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">back_test</span><span class="params">()</span></span>&#123;  </div><div class="line"> <span class="built_in">cout</span> &lt;&lt; g_list1.back() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  begin()返回第一个元素的指针(iterator) </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">begin_test</span><span class="params">()</span></span>&#123;  </div><div class="line"> <span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; ::iterator it1 = g_list1.begin();  </div><div class="line"> <span class="built_in">cout</span> &lt;&lt; *++ it1 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line"> <span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; ::const_iterator it2 = g_list1.begin();  </div><div class="line"> it2 ++ ;  </div><div class="line"> <span class="comment">// (*it2)++; // *it2 为const 不用修改  </span></div><div class="line"> <span class="built_in">cout</span> &lt;&lt; * it2 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  end()返回 [最后一个元素的下一位置的指针] </div><div class="line">  (list为空时end()= begin()) </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">end_test</span><span class="params">()</span></span>&#123;  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; ::iterator it = g_list1.end(); <span class="comment">// 注意是：最后一个元素的下一位置的指针  </span></div><div class="line">-- it;  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; * it &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  rbegin()返回链表最后一元素的后向指针 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbegin_test</span><span class="params">()</span></span>&#123;  </div><div class="line"> <span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; ::reverse_iterator it = g_list1.rbegin();  </div><div class="line"> <span class="keyword">for</span> (; it != g_list1.rend(); ++ it)&#123;  </div><div class="line"> <span class="built_in">cout</span> &lt;&lt; * it &lt;&lt; <span class="string">' '</span> ;  </div><div class="line">&#125;  </div><div class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  rend()返回链表第一元素的下一位置的后向指针 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rend_test</span><span class="params">()</span></span>&#123;  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; ::reverse_iterator it = g_list1.rend();  </div><div class="line">-- it;  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; * it &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  push_back()增加一元素到链表尾 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back_test</span><span class="params">()</span></span>&#123;  </div><div class="line">ShowList(g_list1);  </div><div class="line">g_list1.push_back( <span class="number">4</span> );  </div><div class="line">ShowList(g_list1);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  push_front()增加一元素到链表头 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_front_test</span><span class="params">()</span></span>&#123;  </div><div class="line">ShowList(g_list1);  </div><div class="line">g_list1.push_front( <span class="number">4</span> );  </div><div class="line">ShowList(g_list1);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  pop_back()删除链表尾的一个元素 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back_test</span><span class="params">()</span></span>&#123;  </div><div class="line">ShowList(g_list1);  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">g_list1.pop_back();  </div><div class="line">ShowList(g_list1);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"> pop_front()删除链表头的一元素 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_front_test</span><span class="params">()</span></span>&#123;  </div><div class="line">ShowList(g_list1);  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">g_list1.pop_front();  </div><div class="line">ShowList(g_list1);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"> clear()删除所有元素 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_test</span><span class="params">()</span></span>&#123;  </div><div class="line">ShowList(g_list1);  </div><div class="line">g_list1.clear();  </div><div class="line">ShowList(g_list1);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  erase()删除一个元素或一个区域的元素(两个重载函数) </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">erase_test</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">ShowList(g_list1);  </div><div class="line">g_list1.erase(g_list1.begin());  </div><div class="line">ShowList(g_list1);  </div><div class="line">  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">ShowList(g_list2);  </div><div class="line">g_list2.erase( ++ g_list2.begin(), g_list2.end());  </div><div class="line">ShowList(g_list2);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  remove()删除链表中匹配值的元素(匹配元素全部删除) </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove_test</span><span class="params">()</span></span>&#123;  </div><div class="line">ShowList(g_list1);  </div><div class="line">g_list1.push_back( <span class="number">1</span> );  </div><div class="line">ShowList(g_list1);  </div><div class="line">  </div><div class="line">g_list1.remove( <span class="number">1</span> );  </div><div class="line">ShowList(g_list1);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myFun</span><span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> &amp; value)</span> </span>&#123; <span class="keyword">return</span> (value &lt; <span class="number">2</span> ); &#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"> remove_if()删除条件满足的元素(会遍历一次链表) </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove_if_test</span><span class="params">()</span></span>&#123;  </div><div class="line">ShowList(g_list1);  </div><div class="line">g_list1.remove_if(myFun);  </div><div class="line">ShowList(g_list1);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  empty()判断是否链表为空 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">empty_test</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp;  </div><div class="line"><span class="keyword">if</span> (listTemp.empty())  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" listTemp为空 "</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line"><span class="keyword">else</span>  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" listTemp不为空 "</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"> max_size()返回链表最大可能长度:1073741823 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">max_size_test</span><span class="params">()</span></span>&#123;  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; ::size_type nMax = g_list1.max_size();  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; nMax &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">resize()重新定义链表长度(两重载函数)： </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize_test</span><span class="params">()</span></span>&#123;  </div><div class="line">ShowList(g_list1);  </div><div class="line">g_list1.resize( <span class="number">9</span> ); <span class="comment">// 用默认值填补  </span></div><div class="line">ShowList(g_list1);  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">ShowList(g_list2);  </div><div class="line">g_list2.resize( <span class="number">9</span> , <span class="number">51</span> ); <span class="comment">// 用指定值填补  </span></div><div class="line">ShowList(g_list2);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">reverse()反转链表 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse_test</span><span class="params">()</span></span>&#123;  </div><div class="line">ShowList(g_list1);  </div><div class="line">g_list1.reverse();  </div><div class="line">ShowList(g_list1);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  sort()对链表排序，默认升序(两个重载函数) </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_test</span><span class="params">()</span></span>&#123;  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp;  </div><div class="line">listTemp.push_back( <span class="number">9</span> );  </div><div class="line">listTemp.push_back( <span class="number">3</span> );  </div><div class="line">listTemp.push_back( <span class="number">5</span> );  </div><div class="line">listTemp.push_back( <span class="number">1</span> );  </div><div class="line">listTemp.push_back( <span class="number">4</span> );  </div><div class="line">listTemp.push_back( <span class="number">3</span> );  </div><div class="line">  </div><div class="line">ShowList(listTemp);  </div><div class="line">listTemp.sort();  </div><div class="line">ShowList(listTemp);  </div><div class="line">  </div><div class="line">listTemp.sort(greater &lt; <span class="keyword">int</span> &gt; ());  </div><div class="line">ShowList(listTemp);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  merge()合并两个升序序链表并使之成为另一个升序. </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_test1</span><span class="params">()</span></span>&#123;  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp2;  </div><div class="line">listTemp2.push_back( <span class="number">3</span> );  </div><div class="line">listTemp2.push_back( <span class="number">4</span> );  </div><div class="line">  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp3;  </div><div class="line">listTemp3.push_back( <span class="number">9</span> );  </div><div class="line">listTemp3.push_back( <span class="number">10</span> );  </div><div class="line">  </div><div class="line">ShowList(listTemp2);  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">ShowList(listTemp3);  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">listTemp2.merge(listTemp3);  </div><div class="line">ShowList(listTemp2);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myCmp</span> <span class="params">( <span class="keyword">int</span> first, <span class="keyword">int</span> second)</span>  </span></div><div class="line">&#123; <span class="keyword">return</span> ( <span class="keyword">int</span> (first) &gt; <span class="keyword">int</span> (second) ); &#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  merge()合并两个降序链表并使之成为另一个降序. </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_test2</span><span class="params">()</span></span>&#123;  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp2;  </div><div class="line">listTemp2.push_back( <span class="number">4</span> );  </div><div class="line">listTemp2.push_back( <span class="number">3</span> );  </div><div class="line">  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp3;  </div><div class="line">listTemp3.push_back( <span class="number">10</span> );  </div><div class="line">listTemp3.push_back( <span class="number">9</span> );  </div><div class="line">  </div><div class="line">ShowList(listTemp2);  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">ShowList(listTemp3);  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line"><span class="comment">// listTemp2.merge(listTemp3, greater&lt;int&gt;()); // 第二个参数可以是自己定义的函数如下  </span></div><div class="line">listTemp2.merge(listTemp3, myCmp);  </div><div class="line">ShowList(listTemp2);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">   splice()对两个链表进行结合(三个重载函数),结合后第二个链表清空 </div><div class="line">   void splice ( iterator position, list&lt;T,Allocator&gt;&amp; x ); </div><div class="line">   void splice ( iterator position,</div><div class="line">   list&lt;T,Allocator&gt;&amp; x, iterator i ); </div><div class="line">   void splice ( iterator position, </div><div class="line">   list&lt;T,Allocator&gt;&amp; x, iterator first, iterator last ); </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splice_test</span><span class="params">()</span></span>&#123;  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp1(g_list1);  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp2(g_list2);  </div><div class="line">  </div><div class="line">ShowList(listTemp1);  </div><div class="line">ShowList(listTemp2);  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line"><span class="comment">//  </span></div><div class="line">listTemp1.splice( ++ listTemp1.begin(), listTemp2);  </div><div class="line">ShowList(listTemp1);  </div><div class="line">ShowList(listTemp2);  </div><div class="line">  </div><div class="line"><span class="comment">//  </span></div><div class="line">listTemp1.assign(g_list1.begin(), g_list1.end());  </div><div class="line">listTemp2.assign(g_list2.begin(), g_list2.end());  </div><div class="line">listTemp1.splice( ++ listTemp1.begin(), listTemp2, ++ listTemp2.begin());  </div><div class="line">ShowList(listTemp1);  </div><div class="line">ShowList(listTemp2);  </div><div class="line">  </div><div class="line"><span class="comment">//  </span></div><div class="line">listTemp1.assign(g_list1.begin(), g_list1.end());  </div><div class="line">listTemp2.assign(g_list2.begin(), g_list2.end());  </div><div class="line">listTemp1.splice( ++ listTemp1.begin(), listTemp2, ++ listTemp2.begin(), listTemp2.end());  </div><div class="line">ShowList(listTemp1);  </div><div class="line">ShowList(listTemp2);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">   insert()在指定位置插入一个或多个元素(三个重载函数) </div><div class="line">   iterator insert ( iterator position, const T&amp; x ); </div><div class="line">   void insert ( iterator position, size_type n, const T&amp; x ); </div><div class="line">   template &lt;class InputIterator&gt; </div><div class="line">   void insert ( iterator position, InputIterator first, InputIterator last ); </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_test</span><span class="params">()</span></span>&#123;  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp1(g_list1);  </div><div class="line">ShowList(listTemp1);  </div><div class="line">listTemp1.insert(listTemp1.begin(), <span class="number">51</span> );  </div><div class="line">ShowList(listTemp1);  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp2(g_list1);  </div><div class="line">ShowList(listTemp2);  </div><div class="line">listTemp2.insert(listTemp2.begin(), <span class="number">9</span> , <span class="number">51</span> );  </div><div class="line">ShowList(listTemp2);  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp3(g_list1);  </div><div class="line">ShowList(listTemp3);  </div><div class="line">listTemp3.insert(listTemp3.begin(),g_list2.begin(), g_list2.end());  </div><div class="line">ShowList(listTemp3);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"> swap()交换两个链表(两个重载) </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_test</span><span class="params">()</span></span>&#123;  </div><div class="line">ShowList(g_list1);  </div><div class="line">ShowList(g_list2);  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">g_list1.swap(g_list2);  </div><div class="line">ShowList(g_list1);  </div><div class="line">ShowList(g_list2);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same_integral_part</span> <span class="params">( <span class="keyword">double</span> first, <span class="keyword">double</span> second)</span>  </span></div><div class="line">&#123; <span class="keyword">return</span> ( <span class="keyword">int</span> (first) == <span class="keyword">int</span> (second) ); &#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"> unique()删除相邻重复元素 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">unique_test</span><span class="params">()</span></span>&#123;  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp;  </div><div class="line">listTemp.push_back( <span class="number">1</span> );  </div><div class="line">listTemp.push_back( <span class="number">1</span> );  </div><div class="line">listTemp.push_back( <span class="number">4</span> );  </div><div class="line">listTemp.push_back( <span class="number">3</span> );  </div><div class="line">listTemp.push_back( <span class="number">5</span> );  </div><div class="line">listTemp.push_back( <span class="number">1</span> );  </div><div class="line"><span class="built_in">list</span> &lt; <span class="keyword">int</span> &gt; listTemp2(listTemp);  </div><div class="line">  </div><div class="line">ShowList(listTemp);  </div><div class="line">listTemp.unique(); <span class="comment">// 不会删除不相邻的相同元素  </span></div><div class="line">ShowList(listTemp);  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">listTemp.sort();  </div><div class="line">ShowList(listTemp);  </div><div class="line">listTemp.unique();  </div><div class="line">ShowList(listTemp);  </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">listTemp2.sort();  </div><div class="line">ShowList(listTemp2);  </div><div class="line">listTemp2.unique(same_integral_part);  </div><div class="line">ShowList(listTemp2);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  主函数，列表测试 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </div><div class="line">InitList();  </div><div class="line"> ShowList(g_list1);  </div><div class="line"> ShowList(g_list2);  </div><div class="line">  </div><div class="line"> constructor_test0();  </div><div class="line"> constructor_test1();  </div><div class="line"> constructor_test2();  </div><div class="line"> constructor_test3();  </div><div class="line"> constructor_test4();  </div><div class="line"> assign_test();  </div><div class="line"> operator_equality_test();  </div><div class="line"> front_test7();  </div><div class="line"> back_test();  </div><div class="line"> begin_test();  </div><div class="line"> end_test();  </div><div class="line"> rbegin_test();  </div><div class="line"> rend_test();  </div><div class="line"> push_back_test();  </div><div class="line"> push_front_test();  </div><div class="line"> pop_back_test();  </div><div class="line"> pop_front_test();  </div><div class="line"> clear_test();  </div><div class="line"> erase_test();  </div><div class="line"> remove_test();  </div><div class="line"> remove_if_test();  </div><div class="line"> empty_test();  </div><div class="line"> max_size_test();  </div><div class="line"> resize_test();  </div><div class="line"> reverse_test();  </div><div class="line"> sort_test();  </div><div class="line"> merge_test1();  </div><div class="line"> merge_test2();  </div><div class="line"> splice_test();  </div><div class="line"> insert_test();  </div><div class="line"> swap_test();  </div><div class="line"> unique_test();  </div><div class="line"><span class="keyword">return</span> <span class="number">0</span> ;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STL容器总结之Vector]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/02/C++/STL%E5%AE%B9%E5%99%A8%E6%80%BB%E7%BB%93%E4%B9%8BVector/</url>
      <content type="html"><![CDATA[<ul>
<li>vector 是一种序列容器，是对大小可变数组的封装</li>
</ul>
<p><img src="http://img.blog.csdn.net/20160406151211233" alt=""></p>
<p>数组中的元素是连续存储的，所以除了能够通过迭代器访问外，还可以通过常规的指针偏移量访问元素。换句话说，可以将指向 vector 元素的指针传入以指向数组元素的指针作为参数的函数。</p>
<p>vector 会在需要时自动调整所占内存的大小。与对应的静态数组相比，vector 所占的内存通常要更多，因为它还分配了额外的内存以应对将来可能的扩张。于是，vector 就不必在每次插入元素时都重新分配一次内存了，除非这块预留的内存用尽。已分配内存的总大小可以通过 capacity() 函数查询。所占的额外的内存可以通过调用 shrink_to_fit() 返还给系统。</p>
<p>从性能方面考虑，内存重分配操作的代价通常很大。如果事先知道元素个数，可以使用 reserve() 函数消除重新分配操作。<br>针对 vector 的各种常见操作的复杂度（效率）如下：<br>随机访问 - 常数 O(1)<br>在尾部增删元素 - 平摊（amortized）常数 O(1)<br>增删元素 - 至 vector 尾部的线性距离 O(n)</p>
<ul>
<li><h3 id="头文件及构造，析构，复制"><a href="#头文件及构造，析构，复制" class="headerlink" title="头文件及构造，析构，复制"></a>头文件及构造，析构，复制</h3></li>
</ul>
<p>头文件</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span>       <span class="comment">//头文件包含    </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  <span class="comment">//或者using std::vector;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>   构造，复制，析构</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;              <span class="comment">//空的vector，元素类型为int，执行的是默认初始化    </span></div><div class="line">    </div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v2(v1);   <span class="comment">//拷贝覆盖，v2与v1中元素个数、值都相同    </span></div><div class="line">    </div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v3=v1;   <span class="comment">//同上    </span></div><div class="line">    </div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v4(<span class="number">5</span>,<span class="number">3</span>);  <span class="comment">//v4包含了5个重复元素，元素值为3    </span></div><div class="line">    </div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v5(<span class="number">10</span>);  <span class="comment">//v5包含10个重复元素，执行的是默认初始化    </span></div><div class="line">    </div><div class="line"><span class="comment">//列表初始化，是C++11提供的新标准    </span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v6&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;; <span class="comment">//v6包含4个元素，其值为&#123;...&#125;中的元素    </span></div><div class="line">    </div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v7=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;    <span class="comment">//同上    </span></div><div class="line">    </div><div class="line">c.~<span class="built_in">vector</span>() <span class="comment">//销毁所有元素并释放内存</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="非变动性操作"><a href="#非变动性操作" class="headerlink" title="非变动性操作"></a>非变动性操作</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">c.empty() <span class="comment">//判断容器是否为空，与size()==0相同，但可能更快  </span></div><div class="line">  </div><div class="line">c.size() <span class="comment">//返回当前元素数量  </span></div><div class="line">  </div><div class="line"><span class="comment">//重新设定容器大小，c.size()会发生改变。  </span></div><div class="line">resize()  </div><div class="line"><span class="comment">//c.size()&lt;n时，扩大容器，多余的元素追加在末尾，</span></div><div class="line"><span class="comment">//执行默认初始化；反之，则将容器截断，保留前面n个元素  </span></div><div class="line">c.resize(n);  </div><div class="line"><span class="comment">//c.size()&lt;n时，扩大容器，多余的元素追加在末尾，</span></div><div class="line"><span class="comment">//其值都为val；反之，则将容器截断，保留前面n个元素  </span></div><div class="line">c.resize(n,val);  </div><div class="line">  </div><div class="line">c.max_size() <span class="comment">//返回可容纳的元素最大数量  </span></div><div class="line">  </div><div class="line">c.capacity() <span class="comment">//返回在不重新分配的情况下可容纳的元素的最大数量  </span></div><div class="line">  </div><div class="line">c.reserve(num) <span class="comment">//如果容量不够，进行扩大  </span></div><div class="line">  </div><div class="line">c.shrink_to_fit() <span class="comment">//按要求根据元素的数量去缩小容量  </span></div><div class="line">  </div><div class="line">c1 == c2 <span class="comment">//判断c1与c2是否相等  </span></div><div class="line">  </div><div class="line">c1 != c2 <span class="comment">//判断c1与c2是否不相等，等同于!(c1==c2)  </span></div><div class="line">  </div><div class="line">c1 &lt; c2 <span class="comment">//判断c1是否小于c2  </span></div><div class="line">  </div><div class="line">c1 &gt; c2 <span class="comment">//判断c1是否大于c2  </span></div><div class="line">  </div><div class="line">c1 &lt;= c2 <span class="comment">//判断c1是否小于等于c2  </span></div><div class="line">  </div><div class="line">c1 &gt;= c2 <span class="comment">//判断c1是否大于等于c2</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">c = c2 <span class="comment">//将c2所有元素赋值给c  </span></div><div class="line">  </div><div class="line">c = rv <span class="comment">//将右值对象rv的所有元素移动赋值给c  </span></div><div class="line">  </div><div class="line">c = initlist <span class="comment">//使用初始化列表进行赋值  </span></div><div class="line">  </div><div class="line">c.assign(initlist) <span class="comment">//使用初始化列表进行赋值  </span></div><div class="line">  </div><div class="line">c.assign(n,elem) <span class="comment">//使用n个elem元素进行赋值  </span></div><div class="line">  </div><div class="line">c.assign(beg,end) <span class="comment">//使用beg到end范围内的元素进行赋值  </span></div><div class="line">  </div><div class="line">c1.swap(c2) <span class="comment">//交换c1和c2的数  </span></div><div class="line">  </div><div class="line">swap(c1,c2) <span class="comment">//交换c1和c2的数</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="元素存取"><a href="#元素存取" class="headerlink" title="元素存取"></a>元素存取</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">c[idx] <span class="comment">//返回索引idx所标示的元素，不进行范围检查  </span></div><div class="line">  </div><div class="line">c.at(idx) <span class="comment">//返回索引idx所标示的元素，如果越界，抛出range-error  </span></div><div class="line">  </div><div class="line">c.front() <span class="comment">//返回第一个元素，不检查第一个元素是否存在  </span></div><div class="line">  </div><div class="line">c.back() <span class="comment">//返回最后一个元素，不检查最后一个元素是否存在</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="迭代器相关函数"><a href="#迭代器相关函数" class="headerlink" title="迭代器相关函数"></a>迭代器相关函数</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">c.begin() <span class="comment">//返回一个随机存取迭代器，指向第一个元素  </span></div><div class="line">  </div><div class="line">c.end() <span class="comment">//返回一个随机存取迭代器，指向最后一个元素  </span></div><div class="line">  </div><div class="line">c.cbegin() <span class="comment">//返回一个随机存取常迭代器，指向第一个元素  </span></div><div class="line">  </div><div class="line">c.cend() <span class="comment">//返回一个随机存取常迭代器，指向最后一个元素  </span></div><div class="line">  </div><div class="line">c.rbegin() <span class="comment">//返回一个逆向迭代器，指向逆向迭代的第一个元素  </span></div><div class="line">  </div><div class="line">c.rend() <span class="comment">//返回一个逆向迭代器，指向逆向迭代的最后一个元素  </span></div><div class="line">  </div><div class="line">c.crbegin() <span class="comment">//返回一个逆向常迭代器，指向逆向迭代的第一个元素  </span></div><div class="line">  </div><div class="line">c.crend() <span class="comment">//返回一个逆向常迭代器，指向逆向迭代的最后一个元素</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="移除和插入元素"><a href="#移除和插入元素" class="headerlink" title="移除和插入元素"></a>移除和插入元素</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">c.push_back(elem) <span class="comment">//在末尾添加一个elem副本  </span></div><div class="line">  </div><div class="line">c.pop_back() <span class="comment">//移除末尾元素（但不回传）  </span></div><div class="line">  </div><div class="line">c.insert(pos,elem) <span class="comment">//在迭代器位置前面插入一个elem副本，并返回新元素的位置  </span></div><div class="line">  </div><div class="line">c.insert(pos,n,elem)</div><div class="line"><span class="comment">//在迭代器位置前面插入n个elem副本，并返回第一个</span></div><div class="line"><span class="comment">//新元素的位置；若无新插入值，返回原位置  </span></div><div class="line">  </div><div class="line">c.insert(pos,beg,end) <span class="comment">//在迭代器位置前面插入范围beg到end的所有元素的副本，</span></div><div class="line"><span class="comment">//并返回第一个新元素的位置；若无新插入值，返回原位置  </span></div><div class="line">  </div><div class="line">c.insert(pos,initlist) <span class="comment">//在迭代器位置前面插入初始化列表的所有元素的副本，</span></div><div class="line"><span class="comment">//并返回第一个新元素的位置；若无新插入值，返回原位置  </span></div><div class="line">  </div><div class="line">c.emplace(pos,args...) <span class="comment">//在迭代器位置前面插入一个使用args初始化的元素副本，</span></div><div class="line"><span class="comment">//并返回新元素的位置  </span></div><div class="line">  </div><div class="line">c.emplace_back(args...) <span class="comment">//在末尾添加一个使用args初始化的元素副本，无返回值  </span></div><div class="line">  </div><div class="line">c.erase(pos) <span class="comment">//移除迭代器位置的元素，并返回下个元素的位置  </span></div><div class="line">  </div><div class="line">c.erase(beg,end) </div><div class="line"><span class="comment">//移除beg到end范围内的所有元素，并返回下个元素的位置  </span></div><div class="line">  </div><div class="line">c.resize(num) </div><div class="line"><span class="comment">//将元素数量设为num（如果size()增大，多出来的元素</span></div><div class="line"><span class="comment">//使用默认构造函数创建）  </span></div><div class="line">  </div><div class="line">c.resize(num,elem) <span class="comment">//将元素数量设为num（如果size()增大，多出来的元素都是elem的副本）  </span></div><div class="line">  </div><div class="line">c.clear() <span class="comment">//移除所以元素，清空容器</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </div><div class="line">  <span class="comment">//构造两个vector  </span></div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c;  </div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c1;  </div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c2;  </div><div class="line">  <span class="comment">//在尾部插入元素  </span></div><div class="line">  c.push_back(<span class="number">1</span>);  </div><div class="line">  c.push_back(<span class="number">2</span>);  </div><div class="line">  c.push_back(<span class="number">3</span>);  </div><div class="line">  c.push_back(<span class="number">4</span>);  </div><div class="line">  c.push_back(<span class="number">5</span>);  </div><div class="line">  c1=c;<span class="comment">//将c赋值给c1  </span></div><div class="line">  c2=c1;<span class="comment">//将c1赋值给c2  </span></div><div class="line">  <span class="comment">//输出两个集合的大小，验证赋值操作  </span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"c=%d  c1=%d\n"</span>,c.size(),c1.size());  </div><div class="line">  c1.clear();<span class="comment">//清除所有元素  </span></div><div class="line">  c1.~<span class="built_in">vector</span>();<span class="comment">//将所有元素销毁并释放内存  </span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"最大容量=%d\n"</span>,c.max_size());</div><div class="line">  <span class="comment">//返回可容纳的元素的最大容量  </span></div><div class="line">  </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.size();i++)&#123;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"赋值前%d= %d\n"</span>,i,c.at(i));  </div><div class="line">  &#125;  </div><div class="line">  c.assign(<span class="number">1</span>,<span class="number">12</span>);<span class="comment">//将c的第一个元素赋值为12  </span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.size();i++)&#123;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"赋值后%d= %d\n"</span>,i,c.at(i));  </div><div class="line">  &#125;  </div><div class="line">  c.push_back(<span class="number">1</span>);  </div><div class="line">  c.push_back(<span class="number">2</span>);  </div><div class="line">  c.push_back(<span class="number">3</span>);  </div><div class="line">  c.push_back(<span class="number">4</span>);  </div><div class="line">  c.push_back(<span class="number">5</span>);  </div><div class="line">  <span class="comment">//返回索引所对应的元素  </span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"索引是0的元素=%d\n"</span>,c[<span class="number">0</span>]);  </div><div class="line">  <span class="comment">//返回第一个元素  </span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"第一个元素=%d\n"</span>,c.front());  </div><div class="line">  <span class="comment">//返回最后一个元素  </span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"最后一个元素=%d\n"</span>,c.back());  </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.size();i++)&#123;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"插入前%d= %d\n"</span>,i,c.at(i));  </div><div class="line">  &#125;  </div><div class="line">  <span class="comment">//插入元素,在第一个位置之前  </span></div><div class="line">  c.insert(c.begin(),<span class="number">10</span>);  </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.size();i++)&#123;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"插入后%d= %d\n"</span>,i,c.at(i));  </div><div class="line">  &#125;  </div><div class="line">  <span class="comment">//删除第一个元素  </span></div><div class="line">  c.erase(c.begin());  </div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.size();i++)&#123;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"删除第一个元素%d= %d\n"</span>,i,c.at(i));  </div><div class="line">  &#125;  </div><div class="line">  c.erase(c.begin(),c.begin()+<span class="number">2</span>);  </div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.size();i++)&#123;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"删除第一和二个元素%d= %d\n"</span>,i,c.at(i));  </div><div class="line">  &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++ string类型详解]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/02/C++/C++string%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<ul>
<li><p>string是非常强大的类型，很好的封装了字符串的操作，有些时候我们可以把string当做字符的容器，string也支持大多数容器操作，下面就列出string类型所支持的所有操作，本文并不是为了讲解string的用法和应用，而是希望作为string类型的参考文档，每个函数皆在注释后有详细说明，需要用时查阅即可</p>
</li>
<li><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span>();<span class="comment">//空串  </span></div><div class="line">  </div><div class="line"><span class="built_in">string</span>(size_type length,<span class="keyword">char</span> ch);</div><div class="line"><span class="comment">//以length为长度的ch的拷贝（即length个ch）  </span></div><div class="line">  </div><div class="line"><span class="built_in">string</span>(<span class="keyword">const</span> <span class="keyword">char</span> *str);<span class="comment">//以str为初值 (长度任意)  </span></div><div class="line">  </div><div class="line"><span class="built_in">string</span>(<span class="keyword">const</span> <span class="keyword">char</span> *str,size_type length);</div><div class="line"><span class="comment">//同上，长度不限，但注意不要越界，以免发生不可预知问题  </span></div><div class="line">  </div><div class="line"><span class="built_in">string</span>(<span class="built_in">string</span> &amp;str, size_type index, size_type length);  </div><div class="line"><span class="comment">//以index为索引开始的子串，长度为length, 或者小于length  </span></div><div class="line">  </div><div class="line"><span class="built_in">string</span>(input_iterator begin, input_iterator end);</div><div class="line"><span class="comment">//以从start到end的元素为初值</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><h3 id="支持的操作符"><a href="#支持的操作符" class="headerlink" title="支持的操作符"></a>支持的操作符</h3></li>
</ul>
<center><img src="http://7xstki.com1.z0.glb.clouddn.com/hexo%E5%8D%9A%E5%AE%A2c++string%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3%E5%9B%BE%E7%89%87.png" alt=""></center>

<ul>
<li><h3 id="追加文本（append）"><a href="#追加文本（append）" class="headerlink" title="追加文本（append）"></a>追加文本（append）</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function">basic_string &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> basic_string &amp;str)</span></span>;</div><div class="line"><span class="comment">//在字符串的末尾添加str  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</div><div class="line"><span class="comment">//在字符串末尾添加str所指向的c风格字符串  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> basic_string &amp;str,size_type index,size_type len)</span></span>;  </div><div class="line"><span class="comment">//在字符串的末尾添加str的子串,子串以index索引开始，长度为len  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str,size_type num)</span></span>;</div><div class="line"><span class="comment">//在字符串的末尾添加str中的num个字符  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">append</span><span class="params">(size_type num,<span class="keyword">char</span> ch)</span></span>;</div><div class="line"><span class="comment">//在字符串的末尾添加num个字符ch  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">append</span><span class="params">(input_iterator start,input_iterator end)</span></span>;  </div><div class="line"><span class="comment">//在字符串的末尾添加以迭代器start和end表示的字符序列  </span></div><div class="line">  </div><div class="line">push_back(<span class="string">'k'</span>);</div><div class="line"><span class="comment">//把一个字符连接到当前字符串的结尾</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="赋值（assign"><a href="#赋值（assign" class="headerlink" title="赋值（assign)"></a>赋值（assign)</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function">basic_string &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> basic_string &amp;str)</span></span>;</div><div class="line"><span class="comment">//用str为字符串赋值  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</div><div class="line"><span class="comment">//用str c风格为字符串赋值  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str,size_type num)</span></span>;</div><div class="line"><span class="comment">//用str的开始num个字符为字符串赋值  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> basic_string &amp;str,size_type index,size_type len)</span></span>;  </div><div class="line"><span class="comment">//用str的子串为字符串赋值,子串以index索引开始，长度为len  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">assign</span><span class="params">(size_type num,<span class="keyword">char</span> ch)</span></span>;</div><div class="line"><span class="comment">//用num个字符ch为字符串赋值  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">assign</span><span class="params">(const_iterator begin,const_itertor end)</span></span>;  </div><div class="line"><span class="comment">//把first和last迭代器之间的部分赋给字符串</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="比较（compare）"><a href="#比较（compare）" class="headerlink" title="比较（compare）"></a>比较（compare）</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> basic_string &amp;str)</span></span>;<span class="comment">//比较自己和str  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(size_type index,size_type length,</span></span></div><div class="line"><span class="keyword">const</span> basic_string &amp;str);  </div><div class="line"><span class="comment">//比较自己的子串和str,子串以index索引开始，长度为length  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(size_type index,size_type length,</span></span></div><div class="line"><span class="keyword">const</span> basic_string &amp;str,size_type  index2,</div><div class="line">size_type length2);  </div><div class="line"><span class="comment">//比较自己的子串和str的子串，其中index2</span></div><div class="line"><span class="comment">//和length2引用str，index和length引用自己  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;<span class="comment">//比较自己和str  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n,<span class="keyword">const</span> <span class="keyword">char</span> *s)</span>  </span></div><div class="line"><span class="comment">//比较自己的子串，从pos开始，n个字符，和s进行比较  </span></div><div class="line">  </div><div class="line"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(size_type index,size_type length</span></div><div class="line">,<span class="keyword">const</span> <span class="keyword">char</span> *str,size_type length2);  </div><div class="line"><span class="comment">//比较自己的子串和str的子串，其中str的</span></div><div class="line"><span class="comment">//子串以索引0开始，长度为length2，自己的子串  </span></div><div class="line"><span class="comment">//以index开始，长度为length</span></div></pre></td></tr></table></figure>
<center><img src="http://7xstki.com1.z0.glb.clouddn.com/hexo%E5%8D%9A%E5%AE%A2C++string%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3%E5%9B%BE%E7%89%87.png" alt=""></center>

<ul>
<li><h3 id="删除（erase）"><a href="#删除（erase）" class="headerlink" title="删除（erase）"></a>删除（erase）</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator first, iterator last)</span></span>;  </div><div class="line"><span class="comment">//删除[first，last）之间的所有字符，返回删除后迭代器的位置  </span></div><div class="line">  </div><div class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator it)</span></span>;</div><div class="line"><span class="comment">//删除it指向的字符，返回删除后迭代器的位置  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">erase</span><span class="params">(<span class="keyword">int</span> pos = <span class="number">0</span>, <span class="keyword">int</span> n = npos)</span></span>;</div><div class="line"><span class="comment">//删除pos开始的n个字符，返回修改后的字符串</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="插入（insert）"><a href="#插入（insert）" class="headerlink" title="插入（insert）"></a>插入（insert）</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator i,<span class="keyword">const</span> <span class="keyword">char</span> &amp;ch)</span></span>;</div><div class="line"><span class="comment">//在迭代器i表示的位置前面插入一个字符ch  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">insert</span><span class="params">(size_type index,<span class="keyword">const</span> basic_string &amp;str)</span></span>;</div><div class="line"><span class="comment">//在字符串的位置index插入字符串str  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">insert</span><span class="params">(size_type index,<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</div><div class="line"><span class="comment">//在字符串的位置index插入字符串str  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">insert</span><span class="params">(size_type index1,<span class="keyword">const</span> basic_string</span></span></div><div class="line">&amp;str,size_type index2,size_type num);  </div><div class="line"><span class="comment">//在字符串的位置index插入字符串str的子串(从index2开始，长num个字符)  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">insert</span><span class="params">(size_type index,</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str,size_type num);  </div><div class="line"><span class="comment">//在字符串的位置index插入字符串str的num个字符  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">insert</span><span class="params">(size_type index,size_type num,<span class="keyword">char</span> ch )</span></span>;  </div><div class="line"><span class="comment">//在字符串的位置index插入num个字符ch的拷贝  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator i,size_type num,<span class="keyword">const</span> <span class="keyword">char</span> &amp;ch)</span></span>;  </div><div class="line"><span class="comment">//在迭代器i表示的位置前面插入num个字符ch的拷贝  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator i,iterator begin,iterator end )</span></span>;  </div><div class="line"><span class="comment">//在迭代器i表示的位置前面插入一段字符，从start开始，以end结束</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="替换（replace）"><a href="#替换（replace）" class="headerlink" title="替换（replace）"></a>替换（replace）</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">(size_type index,size_type num</span></span></div><div class="line">,<span class="keyword">const</span> basic_string &amp;str);  </div><div class="line"><span class="comment">//用str中的num个字符替换本字符串中的字符,从index开始  </span></div><div class="line">  </div><div class="line">replace(size_type index1,size_type num1,</div><div class="line"><span class="keyword">const</span> basic_string &amp;str,size_type index2,size_type num2);  </div><div class="line"><span class="comment">//用str中的num2个字符（从index2开始）替换本字符串中的字符</span></div><div class="line"><span class="comment">//，从index1开始，最多num1个字符  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">(size_type index,size_type num,</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str);  </div><div class="line"><span class="comment">//用str中的num个字符（从index开始）替换本字符串中的字符  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">(size_type index,size_type num1,</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str,size_type num2);  </div><div class="line"><span class="comment">//用str中的num2个字符（从index2开始）替换本字符串</span></div><div class="line"><span class="comment">//中的字符，从index1开始，num1个字符  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">(size_type index,size_type num1,</span></span></div><div class="line">size_type num2,<span class="keyword">char</span> ch);  </div><div class="line"><span class="comment">//用num2个ch字符替换本字符串中的字符，从index开始，num1个字符  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">(iterator start,iterator end,</span></span></div><div class="line"><span class="keyword">const</span> basic_string &amp;str);  </div><div class="line"><span class="comment">//用str中的字符替换本字符串中的字符,迭代器start和end指示范围  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">(iterator start,iterator end,</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str);  </div><div class="line"><span class="comment">//用str替换本字符串中的内容,迭代器start和end指示范围  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">(iterator start,iterator end,</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str,size_type num );  </div><div class="line"><span class="comment">//用str中的num个字符替换本字符串中的内容,迭代器start和end指示范围  </span></div><div class="line">  </div><div class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">(iterator start,iterator end,</span></span></div><div class="line">size_type num,<span class="keyword">char</span> ch );  </div><div class="line"><span class="comment">//用num个ch字符替换本字符串中的内容，迭代器start和end指示范围</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">函数 find:  </div><div class="line">  </div><div class="line"><span class="function">size_type <span class="title">find</span><span class="params">( <span class="keyword">const</span> basic_string &amp;str, size_type index )</span></span>;  </div><div class="line"><span class="comment">//返回str在字符串中第一次出现的位置（从index开始查找）  </span></div><div class="line">  </div><div class="line"><span class="function">size_type <span class="title">find</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index )</span></span>;  </div><div class="line"><span class="comment">//返回str在字符串中第一次出现的位置（从index开始查找）  </span></div><div class="line">  </div><div class="line"><span class="function">size_type <span class="title">find</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index, </span></span></div><div class="line">size_type length );  </div><div class="line"><span class="comment">//返回str在字符串中第一次出现的位置（从index开始查找，长度为length）  </span></div><div class="line">  </div><div class="line"><span class="function">size_type <span class="title">find</span><span class="params">( <span class="keyword">char</span> ch, size_type index )</span></span>;  </div><div class="line"><span class="comment">//返回字符ch在字符串中第一次出现的位置（从index开始查找）  </span></div><div class="line">  </div><div class="line">  </div><div class="line">函数 find_first_of:查找在字符串中第一个与str中的某个字符匹配的字符  </div><div class="line">  </div><div class="line">    <span class="function">size_type <span class="title">find_first_of</span><span class="params">( <span class="keyword">const</span> basic_string &amp;str, size_type index = <span class="number">0</span>)</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function">size_type <span class="title">find_first_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index = <span class="number">0</span> )</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function">size_type <span class="title">find_first_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index, size_type num )</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function">size_type <span class="title">find_first_of</span><span class="params">( <span class="keyword">char</span> ch, size_type index = <span class="number">0</span> )</span></span>;  </div><div class="line">  </div><div class="line">函数 find_first_not_of:在字符串中查找第一个与str中的字符都不匹配的字符  </div><div class="line">  </div><div class="line">    <span class="function">size_type <span class="title">find_first_not_of</span><span class="params">( <span class="keyword">const</span> basic_string &amp;str, size_type index = <span class="number">0</span> )</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function">size_type <span class="title">find_first_not_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index = <span class="number">0</span> )</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function">size_type <span class="title">find_first_not_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index, size_type num )</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function">size_type <span class="title">find_first_not_of</span><span class="params">( <span class="keyword">char</span> ch, size_type index = <span class="number">0</span> )</span></span>;  </div><div class="line">  </div><div class="line">函数 find_last_of:在字符串中查找最后一个与str中的某个字符匹配的字符  </div><div class="line">  </div><div class="line">  <span class="function">size_type <span class="title">find_last_of</span><span class="params">( <span class="keyword">const</span> basic_string &amp;str, size_type index = npos )</span></span>;  </div><div class="line">  </div><div class="line">  <span class="function">size_type <span class="title">find_last_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index = npos )</span></span>;  </div><div class="line">  </div><div class="line">  <span class="function">size_type <span class="title">find_last_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index, size_type num )</span></span>;  </div><div class="line">  </div><div class="line">  <span class="function">size_type <span class="title">find_last_of</span><span class="params">( <span class="keyword">char</span> ch, size_type index = npos )</span></span>;  </div><div class="line">  </div><div class="line">函数 find_last_not_of:在字符串中查找最后一个与str中的字符都不匹配的字符  </div><div class="line">  </div><div class="line">    <span class="function">size_type <span class="title">find_last_not_of</span><span class="params">( <span class="keyword">const</span> basic_string &amp;str, size_type index = npos )</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function">size_type <span class="title">find_last_not_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index = npos)</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function">size_type <span class="title">find_last_not_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index, size_type num )</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function">size_type <span class="title">find_last_not_of</span><span class="params">( <span class="keyword">char</span> ch, size_type index = npos )</span></span>;  </div><div class="line">  </div><div class="line">rfind函数  </div><div class="line">  </div><div class="line">  <span class="function">size_type <span class="title">rfind</span><span class="params">( <span class="keyword">const</span> basic_string &amp;str, size_type index )</span></span>;  </div><div class="line">  <span class="comment">//返回最后一个与str中的某个字符匹配的字符，从index开始查找  </span></div><div class="line">  </div><div class="line">  <span class="function">size_type <span class="title">rfind</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index )</span></span>;  </div><div class="line">  <span class="comment">//返回最后一个与str中的某个字符匹配的字符，从index开始查找  </span></div><div class="line">  </div><div class="line">  <span class="function">size_type <span class="title">rfind</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index, </span></span></div><div class="line">  size_type num );  </div><div class="line">  <span class="comment">//返回最后一个与str中的某个字符匹配的字符，从index开始查找,最多查找num个字符  </span></div><div class="line">  </div><div class="line">  <span class="function">size_type <span class="title">rfind</span><span class="params">( <span class="keyword">char</span> ch, size_type index )</span></span>;  </div><div class="line">  <span class="comment">//返回最后一个与ch匹配的字符，从index开始查找</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">at函数  </div><div class="line">     <span class="function">reference <span class="title">at</span><span class="params">( size_type index )</span></span>;  </div><div class="line">     <span class="comment">//at()函数返回一个引用，指向在index位置的字符. 如果index  </span></div><div class="line">     <span class="comment">//不在字符串范围内, at() 将报告"out of range"错误，并抛出out_of_range异常  </span></div><div class="line">  </div><div class="line">begin函数  </div><div class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//begin()函数返回一个迭代器,指向字符串的第一个元素  </span></div><div class="line">  </div><div class="line">end函数  </div><div class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//返回一个迭代器，指向字符串的末尾(最后一个字符的下一个位置)  </span></div><div class="line">  </div><div class="line">c_str函数  </div><div class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">c_str</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//返回一个指向正规C字符串的指针, 内容与本字符串相同  </span></div><div class="line">  </div><div class="line">capacity函数  </div><div class="line">    <span class="function">size_type <span class="title">capacity</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//返回在重新申请更多的空间前字符串可以  </span></div><div class="line">    <span class="comment">//容纳的字符数. 这个数字至少与 size()一样大  </span></div><div class="line">  </div><div class="line">copy函数  </div><div class="line">    <span class="function">size_type <span class="title">copy</span><span class="params">( <span class="keyword">char</span> *str, size_type num, size_type index )</span></span>;  </div><div class="line">    <span class="comment">//拷贝自己的num个字符到str中（从索引index开始）。返回值是拷贝的字符数  </span></div><div class="line">  </div><div class="line">data函数  </div><div class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">data</span><span class="params">()</span></span>;<span class="comment">//返回指向自己的第一个字符的指针  </span></div><div class="line">  </div><div class="line">empty函数  </div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//如果字符串为空则empty()返回真(true)，否则返回假(false)  </span></div><div class="line">  </div><div class="line">get_allocator函数  </div><div class="line">    <span class="function">allocator_type <span class="title">get_allocator</span><span class="params">()</span></span>;<span class="comment">//返回本字符串的配置器  </span></div><div class="line">  </div><div class="line">length函数  </div><div class="line">    <span class="function">size_type <span class="title">length</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//返回字符串的长度. 这个数字应该和size()返回的数字相同  </span></div><div class="line">  </div><div class="line"><span class="function">max_size  </span></div><div class="line">    size_type <span class="title">max_size</span><span class="params">()</span>;<span class="comment">//返回字符串能保存的最大字符数  </span></div><div class="line">  </div><div class="line">rbegin函数  </div><div class="line">    rbegin();<span class="comment">//返回一个逆向迭代器，指向最后一个字符  </span></div><div class="line">  </div><div class="line">rend函数  </div><div class="line">    rend();</div><div class="line">    <span class="comment">//返回一个逆向迭代器，指向第一个元素的前一个位置  </span></div><div class="line">  </div><div class="line">reserve函数  </div><div class="line">    reserve( size_type num );</div><div class="line">    <span class="comment">//保留一定容量以容纳字符串（设置capacity值）  </span></div><div class="line">  </div><div class="line">resize函数  </div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">( size_type num )</span></span>;</div><div class="line">  <span class="comment">//改变本字符串的大小到num, 新空间的内容不确定  </span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">( size_type num, <span class="keyword">char</span> ch )</span></span>;</div><div class="line">  <span class="comment">//也可以指定用ch填充  </span></div><div class="line">  </div><div class="line">size函数  </div><div class="line">    size();<span class="comment">//返回字符串中字符的数量  </span></div><div class="line">  </div><div class="line">substr函数  </div><div class="line">     <span class="function">basic_string <span class="title">substr</span><span class="params">( size_type index, size_type num = npos )</span></span>;  </div><div class="line">     <span class="comment">//返回本字符串的一个子串，从index开始，</span></div><div class="line">     <span class="comment">//长num个字符。如果没有指定，  </span></div><div class="line">     <span class="comment">//将是默认值 string::npos。这样，</span></div><div class="line">     <span class="comment">//substr()函数将简单的返回从index开始的剩余的字符串  </span></div><div class="line">  </div><div class="line">swap函数  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">( basic_string &amp;str )</span></span>;<span class="comment">//把str和本字符串交换</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </div><div class="line">    <span class="comment">//1.string类重载运算符operator&gt;&gt;用于输入，</span></div><div class="line">    <span class="comment">//同样重载运算符operator&lt;&lt;用于输出操作  </span></div><div class="line">    <span class="built_in">string</span> str1;  </div><div class="line">    <span class="built_in">cin</span> &gt;&gt; str1;<span class="comment">//当用cin&gt;&gt;进行字符串的输入的时候，</span></div><div class="line">    <span class="comment">//遇到空格的地方就停止字符串的读取输入  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="built_in">cin</span>.get();<span class="comment">//这个的作用就是读取cin&gt;&gt;输入的结束符，</span></div><div class="line">    <span class="comment">//不用对getline的输入产生影响！  </span></div><div class="line">    getline(<span class="built_in">cin</span>, str1);<span class="comment">//字符串的行输入  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//2.string类的构造函数  </span></div><div class="line">    <span class="built_in">string</span> str2 = <span class="string">"aaaaa"</span>;<span class="comment">//最简单的字符串初始化  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str2 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">char</span> *s = <span class="string">"bbbbb"</span>;  </div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">str3</span><span class="params">(s)</span></span>;<span class="comment">//用c字符串s初始化  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str3 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">char</span> ch = <span class="string">'c'</span>;  </div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">str4</span><span class="params">(<span class="number">5</span>, ch)</span></span>;<span class="comment">//用n个字符ch初始化  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str4 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//3.string类的字符操作  </span></div><div class="line">    <span class="built_in">string</span> str5 = <span class="string">"abcde"</span>;  </div><div class="line">    ch = str5[<span class="number">3</span>];<span class="comment">//operator[]返回当前字符串中第n个字符的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="built_in">string</span> str6 = <span class="string">"abcde"</span>;  </div><div class="line">    ch = str6.at(<span class="number">4</span>);</div><div class="line">    <span class="comment">//at()返回当前字符串中第n个字符的位置,</span></div><div class="line">    <span class="comment">//并且提供范围检查，当越界时会抛出异常！  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//4.string的特性描述  </span></div><div class="line">    <span class="built_in">string</span> str7 = <span class="string">"abcdefgh"</span>;  </div><div class="line">    <span class="keyword">int</span> size;  </div><div class="line">    size = str7.capacity();<span class="comment">//返回当前容量  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; size &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    size = str7.max_size();</div><div class="line">    <span class="comment">//返回string对象中可存放的最大字符串的长度  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; size &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    size = str7.size();<span class="comment">//返回当前字符串的大小  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; size &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    size = str7.length();<span class="comment">//返回当前字符串的长度  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; size &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="keyword">bool</span> flag;  </div><div class="line">    flag = str7.empty();<span class="comment">//判断当前字符串是否为空  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="keyword">int</span> len = <span class="number">10</span>;  </div><div class="line">    str7.resize(len, ch);</div><div class="line">    <span class="comment">//把字符串当前大小置为len，并用字符ch填充不足的部分  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str7 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//5.string的赋值  </span></div><div class="line">    <span class="built_in">string</span> str8;  </div><div class="line">    str8 = str7;<span class="comment">//把字符串str7赋给当前字符串  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str8 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str8.assign(str7);<span class="comment">//把字符串str7赋给当前字符串  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str8 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str8.assign(s);<span class="comment">//用c类型字符串s赋值  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str8 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str8.assign(s, <span class="number">2</span>);<span class="comment">//用c类型字符串s开始的n个字符赋值  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str8 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str8.assign(len, ch);<span class="comment">//用len个字符ch赋值给当前字符串  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str8 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str8.assign(str7, <span class="number">0</span>, <span class="number">3</span>);<span class="comment">//把字符串str7中从0开始的3个字符赋给当前字符串  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str8 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="built_in">string</span> str9 = <span class="string">"0123456789"</span>;  </div><div class="line">    str8.assign(str9.begin(), str9.end());<span class="comment">//把迭代器之间的字符赋给字符串  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str8 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//6.string的连接  </span></div><div class="line">    <span class="built_in">string</span> str10;  </div><div class="line">    str10 += str9;<span class="comment">//把字符串str9连接到当前字符串的结尾  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str10 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str10.append(s);<span class="comment">//把c类型字符串s连接到当前字符串的结尾  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str10 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str10.append(s, <span class="number">2</span>);</div><div class="line">    <span class="comment">//把c类型字符串s的前2个字符连接到当前字符串的结尾  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str10 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str10.append(str9.begin(), str9.end());</div><div class="line">    <span class="comment">//把迭代器之间的一段字符连接到当前字符串的结尾  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str10 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str10.push_back(<span class="string">'k'</span>);<span class="comment">//把一个字符连接到当前字符串的结尾  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str10 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//7.string的比较  </span></div><div class="line">    flag = (str9 == str10);<span class="comment">//判断两个字符串是否相等  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    flag = (str9 != str10);<span class="comment">//判断两个字符串是否不相等  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    flag = (str9 &gt; str10);<span class="comment">//判断两个字符串是否大于关系  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    flag = (str9 &lt; str10);<span class="comment">//判断两个字符串是否为小于关系  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    flag = (str9 &gt;= str10);<span class="comment">//判断两个字符串是否为大于等于关系  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    flag = (str9 &lt;= str10);<span class="comment">//判断两个字符串否为小于等于关系  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//以下的3个函数同样适用于c类型的字符串，</span></div><div class="line">    <span class="comment">//在compare函数中&gt;时返回1，&lt;时返回-1，=时返回0  </span></div><div class="line">    flag = str10.compare(str9);</div><div class="line">    <span class="comment">//比较两个字符串的大小，通过ASCII的相减得出！  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    flag = str10.compare(<span class="number">6</span>, <span class="number">12</span>, str9);</div><div class="line">    <span class="comment">//比较str10字符串从6开始的12个字符组成的字符串与str9的大小  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    flag = str10.compare(<span class="number">6</span>, <span class="number">12</span>, str9, <span class="number">3</span>, <span class="number">5</span>);</div><div class="line">    <span class="comment">//比较str10字符串从6开始的12个字符组成的字符串</span></div><div class="line">    <span class="comment">//与str9字符串从3开始的5个字符组成的字符串的大小  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//8.string的字串  </span></div><div class="line">    <span class="built_in">string</span> str11;  </div><div class="line">    str11 = str10.substr(<span class="number">10</span>, <span class="number">15</span>);</div><div class="line">    <span class="comment">//返回从下标10开始的15个字符组成的字符串  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str11 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//9.string的交换  </span></div><div class="line">    str11.swap(str10);<span class="comment">//交换str11与str10的值  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str11 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//10.string的查找，查找成功时返回所在位置，</span></div><div class="line">    <span class="comment">//失败时返回string::npos的值，即是-1  </span></div><div class="line">    <span class="built_in">string</span> str12 = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span>;  </div><div class="line">    <span class="keyword">int</span> pos;  </div><div class="line">    pos = str12.find(<span class="string">'i'</span>, <span class="number">0</span>);</div><div class="line">    <span class="comment">//从位置0开始查找字符i在当前字符串的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str12.find(<span class="string">"ghijk"</span>, <span class="number">0</span>);</div><div class="line">    <span class="comment">//从位置0开始查找字符串“ghijk”在当前字符串的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str12.find(<span class="string">"opqrstuvw"</span>, <span class="number">0</span>, <span class="number">4</span>);</div><div class="line">    <span class="comment">//从位置0开始查找字符串“opqrstuvw”前4个字符</span></div><div class="line">    <span class="comment">//组成的字符串在当前字符串中的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str12.rfind(<span class="string">'s'</span>, <span class="built_in">string</span>::npos);</div><div class="line">    <span class="comment">//从字符串str12反向开始查找字符s在字符串中的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str12.rfind(<span class="string">"klmn"</span>, <span class="built_in">string</span>::npos);</div><div class="line">    <span class="comment">//从字符串str12反向开始查找字符串“klmn”在字符串中的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str12.rfind(<span class="string">"opqrstuvw"</span>, <span class="built_in">string</span>::npos, <span class="number">3</span>);</div><div class="line">    <span class="comment">//从string::pos开始从后向前查找字符串s中前n个字符</span></div><div class="line">    <span class="comment">//组成的字符串在当前串中的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="built_in">string</span> str13 = <span class="string">"aaaabbbbccccdddeeefffggghhhiiijjjkkllmmmandjfaklsdfpopdtwptioczx"</span>;  </div><div class="line">    pos = str13.find_first_of(<span class="string">'d'</span>, <span class="number">0</span>);</div><div class="line">    <span class="comment">//从位置0开始查找字符d在当前字符串第一次出现的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str13.find_first_of(<span class="string">"eefff"</span>, <span class="number">0</span>);</div><div class="line">    <span class="comment">//从位置0开始查找字符串“eeefff“在当前字符串中第一次出现的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str13.find_first_of(<span class="string">"efff"</span>, <span class="number">0</span>, <span class="number">3</span>);</div><div class="line">    <span class="comment">//从位置0开始查找当前串中第一个在字符串”efff“的</span></div><div class="line">    <span class="comment">//前3个字符组成的数组里的字符的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str13.find_first_not_of(<span class="string">'b'</span>, <span class="number">0</span>);</div><div class="line">    <span class="comment">//从当前串中查找第一个不在串s中的字符出现的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str13.find_first_not_of(<span class="string">"abcdefghij"</span>, <span class="number">0</span>);</div><div class="line">    <span class="comment">//从当前串中查找第一个不在串s中的字符出现的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str13.find_first_not_of(<span class="string">"abcdefghij"</span>, <span class="number">0</span>, <span class="number">3</span>);</div><div class="line">    <span class="comment">//从当前串中查找第一个不在由字符串”abcdefghij”的</span></div><div class="line">    <span class="comment">//前3个字符所组成的字符串中的字符出现的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="comment">//下面的last的格式和first的一致，只是它从后面检索！  </span></div><div class="line">    pos = str13.find_last_of(<span class="string">'b'</span>, <span class="built_in">string</span>::npos);  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str13.find_last_of(<span class="string">"abcdef"</span>, <span class="built_in">string</span>::npos);  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str13.find_last_of(<span class="string">"abcdef"</span>, <span class="built_in">string</span>::npos, <span class="number">2</span>);  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str13.find_last_not_of(<span class="string">'a'</span>, <span class="built_in">string</span>::npos);  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str13.find_last_not_of(<span class="string">"abcdef"</span>, <span class="built_in">string</span>::npos);  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    pos = str13.find_last_not_of(<span class="string">"abcdef"</span>, <span class="built_in">string</span>::npos, <span class="number">3</span>);  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//11.string的替换  </span></div><div class="line">    <span class="built_in">string</span> str14 = <span class="string">"abcdefghijklmn"</span>;  </div><div class="line">    str14.replace(<span class="number">0</span>, <span class="number">3</span>, <span class="string">"qqqq"</span>);</div><div class="line">    <span class="comment">//删除从0开始的3个字符，然后在0处插入字符串“qqqq”  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str14 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str14.replace(<span class="number">0</span>, <span class="number">3</span>, <span class="string">"vvvv"</span>, <span class="number">2</span>);</div><div class="line">    <span class="comment">//删除从0开始的3个字符，然后在0处插入字符串“vvvv”的前2个字符  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str14 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str14.replace(<span class="number">0</span>, <span class="number">3</span>, <span class="string">"opqrstuvw"</span>, <span class="number">2</span>, <span class="number">4</span>);</div><div class="line">    <span class="comment">//删除从0开始的3个字符，然后在0处插入</span></div><div class="line">    <span class="comment">//字符串“opqrstuvw”从位置2开始的4个字符  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str14 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str14.replace(<span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="string">'c'</span>);</div><div class="line">    <span class="comment">//删除从0开始的3个字符，然后在0处插入8个字符 c  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str14 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="comment">//上面的位置可以换为迭代器的位置，操作是一样的，</span></div><div class="line">    <span class="comment">//在这里就不再重复了！  </span></div><div class="line">  </div><div class="line">    <span class="comment">//12.string的插入，下面的位置处亦可以用迭代器</span></div><div class="line">    <span class="comment">//的指针表示，操作是一样的  </span></div><div class="line">    <span class="built_in">string</span> str15 = <span class="string">"abcdefg"</span>;  </div><div class="line">    str15.insert(<span class="number">0</span>, <span class="string">"mnop"</span>);<span class="comment">//在字符串的0位置开始处，插入字符串“mnop”  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str15 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str15.insert(<span class="number">0</span>, <span class="number">2</span>, <span class="string">'m'</span>);</div><div class="line">    <span class="comment">//在字符串的0位置开始处，插入2个字符m  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str15 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str15.insert(<span class="number">0</span>, <span class="string">"uvwxy"</span>, <span class="number">3</span>);</div><div class="line">    <span class="comment">//在字符串的0位置开始处，插入字符串“uvwxy”中的前3个字符  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str15 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str15.insert(<span class="number">0</span>, <span class="string">"uvwxy"</span>, <span class="number">1</span>, <span class="number">2</span>);</div><div class="line">    <span class="comment">//在字符串的0位置开始处，插入从字符串“uvwxy”的1位置开始的2个字符  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str15 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//13.string的删除  </span></div><div class="line">    <span class="built_in">string</span> str16 = <span class="string">"gfedcba"</span>;  </div><div class="line">    <span class="built_in">string</span>::iterator it;  </div><div class="line">    it = str16.begin();  </div><div class="line">    it++;  </div><div class="line">    str16.erase(it);</div><div class="line">    <span class="comment">//删除it指向的字符，返回删除后迭代器的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str16 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str16.erase(it, it+<span class="number">3</span>);</div><div class="line">    <span class="comment">//删除it和it+3之间的所有字符，返回删除后迭代器的位置  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str16 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    str16.erase(<span class="number">2</span>);</div><div class="line">    <span class="comment">//删除从字符串位置3以后的所有字符，返回位置3前面的字符  </span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; str16 &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//14.字符串的流处理  </span></div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">str17</span><span class="params">(<span class="string">"hello,this is a test"</span>)</span></span>;  </div><div class="line">    <span class="function"><span class="built_in">istringstream</span> <span class="title">is</span><span class="params">(str17)</span></span>;  </div><div class="line">    <span class="built_in">string</span> s1,s2,s3,s4;  </div><div class="line">    is&gt;&gt;s1&gt;&gt;s2&gt;&gt;s3&gt;&gt;s4;</div><div class="line">    <span class="comment">//s1="hello,this",s2="is",s3="a",s4="test"  </span></div><div class="line">    <span class="built_in">ostringstream</span> os;  </div><div class="line">    os&lt;&lt;s1&lt;&lt;s2&lt;&lt;s3&lt;&lt;s4;  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;os.str() &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//system("pause");  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[装机软件清单]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/02/%E9%80%9A%E7%94%A8/%E8%A3%85%E6%9C%BA%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<h3 id="装机必备"><a href="#装机必备" class="headerlink" title="装机必备"></a>装机必备</h3><ul>
<li><p>暴风影音</p>
</li>
<li><p>蓝灯 <a href="http://pan.baidu.com/s/1c1AOJpm" target="_blank" rel="external">传送门</a>，密码: v9im</p>
</li>
<li><p>赛风3</p>
</li>
<li><p>网易云音乐</p>
</li>
<li><p>TGP</p>
</li>
<li><p>FSCapture（截屏软件，附带截色笔等）</p>
</li>
<li><p>mcool（小众化的音乐软件，内存占用极小）</p>
</li>
<li><p>WPS</p>
</li>
<li><p>迅雷破解版 <a href="http://pan.baidu.com/s/1c2sjjhQ" target="_blank" rel="external">传送门</a></p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>破解版百度云管家（下载地址：<a href="http://pan.baidu.com/s/1c2Z9H8" target="_blank" rel="external">传送门</a>）</p>
</li>
<li><p>Firefox</p>
</li>
<li><p>Chrome</p>
</li>
<li><p>Apowersoft录屏王</p>
</li>
<li><p>金山词霸</p>
</li>
<li><p>ADSafe</p>
</li>
<li><p>Avira Launcher（小红伞）</p>
</li>
<li><p>ScreenToGif 1.4.1（录制GIF图片）</p>
</li>
<li><p>艾奇视频电子相册制作软件<a href="http://pan.baidu.com/s/1miEUzfa" target="_blank" rel="external">传送门</a></p>
</li>
</ul>
<h3 id="编程相关"><a href="#编程相关" class="headerlink" title="编程相关"></a>编程相关</h3><ul>
<li><p>GitHub</p>
</li>
<li><p>cmd (markdown编辑软件)</p>
</li>
<li><p>Genymotion <a href="http://pan.baidu.com/s/1skWJGRV" target="_blank" rel="external">传送门</a></p>
</li>
<li><p>Oracle VM VirtualBox</p>
</li>
<li><p>phpStorm</p>
</li>
<li><p>codeblocks <a href="http://pan.baidu.com/s/1dED59mh" target="_blank" rel="external">传送门</a></p>
</li>
<li><p>eclipse</p>
</li>
<li><p>eclipseADT <a href="http://www.qiuchengjia.cn/2016/07/06/Android/Eclipse-Android-ADT-Bundle%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E5%92%8Cgenymotion%E6%8F%92%E4%BB%B6/">传送门</a></p>
</li>
<li><p>photoshop</p>
</li>
<li><p>Start Tor Browser（洋葱浏览器）</p>
</li>
<li><p>Android Studio</p>
</li>
<li><p>Xampp集成开发环境</p>
</li>
<li><p>putty（远程主机访问软件）</p>
</li>
<li><p>VMware </p>
</li>
<li><p>camtasia studio （屏幕录制软件，<a href="http://pan.baidu.com/s/1dEPFHD3" target="_blank" rel="external">传送门</a> ， 密码: 6dnm）</p>
</li>
<li><p>屏幕录像专家（屏幕录制软件，<a href="http://pan.baidu.com/s/1dED43G9" target="_blank" rel="external">传送门</a>，密码: 5pnj）</p>
</li>
</ul>
<h3 id="chrome插件"><a href="#chrome插件" class="headerlink" title="chrome插件"></a>chrome插件</h3><ul>
<li><p>不得不说，chrome真是一个让人惊喜的东西，我认为它不仅仅是一个浏览器，我有预感，chrome将会改变世界</p>
</li>
<li><p>Google Keep Chrome（记事本 <a href="https://chrome.google.com/webstore/detail/google-keep-chrome-extens/lpcaedmchfhocbbapmcbpinfpgnhiddi/related" target="_blank" rel="external">扩展程序</a>  <a href="https://chrome.google.com/webstore/detail/google-keep-notes-and-lis/hmjkmjkepdijhoojdojkdfohbdgmmhki?hl=zh-CN" target="_blank" rel="external">应用</a>）</p>
</li>
<li><p>黑色非金属主题 <a href="https://chrome.google.com/webstore/detail/black-metallic-theme/gbhhihkiaeeioepkklgfpdohnemkjcoi?hl=zh-CN" target="_blank" rel="external">传送门</a></p>
</li>
<li><p>vysor（PC控制Android设备的神器）</p>
</li>
<li><p>Full Page Screen Capture(截取整个屏幕 <a href="https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl?hl=zh-CN" target="_blank" rel="external">传送门</a>)</p>
</li>
<li><p>Google翻译 <a href="https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb?hl=zh-CN" target="_blank" rel="external">传送门</a></p>
</li>
<li><p>Downloads - Your Download Box（下载管理工具）<a href="https://chrome.google.com/webstore/detail/downloads-your-download-b/gjihnjejboipjmadkpmknccijhibnpfe?hl=zh-CN" target="_blank" rel="external">传送门</a></p>
</li>
<li><p>ABP（Adblock Plus）（广告屏蔽 <a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb?hl=zh-CN" target="_blank" rel="external">传送门</a>）</p>
</li>
<li><p>广告终结者 <a href="https://chrome.google.com/webstore/detail/%E5%B9%BF%E5%91%8A%E7%BB%88%E7%BB%93%E8%80%85/fpdnjdlbdmifoocedhkighhlbchbiikl?hl=zh-CN" target="_blank" rel="external">传送门</a></p>
</li>
<li><p>Google文档、表格及幻灯片的Office编辑 <a href="https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj" target="_blank" rel="external">传送门</a></p>
</li>
<li><p>印象笔记·剪藏 <a href="https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?hl=zh-CN" target="_blank" rel="external">传送门</a></p>
</li>
<li><p>锤子便签</p>
</li>
</ul>
<h3 id="firefox插件"><a href="#firefox插件" class="headerlink" title="firefox插件"></a>firefox插件</h3><ul>
<li><p>Full Web Page Screenshots（广告屏蔽 <a href="https://addons.mozilla.org/zh-CN/firefox/addon/fireshot/?src=userprofile" target="_blank" rel="external">传送门</a>）</p>
</li>
<li><p>firefox模仿chrome界面 <a href="http://firefoxfan.cc/firefox-theme/155.html" target="_blank" rel="external">传送门</a> </p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Style.xml的妙用]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/01/Android/Style.xml%E7%9A%84%E5%A6%99%E7%94%A8/</url>
      <content type="html"><![CDATA[<ul>
<li>Style.xml的妙用</li>
</ul>
<font color="RED">Style.xml之于Android犹如css之于Jsp</font>

<ul>
<li>妙用</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/sensor"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样的布局文件是很正常的。但是不如这样好</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">style</span>=<span class="string">"@style/all_match"</span>  </div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/sensor"</span>  </div><div class="line">        <span class="attr">style</span>=<span class="string">"@style/all_fill"</span> /&gt;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>省时省力，一眼还能看出是什么布局方式。只需要在Style.xml 中添加 这些代码即可</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"all_fill"</span> &gt;</span><span class="xml">  </span></div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>fill_parent<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>fill_parent<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"all_match"</span> &gt;</span><span class="xml">  </span></div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>match_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>match_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"width_fill"</span> &gt;</span><span class="xml">  </span></div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>fill_parent<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>match_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"height_fill"</span> &gt;</span><span class="xml">  </span></div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>match_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>fill_parent<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ linux下使用百度云以及酷我音乐]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/01/linux/linux%E4%B8%8B%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%E4%BA%91%E4%BB%A5%E5%8F%8A%E9%85%B7%E6%88%91%E9%9F%B3%E4%B9%90/</url>
      <content type="html"><![CDATA[<ul>
<li>软件包不是官方的,是第三方作者基于linux写的，<a href="https://github.com/LiuLang" target="_blank" rel="external">传送门</a></li>
</ul>
<ul>
<li>下面来两张效果图,很简洁,这种feel很不错.</li>
</ul>
<p><img src="http://img.blog.csdn.net/20160507214539611" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160507214545142" alt=""></p>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[矩阵--原地转置--面试题]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/01/%E7%9F%A9%E9%98%B5/%E7%9F%A9%E9%98%B5-%E5%8E%9F%E5%9C%B0%E8%BD%AC%E7%BD%AE-%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<ul>
<li><p>问题描述<br>  微软面试题：将一个MxN的矩阵存储在一个一维数组中，编程实现矩阵的转置<br>  要求：空间复杂度为O(1)</p>
</li>
<li><p>思路分析<br>  下面以一个4x2的矩阵A={1,2,3,4,5,6,7,8}进行分析，转置过程如下图：</p>
</li>
</ul>
<p><img src="http://img.blog.csdn.net/20140606173801500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>图中右下角的红色数字表示在一维数组中的下标。矩阵的转置其实就是数组中元素的移动，具体的移动过程如下图：</p>
<center><img src="http://img.blog.csdn.net/20140606173842187?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></center>

<a id="more"></a>
<p>我们发现，这些移动的元素的下标是一个个环，下标1的元素移动到4，下标4的元素移动到2，下标2的元素移动到1。在编写程序的时候，我们需要解决两个问题：第一个是如何判定环是否重复（已处理过）；第二个是如何计算当前元素下标的前驱与后继。<br>第一个问题：如何判断环是重复已处理过的？因为我们遍历整个数组时下标是从小到大的，所以如果是第一次遍历该环，则第一个下标肯定是这个环中最小的。如果一个环被处理过，那么总能找到一个它的后继是小于它的。从上图可以明显看出来。<br>第二个问题：如何计算当前元素下标的前驱与后继？假设转置前某个元素的数组下标为i，则它所在行列为（i/N, i%N），转置后所在行列则为（i%N, i/N），可计算转置后数组下标为(i%N)<em>M+i/N，此为i的后继。假设转置后某个元素的数组下标为i，则它所在行列为（i/M, i%M），则转置前所在行列为（i%M, i/M），可计算此时下标为(i%M)</em>N+i/M，此为i的前驱</p>
<ul>
<li>代码实现</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*************************************************************************  </span></div><div class="line">    &gt; File Name: matrix_transpose.cpp  </div><div class="line">    &gt; Author: SongLee  </div><div class="line">    &gt; E-mail: lisong.shine@qq.com  </div><div class="line">    &gt; Created Time: 2014年06月06日 星期五 14时26分15秒  </div><div class="line">    &gt; Personal Blog: http://songlee24.github.io  </div><div class="line"> ************************************************************************/    </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>    </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;    </div><div class="line">    </div><div class="line"><span class="comment">/* 后继 */</span>    </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNext</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;    </div><div class="line">    <span class="keyword">return</span> (i%n)*m + i/n;    </div><div class="line">&#125;    </div><div class="line">    </div><div class="line"><span class="comment">/* 前驱 */</span>    </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPre</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;    </div><div class="line">    <span class="keyword">return</span> (i%m)*n + i/m;    </div><div class="line">&#125;    </div><div class="line">    </div><div class="line"><span class="comment">/* 处理以下标i为起点的环 */</span>    </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">movedata</span><span class="params">(<span class="keyword">int</span> *mtx, <span class="keyword">int</span> i, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;    </div><div class="line">    <span class="keyword">int</span> temp = mtx[i];  <span class="comment">// 暂存    </span></div><div class="line">    <span class="keyword">int</span> cur = i;       <span class="comment">// 当前下标    </span></div><div class="line">    <span class="keyword">int</span> pre = getPre(cur, m, n);    </div><div class="line">    <span class="keyword">while</span>(pre != i)&#123;    </div><div class="line">        mtx[cur] = mtx[pre];    </div><div class="line">        cur = pre;    </div><div class="line">        pre = getPre(cur, m, n);    </div><div class="line">    &#125;    </div><div class="line">    mtx[cur] = temp;    </div><div class="line">&#125;    </div><div class="line">    </div><div class="line"><span class="comment">/* 转置，即循环处理所有环 */</span>    </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">transpose</span><span class="params">(<span class="keyword">int</span> *mtx, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m*n; ++i)&#123;    </div><div class="line">        <span class="keyword">int</span> next = getNext(i, m, n);    </div><div class="line">        <span class="keyword">while</span>(next &gt; i) <span class="comment">// 若存在后继小于i说明重复    </span></div><div class="line">            next = getNext(next, m, n);    </div><div class="line">        <span class="keyword">if</span>(next == i)   <span class="comment">// 处理当前环     </span></div><div class="line">            movedata(mtx, i, m, n);    </div><div class="line">    &#125;    </div><div class="line">&#125;    </div><div class="line">    </div><div class="line"><span class="comment">/* 输出矩阵 */</span>    </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> *mtx, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m*n; ++i)&#123;    </div><div class="line">        <span class="keyword">if</span>((i+<span class="number">1</span>)%n == <span class="number">0</span>)    </div><div class="line">            <span class="built_in">cout</span> &lt;&lt; mtx[i] &lt;&lt; <span class="string">"\n"</span>;    </div><div class="line">        <span class="keyword">else</span>    </div><div class="line">            <span class="built_in">cout</span> &lt;&lt; mtx[i] &lt;&lt; <span class="string">" "</span>;    </div><div class="line">    &#125;    </div><div class="line">&#125;    </div><div class="line">    </div><div class="line"><span class="comment">/* 测试 */</span>    </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;    </div><div class="line">    <span class="keyword">int</span> matrix[<span class="number">4</span>*<span class="number">2</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;    </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Before matrix transposition:"</span> &lt;&lt; <span class="built_in">endl</span>;    </div><div class="line">    print(matrix, <span class="number">4</span>, <span class="number">2</span>);    </div><div class="line">    transpose(matrix, <span class="number">4</span>, <span class="number">2</span>);    </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"After matrix transposition:"</span> &lt;&lt; <span class="built_in">endl</span>;    </div><div class="line">    print(matrix, <span class="number">2</span>, <span class="number">4</span>);    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>运行结果：</li>
</ul>
<center><img src="http://img.blog.csdn.net/20140606173940156?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></center>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[矩阵旋转]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/01/%E7%9F%A9%E9%98%B5/%E7%9F%A9%E9%98%B5%E6%97%8B%E8%BD%AC/</url>
      <content type="html"><![CDATA[<ul>
<li>顺时针翻转九十度</li>
</ul>
<p>举例：4*3矩阵A1，旋转90度，变成3×4矩阵A2</p>
<center><img src="http://img.blog.csdn.net/20140619150155343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhpZmVuZ3N1bg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">算法：</div><div class="line">m=<span class="number">4</span>，n=<span class="number">3</span>，i，j</div><div class="line"><span class="keyword">for</span>：i=<span class="number">0</span>, i&lt;n, i++</div><div class="line">    <span class="keyword">for</span>：j=<span class="number">0</span>, j&lt;m, j++</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20140619150208125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhpZmVuZ3N1bg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><font color="RED"> // 从下到上，从左到右读取A1的每一个元素</font></p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> a[<span class="number">4</span>][<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,  </div><div class="line">                   <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,  </div><div class="line">                   <span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,  </div><div class="line">                   <span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;  </div><div class="line">    <span class="keyword">int</span> b[<span class="number">3</span>][<span class="number">4</span>];  </div><div class="line">    <span class="keyword">int</span> m=<span class="number">4</span>,n=<span class="number">3</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;  </div><div class="line">           b[i][j]=a[m-j<span class="number">-1</span>][i];  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d ,"</span>,b[i][j]);  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">5</span>;  </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3</span>;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  这里是将矩阵顺时针翻转九十度， </div><div class="line">  这是阿里巴巴的一道笔试题 </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">  <span class="keyword">int</span> a[M][N] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>&#125;;  </div><div class="line">  <span class="keyword">int</span> *p = a[<span class="number">0</span>];  </div><div class="line">  </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; M;i++) <span class="comment">// M = 5  </span></div><div class="line">  &#123;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = N<span class="number">-1</span>;j &gt;= <span class="number">0</span>;j--) <span class="comment">// N = 3  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; *(p + i + j*M) &lt;&lt; <span class="string">","</span>; <span class="comment">// M = 5;  </span></div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">  &#125;  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>逆时针旋转九十度（就是顺时针旋转270度）<pre><code>从下到上，从左到右读取A1的每一个元素
</code></pre></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> a[<span class="number">4</span>][<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,  </div><div class="line">                   <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,  </div><div class="line">                   <span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,  </div><div class="line">                   <span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;  </div><div class="line">    <span class="keyword">int</span> b[<span class="number">3</span>][<span class="number">4</span>];  </div><div class="line">    <span class="keyword">int</span> m=<span class="number">4</span>,n=<span class="number">3</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;  </div><div class="line">           b[i][j]=a[j][n<span class="number">-1</span>-i];  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d ,"</span>,b[i][j]);  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>旋转一百八十度<pre><code>从下开始向左层次遍历
</code></pre></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">  </div><div class="line"><span class="comment">//从下开始层次遍历，从做到右  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> a[<span class="number">4</span>][<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,  </div><div class="line">                   <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,  </div><div class="line">                   <span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,  </div><div class="line">                   <span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;  </div><div class="line">    <span class="keyword">int</span> b[<span class="number">4</span>][<span class="number">3</span>];  </div><div class="line">    <span class="keyword">int</span> m=<span class="number">3</span>,n=<span class="number">4</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;  </div><div class="line">           b[i][j]=a[n-i<span class="number">-1</span>][m-j<span class="number">-1</span>];  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d ,"</span>,b[i][j]);  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[矩阵翻转]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/01/%E7%9F%A9%E9%98%B5/%E7%9F%A9%E9%98%B5%E7%BF%BB%E8%BD%AC/</url>
      <content type="html"><![CDATA[<ul>
<li><p>上下翻转</p>
<p>上下翻转的遍历顺序是从最下面一行开始从左到右遍历，如图：</p>
<center><img src="http://img.blog.csdn.net/20160423202405697?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

</li>
</ul>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  上下翻转， </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </div><div class="line">  <span class="keyword">int</span> M=<span class="number">4</span>,N=<span class="number">3</span>;  </div><div class="line">  <span class="keyword">int</span> temp=<span class="number">0</span>;  </div><div class="line">  <span class="keyword">int</span> matrix[<span class="number">4</span>][<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,  </div><div class="line">                      <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,  </div><div class="line">                      <span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,  </div><div class="line">                      <span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;  </div><div class="line">   <span class="built_in">printf</span>(<span class="string">"上下翻转之前\n"</span>);  </div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p1=<span class="number">0</span>;p1&lt;M;p1++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,matrix[p1][j]);  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;M/<span class="number">2</span>;p++)&#123;  </div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">0</span>;q&lt;N;q++)&#123;  </div><div class="line">                temp=matrix[p][q];  </div><div class="line">                matrix[p][q]=matrix[M-p<span class="number">-1</span>][q];  </div><div class="line">                matrix[M-p<span class="number">-1</span>][q]=temp;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"============华丽的分割线=============\n\n"</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"上下翻转之后\n"</span>);  </div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p1=<span class="number">0</span>;p1&lt;M;p1++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,matrix[p1][j]);  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>左右翻转<br> 原理差不多</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  左右翻转， </div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </div><div class="line">  <span class="keyword">int</span> M=<span class="number">4</span>,N=<span class="number">3</span>;  </div><div class="line">  <span class="keyword">int</span> temp=<span class="number">0</span>;  </div><div class="line">  <span class="keyword">int</span> matrix[<span class="number">4</span>][<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,  </div><div class="line">                      <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,  </div><div class="line">                      <span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,  </div><div class="line">                      <span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;  </div><div class="line">   <span class="built_in">printf</span>(<span class="string">"左右翻转之前\n"</span>);  </div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p1=<span class="number">0</span>;p1&lt;M;p1++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,matrix[p1][j]);  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;M;p++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">0</span>;q&lt;N/<span class="number">2</span>;q++)  </div><div class="line">            &#123;  </div><div class="line">                temp=matrix[p][q];  </div><div class="line">                matrix[p][q]=matrix[p][N-q<span class="number">-1</span>];  </div><div class="line">                matrix[p][N-q<span class="number">-1</span>]=temp;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"============华丽的分割线=============\n\n"</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"左右翻转之后\n"</span>);  </div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p1=<span class="number">0</span>;p1&lt;M;p1++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,matrix[p1][j]);  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS从php5.3升级到php5.5]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/01/linux/CentOS%E4%BB%8Ephp5-3%E5%8D%87%E7%BA%A7%E5%88%B0php5-5/</url>
      <content type="html"><![CDATA[<ul>
<li>首先检查php版本</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php  --version</div></pre></td></tr></table></figure>
<ul>
<li>增加 yum repository 以便下载php</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh http:<span class="comment">//mirror.webtatic.com/yum/el6/latest.rpm</span></div></pre></td></tr></table></figure>
<ul>
<li>安装php5.5</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install php55w php55w-opcache</div></pre></td></tr></table></figure>
<ul>
<li>为了升级取代原来5.3档案</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install yum-plugin-replace  </div><div class="line">  </div><div class="line">yum replace php-common --replace-with=php55w-common</div></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Excel数据大量导入MySQL--MySQL数据换行符回车符替换处理]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/01/MySQL/Excel%E6%95%B0%E6%8D%AE%E5%A4%A7%E9%87%8F%E5%AF%BC%E5%85%A5MySQL-MySQL%E6%95%B0%E6%8D%AE%E6%8D%A2%E8%A1%8C%E7%AC%A6%E5%9B%9E%E8%BD%A6%E7%AC%A6%E6%9B%BF%E6%8D%A2%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="在Excel中可以大量数据导入MySQL中"><a href="#在Excel中可以大量数据导入MySQL中" class="headerlink" title="在Excel中可以大量数据导入MySQL中"></a>在Excel中可以大量数据导入MySQL中</h3><ul>
<li>首先打开需要导入的表格，然后另存为，选择文本文件(制表符分隔)</li>
</ul>
<center><img src="http://img.blog.csdn.net/20160415165437777?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>


<a id="more"></a>
<ul>
<li>得到一个文本文件</li>
</ul>
<center><img src="http://img.blog.csdn.net/20160415165625530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>


<ul>
<li>然后打开phpmyadmin，执行下面语句（需要自己根据实际情况修改表名）:</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'D:\data.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> exceltomysql <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</div></pre></td></tr></table></figure>
<ul>
<li>导入的文件有可能会有换行和回车，对我们操作数据库带来了不便，所以我们执行下面语句来替换换行和回车符</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">set</span> field_name=<span class="keyword">REPLACE</span>(<span class="keyword">REPLACE</span>(field_name,<span class="built_in">char</span>(<span class="number">10</span>),<span class="string">'&lt;br&gt;'</span>),<span class="built_in">char</span>(<span class="number">13</span>),<span class="string">'&lt;br&gt;'</span>);</div></pre></td></tr></table></figure>
<p>  制表符  char(9)<br>  换行符  char(10)<br>  回车符  char(13)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio SVN的使用]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/01/AndroidStudio/Android-Studio-SVN%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p>SVN的配置</p>
<ol>
<li>这篇文章使用的Android studio版本为1.4 RC3。</li>
<li>我选择的是TortoiseSVN，版本为1.8，不要选择1.9版本（目前的最新版），因为如果你安装的是1.9版本当你在studio中配置svn时会提示你如下错误</li>
</ol>
</li>
</ul>
<center><img src="http://i.stack.imgur.com/MQStV.jpg" alt=""></center>

<p>原因在于studio是基于Intellij IDEA开发的，而Intellij IDEA 14.1.4目前还无法使用svn1.9.0这个版本。</p>
<p>　3. 当你安装TortoiseSVN时，command line client tools 默认是不会安装的，必须手动选择安装上，否则无法在studio中进行svn关联配置</p>
<center><img src="http://images2015.cnblogs.com/blog/828272/201512/828272-20151204084756986-546433595.png" alt=""></center>　<br><br>4.安装好之后就是进行studio与svn的关联了在studio中打开如下路径File-&gt;Settings-&gt;Version Control-&gt;Subversion,如下图所示：<br><center><img src="http://images2015.cnblogs.com/blog/828272/201512/828272-20151204085204252-55717462.png" alt=""></center>


<a id="more"></a>
<p>5.在Use command line client中选择你刚刚安装的svn路径bin目录下的svn.exe这个文件<br>　　Use system default Subversion configuration directory 前面勾选上，这个默认就是勾选上上的，这个是svn相关配置信息的路径，保留默认路径就行。
　　</p>
<ul>
<li>添加忽略文件　</li>
</ul>
<p>1.之所以要添加忽略文件或者文件夹，原因是由于每个人的studio工程配置都会有所不同，例如gradle 的版本。或者有些文件中保存了一些重要的信息，比如local.properties中配置的各种提交信息，这些信息是不能提交到svn上的，一般来说需要忽略的文件和文件夹主要有一下几类：</p>
<p>　   .idea 文件夹<br>　　 .gradle 文件夹<br>　　 所有的 build 文件夹<br>　　 所有的 .iml 文件<br>　　 local.properties 文件<br>　　<br>这也是Android馆方建议我们过滤的文件夹</p>
<p>2.添加忽略请打开如下路径:File-&gt;Settings-&gt;Version Control-&gt;Ignored Files,点击右面的+号添加你要忽略的文件夹或文件路径即可，如下图所示：</p>
<center><img src="http://images2015.cnblogs.com/blog/828272/201512/828272-20151204093704830-1155838146.png" alt=""></center>

<p>3.注意：Studio中只有在未关联SVN之前添加忽略文件才有效，也就是说，这一步必须在VCS-&gt;Import into Version Control-&gt;Share Project(SubVersion)这步之前进行，否则添加的忽略文件是无效的</p>
<p>4.下一步就是关联svn，其实过程上一步已经说了，就是执行VCS-&gt;Import into Version Control-&gt;Share Project(SubVersion)这个选项，这里需要注意一下Import into Version Control下还有一个Import into Subversion这个选项 ,这两选项其实是有区别的，Share Project(SubVersion)这个选项只是对项目同SVN进行了关联操作，并没有将代码提交，需要完成 连接后在进行提交代码操作；而Import into Subversion这个选项只是将你的svn项目提交到了svn上，并没有进行关联，执行完你会发现所有的工程文件都变成了红色，如果你是一个项目发起者，并且当你再次提交修改的项目时就会报错，提示你该项目不是svn的工作副本，无法提交，如果想提交成功，你需要删除当前项目，重新从svn上导入后便可提交成功，虽然两种方式均可，但是建议采用Share Project(SubVersion)的方式。本文也采用Share Project(SubVersion)方式提交</p>
<p>5.点击Share Project(SubVersion)后会出现如下对话框</p>
<center><img src="http://images2015.cnblogs.com/blog/828272/201512/828272-20151204100347408-1033591640.png" alt=""></center>

<p>　这里列出了当前svn的提交路径，如果你还没有点击上边的+号添加路径即可。选择完成后点击Share<br>　<img src="http://images2015.cnblogs.com/blog/828272/201512/828272-20151204101744127-1148841605.png" alt=""><br>　<br>　选择1.8format，点击OK，成功后会发现除了忽略的文件其他均变成了绿色<br>　<img src="http://images2015.cnblogs.com/blog/828272/201512/828272-20151204102023736-1619075435.png" alt=""><br>　<br>　到这为止位置关联已经建立完毕，下一步是把代码提交到svn上，在顶部菜单栏选择<br>　<img src="http://images2015.cnblogs.com/blog/828272/201512/828272-20151204102150502-1907591442.png" alt=""><br>　<br>　或者项目右击-&gt;SubVersion-&gt;Commit Directory…<br>　<br>　<img src="http://images2015.cnblogs.com/blog/828272/201512/828272-20151204102306643-1897108269.png" alt=""><br>　<br>6.填写commit message后点击commit。这里有的时候你点击commit后并没有任何反应，此时删除你的src目录下的test文件夹后再次提交即可。具体原因还不清楚，可能是svn检测这里有问题无法提交，或者跟studio的版本有关系。<br>　　到这里项目已经成功体提交到了svn上，你可以使用svn进行合作开发了
　</p>
<ul>
<li>单个文件的增加或修改</li>
</ul>
<p>很简单，在需要操作的文件上右击-&gt;Subversion-&gt;Commit File 即可
　</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gneymotion无法启动和Oracle VM VirtualBox常见问题]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/01/AndroidStudio/Gneymotion%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E5%92%8COracle-VM-VirtualBox%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="genymotion和VBOX下载"><a href="#genymotion和VBOX下载" class="headerlink" title="genymotion和VBOX下载"></a>genymotion和VBOX下载</h3><ul>
<li>可用的带VBOX的gemymotion <a href="http://pan.baidu.com/s/1skWJGRV" target="_blank" rel="external">传送门</a></li>
</ul>
<ul>
<li>有时候我们会遇到根源motion无法启动的问题，这里面有很大一部分原因是VirtualBox的配置问题，自从VirtualBox-4.3.12-93733-Win之后，就出现了很多的BUG，所以我们使用VirtualBox-4.3.12-93733-Win，下载地址：<a href="http://pan.baidu.com/s/1dEn7kU9" target="_blank" rel="external">传送门</a></li>
</ul>
<h3 id="模拟器无法安装应用"><a href="#模拟器无法安装应用" class="headerlink" title="模拟器无法安装应用"></a>模拟器无法安装应用</h3><ul>
<li>下图中模拟器无法安装应用，需要将一个包安装进模拟器就行，包的名字叫做Genymotion-ARM-Translation_v1.1，可以直接到我的百度云下载，<a href="http://pan.baidu.com/s/1eRbZZF0" target="_blank" rel="external">传送门</a> 直接将这个文件拖进模拟器的屏幕，然后重启就行</li>
</ul>
<center><img src="http://img.blog.csdn.net/20160309164544218?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<p><br></p>
<h3 id="不能创建虚拟主机"><a href="#不能创建虚拟主机" class="headerlink" title="不能创建虚拟主机"></a>不能创建虚拟主机</h3><ul>
<li>下图这个问题我们需要将虚拟机卸载一下，然后进去C:\Users\Administrator\AppData\Local下删除Genymobile文件夹和删除C:\Users\Administrator下的.VirtualBox<br>就可以解决这个问题，还有就是这里有兼容性问题，如果是别的系统的话，建议使用win7兼容性模式运行</li>
</ul>
<a id="more"></a>
<center><img src="http://img.blog.csdn.net/20160309165325580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<p><br></p>
<h3 id="Unable-to-start-the-virtual-device"><a href="#Unable-to-start-the-virtual-device" class="headerlink" title="Unable to start the virtual device"></a>Unable to start the virtual device</h3><h4 id="配置全局网络配置"><a href="#配置全局网络配置" class="headerlink" title="配置全局网络配置"></a>配置全局网络配置</h4><ul>
<li>出现这个问题是我们的虚拟机的网络配置有问题，我们可以先去打开虚拟机，管理 –&gt;全局设定–&gt;网络–&gt;仅主机（Host-Only）网络–双击下面的条目</li>
</ul>
<center><img src="http://img.blog.csdn.net/20160309165733985?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<center><img src="http://img.blog.csdn.net/20160309165958566?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<center><img src="http://img.blog.csdn.net/20160309170004208?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<h4 id="兼容性运行"><a href="#兼容性运行" class="headerlink" title="兼容性运行"></a>兼容性运行</h4><ul>
<li>可以将VBOX和genymotion都设置为win8兼容性运行，而且同时设置以管理员运行</li>
</ul>
<h4 id="设置模拟器网卡"><a href="#设置模拟器网卡" class="headerlink" title="设置模拟器网卡"></a>设置模拟器网卡</h4><p>然后我们点击我们的Android模拟器，右键–&gt;设置 –&gt;网络–选择刚刚设置的网卡作为模拟器的网卡，如图：<br>这样就解决了我们的启动问题了</p>
<center><img src="http://img.blog.csdn.net/20160309170226647?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<center><img src="http://img.blog.csdn.net/20160309170416135?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android仿超级课程表的课程界面设计]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/01/Android/Android%E4%BB%BF%E8%B6%85%E7%BA%A7%E8%AF%BE%E7%A8%8B%E8%A1%A8%E7%9A%84%E8%AF%BE%E7%A8%8B%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p><center><img src="http://img.blog.csdn.net/20150410180333267" width="480px" height="700px"></center></p>
<ul>
<li>接下来先分析页面布局，从上往下看，第一行是显示标题，第二行是显示时间和周几，使用线性布局，第一列是用来显示节次的，宽度跟后面显示周几的7列不一样，可以用DP来设定；后面7列宽度可以用权重来分配，行的高度也用DP设定。<br>接着往下看就是课程表了，第一列用来显示节次，每节次的宽度跟上面行显示月份的格子一致，高度应该与显示周几的格子宽度保持一致，在运行时根据手机屏幕宽度计算显示周几格子的实际宽度来设置，并且想到后面如果要自定义多少节次的话，那么节次这一列布局使用了ListView。<br>那么显示一门课程的格子如何实现呢？为了以后不跟实现课表背景图片冲突，这里用到了FrameLayout,一门课程用RelativeLayout实现，背景必须用9图，否则不能随意变更宽高度，通过运行时往FrameLayout里添加RelativeLayout,设置一门课程显示的位置,利用周几和起始节来决定,设置RelativeLayout的marginLeft和marginTop;高度由节次来决定。<br>但是一般来说课程表是12节，一般手机屏幕都是显示不完的，必须滑动展示，但是节次里用了ListView，已经包含了ScrollView，而课程是在FrameLayout里实现的，那么必须屏蔽掉ListView的ScrollView，把ListView和FrameLayout用ScrollView包括进来，否则拖动屏幕的时候FrameLayout不会随着滑动</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ScrollView</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:scrollbars</span>=<span class="string">"none"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">RelativeLayout</span> </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">com.hengye.library.view.util.ListViewNoScroll</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/titlebar_course_table_listview"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:divider</span>=<span class="string">"@null"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">com.hengye.library.view.util.ListViewNoScroll</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/titlebar_course_table_framelayout"</span> </div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"200dp"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@drawable/ic_course_bg_huang_multi"</span></div><div class="line">                <span class="attr">android:visibility</span>=<span class="string">"gone"</span>&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                    <span class="attr">android:text</span>=<span class="string">"中国近现代史纲要@3-102"</span></div><div class="line">                    <span class="attr">android:textColor</span>=<span class="string">"@color/white"</span></div><div class="line">                    <span class="attr">android:gravity</span>=<span class="string">"center"</span>/&gt;  </div><div class="line">            <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span>       </div><div class="line">        <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span>         </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>自定义屏蔽了ScrollView的ListView:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListViewNoScroll</span> <span class="keyword">extends</span> <span class="title">ListView</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewNoScroll</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewNoScroll</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; <span class="number">2</span>,</div><div class="line">                MeasureSpec.AT_MOST);</div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, expandSpec);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>课程格子宽高度设置部分代码块：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">View courseView = getActivity().getLayoutInflater().inflate(R.layout.titlebar_course_item, <span class="keyword">null</span>);</div><div class="line">        RelativeLayout course = (RelativeLayout) courseView.findViewById(R.id.titlebar_course_item_bg);</div><div class="line">        TextView courseNameTextView = (TextView) courseView.findViewById(R.id.titlebar_course_item_tx);</div><div class="line">                <span class="comment">//用来设置边距        </span></div><div class="line">        <span class="keyword">int</span> margin1Dp = getResources().getDimensionPixelSize(R.dimen.margin1dp);</div><div class="line">        <span class="comment">//节次的宽度</span></div><div class="line">        <span class="keyword">int</span> marginLessonDp = getResources().getDimensionPixelSize(R.dimen.listview_course_table_lesson_margin); </div><div class="line">        <span class="keyword">int</span> lessonWidth = (mScreenWidth - marginLessonDp) / <span class="number">7</span>;      </div><div class="line">        <span class="comment">//9图只能通过背景设置拉伸，如果用src方式设置只会当作普通图片处理</span></div><div class="line"><span class="comment">//      course.setBackgroundDrawable(getResources().getDrawable(R.drawable.ic_course_bg_zi_multi));</span></div><div class="line"></div><div class="line">        <span class="comment">//设置课程名字</span></div><div class="line">        courseNameTextView.setText(syllabus.getCourcesName() + <span class="string">" "</span> + syllabus.getLocation());</div><div class="line"></div><div class="line">        <span class="comment">//设置一门课程的高度和宽度，一节课的高度与宽度保持一致，把dp转换成像素乘以节数,宽度为屏幕减去节次的宽度后的1/7,因为要显示8列，1列是节次，7列是一周的7天;</span></div><div class="line">        <span class="keyword">int</span> courseWidth = lessonWidth - margin1Dp * <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> courseHeight = lessonWidth * (endLesson - startLesson + <span class="number">1</span>) - margin1Dp * <span class="number">2</span>;</div><div class="line">        FrameLayout.LayoutParams layoutParams = <span class="keyword">new</span> FrameLayout.LayoutParams(courseWidth, courseHeight);</div><div class="line">        <span class="comment">//设置一门课程显示的位置,利用周几和起始节来决定,设置view的marginLeft和marginTop;</span></div><div class="line">        layoutParams.setMargins(lessonWidth * (day - <span class="number">1</span>) + marginLessonDp + margin1Dp + margin1Dp, (startLesson - <span class="number">1</span>) * lessonWidth + margin1Dp, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        <span class="comment">//Android4.0以下Margin设置失效解决方法 </span></div><div class="line">        layoutParams.gravity = Gravity.TOP|Gravity.LEFT;</div><div class="line">        course.setLayoutParams(layoutParams);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中如何一次性finish掉以前打开的所有的activity]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/01/Android/Android%E4%B8%AD%E5%A6%82%E4%BD%95%E4%B8%80%E6%AC%A1%E6%80%A7finish%E6%8E%89%E4%BB%A5%E5%89%8D%E6%89%93%E5%BC%80%E7%9A%84%E6%89%80%E6%9C%89%E7%9A%84activity/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityManagerApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Activity&gt; destoryMap = <span class="keyword">new</span> HashMap&lt;&gt;();  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ActivityManagerApplication</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 添加到销毁队列 </div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> activity 要销毁的activity </div><div class="line">     */  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addDestoryActivity</span><span class="params">(Activity activity,String activityName)</span> </span>&#123;  </div><div class="line">        destoryMap.put(activityName,activity);  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">    *销毁指定Activity </div><div class="line">    */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">destoryActivity</span><span class="params">(String activityName)</span> </span>&#123;  </div><div class="line">       Set&lt;String&gt; keySet=destoryMap.keySet();  </div><div class="line">        <span class="keyword">for</span> (String key:keySet)&#123;  </div><div class="line">            destoryMap.get(key).finish();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ Android中的shape中的属性大全]]></title>
      <url>http://www.qiuchengjia.cn/2016/06/01/Android/Android%E4%B8%AD%E7%9A%84shape%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<ul>
<li>Android中常常使用shape来定义控件的一些显示属性，今天看了一些shape的使用，对shape有了大体的了解，稍作总结：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;shape&gt;  </div><div class="line">     &lt;!-- 实心 --&gt;  </div><div class="line">       &lt;solid android:color="#ff9d77"/&gt;  </div><div class="line">        &lt;!-- 渐变 --&gt;  </div><div class="line">          &lt;gradient  </div><div class="line">               android:startColor="#ff8c00"  </div><div class="line">               android:endColor="#FFFFFF"  </div><div class="line">               android:angle="270" /&gt;  </div><div class="line">           &lt;!-- 描边 --&gt;  </div><div class="line">           &lt;stroke  </div><div class="line">               android:width="2dp"  </div><div class="line">               android:color="#dcdcdc" /&gt;  </div><div class="line">           &lt;!-- 圆角 --&gt;  </div><div class="line">           &lt;corners  </div><div class="line">               android:radius="2dp" /&gt;  </div><div class="line">           &lt;padding  </div><div class="line">               android:left="10dp"  </div><div class="line">               android:top="10dp"  </div><div class="line">               android:right="10dp"  </div><div class="line">               android:bottom="10dp" /&gt;  </div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure>
<ul>
<li>solid：实心，就是填充的意思<br>Android:color指定填充的颜色</li>
</ul>
<a id="more"></a>
<ul>
<li><p>gradient：渐变<br>android:startColor和android:endColor分别为起始和结束颜色，ndroid:angle是渐变角度，必须为45的整数倍。<br>另外渐变默认的模式为android:type=”linear”，即线性渐变，可以指定渐变为径向渐变，android:type=”radial”，径向渐变需要指定半径android:gradientRadius=”50”</p>
</li>
<li><p>stroke：描边<br>android:width=”2dp” 描边的宽度，android:color 描边的颜色。<br>我们还可以把描边弄成虚线的形式，设置方式为：<br>android:dashWidth=”5dp”<br>android:dashGap=”3dp”<br>其中android:dashWidth表示’-‘这样一个横线的宽度，android:dashGap表示之间隔开的距离</p>
</li>
<li><p>corners：圆角<br>android:radius为角的弧度，值越大角越圆。<br>我们还可以把四个角设定成不同的角度，方法为：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;corners </div><div class="line">        android:topRightRadius=<span class="string">"20dp"</span>    <span class="comment">//右上角</span></div><div class="line">        android:bottomLeftRadius=<span class="string">"20dp"</span>    <span class="comment">//右下角</span></div><div class="line">        android:topLeftRadius=<span class="string">"1dp"</span>    <span class="comment">//左上角</span></div><div class="line">        android:bottomRightRadius=<span class="string">"0dp"</span>    <span class="comment">//左下角</span></div><div class="line"> /&gt;</div></pre></td></tr></table></figure>
<p>这里有个地方需要注意，bottomLeftRadius是右下角，而不是左下角，这个有点郁闷，不过不影响使用，记得别搞错了就行。<br>还有网上看到有人说设置成0dp无效，不过我在测试中发现是可以的，我用的是2.2，可能修复了这个问题吧，如果无效的话那就只能设成1dp了</p>
<ul>
<li><p>padding：间隔<br>这个就不用多说了，XML布局文件中经常用到</p>
</li>
<li><p>大体的就是这样，以下是一个使用的具体示例：用在Selector中作为Button的背景，分别定义了按钮的一般状态、获得焦点状态和按下时的状态，具体代码如下：</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">main.xml:  </div><div class="line">&lt;Button  </div><div class="line">    android:layout_width="wrap_content"  </div><div class="line">    android:layout_height="wrap_content"  </div><div class="line">    android:text="TestShapeButton"  </div><div class="line">    android:background="@drawable/button_selector"  </div><div class="line">    /&gt;  </div><div class="line">  </div><div class="line">button_selector.xml:  </div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line">&lt;selector  </div><div class="line">    xmlns:android="http://schemas.android.com/apk/res/android"&gt;  </div><div class="line">    &lt;item android:state_pressed="true" &gt;  </div><div class="line">        &lt;shape&gt;  </div><div class="line">            &lt;!-- 渐变 --&gt;  </div><div class="line">            &lt;gradient  </div><div class="line">                android:startColor="#ff8c00"  </div><div class="line">                android:endColor="#FFFFFF"  </div><div class="line">                android:type="radial"  </div><div class="line">                android:gradientRadius="50" /&gt;  </div><div class="line">            &lt;!-- 描边 --&gt;  </div><div class="line">            &lt;stroke  </div><div class="line">                android:width="2dp"  </div><div class="line">                android:color="#dcdcdc"  </div><div class="line">                android:dashWidth="5dp"   </div><div class="line">                android:dashGap="3dp" /&gt;  </div><div class="line">            &lt;!-- 圆角 --&gt;  </div><div class="line">            &lt;corners  </div><div class="line">                android:radius="2dp" /&gt;  </div><div class="line">            &lt;padding  </div><div class="line">                android:left="10dp"  </div><div class="line">                android:top="10dp"  </div><div class="line">                android:right="10dp"  </div><div class="line">                android:bottom="10dp" /&gt;  </div><div class="line">        &lt;/shape&gt;  </div><div class="line">    &lt;/item&gt;  </div><div class="line">  </div><div class="line">    &lt;item android:state_focused="true" &gt;  </div><div class="line">        &lt;shape&gt;  </div><div class="line">            &lt;gradient  </div><div class="line">                android:startColor="#ffc2b7"  </div><div class="line">                android:endColor="#ffc2b7"  </div><div class="line">                android:angle="270" /&gt;  </div><div class="line">            &lt;stroke  </div><div class="line">                android:width="2dp"  </div><div class="line">                android:color="#dcdcdc" /&gt;  </div><div class="line">            &lt;corners  </div><div class="line">                android:radius="2dp" /&gt;  </div><div class="line">            &lt;padding  </div><div class="line">                android:left="10dp"  </div><div class="line">                android:top="10dp"  </div><div class="line">                android:right="10dp"  </div><div class="line">                android:bottom="10dp" /&gt;  </div><div class="line">        &lt;/shape&gt;  </div><div class="line">    &lt;/item&gt;  </div><div class="line">  </div><div class="line">    &lt;item&gt;         </div><div class="line">        &lt;shape&gt;  </div><div class="line">            &lt;solid android:color="#ff9d77"/&gt;  </div><div class="line">            &lt;stroke  </div><div class="line">                android:width="2dp"  </div><div class="line">                android:color="#fad3cf" /&gt;  </div><div class="line">            &lt;corners   </div><div class="line">                android:topRightRadius="5dp"  </div><div class="line">                android:bottomLeftRadius="5dp"  </div><div class="line">                android:topLeftRadius="0dp"  </div><div class="line">                android:bottomRightRadius="0dp"  </div><div class="line">            /&gt;  </div><div class="line">            &lt;padding  </div><div class="line">                android:left="10dp"  </div><div class="line">                android:top="10dp"  </div><div class="line">                android:right="10dp"  </div><div class="line">                android:bottom="10dp" /&gt;  </div><div class="line">        &lt;/shape&gt;  </div><div class="line">    &lt;/item&gt;  </div><div class="line">&lt;/selector&gt;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下安装sublime汉化版及完美输入中文]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/linux/Linux%E4%B8%8B%E5%AE%89%E8%A3%85sublime%E6%B1%89%E5%8C%96%E7%89%88%E5%8F%8A%E5%AE%8C%E7%BE%8E%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</url>
      <content type="html"><![CDATA[<ul>
<li><p>网上其实有一种方法可以使sublime，但是都没有我这种方法来的直接，直接到我的网盘中下载这个压缩文件，然后解压缩就可以使用了，地址：<a href="http://pan.baidu.com/s/1jHf0GEq" target="_blank" rel="external">传送门</a></p>
</li>
<li><p>然后进入sublime的解压目录，执行</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./firstrun.sh</div></pre></td></tr></table></figure>
<p>选择下图应用打开，然后完美输入中文</p>
<center><img src="http://img.blog.csdn.net/20151219220227122?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<center><img src="http://img.blog.csdn.net/20151219220323670?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ ubuntu输入密码登陆后又跳到登陆界面解决方案]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/ubuntu/ubuntu%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E5%90%8E%E5%8F%88%E8%B7%B3%E5%88%B0%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<ul>
<li><p>启动系统，输入正确的账号和密码，点击登录，屏幕一闪，然后又跳回登录界面。问题原因：主目录下的　.Xauthority　文件拥有者变成了root，从而以用户登陆的时候无法都取.Xauthority文件</p>
</li>
<li><p>说明：Xauthority，是startx脚本记录文件。Xserver启动时，读文件~/.Xauthority,读入对应其display 的记录。当一个需要显示的客户程序启动调用XOpenDisplay()也读这个文 件，并把找到的magic code 发送给 Xserver。当Xserver验证这个magic code正确以后，就同意连接啦。观察startx脚本也可以看到，每次startx 运行，都在调用xinit以前使用了xauth的add命令添加了一个新的记录到~/.Xauthority，用来这次运行X使用认证</p>
</li>
<li><p>解决方案：开机后在登陆界面按下shift + ctrl + F1进入tty命令行终端登陆，然后输入root，然后输入密码， 重装gdm </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo  apt-get remove gdm  </div><div class="line">sudo apt-get install gdm  </div><div class="line">dpkg  -reconfigure gdm  <span class="comment">//修改启动顺序</span></div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<center><img src="http://img.blog.csdn.net/20151218174842394?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<p>然后输入：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reboot</div></pre></td></tr></table></figure>
<p> 问题解决，我们还可以在进入系统之后再修改 .Xauthority文件的权限</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ 如何彻底删除ubuntu上的软件]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/ubuntu/%E5%A6%82%E4%BD%95%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4ubuntu%E4%B8%8A%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
      <content type="html"><![CDATA[<ul>
<li>找到此软件名称,然后</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get purge ......</div><div class="line">(点点为为程序名称),purge参数为彻底删除文件</div></pre></td></tr></table></figure>
<ul>
<li>然后使用下面两条命令来清除残余的配置文件</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get autoremove,sudo apt-get clean</div><div class="line">dpkg -l |grep ^rc|awk '&#123;print $2&#125;' |sudo xargs dpkg -P</div></pre></td></tr></table></figure>
<a id="more"></a>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu下如何安装android studio]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/ubuntu/ubuntu%E4%B8%8B%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85android-studio/</url>
      <content type="html"><![CDATA[<p> 在ubuntu下安装android studio有好几种方法，现在我就来介绍最简单的一种方法</p>
<ul>
<li><p>如果没有安装jdk的先安装jdk</p>
</li>
<li><p>到 <a href="http://www.androiddevtools.cn/" target="_blank" rel="external">传送门</a> 下载最新的android studio版本，然后选择一个文件夹解压androidstudio，然后就可以在终端中进入bin 目录，输入 sudo ./studio.sh 就可以打开androidstudio了</p>
</li>
<li><p>创建快捷方式，先新建一个空白文件，然后将下列代码依照自己的安装路径复制进去</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[Desktop Entry]  </div><div class="line">Name=AndroidStudio  </div><div class="line">Comment=AndroidStudio  </div><div class="line">Exec=/home/qiu/Work/Developer/AndroidStudio/androidstudio/bin/studio.sh  </div><div class="line">Icon=/home/qiu/Work/Developer/AndroidStudio/androidstudio/bin/studio.png  </div><div class="line">Terminal=<span class="literal">false</span>  </div><div class="line">Type=Application  </div><div class="line">Categories=Application；Development；</div></pre></td></tr></table></figure>
<p>然后将文件的名字改成android.desktop，然后右键 — &gt; 属性—&gt;勾选允许作为程序可执行文件，然后就可以了，此种创建快捷方式的方法对于其他程序均适用</p>
<center><img src="http://img.blog.csdn.net/20151217151413240?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>


<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu安装Genymotion]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/ubuntu/ubuntu%E5%AE%89%E8%A3%85Genymotion/</url>
      <content type="html"><![CDATA[<ul>
<li><p>先去Genymotion官网下载安装包  <a href="https://www.genymotion.com/#!/download" target="_blank" rel="external">传送门</a></p>
</li>
<li><p>然后现在终端中安装虚拟机virtualbox，如果没有安装虚拟机virtualbox，那么就不能安装 Genymotion</p>
<p> 命令：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get installvirtualbox</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>安装Genymotion，打开终端，输入命令：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod+x genymotion<span class="number">-2.6</span><span class="number">.0</span>-linux_x64.bin  </div><div class="line">  ./genymotion<span class="number">-2.6</span><span class="number">.0</span>-linux_x64.bin -d /home/qiu/Work/genymotion</div></pre></td></tr></table></figure>
<p><br></p>
<blockquote>
<p><font color="RED">注意：-d后面的路径是你的genymotion的安装路径，现在，我们的genymotion就安装好了</font><br><br></p>
</blockquote>
<center><img src="http://img.blog.csdn.net/20151217151146964?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux如何使用腾讯QQ]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/linux/Linux%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%85%BE%E8%AE%AFQQ/</url>
      <content type="html"><![CDATA[<ul>
<li>首先我们需要下载一个国际qq的安装包，地址：<a href="http://www.ubuntukylin.com/applications/showimg.php?lang=cn&amp;id=23" target="_blank" rel="external">传送门</a></li>
</ul>
<ul>
<li>下载好了之后就解压，然后安装</li>
</ul>
<center><img src="http://img.blog.csdn.net/20151217150610620?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<p>如图，安装红色框中的那个，然后我们就可以使用qq了</p>
<center><img src="http://img.blog.csdn.net/20151217150943755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>


<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Wing IDE for Linux 的安装和破解]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/linux/Wing-IDE-for-Linux-%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%A0%B4%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>Wing IDE是linux下python的集成开发环境，虽然python提供了命令行下的交互操作，但是对于实际的python程序开发的话，众多的python包导入、功能提示、调试就有很大的负担，Wing IDE 可以帮助解决。美中不足的是它也是一款收费软件</p>
<ul>
<li>安装</li>
</ul>
<p> 我们首先去 Wing IDE<br>    官网上下载软件，网址：<a href="http://wingware.com/downloads" target="_blank" rel="external">传送门</a> ，然后我们通过ubuntu软件中心安装</p>
<ul>
<li><p>破解</p>
<p>   破解之前需要下载一个脚本，下载地址：<a href="http://download.csdn.net/detail/sunmc1204953974/8689733" target="_blank" rel="external">传送门</a></p>
<p> 脚本源码：</p>
 <a id="more"></a>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sha  </div><div class="line"><span class="keyword">import</span> string  </div><div class="line">BASE2 = <span class="string">'01'</span>  </div><div class="line">BASE10 = <span class="string">'0123456789'</span>  </div><div class="line">BASE16 = <span class="string">'0123456789ABCDEF'</span>  </div><div class="line">BASE30 = <span class="string">'123456789ABCDEFGHJKLMNPQRTVWXY'</span>  </div><div class="line">BASE36 = <span class="string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>  </div><div class="line">BASE62 = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz'</span>  </div><div class="line">BASEMAX = string.printable  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">BaseConvert</span><span class="params">(number, fromdigits, todigits, ignore_negative = True)</span>:</span>  </div><div class="line">    <span class="string">""" converts a "number" between two bases of arbitrary digits </span></div><div class="line">     </div><div class="line">    The input number is assumed to be a string of digits from the </div><div class="line">    fromdigits string (which is in order of smallest to largest </div><div class="line">    digit). The return value is a string of elements from todigits </div><div class="line">    (ordered in the same way). The input and output bases are </div><div class="line">    determined from the lengths of the digit strings. Negative  </div><div class="line">    signs are passed through. </div><div class="line">     </div><div class="line">    decimal to binary </div><div class="line">    &gt;&gt;&gt; baseconvert(555,BASE10,BASE2) </div><div class="line">    '1000101011' </div><div class="line">     </div><div class="line">    binary to decimal </div><div class="line">    &gt;&gt;&gt; baseconvert('1000101011',BASE2,BASE10) </div><div class="line">    '555' </div><div class="line">     </div><div class="line">    integer interpreted as binary and converted to decimal (!) </div><div class="line">    &gt;&gt;&gt; baseconvert(1000101011,BASE2,BASE10) </div><div class="line">    '555' </div><div class="line">     </div><div class="line">    base10 to base4 </div><div class="line">    &gt;&gt;&gt; baseconvert(99,BASE10,"0123") </div><div class="line">    '1203' </div><div class="line">     </div><div class="line">    base4 to base5 (with alphabetic digits) </div><div class="line">    &gt;&gt;&gt; baseconvert(1203,"0123","abcde") </div><div class="line">    'dee' </div><div class="line">     </div><div class="line">    base5, alpha digits back to base 10 </div><div class="line">    &gt;&gt;&gt; baseconvert('dee',"abcde",BASE10) </div><div class="line">    '99' </div><div class="line">     </div><div class="line">    decimal to a base that uses A-Z0-9a-z for its digits </div><div class="line">    &gt;&gt;&gt; baseconvert(257938572394L,BASE10,BASE62) </div><div class="line">    'E78Lxik' </div><div class="line">     </div><div class="line">    ..convert back </div><div class="line">    &gt;&gt;&gt; baseconvert('E78Lxik',BASE62,BASE10) </div><div class="line">    '257938572394' </div><div class="line">     </div><div class="line">    binary to a base with words for digits (the function cannot convert this back) </div><div class="line">    &gt;&gt;&gt; baseconvert('1101',BASE2,('Zero','One')) </div><div class="line">    'OneOneZeroOne' </div><div class="line">     </div><div class="line">    """  </div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ignore_negative <span class="keyword">and</span> str(number)[<span class="number">0</span>] == <span class="string">'-'</span>:  </div><div class="line">        number = str(number)[<span class="number">1</span>:]  </div><div class="line">        neg = <span class="number">1</span>  </div><div class="line">    <span class="keyword">else</span>:  </div><div class="line">        neg = <span class="number">0</span>  </div><div class="line">    x = long(<span class="number">0</span>)  </div><div class="line">    <span class="keyword">for</span> digit <span class="keyword">in</span> str(number):  </div><div class="line">        x = x * len(fromdigits) + fromdigits.index(digit)  </div><div class="line">  </div><div class="line">    res = <span class="string">''</span>  </div><div class="line">    <span class="keyword">while</span> x &gt; <span class="number">0</span>:  </div><div class="line">        digit = x % len(todigits)  </div><div class="line">        res = todigits[digit] + res  </div><div class="line">        x /= len(todigits)  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span> neg:  </div><div class="line">        res = <span class="string">'-'</span> + res  </div><div class="line">    <span class="keyword">return</span> res  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">SHAToBase30</span><span class="params">(digest)</span>:</span>  </div><div class="line">    <span class="string">"""Convert from a hexdigest form SHA hash into a more compact and </span></div><div class="line">    ergonomic BASE30 representation.  This results in a 17 'digit'  </div><div class="line">    number."""  </div><div class="line">    tdigest = <span class="string">''</span>.join([ c <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(digest) <span class="keyword">if</span> i / <span class="number">2</span> * <span class="number">2</span> == i ])  </div><div class="line">    result = BaseConvert(tdigest, BASE16, BASE30)  </div><div class="line">    <span class="keyword">while</span> len(result) &lt; <span class="number">17</span>:  </div><div class="line">        result = <span class="string">'1'</span> + result  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> result  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddHyphens</span><span class="params">(code)</span>:</span>  </div><div class="line">    <span class="string">"""Insert hyphens into given license id or activation request to </span></div><div class="line">    make it easier to read"""  </div><div class="line">    <span class="keyword">return</span> code[:<span class="number">5</span>] + <span class="string">'-'</span> + code[<span class="number">5</span>:<span class="number">10</span>] + <span class="string">'-'</span> + code[<span class="number">10</span>:<span class="number">15</span>] + <span class="string">'-'</span> + code[<span class="number">15</span>:]  </div><div class="line">  </div><div class="line">LicenseID=<span class="string">'CN123-12345-12345-12345'</span>  </div><div class="line"><span class="comment">#Copy the Request Code from the dialog  </span></div><div class="line">RequestCode=<span class="string">'RL539-Y89TE-A7531-PQCKA'</span>  </div><div class="line">hasher = sha.new()  </div><div class="line">hasher.update(RequestCode)  </div><div class="line">hasher.update(LicenseID)  </div><div class="line">digest = hasher.hexdigest().upper()  </div><div class="line">lichash = RequestCode[:<span class="number">3</span>] + SHAToBase30(digest)  </div><div class="line">lichash=AddHyphens(lichash)  </div><div class="line">  </div><div class="line"><span class="comment">#Calculate the Activation Code  </span></div><div class="line">data=[<span class="number">7</span>,<span class="number">123</span>,<span class="number">23</span>,<span class="number">87</span>]  </div><div class="line">tmp=<span class="number">0</span>  </div><div class="line">realcode=<span class="string">''</span>  </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:  </div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> lichash:  </div><div class="line">        tmp=(tmp*i+ord(j))&amp;<span class="number">0xFFFFF</span>  </div><div class="line">    realcode+=format(tmp,<span class="string">'=05X'</span>)  </div><div class="line">    tmp=<span class="number">0</span>  </div><div class="line">  </div><div class="line">act30=BaseConvert(realcode,BASE16,BASE30)  </div><div class="line"><span class="keyword">while</span> len(act30) &lt; <span class="number">17</span>:  </div><div class="line">    act30 = <span class="string">'1'</span> + act30  </div><div class="line">act30=<span class="string">'AXX'</span>+act30  </div><div class="line">act30=AddHyphens(act30)  </div><div class="line"><span class="keyword">print</span> <span class="string">"The Activation Code is: "</span>+act30</div></pre></td></tr></table></figure>
<ul>
<li>安装WingIDE成功后启动，激活时输入  license id CN123-12345-12345-12345</li>
</ul>
<center><img src="http://img.blog.csdn.net/20151217144935119?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>


<ul>
<li>点击Continue后弹框，拷贝框中的request code</li>
</ul>
<center><img src="http://img.blog.csdn.net/20151217145011219?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<ul>
<li>修改Python脚本中的Request Code为刚才得到的RequestCode值，运行脚本后得到激活码，填入即可成功注册</li>
</ul>
<center><img src="http://img.blog.csdn.net/20151217145050003?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>



<center><img src="http://img.blog.csdn.net/20151217145055927?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ Linux下安装Sublime Text3及其破解]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/linux/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Sublime-Text3%E5%8F%8A%E5%85%B6%E7%A0%B4%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>sublime可以说使ubuntu下最性感的编辑器，暗黑的风格更是让我们这些程序猿们心动。不过这是一款收费软件，至于怎么和谐就看大家了。它同样支持各类插件、代码高亮等功能。具体功能可以查看官网</p>
<pre><code>安装：
</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:webupd8team/sublime-text<span class="number">-3</span>    </div><div class="line">sudo apt-get update   </div><div class="line">sudo apt-get install sublime-text-installer</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>安装好之后就将注册码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">—– BEGIN LICENSE —–  </div><div class="line">Andrew Weber  </div><div class="line">Single User License  </div><div class="line">EA7E<span class="number">-855605</span>  </div><div class="line"><span class="number">813</span>A03DD <span class="number">5E4</span>AD9E6 <span class="number">6</span>C0EEB94 BC99798F  </div><div class="line"><span class="number">942194</span>A6 <span class="number">02396E98</span> E62C9979 <span class="number">4B</span>B979FE  </div><div class="line"><span class="number">91424</span>C9D A45400BF F6747D88 <span class="number">2F</span>B88078  </div><div class="line"><span class="number">90F</span>5CC94 <span class="number">1</span>CDC92DC <span class="number">8457107</span>A F151657B  </div><div class="line"><span class="number">1</span>D22E383 A997F016 <span class="number">42397640</span> <span class="number">33F</span>41CFC  </div><div class="line">E1D0AE85 A0BBD039 <span class="number">0E9</span>C8D55 E1B89D5D  </div><div class="line"><span class="number">5</span>CDB7036 E56DE1C0 EFCC0840 <span class="number">650</span>CD3A6  </div><div class="line">B98FC99C <span class="number">8F</span>AC73EE D2B95564 DF450523  </div><div class="line">—— END LICENSE ——</div></pre></td></tr></table></figure>
<p>然后注册完成</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ Linux如何安装爱壁纸HD]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/linux/Linux%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E7%88%B1%E5%A3%81%E7%BA%B8HD/</url>
      <content type="html"><![CDATA[<p>爱壁纸HD是一款专业的桌面高清壁纸软件，提供了大量的优质高清壁纸，具有试试手气、按颜色筛选壁纸以及定时切换壁纸等功能，可满足我们平常对壁纸的需求。爱壁纸HD提供包括 Linux 平台在内的多版本支持</p>
<center><img src="http://img.blog.csdn.net/20151217143859263?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<a id="more"></a>
<p>Linux Deepin 用户可以去官网下载DEB格式进行下载安装，下载地址：<a href="http://lovebizhi.com/linux.html" target="_blank" rel="external">传送门</a><br>下载完成之后点击安装就可以使用了。最后在附上一张使用后的图片</p>
<center><img src="http://img.blog.csdn.net/20151217143944700?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ 如何将ubuntu中的顶部任务栏变成半透明]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/ubuntu/%E5%A6%82%E4%BD%95%E5%B0%86ubuntu%E4%B8%AD%E7%9A%84%E9%A1%B6%E9%83%A8%E4%BB%BB%E5%8A%A1%E6%A0%8F%E5%8F%98%E6%88%90%E5%8D%8A%E9%80%8F%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>   我们在安装gnome桌面之后会非常困扰，因为顶部的任务栏是黑色的，感觉非常的压抑，如图：这就是顶部任务栏，只不过我的做过修改，所以不是黑色的，下面我就来教大家如何将任务栏变成半透明</p>
<center><img src="http://img.blog.csdn.net/20151217142104335?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<a id="more"></a>
<ul>
<li>先找到文件 /usr/share/gnome-shell/theme/gnome-shell.css ，然后我们将这个文件复制出来，我们需要修改这个文件，由于我们没有修改这个文件的权限，所以我们把这个文件复制出来，修改好了之后我们再在终端中将这个文件移动到原来的路径，这样就修改文件中的内容了。自认为这种方法比在终端中直接修改要好一点</li>
</ul>
<ul>
<li>然后我们打开这个文件，找到 #panel  这个节点，如图：</li>
</ul>
<center><img src="http://img.blog.csdn.net/20151217142124475?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>



<p>然后将 background - color 改成  transparent ，如图：</p>
<center><img src="http://img.blog.csdn.net/20151217142147022?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>


<ul>
<li>然后我们再在终端中用 root 用户将这个修改之后的文件复制到/usr/share/gnome-shell/theme/gnome-shell.css路径下，然后我们的顶部任务栏就变成了半透明了</li>
</ul>
<center><img src="http://img.blog.csdn.net/20151217142210617?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>


]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ ubuntu如何安装Mac OS X主题]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/ubuntu/ubuntu%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85Mac-OS-X%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>首先我们开看一下完成之后的预览图，是不是很漂亮啊，不过我自定义的不是和苹果完全相同，进行一些自己的改造</p>
<center><img src="http://img.blog.csdn.net/20151217140901194?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<a id="more"></a>
<ul>
<li><p>首先我们先下载一下Mac OS X的壁纸，下载地址：<a href="http://drive.noobslab.com/data/Mac-13.10/MBuntu-Wallpapers.zip" target="_blank" rel="external">传送门</a> ，解压之后选择图片，然后就可以设置为壁纸</p>
</li>
<li><p>安装主题修改工具，为了修改GTK主题，图标，系统主题，光标，字体我们需要安装unity tweak。要安装unitytweak在ubuntu14.04上通过使用如下命令：</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-getinstall unity-tweak-tool</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<center><img src="http://img.blog.csdn.net/20151217140959435?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>



<p>也可以通过安装ubuntu-tweak来实现主题更换</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudoadd-apt-repository ppa:tualatrix/ppa  </div><div class="line">sudoapt-get update  </div><div class="line">apt-getinstall ubuntu-tweak</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<center><img src="http://img.blog.csdn.net/20151217141051786?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>


<ul>
<li>在ubuntu14.04中安装Mac OSX主题，为了修改上文说的内容，我们需要在终端中运行如下命令：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repositoryppa:noobslab/themes  </div><div class="line">sudo apt-get update  </div><div class="line">sudo apt-get install mac-ithemes-v3  </div><div class="line">sudo apt-get install mac-icons-v3</div></pre></td></tr></table></figure>
<p>然后打开刚刚的选择主题工具，分别选择如下选项：</p>
<center><img src="http://img.blog.csdn.net/20151217141156681?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>


<center><img src="http://img.blog.csdn.net/20151217141201555?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>


<center><img src="http://img.blog.csdn.net/20151217141205669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>


<p>现在unity桌面看起来就像Mac了。你已经有了mac的图标，mac的窗口样式，mac的鼠标指针样式</p>
<ul>
<li>现在我们在来添加dock：</li>
</ul>
<p>效果如下：</p>
<center><img src="http://img.blog.csdn.net/20151217141332503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>


<pre><code>1. 首先我们打开ubuntu软件中心，如图输入dock，下载当前的这个软件
</code></pre><center><img src="http://img.blog.csdn.net/20151217141453083?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>

<pre><code>2.然后打开这个软件，选择设置为开机启动，然后右击进行配置
</code></pre><center><img src="http://img.blog.csdn.net/20151217141629362?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>


<pre><code>3.然后进入选择主题
</code></pre><center><img src="http://img.blog.csdn.net/20151217141641308?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>



<ul>
<li>这样我们的dock就设置好了，当然，还可以使用另一个dock软件Docky（这里可以不用配置，只是一个扩展，也可以使用这个软件配置第四点的dock，看你自己的喜好，Docky使用比较简单，个人比较喜欢上面那种，这种也喜欢，所以两种都配置了）</li>
</ul>
<p>如图：</p>
<center><img src="http://img.blog.csdn.net/20151217141717095?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>


<p>然后配置出来的效果就是如图所示：</p>
<center><img src="http://img.blog.csdn.net/20151217141750892?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></center>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu系统如何将firefox升级到最新版本]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/ubuntu/ubuntu%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E5%B0%86firefox%E5%8D%87%E7%BA%A7%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC/</url>
      <content type="html"><![CDATA[<ul>
<li><p>先去firefox官网上下载最新版本的firefox浏览器          <a href="http://firefox.com.cn/download/" target="_blank" rel="external">传送门</a></p>
</li>
<li><p>然后在终端中将旧版本的firefox浏览器删除 sudo apt-get removefirefox  ，然后系统会提示你，你就输入Y</p>
</li>
<li><p>解压安装最新版本，首先切换到安装目录：</p>
</li>
</ul>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd/opt(推荐使用目录）</div></pre></td></tr></table></figure>
<p>  <strong>解压：</strong></p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo tar -xvf/tmp/firefox<span class="number">-36.0</span><span class="number">.4</span>.tar.bz2</div></pre></td></tr></table></figure>
 <a id="more"></a>
<p>  (下载安装路径，对于安装包的名字，输入到firefox+Tab键就会自动补全)回车</p>
<p> <strong> 安装：</strong></p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ln -s /opt/firefox  /usr/bin/firefox</div></pre></td></tr></table></figure>
<ul>
<li>安装最新的Flash插件，打开ubuntu软件中心，然后搜索adobe flash，然后点击安装，在重启一下firefox,就可以愉快的看视频了</li>
</ul>
<hr>
<p><img src="http://img.blog.csdn.net/20151217140533710?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ linux如何安装搜狗输入法]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/linux/linux%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/</url>
      <content type="html"><![CDATA[<ul>
<li><p>首先卸载ibus输入法，卸载ibus输入法很容易，只要在终端输入sudo apt-get remove ibus命令即可卸载ibus，然后我们要安装新的搜狗输入法（其他的输入法一样这样安装）</p>
</li>
<li><p>我们去搜狗官网去下载最新的搜狗输入法点击<a href="http://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="external">传送门</a>，也可以<br>直接在终端中使用命令安装</p>
</li>
<li>下载32位</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget <span class="string">"http://pinyin.sogou.com/linux/download.php?f=linux&amp;bit=32"</span> -O <span class="string">"sougou_32.deb"</span></div></pre></td></tr></table></figure>
<ul>
<li>下载64位</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget <span class="string">"http://pinyin.sogou.com/linux/download.php?f=linux&amp;bit=64"</span> -O <span class="string">"sougou_64.deb"</span></div></pre></td></tr></table></figure>
<p>下载好之后我们就要进行解压缩了，在终端中执行命令sudo dpkg-isougou_64.deb，这里的sougou_64.deb是上一步下载的文件的名字，可以根据自己的名字进行改动。<br>接下来设置系统的输入法，通过</p>
<font color="red">系统设置&gt;语言支持&gt;键盘输入方式系统</font>


<p>然后选择 fcitx 项，然后注销重新登陆，我们就可以看到屏幕右上角有搜狗输入法的标志了。</p>
<p>如图：</p>
<p><img src="http://img.blog.csdn.net/20151217121616209?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ 如何安装windows和ubuntu双系统]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/ubuntu/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85windows%E5%92%8Cubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<ol>
<li><p>我们首先去ubuntu官网上下载镜像，<a href="http://www.ubuntu.com/download" target="_blank" rel="external">http://www.ubuntu.com/download</a></p>
</li>
<li><p>然后我们使用大白菜装机版制作安装ubuntu的启动盘，方式是使用ISO模式，然后选择自己下载好的镜像，然后根据提示完成启动盘的制作</p>
</li>
<li><p>然后我们右键点击我的电脑，点击管理，然后选择存储，磁盘管理，选择释放一个空盘作为ubuntu的系统盘</p>
</li>
<li><p>然后重启电脑进入BIOS，将U盘调成第一启动项，然后我们就会进入ubuntu的安装目录，我们选择语言为简体中文，然后选择安装</p>
</li>
<li><p>然后我们在安装类型这里选择其他安装</p>
<blockquote>
<p><strong>注意这里一定不要选择其他的安装项，否则你磁盘中的windows系统就会被全部格式化</strong></p>
</blockquote>
</li>
</ol>
<a id="more"></a>
<p> 然后我们双击空闲（这个空闲就是我们刚刚在windows中释放的那个磁盘），我们在这里选择为ubuntu分出四个区域</p>
<ul>
<li><p>新建新建第一个分区，挂载点选择/boot ，用于选择Ext4日志文件系统，分区类型选择逻辑分区，这里我们可以给boot分配200M，不要分配过多，200M就够了（第二种方法在这里使用主分区）</p>
</li>
<li><p>新建第二个分区，选择逻辑分区，用于选择交换空间，分配2048M就够了（第二种方法不需要分配交换空间）</p>
</li>
<li><p>新建第三个分区，挂载点选择/ ，用于选择Ext4日志文件系统，选择主分区，然后我们在这里分配20480M（第二种这里不变）</p>
</li>
<li><p>新建第四个分区，挂载点选择/home，用于选择Ext4日志文件系统，选择逻辑分区，然后剩下的空间全部选择，到这里我们的分区选择好了（第二种这里不变）</p>
</li>
</ul>
<blockquote>
<p><strong>然后我们的安装启动引导器的设备选择/boot挂载点，注意这里一定要选择/boot对应的设备，然后选择现在安装，只需要等待，ubuntu就安装好了</strong></p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20151115184241560?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<blockquote>
<p><strong>按照上面的图片做完之后重启电脑，就可以看到一个系统列表可以供我们选择，然后双系统就装好了</strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ CPU是AMD的电脑如何安装android studio，以及studio的环境变量的配置]]></title>
      <url>http://www.qiuchengjia.cn/2015/06/01/AndroidStudio/CPU%E6%98%AFAMD%E7%9A%84%E7%94%B5%E8%84%91%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85android-studio%EF%BC%8C%E4%BB%A5%E5%8F%8Astudio%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="AMD的电脑"><a href="#AMD的电脑" class="headerlink" title="AMD的电脑"></a>AMD的电脑</h3><p>我的电脑的CPU是AMD的，当初买的时候没想那么多，可是到后来才知道有那么多的问题，最近遇到的一个最大的问题就是  Android studio的安装了，先前是studio一直安装不好，后来才发现环境变量配置错误，和以前安装jdk的环境变量的时候有一点点的区别，但就是这一点点的区别搞得我焦头烂额，后来试了很多种方法终于找出了错误，后来又出现了如下错误：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">emulator: ERROR: x86 emulation currently requires hardware acceleration!</div><div class="line"></div><div class="line">Please ensure Intel HAXM is properly installed and usable.</div><div class="line"></div><div class="line">CPU acceleration status: HAX kernel module is not installed!</div></pre></td></tr></table></figure>
<p>到现在我才知道原来硬件是硬伤，所以就找解决的方法，接下来我就分两点把环境变量的配置和如何解决AMD没有HAXM的功能。</p>
<a id="more"></a>
<h3 id="android-studio的环境变量配置"><a href="#android-studio的环境变量配置" class="headerlink" title="android studio的环境变量配置"></a>android studio的环境变量配置</h3><p> 例如：D:\develop\JDK\JDK\JDK\bin ，但是我在我的电脑上这样配置就会出现闪退，android studio得界面刚出来一下就没了，而且打开任务管理器也看到studio闪一下就没了，后来我又把环境变量换成D:\develop\JDK\JDK\JDK，注意：这里没有bin，但是发现还是一样的，后来我又把JAVA_HOME中的其他的路径全部移动到path路径中，只留下一个D:\develop\JDK\JDK\JDK路径，后来发现成功了，所以在JAVA_HOME中只设置JDK的安装目录就是可以的，注意：没有bin。</p>
<ul>
<li><p>绝对路径法：即JDK的环境变量的配置全部使用绝对路径。是最简单的配置方法。<br>path=C:\Program Files (x86)\Java\jdk1.7.0_45\bin;C:\Program Files (x86)\Java\jdk1.7.0_45\jre\bin</p>
</li>
<li><p>JAVA_HOME法：这是最常见的配置方法，改动比较方便，较为灵活。也可以理解为相对路径。<br>JAVA_HOME=C:\Program Files (x86)\Java\jdk1.7.0_45<br>path中=%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</p>
</li>
<li><p>完整法：是在JAVA_HOME方法的基础上增加了classpath.在某些使用过程中可能会使用到classpath来寻找路径.推荐使用这种方式。<br>JAVA_HOME=C:\Program Files (x86)\Java\jdk1.7.0_45<br>path=%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;<br>classpath=,;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar（注意：classpath要以.;开头。英文状态下的“点  分号”）</p>
</li>
</ul>
<h3 id="安装Genymotion"><a href="#安装Genymotion" class="headerlink" title="安装Genymotion"></a>安装Genymotion</h3><ul>
<li><p>配置AMD的CPU的电脑如何跳过HAXM 加速功能直接可以运行模拟器：如果我们的电脑是搭载的AMD的CPU的话，启动模拟器和运行程序的时候会出现一个安装intel 的HAXM  加速功能的错误，但是我们的CPU不是intel的怎么办？</p>
<p> 答案是我们可以使用外置的模拟器，我们先下载一个genymotion模拟器，<a href="http://jingyan.baidu.com/article/3ea51489e7d8bd52e61bba36.html" target="_blank" rel="external">传送门</a> ，这个是百度教程如何下载和安装genymotion模拟器，安装完毕之后我们就要把genymotion模拟器安装到我们的android studio中了，具体的方法也很简单，<a href="http://blog.csdn.net/hyr83960944/article/details/35987721" target="_blank" rel="external">传送门</a> ，这个是 将genymotion插件安装进studio的方法，<a href="http://blog.csdn.net/hyr83960944/article/details/37900383" target="_blank" rel="external">传送门</a> ，然后在用这个连接中的方法将模拟器配置进入我们的studio，接着我们就可以启动我们先前安装好的genymotion了，然后我们再在我们的studio中运行我们的项目，选择正在运行的genymotion模拟器，然后我们就会在模拟器上看到我们兴奋的界面了，是不是很容易啊。</p>
</li>
</ul>
<p><img src="http://img.blog.csdn.net/20150920120640647?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="genymotion" title="运行成功的genymotion"></p>
]]></content>
    </entry>
    
  
  
</search>
