<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>戎码人生</title>
  <subtitle>世界上有10种人，一种懂二进制，一种不懂二进制 ！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.qiuchengjia.cn/"/>
  <updated>2016-08-12T04:43:20.787Z</updated>
  <id>http://www.qiuchengjia.cn/</id>
  
  <author>
    <name>戎码人生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java源码分析--Enum</title>
    <link href="http://www.qiuchengjia.cn/2016/08/12/JAVA%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Java%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-Enum/"/>
    <id>http://www.qiuchengjia.cn/2016/08/12/JAVA源码分析/Java源码分析-Enum/</id>
    <published>2016-08-12T12:39:07.000Z</published>
    <updated>2016-08-12T04:43:20.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Enum类是java.lang包中一个类，他是Java语言中所有枚举类型的公共基类</p>
</blockquote>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Enum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;, <span class="title">Serializable</span></span></div></pre></td></tr></table></figure>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul>
<li>首先，<strong>抽象类不能被实例化</strong>，所以我们在<strong>java程序中不能使用new关键字来声明一个Enum</strong>，如果想要定义可以使用这样的语法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> enumName&#123;</div><div class="line">    value1,<span class="function">value2</span></div><div class="line">    <span class="title">method1</span><span class="params">()</span>&#123;&#125;</div><div class="line">    method2()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>其次，看到抽象类，第一印象是肯定有类继承他。至少我们应该是可以继承他的，所以：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testEnum</span> <span class="keyword">extends</span> <span class="title">Enum</span></span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testEnum</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt;</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testEnum</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt;</span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>尝试了以上三种方式之后，得出以下结论：<strong>Enum类无法被继承</strong></p>
</li>
<li><p>为什么一个抽象类不让继承？enum定义的枚举是怎么来的？难道不是对Enum的一种继承吗？带着这些疑问我们来反编译以下代码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Color &#123;RED, BLUE, GREEN&#125;</div></pre></td></tr></table></figure>
<ul>
<li>编译器将会把他转成如下内容：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">Color</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color[] values() &#123; <span class="keyword">return</span> (Color[])$VALUES.clone(); &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Color <span class="title">valueOf</span><span class="params">(String name)</span> </span>&#123; ... &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String s, <span class="keyword">int</span> i)</span> </span>&#123; <span class="keyword">super</span>(s, i); &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color RED;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color BLUE;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color GREEN;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color $VALUES[];</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    RED = <span class="keyword">new</span> Color(<span class="string">"RED"</span>, <span class="number">0</span>);</div><div class="line">    BLUE = <span class="keyword">new</span> Color(<span class="string">"BLUE"</span>, <span class="number">1</span>);</div><div class="line">    GREEN = <span class="keyword">new</span> Color(<span class="string">"GREEN"</span>, <span class="number">2</span>);</div><div class="line">    $VALUES = (<span class="keyword">new</span> Color[] &#123; RED, BLUE, GREEN &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>短短的一行代码，被编译器处理过之后竟然变得这么多，看来，enmu关键字是java提供给我们的一个语法糖啊。。。从反编译之后的代码中，我们发现，编译器不让我们继承Enum，但是当我们使用enum关键字定义一个枚举的时候，他会帮我们在编译后默认继承java.lang.Enum类，而不像其他的类一样默认继承Object类。且采用enum声明后，该类会被编译器加上final声明，故该类是无法继承的。 PS：由于JVM类初始化是线程安全的，所以可以采用枚举类实现一个线程安全的单例模式</li>
</ul>
<h3 id="实现Comparable和Serializable接口"><a href="#实现Comparable和Serializable接口" class="headerlink" title="实现Comparable和Serializable接口"></a>实现Comparable和Serializable接口</h3><ul>
<li>Enum实现了Serializable接口，可以序列化。 Enum实现了Comparable接口，可以进行比较，默认情况下，只有同类型的enum才进行比较（原因见后文），要实现不同类型的enum之间的比较，只能复写compareTo方法</li>
</ul>
<h3 id="泛型-“-lt-”E-extends-Enum”-lt-”E-gt-gt"><a href="#泛型-“-lt-”E-extends-Enum”-lt-”E-gt-gt" class="headerlink" title="泛型 “&lt;”E extends Enum”&lt;”E&gt;&gt;"></a>泛型 “&lt;”E extends Enum”&lt;”E&gt;&gt;</h3><ul>
<li>怎么理解 “&lt;”E extends Enum”&lt;”E&gt;&gt;</li>
</ul>
<p>首先，这样写只是为了让Java的API更有弹性，他主要是限定形态参数实例化的对象，故要求只能是Enum，这样才能对 compareTo 之类的方法所传入的参数进行形态检查。所以，<strong>我们完全可以不必去关心他为什么这么设计</strong></p>
<ul>
<li><p>首先我们先来“翻译”一下这个Enum<e extends="" enum<e="">&gt;到底什么意思，然后再来解释为什么Java要这么用。 我们先看一个比较常见的泛型：List<string>。这个泛型的意思是，List中存的都是String类型，告诉编译器要接受String类型，并且从List中取出内容的时候也自动帮我们转成String类型。 所以Enum<e extends="" enum<e="">&gt;可以暂时理解为Enum里面的内容都是E extends Enum<e>类型。 这里的E我们就理解为枚举，extends表示上界，比如： List&lt;? extends Object&gt;，List中的内容可以是Object或者扩展自Object的类。这就是extends的含义。 所以，E extends Enum<e>表示为一个继承了Enum<e>类型的枚举类型。 那么，Enum<e extends="" enum<e="">&gt;就不难理解了，就是一个Enum只接受一个Enum或者他的子类作为参数。相当于把一个子类或者自己当成参数，传入到自身，引起一些特别的语法效果  </e></e></e></e></e></string></e></p>
</li>
<li><p><strong>为什么Java要这样定义Enum</strong></p>
</li>
</ul>
<p>首先我们来科普一下enum</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">enum</span> Color&#123;</div><div class="line">    RED,GREEN,YELLOW</div><div class="line">&#125;</div><div class="line"><span class="keyword">enum</span> Season&#123;</div><div class="line">    SPRING,SUMMER,WINTER</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(Color.RED.ordinal());</div><div class="line">        System.out.println(Season.SPRING.ordinal());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>代码中两处输出内容都是 0 ，因为枚举类型的默认的序号都是从零开始的</p>
</li>
<li><p>要理解这个问题，首先我们来看一个Enum类中的方法（暂时忽略其他成员变量和方法）：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Enum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;, <span class="title">Serializable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> ordinal;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(E o)</span> </span>&#123;</div><div class="line">        Enum other = (Enum)o;</div><div class="line">        Enum self = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span> (self.getClass() != other.getClass() &amp;&amp; <span class="comment">// optimization</span></div><div class="line">            self.getDeclaringClass() != other.getDeclaringClass())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException();</div><div class="line">        <span class="keyword">return</span> self.ordinal - other.ordinal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>首先我们认为Enum的定义中没有使用Enum<e extends="" enum<e="">&gt;，那么compareTo方法就要这样定义（因为没有使用泛型，所以就要使用Object，这也是Java中很多方法常用的方式）：</e></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>当我们调用compareTo方法的时候依然传入两个枚举类型，在compareTo方法的实现中，比较两个枚举的过程是先将参数转化成Enum类型，然后再比较他们的序号是否相等。那么我们这样比较：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Color.RED.compareTo(Color.RED);</div><div class="line">Color.RED.compareTo(Season.SPRING);</div></pre></td></tr></table></figure>
<ul>
<li><p>如果在compareTo方法中不做任何处理的话，那么以上这段代码返回内容将都是true（因为Season.SPRING的序号和Color.RED的序号都是 0 ）。但是，很明显， Color.RED和Season.SPRING并不相等</p>
</li>
<li><p>但是Java使用Enum<e extends="" enum<e="">&gt;声明Enum，并且在compareTo的中使用E作为参数来避免了这种问题。 以上两个条件限制Color.RED只能和Color定义出来的枚举进行比较，当我们试图使用Color.RED.compareTo(Season.SPRING);这样的代码是，会报出这样的错误：</e></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">The method <span class="title">compareTo</span><span class="params">(Color)</span> in the type Enum&lt;Color&gt; is not applicable <span class="keyword">for</span> the <span class="title">arguments</span> <span class="params">(Season)</span></span></div></pre></td></tr></table></figure>
<ul>
<li><p>他说明，compareTo方法只接受Enum<color>类型</color></p>
</li>
<li><p>Java为了限定形态参数实例化的对象，故要求只能是Enum，这样才能对 compareTo之类的方法所传入的参数进行形态检查。 因为“红色”只有和“绿色”比较才有意义，用“红色”和“春天”比较毫无意义，所以，Java用这种方式一劳永逸的保证像compareTo这样的方法可以正常的使用而不用考虑类型</p>
</li>
</ul>
<blockquote>
<p>PS：在Java中，其实也可以实现“红色”和“春天”比较，因为Enum实现了Comparable接口，可以重写compareTo方法来实现不同的enum之间的比较</p>
</blockquote>
<h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><ul>
<li>在Enum中，有两个成员变量，一个是名字(name)，一个是序号(ordinal)。 序号是一个枚举常量，表示在枚举中的位置，从0开始，依次递增</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name；</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> ordinal;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">ordinal</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> ordinal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul>
<li>前面我们说过，Enum是一个抽象类，不能被实例化，但是他也有构造函数，从前面我们反编译出来的代码中，我们也发现了Enum的构造函数，在Enum中只有一个保护类型的构造函数：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Enum</span><span class="params">(String name, <span class="keyword">int</span> ordinal)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.ordinal = ordinal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>文章开头反编译的代码中private Color(String s, int i) { super(s, i); }中的super(s, i);就是调用Enum中的这个保护类型的构造函数来初始化name和ordinal</li>
</ul>
<h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><ul>
<li>Enum当中有以下这么几个常用方法，调用方式就是使用Color.RED.methodName（params…）的方式调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>==other;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.hashCode();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(E o)</span> </span>&#123;</div><div class="line">    Enum other = (Enum)o;</div><div class="line">    Enum self = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (self.getClass() != other.getClass() &amp;&amp; <span class="comment">// optimization</span></div><div class="line">        self.getDeclaringClass() != other.getDeclaringClass())</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException();</div><div class="line">    <span class="keyword">return</span> self.ordinal - other.ordinal;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class&lt;E&gt; <span class="title">getDeclaringClass</span><span class="params">()</span> </span>&#123;</div><div class="line">    Class clazz = getClass();</div><div class="line">    Class zuper = clazz.getSuperclass();</div><div class="line">    <span class="keyword">return</span> (zuper == Enum.class) ? clazz : zuper;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Enum&lt;T&gt;&gt; <span class="function">T <span class="title">valueOf</span><span class="params">(Class&lt;T&gt; enumType,String name)</span> </span>&#123;</div><div class="line">    T result = enumType.enumConstantDirectory().get(name);</div><div class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Name is null"</span>);</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">        <span class="string">"No enum constant "</span> + enumType.getCanonicalName() + <span class="string">"."</span> + name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.hollischuang.com/archives/92" target="_blank" rel="external">Java 7 源码学习系列（二）——Enum</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Enum类是java.lang包中一个类，他是Java语言中所有枚举类型的公共基类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Enum&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Enum&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Comparable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt;, &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;抽象类&quot;&gt;&lt;a href=&quot;#抽象类&quot; class=&quot;headerlink&quot; title=&quot;抽象类&quot;&gt;&lt;/a&gt;抽象类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先，&lt;strong&gt;抽象类不能被实例化&lt;/strong&gt;，所以我们在&lt;strong&gt;java程序中不能使用new关键字来声明一个Enum&lt;/strong&gt;，如果想要定义可以使用这样的语法：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; enumName&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    value1,&lt;span class=&quot;function&quot;&gt;value2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    method2()&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JAVA源码分析" scheme="http://www.qiuchengjia.cn/categories/JAVA%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="JAVA源码分析" scheme="http://www.qiuchengjia.cn/tags/JAVA%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Java命令--javap</title>
    <link href="http://www.qiuchengjia.cn/2016/08/12/JAVA%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/Java%E5%91%BD%E4%BB%A4-javap/"/>
    <id>http://www.qiuchengjia.cn/2016/08/12/JAVA命令学习/Java命令-javap/</id>
    <published>2016-08-12T12:34:38.000Z</published>
    <updated>2016-08-12T04:45:15.066Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="JAVA命令学习" scheme="http://www.qiuchengjia.cn/categories/JAVA%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JAVA命令学习" scheme="http://www.qiuchengjia.cn/tags/JAVA%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java单例模式的七种写法</title>
    <link href="http://www.qiuchengjia.cn/2016/08/12/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%83%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <id>http://www.qiuchengjia.cn/2016/08/12/JAVA设计模式/Java单例模式的七种写法/</id>
    <published>2016-08-11T23:37:17.000Z</published>
    <updated>2016-08-12T04:44:48.409Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="JAVA设计模式" scheme="http://www.qiuchengjia.cn/categories/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JAVA设计模式" scheme="http://www.qiuchengjia.cn/tags/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java反编译</title>
    <link href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <id>http://www.qiuchengjia.cn/2016/08/12/JAVA/Java反编译/</id>
    <published>2016-08-11T23:03:35.000Z</published>
    <updated>2016-08-11T15:15:36.555Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>java反编译，等我明天实现</li>
</ul>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;java反编译，等我明天实现&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java枚举类</title>
    <link href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
    <id>http://www.qiuchengjia.cn/2016/08/12/JAVA/Java枚举类/</id>
    <published>2016-08-11T22:19:08.000Z</published>
    <updated>2016-08-12T04:47:33.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul>
<li>在java语言中还没有引入枚举类型之前，表示枚举类型的常用模式是声明一组具有int常量。之前我们通常利用public final static 方法定义的代码如下，分别用1 表示春天，2表示夏天，3表示秋天，4表示冬天</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Season</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SPRING = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUMMER = <span class="number">2</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUTUMN = <span class="number">3</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WINTER = <span class="number">4</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这种方法称作int枚举模式。可这种模式有什么问题呢，我们都用了那么久了，应该没问题的。通常我们写出来的代码都会考虑它的安全性、易用性和可读性。 首先我们来考虑一下它的类型安全性。当然这种模式不是类型安全的。比如说我们设计一个函数，要求传入春夏秋冬的某个值。但是使用int类型，我们无法保证传入的值为合法。代码如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getChineseSeason</span><span class="params">(<span class="keyword">int</span> season)</span></span>&#123;</div><div class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">switch</span>(season)&#123;</div><div class="line">            <span class="keyword">case</span> Season.SPRING :</div><div class="line">                result.append(<span class="string">"春天"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Season.SUMMER :</div><div class="line">                result.append(<span class="string">"夏天"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Season.AUTUMN :</div><div class="line">                result.append(<span class="string">"秋天"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Season.WINTER :</div><div class="line">                result.append(<span class="string">"冬天"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span> :</div><div class="line">                result.append(<span class="string">"地球没有的季节"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>.getChineseSeason(Season.SPRING));<span class="comment">//这是正常的场景</span></div><div class="line"></div><div class="line">        System.out.println(<span class="keyword">this</span>.getChineseSeason(<span class="number">5</span>));</div><div class="line">        <span class="comment">//这个却是不正常的场景，这就导致了类型不安全问题</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>程序getChineseSeason(Season.SPRING)是我们预期的使用方法。可getChineseSeason(5)显然就不是了，而且编译很通过，在运行时会出现什么情况，我们就不得而知了。这显然就不符合Java程序的类型安全</p>
</li>
<li><p>接下来我们来考虑一下这种模式的可读性。使用枚举的大多数场合，我都需要方便得到枚举类型的字符串表达式。如果将int枚举常量打印出来，我们所见到的就是一组数字，这是没什么太大的用处。我们可能会想到使用String常量代替int常量。虽然它为这些常量提供了可打印的字符串，但是它会导致性能问题，因为它依赖于字符串的比较操作，所以这种模式也是我们不期望的。 从类型安全性和程序可读性两方面考虑，int和String枚举模式的缺点就显露出来了。幸运的是，从Java1.5发行版本开始，就提出了另一种可以替代的解决方案，可以避免int和String枚举模式的缺点，并提供了许多额外的好处。那就是枚举类型（enum type）。接下来的章节将介绍枚举类型的定义、特征、应用场景和优缺点</p>
</li>
</ul>
<a id="more"></a>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>枚举类型（enum type）是指由一组固定的常量组成合法的类型。Java中由关键字enum来定义一个枚举类型。下面就是java枚举类型的定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Season &#123;</div><div class="line">    SPRING, SUMMER, AUTUMN, WINER;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>Java定义枚举类型的语句很简约。它有以下特点：</p>
<ol>
<li><p>使用关键字enum</p>
</li>
<li><p>类型名称，比如这里的Season</p>
</li>
<li><p>一串允许的值，比如上面定义的春夏秋冬四季</p>
</li>
<li><p>枚举可以单独定义在一个文件中，也可以嵌在其它Java类中</p>
</li>
<li><p>枚举可以实现一个或多个接口（Interface）</p>
</li>
<li><p>可以定义新的变量</p>
</li>
<li><p>可以定义新的方法</p>
</li>
<li><p>可以定义根据具体枚举值而相异的类</p>
</li>
</ol>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>以在背景中提到的类型安全为例，用枚举类型重写那段代码。代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Season &#123;</div><div class="line">    SPRING(<span class="number">1</span>), SUMMER(<span class="number">2</span>), AUTUMN(<span class="number">3</span>), WINTER(<span class="number">4</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(<span class="keyword">int</span> code)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> code;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseSeason</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将英文的季节转换成中文季节</div><div class="line">     * <span class="doctag">@param</span> season</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChineseSeason</span><span class="params">(Season season)</span></span>&#123;</div><div class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">switch</span>(season)&#123;</div><div class="line">            <span class="keyword">case</span> SPRING :</div><div class="line">                result.append(<span class="string">"[中文：春天，枚举常量:"</span> + season.name() + <span class="string">"，数据:"</span> + season.getCode() + <span class="string">"]"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> AUTUMN :</div><div class="line">                result.append(<span class="string">"[中文：秋天，枚举常量:"</span> + season.name() + <span class="string">"，数据:"</span> + season.getCode() + <span class="string">"]"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> SUMMER : </div><div class="line">                result.append(<span class="string">"[中文：夏天，枚举常量:"</span> + season.name() + <span class="string">"，数据:"</span> + season.getCode() + <span class="string">"]"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> WINTER :</div><div class="line">                result.append(<span class="string">"[中文：冬天，枚举常量:"</span> + season.name() + <span class="string">"，数据:"</span> + season.getCode() + <span class="string">"]"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span> :</div><div class="line">                result.append(<span class="string">"地球没有的季节 "</span> + season.name());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(Season s : Season.values())&#123;</div><div class="line">            System.out.println(getChineseSeason(s));<span class="comment">//这是正常的场景</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//System.out.println(getChineseSeason(5));</span></div><div class="line">        <span class="comment">//此处已经是编译不通过了，这就保证了类型安全</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</div><div class="line">        UseSeason useSeason = <span class="keyword">new</span> UseSeason();</div><div class="line">        useSeason.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>输出</li>
</ul>
<blockquote>
<p>[中文：春天，枚举常量:SPRING，数据:1] [中文：夏天，枚举常量:SUMMER，数据:2] [中文：秋天，枚举常量:AUTUMN，数据:3] [中文：冬天，枚举常量:WINTER，数据:4]</p>
</blockquote>
<ul>
<li>这里有一个问题，为什么我要将域添加到枚举类型中呢？目的是想将数据与它的常量关联起来。如1代表春天，2代表夏天</li>
</ul>
<h3 id="什么时候使用"><a href="#什么时候使用" class="headerlink" title="什么时候使用"></a>什么时候使用</h3><ul>
<li>那么什么时候应该使用枚举呢？每当需要一组固定的常量的时候，如一周的天数、一年四季等。或者是在我们编译前就知道其包含的所有值的集合。Java 1.5的枚举能满足绝大部分程序员的要求的，它的简明，易用的特点是很突出的</li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul>
<li>这里介绍了七种常见的用法</li>
</ul>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;  </div><div class="line">  RED, GREEN, BLANK, YELLOW  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Signal &#123;  </div><div class="line">    GREEN, YELLOW, RED  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrafficLight</span> </span>&#123;  </div><div class="line">    Signal color = Signal.RED;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">switch</span> (color) &#123;  </div><div class="line">        <span class="keyword">case</span> RED:  </div><div class="line">            color = Signal.GREEN;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> YELLOW:  </div><div class="line">            color = Signal.RED;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> GREEN:  </div><div class="line">            color = Signal.YELLOW;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="向枚举中添加新方法"><a href="#向枚举中添加新方法" class="headerlink" title="向枚举中添加新方法"></a>向枚举中添加新方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;  </div><div class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>);  </div><div class="line">    <span class="comment">// 成员变量  </span></div><div class="line">    <span class="keyword">private</span> String name;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;  </div><div class="line">    <span class="comment">// 构造方法  </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">        <span class="keyword">this</span>.index = index;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 普通方法  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">for</span> (Color c : Color.values()) &#123;  </div><div class="line">            <span class="keyword">if</span> (c.getIndex() == index) &#123;  </div><div class="line">                <span class="keyword">return</span> c.name;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// get set 方法  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> name;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> index;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.index = index;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="覆盖枚举的方法"><a href="#覆盖枚举的方法" class="headerlink" title="覆盖枚举的方法"></a>覆盖枚举的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;  </div><div class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>);  </div><div class="line">    <span class="comment">// 成员变量  </span></div><div class="line">    <span class="keyword">private</span> String name;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;  </div><div class="line">    <span class="comment">// 构造方法  </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">        <span class="keyword">this</span>.index = index;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//覆盖方法  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.index+<span class="string">"_"</span>+<span class="keyword">this</span>.name;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Behaviour</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;  </div><div class="line">    <span class="function">String <span class="title">getInfo</span><span class="params">()</span></span>;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color implements Behaviour&#123;  </div><div class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>);  </div><div class="line">    <span class="comment">// 成员变量  </span></div><div class="line">    <span class="keyword">private</span> String name;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;  </div><div class="line">    <span class="comment">// 构造方法  </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">        <span class="keyword">this</span>.index = index;  </div><div class="line">    &#125;  </div><div class="line"><span class="comment">//接口方法  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//接口方法  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="keyword">this</span>.index+<span class="string">":"</span>+<span class="keyword">this</span>.name);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用接口组织枚举"><a href="#使用接口组织枚举" class="headerlink" title="使用接口组织枚举"></a>使用接口组织枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Food</span> </span>&#123;  </div><div class="line">    <span class="keyword">enum</span> Coffee implements Food&#123;  </div><div class="line">        BLACK_COFFEE,DECAF_COFFEE,LATTE,CAPPUCCINO  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">enum</span> Dessert implements Food&#123;  </div><div class="line">        FRUIT, CAKE, GELATO  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="关于枚举集合的使用"><a href="#关于枚举集合的使用" class="headerlink" title="关于枚举集合的使用"></a>关于枚举集合的使用</h3><ul>
<li>java.util.EnumSet和java.util.EnumMap是两个枚举集合。EnumSet保证集合中的元素不重复;EnumMap中的 key是enum类型，而value则可以是任意类型。关于这个两个集合的使用就不在这里赘述，可以参考JDK文档</li>
</ul>
<hr>
<hr>
<h2 id="枚举是如何保证线程安全的"><a href="#枚举是如何保证线程安全的" class="headerlink" title="枚举是如何保证线程安全的"></a>枚举是如何保证线程安全的</h2><ul>
<li>要想看源码，首先得有一个类吧，那么枚举类型到底是什么类呢？是enum吗？答案很明显不是，enum就和class一样，只是一个关键字，他并不是一个类，那么枚举是由什么类维护的呢，我们简单的写一个枚举：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> t &#123;</div><div class="line">    SPRING,SUMMER,AUTUMN,WINTER;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后我们使用反编译，看看这段代码到底是怎么实现的，反编译（<a href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E5%8F%8D%E7%BC%96%E8%AF%91/">Java的反编译</a>）后代码内容如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Enum</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">T</span><span class="params">(String s, <span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(s, i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T[] values()&#123;</div><div class="line">        T at[];</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        T at1[];</div><div class="line">        System.arraycopy(at = ENUM$VALUES, <span class="number">0</span>, at1 = <span class="keyword">new</span> T[i = at.length], <span class="number">0</span>, i);</div><div class="line">        <span class="keyword">return</span> at1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">valueOf</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (T)Enum.valueOf(demo/T, s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T SPRING;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T SUMMER;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T AUTUMN;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T WINTER;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> T ENUM$VALUES[];</div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        SPRING = <span class="keyword">new</span> T(<span class="string">"SPRING"</span>, <span class="number">0</span>);</div><div class="line">        SUMMER = <span class="keyword">new</span> T(<span class="string">"SUMMER"</span>, <span class="number">1</span>);</div><div class="line">        AUTUMN = <span class="keyword">new</span> T(<span class="string">"AUTUMN"</span>, <span class="number">2</span>);</div><div class="line">        WINTER = <span class="keyword">new</span> T(<span class="string">"WINTER"</span>, <span class="number">3</span>);</div><div class="line">        ENUM$VALUES = (<span class="keyword">new</span> T[] &#123;</div><div class="line">            SPRING, SUMMER, AUTUMN, WINTER</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>通过反编译后代码我们可以看到，<strong>public final class T extends Enum</strong>，说明，该类是继承了Enum类的，同时final关键字告诉我们，这个类也是不能被继承的。当我们使用<strong>enmu</strong>来定义一个枚举类型的时候，编译器会自动帮我们创建一个final类型的类继承Enum类,所以枚举类型不能被继承，我们看到这个类中有几个属性和方法</p>
</li>
<li><p>我们可以看到：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T SPRING;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T SUMMER;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T AUTUMN;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T WINTER;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> T ENUM$VALUES[];</div><div class="line">        <span class="keyword">static</span></div><div class="line">        &#123;</div><div class="line">            SPRING = <span class="keyword">new</span> T(<span class="string">"SPRING"</span>, <span class="number">0</span>);</div><div class="line">            SUMMER = <span class="keyword">new</span> T(<span class="string">"SUMMER"</span>, <span class="number">1</span>);</div><div class="line">            AUTUMN = <span class="keyword">new</span> T(<span class="string">"AUTUMN"</span>, <span class="number">2</span>);</div><div class="line">            WINTER = <span class="keyword">new</span> T(<span class="string">"WINTER"</span>, <span class="number">3</span>);</div><div class="line">            ENUM$VALUES = (<span class="keyword">new</span> T[] &#123;</div><div class="line">                SPRING, SUMMER, AUTUMN, WINTER</div><div class="line">            &#125;);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li>都是static类型的，因为static类型的属性会在类被加载之后被初始化，当一个Java类第一次被真正使用到的时候静态资源被初始化、Java类的加载和初始化过程都是线程安全的。所以，<strong>创建一个enum类型是线程安全的</strong></li>
</ul>
<h2 id="为什么用枚举实现的单例是最好的方式"><a href="#为什么用枚举实现的单例是最好的方式" class="headerlink" title="为什么用枚举实现的单例是最好的方式"></a>为什么用枚举实现的单例是最好的方式</h2><ul>
<li>在<a href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%83%E7%A7%8D%E5%86%99%E6%B3%95/">单例模式的七种写法</a>中，我们看到一共有七种实现单例的方式，其中，Effective Java作者Josh Bloch 提倡使用枚举的方式，既然大神说这种方式好，那我们就要知道它为什么好？</li>
</ul>
<h3 id="枚举写法简单"><a href="#枚举写法简单" class="headerlink" title="枚举写法简单"></a>枚举写法简单</h3><ul>
<li>写法简单这个大家看看<a href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%83%E7%A7%8D%E5%86%99%E6%B3%95/">单例模式的七种写法</a>里面的实现就知道区别了</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EasySingleton&#123;</div><div class="line">    INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>你可以通过<strong>EasySingleton.INSTANCE</strong>来访问</li>
</ul>
<h3 id="枚举自己处理序列化"><a href="#枚举自己处理序列化" class="headerlink" title="枚举自己处理序列化"></a>枚举自己处理序列化</h3><ul>
<li>我们知道，以前的所有的单例模式都有一个比较大的问题，就是一旦实现了Serializable接口之后，就不再是单例得了，因为，每次调用 readObject()方法返回的都是一个新创建出来的对象，有一种解决办法就是使用readResolve()方法来避免此事发生。但是，<strong>为了保证枚举类型像Java规范中所说的那样，每一个枚举类型及其定义的枚举变量在JVM中都是唯一的，在枚举类型的序列化和反序列化上，Java做了特殊的规定</strong>。原文如下：</li>
</ul>
<blockquote>
<p>Enum constants are serialized differently than ordinary serializable or externalizable objects. The serialized form of an enum constant consists solely of its name; field values of the constant are not present in the form. To serialize an enum constant, ObjectOutputStream writes the value returned by the enum constant’s name method. To deserialize an enum constant, ObjectInputStream reads the constant name from the stream; the deserialized constant is then obtained by calling the java.lang.Enum.valueOf method, passing the constant’s enum type along with the received constant name as arguments. Like other serializable or externalizable objects, enum constants can function as the targets of back references appearing subsequently in the serialization stream. The process by which enum constants are serialized cannot be customized: any class-specific writeObject, readObject, readObjectNoData, writeReplace, and readResolve methods defined by enum types are ignored during serialization and deserialization. Similarly, any serialPersistentFields or serialVersionUID field declarations are also ignored–all enum types have a fixedserialVersionUID of 0L. Documenting serializable fields and data for enum types is unnecessary, since there is no variation in the type of data sent.</p>
</blockquote>
<ul>
<li>大概意思就是说，在序列化的时候Java仅仅是将枚举对象的name属性输出到结果中，反序列化的时候则是通过java.lang.Enum的valueOf方法来根据名字查找枚举对象。同时，编译器是不允许任何对这种序列化机制的定制的，因此禁用了writeObject、readObject、readObjectNoData、writeReplace和readResolve等方法。 我们看一下这个valueOf方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Enum&lt;T&gt;&gt; <span class="function">T <span class="title">valueOf</span><span class="params">(Class&lt;T&gt; enumType,String name)</span> </span>&#123;  </div><div class="line">            T result = enumType.enumConstantDirectory().get(name);  </div><div class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>)  </div><div class="line">                <span class="keyword">return</span> result;  </div><div class="line">            <span class="keyword">if</span> (name == <span class="keyword">null</span>)  </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Name is null"</span>);  </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(  </div><div class="line">                <span class="string">"No enum const "</span> + enumType +<span class="string">"."</span> + name);  </div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li>从代码中可以看到，代码会尝试从调用enumType这个Class对象的enumConstantDirectory()方法返回的map中获取名字为name的枚举对象，如果不存在就会抛出异常。再进一步跟到enumConstantDirectory()方法，就会发现到最后会以反射的方式调用enumType这个类型的values()静态方法，也就是上面我们看到的编译器为我们创建的那个方法，然后用返回结果填充enumType这个Class对象中的enumConstantDirectory属性。所以，<strong>JVM对序列化有保证</strong></li>
</ul>
<h3 id="枚举实例创建是thread-safe-线程安全的"><a href="#枚举实例创建是thread-safe-线程安全的" class="headerlink" title="枚举实例创建是thread-safe(线程安全的)"></a>枚举实例创建是thread-safe(线程安全的)</h3><ul>
<li>当一个Java类第一次被真正使用到的时候静态资源被初始化、Java类的加载和初始化过程都是线程安全的。所以，创建一个enum类型是线程安全的</li>
</ul>
<h2 id="扩展资料"><a href="#扩展资料" class="headerlink" title="扩展资料"></a>扩展资料</h2><ul>
<li><a href="http://www.qiuchengjia.cn/2016/08/12/JAVA%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Java%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-Enum/">Java源码分析–Enum</a></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://www.hollischuang.com/archives/195" target="_blank" rel="external">Java的枚举类型用法介绍</a></p>
</li>
<li><p><a href="http://www.hollischuang.com/archives/197" target="_blank" rel="external">深度分析Java的枚举类型—-枚举的线程安全性及序列化问题</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在java语言中还没有引入枚举类型之前，表示枚举类型的常用模式是声明一组具有int常量。之前我们通常利用public final static 方法定义的代码如下，分别用1 表示春天，2表示夏天，3表示秋天，4表示冬天&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Season&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; SPRING = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; SUMMER = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; AUTUMN = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; WINTER = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;这种方法称作int枚举模式。可这种模式有什么问题呢，我们都用了那么久了，应该没问题的。通常我们写出来的代码都会考虑它的安全性、易用性和可读性。 首先我们来考虑一下它的类型安全性。当然这种模式不是类型安全的。比如说我们设计一个函数，要求传入春夏秋冬的某个值。但是使用int类型，我们无法保证传入的值为合法。代码如下所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getChineseSeason&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; season)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        StringBuffer result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuffer();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(season)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Season.SPRING :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                result.append(&lt;span class=&quot;string&quot;&gt;&quot;春天&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Season.SUMMER :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                result.append(&lt;span class=&quot;string&quot;&gt;&quot;夏天&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Season.AUTUMN :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                result.append(&lt;span class=&quot;string&quot;&gt;&quot;秋天&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Season.WINTER :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                result.append(&lt;span class=&quot;string&quot;&gt;&quot;冬天&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                result.append(&lt;span class=&quot;string&quot;&gt;&quot;地球没有的季节&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result.toString();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getChineseSeason(Season.SPRING));&lt;span class=&quot;comment&quot;&gt;//这是正常的场景&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getChineseSeason(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//这个却是不正常的场景，这就导致了类型不安全问题&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;程序getChineseSeason(Season.SPRING)是我们预期的使用方法。可getChineseSeason(5)显然就不是了，而且编译很通过，在运行时会出现什么情况，我们就不得而知了。这显然就不符合Java程序的类型安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接下来我们来考虑一下这种模式的可读性。使用枚举的大多数场合，我都需要方便得到枚举类型的字符串表达式。如果将int枚举常量打印出来，我们所见到的就是一组数字，这是没什么太大的用处。我们可能会想到使用String常量代替int常量。虽然它为这些常量提供了可打印的字符串，但是它会导致性能问题，因为它依赖于字符串的比较操作，所以这种模式也是我们不期望的。 从类型安全性和程序可读性两方面考虑，int和String枚举模式的缺点就显露出来了。幸运的是，从Java1.5发行版本开始，就提出了另一种可以替代的解决方案，可以避免int和String枚举模式的缺点，并提供了许多额外的好处。那就是枚举类型（enum type）。接下来的章节将介绍枚举类型的定义、特征、应用场景和优缺点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java自动拆箱和装箱</title>
    <link href="http://www.qiuchengjia.cn/2016/08/11/JAVA/Java%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%92%8C%E8%A3%85%E7%AE%B1/"/>
    <id>http://www.qiuchengjia.cn/2016/08/11/JAVA/Java自动拆箱和装箱/</id>
    <published>2016-08-11T14:24:02.000Z</published>
    <updated>2016-08-11T07:22:34.756Z</updated>
    
    <content type="html"><![CDATA[<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%92%8C%E8%A3%85%E7%AE%B1.png" alt=""></center>

<h2 id="什么是自动拆箱和装箱"><a href="#什么是自动拆箱和装箱" class="headerlink" title="什么是自动拆箱和装箱"></a>什么是自动拆箱和装箱</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>自动装箱就是 Java 自动将原始数据类型转为对应的包装类对象 比如将 int 型的变量转成 Integer对象 自动拆箱反之(从 Java 1.5 开始引入)</li>
</ul>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul>
<li>自动装箱时，编译器调用 valueOf() 将原始数据类型值转为对象；同时自动拆箱时，编译器调用类似 intValue(), doubleValue() 这类方法将对象转换成原始类型值</li>
</ul>
<table>
<thead>
<tr>
<th>基本类型</th>
<th style="text-align:left">大小</th>
<th style="text-align:left">数值范围</th>
<th style="text-align:left">默认值</th>
<th style="text-align:left">包装类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td style="text-align:left">^</td>
<td style="text-align:left">true,false</td>
<td style="text-align:left">false</td>
<td style="text-align:left">Boolean</td>
</tr>
<tr>
<td>byte</td>
<td style="text-align:left">8bit</td>
<td style="text-align:left">-2^7 – 2^7-1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Byte</td>
</tr>
<tr>
<td>char</td>
<td style="text-align:left">16bit</td>
<td style="text-align:left">\u0000 – \uffff</td>
<td style="text-align:left">\u0000</td>
<td style="text-align:left">Character</td>
</tr>
<tr>
<td>short</td>
<td style="text-align:left">16bit</td>
<td style="text-align:left">-2^15 – 2^15-1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Short</td>
</tr>
<tr>
<td>int</td>
<td style="text-align:left">32bit</td>
<td style="text-align:left">-2^31 – 2^31-1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Integer</td>
</tr>
<tr>
<td>long</td>
<td style="text-align:left">64bit</td>
<td style="text-align:left">-2^63 – 2^63-1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Long</td>
</tr>
<tr>
<td>float</td>
<td style="text-align:left">32bit</td>
<td style="text-align:left">IEEE 754</td>
<td style="text-align:left">0.0f</td>
<td style="text-align:left">Float</td>
</tr>
<tr>
<td>double</td>
<td style="text-align:left">64bit</td>
<td style="text-align:left">IEEE 754</td>
<td style="text-align:left">0.0d</td>
<td style="text-align:left">Double</td>
</tr>
<tr>
<td>void</td>
<td style="text-align:left">^</td>
<td style="text-align:left">^</td>
<td style="text-align:left">^</td>
<td style="text-align:left">Void</td>
</tr>
</tbody>
</table>
<h3 id="基本类型与装箱基本类型的区别"><a href="#基本类型与装箱基本类型的区别" class="headerlink" title="基本类型与装箱基本类型的区别"></a>基本类型与装箱基本类型的区别</h3><ul>
<li><p>基本类型只有值，而装箱基本类型则具有与它们的值不同的同一性。换句话说，对装箱基本类型运用 == 操作符几乎总是错的</p>
</li>
<li><p>基本类型只有功能完备的值，而装箱基本类型除了它对应基本类型的所有功能值外，还有一个非功能值 null，这导致了对于包装基本类型进行拆箱操作后所进行的操作存在 NPE 的风险</p>
</li>
<li><p>基本类型更加省空间和时间，如果对包装类型进行频繁的装箱和拆箱操作会影响性能</p>
</li>
</ul>
<a id="more"></a>
<h2 id="何时发生自动装箱与拆箱？"><a href="#何时发生自动装箱与拆箱？" class="headerlink" title="何时发生自动装箱与拆箱？"></a>何时发生自动装箱与拆箱？</h2><h3 id="赋值时"><a href="#赋值时" class="headerlink" title="赋值时"></a>赋值时</h3><ul>
<li>在Java1.5之前，需要手动地进行类型转换，而现在所有的转换都是有编译器来完成</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//before autoboxing</span></div><div class="line">Integer iObject = Integer.valueOf(<span class="number">3</span>);</div><div class="line"><span class="keyword">int</span> iPrimitive = iObject.intValue()</div><div class="line"> </div><div class="line"><span class="comment">//after java5</span></div><div class="line">Integer iObject = <span class="number">3</span>;      <span class="comment">//autobxing - primitive to wrapper conversion</span></div><div class="line"><span class="keyword">int</span> iPrimitive = iObject; <span class="comment">//unboxing - object to primitive conversion</span></div></pre></td></tr></table></figure>
<h3 id="方法调用时"><a href="#方法调用时" class="headerlink" title="方法调用时"></a>方法调用时</h3><ul>
<li>当在进行方法调用时，可以传入原始数据值或对象，编译器同样会自动进行转换</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">show</span><span class="params">(Integer iParam)</span></span>&#123;</div><div class="line">   System.out.println(<span class="string">"autoboxing example - method invocation i: "</span> + iParam);</div><div class="line">   <span class="keyword">return</span> iParam;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//autoboxing and unboxing in method invocation</span></div><div class="line">show(<span class="number">3</span>); <span class="comment">//autoboxing</span></div><div class="line"><span class="keyword">int</span> result = show(<span class="number">3</span>); <span class="comment">//unboxing because return type of method is Integer</span></div></pre></td></tr></table></figure>
<h2 id="自动装箱引起的性能问题"><a href="#自动装箱引起的性能问题" class="headerlink" title="自动装箱引起的性能问题"></a>自动装箱引起的性能问题</h2><ul>
<li>如果有人告诉你：“只要修改一个字符，下面这段代码的运行速度就能提高5倍。”，你觉得可能么？</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> t = System.currentTimeMillis();</div><div class="line">Long sum = <span class="number">0L</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</div><div class="line">    sum += i;</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"total:"</span> + sum);</div><div class="line">System.out.println(<span class="string">"processing time: "</span> + (System.currentTimeMillis() - t) + <span class="string">" ms"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>输出结果：</li>
</ul>
<blockquote>
<p>total:2305843005992468481<br>processing time: 63556 ms</p>
</blockquote>
<ul>
<li>将Long修改为long，再来看一下运行结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> t = System.currentTimeMillis();</div><div class="line"><span class="keyword">long</span> sum = <span class="number">0L</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</div><div class="line">    sum += i;</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"total:"</span> + sum);</div><div class="line">System.out.println(<span class="string">"processing time: "</span> + (System.currentTimeMillis() - t) + <span class="string">" ms"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>输出结果：</li>
</ul>
<blockquote>
<p>total:2305843005992468481<br>processing time: 12229 ms</p>
</blockquote>
<ul>
<li>事实证明，仅仅修改了一个字符，性能提高了不止一倍两倍。那，就究竟是什么原因导致的呢？<br>因为，+这个操作符不适用Integer对象，在进行数值相加操作之前会发生自动拆箱操作，转换成int，相加之后还会发生自动拆箱操作，装换成Integer对象。其内部变化如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sum = sum.longValue() + i;</div><div class="line">Long sum = <span class="keyword">new</span> Long(sum);</div></pre></td></tr></table></figure>
<ul>
<li>很明显，在上面的循环中会创建2147483647个”Long“类型实例，在这样庞大的循环中，会降低程序的性能并且加重了垃圾回收的工作量</li>
</ul>
<blockquote>
<p><strong>说明：包含在包装器中的内容不会改变。即Long对象是不可变的</strong></p>
</blockquote>
<h2 id="重载与自动装箱"><a href="#重载与自动装箱" class="headerlink" title="重载与自动装箱"></a>重载与自动装箱</h2><ul>
<li>在java 5之前，value(int)和value(Integer)是完全不相同的方法，开发者不会因为传入是int还是Integer调用哪个方法困惑，但是由于自动装箱和拆箱的引入，处理重载方法时会不会有什么变化呢？可通过下面一个例子进行探讨：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"method with primitive argument"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Integer num)</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"method with wrapper argument"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//calling overloaded method</span></div><div class="line">AutoboxingTest autoTest = <span class="keyword">new</span> AutoboxingTest();</div><div class="line"><span class="keyword">int</span> value = <span class="number">3</span>;</div><div class="line">autoTest.test(value);  <span class="comment">//no autoboxing </span></div><div class="line">Integer iValue = value;</div><div class="line">autoTest.test(iValue); <span class="comment">//no autoboxing</span></div></pre></td></tr></table></figure>
<ul>
<li>输出结果</li>
</ul>
<blockquote>
<p>method with primitive argument<br>method with wrapper argument</p>
</blockquote>
<ul>
<li>从输出结果可以看出，在重载的情况下，不会发生自动装箱操作</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>自动装箱与拆箱在编程过程中给我们带来了极大的方便，但也存在一些容易让人出错的问题</li>
</ul>
<h3 id="对象相等比较"><a href="#对象相等比较" class="headerlink" title="对象相等比较"></a>对象相等比较</h3><ul>
<li>“==”既可用于原始值的比较，也可用于对象间的比较。当进行对象间的比较时，实质上比较的是对象的引用是否相等，而不是比较对象代表的值。如果要比较对象的值，应当使用对象对应的equals方法。可通过以下例子进行探讨：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoboxingTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="comment">// Example 1: == comparison pure primitive – no autoboxing</span></div><div class="line">        <span class="keyword">int</span> i1 = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> i2 = <span class="number">1</span>;</div><div class="line">        System.out.println(<span class="string">"i1==i2 : "</span> + (i1 == i2)); <span class="comment">// true</span></div><div class="line"> </div><div class="line">        <span class="comment">// Example 2: equality operator mixing object and primitive</span></div><div class="line">        Integer num1 = <span class="number">1</span>; <span class="comment">// autoboxing</span></div><div class="line">        <span class="keyword">int</span> num2 = <span class="number">1</span>;</div><div class="line">        System.out.println(<span class="string">"num1 == num2 : "</span> + (num1 == num2)); <span class="comment">// true</span></div><div class="line"> </div><div class="line">        <span class="comment">// Example 3: special case - arises due to autoboxing in Java</span></div><div class="line">        Integer obj1 = <span class="number">1</span>; <span class="comment">// autoboxing will call Integer.valueOf()</span></div><div class="line">        Integer obj2 = <span class="number">1</span>; <span class="comment">// same call to Integer.valueOf() will return same cached Object</span></div><div class="line">        System.out.println(<span class="string">"obj1 == obj2 : "</span> + (obj1 == obj2)); <span class="comment">// true</span></div><div class="line"> </div><div class="line">        <span class="comment">// Example 4: equality operator - pure object comparison</span></div><div class="line">        Integer one = <span class="keyword">new</span> Integer(<span class="number">1</span>); <span class="comment">// no autoboxing</span></div><div class="line">        Integer anotherOne = <span class="keyword">new</span> Integer(<span class="number">1</span>);</div><div class="line">        System.out.println(<span class="string">"one == anotherOne : "</span> + (one == anotherOne)); <span class="comment">// false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>输出结果</li>
</ul>
<blockquote>
<p>i1==i2 : true<br>num1 == num2 : true<br>obj1 == obj2 : true<br>one == anotherOne : false</p>
</blockquote>
<ul>
<li><p>值得注意的是，在Example 2中，比较是一个对象和一个原始值，出现这种情况比较的应该是对象的值</p>
</li>
<li><p>让人感到困惑的Example 3，在一开始我们说过，”==”用于对象间的比较时，比较的是它们的引用，那么为什么obj1 == obj2返回的结果却是true？<strong>这是一种极端情况，处于节省内存的考虑，JVM会缓存-128到127的Integer对象</strong>。也就是说，在创建obj1对象时，会进行自动装箱操作，并且将其对象保存至缓存中，在创建obj2对象时，同样会进行自动装箱操作，然后在缓存中查找是否有相同值的对象，如果有，那么obj2对象就会指向obj1对象。obj1和obj2实际上是同一个对象。所以使用”==”比较返回true</p>
</li>
<li><p>而Example 4，是通过使用构造器来创建对象的，而没有发生自动装箱操作，不会执行缓存策略，故one和anotherOne是指向不同的引用的</p>
</li>
</ul>
<blockquote>
<p>　<strong>说明：这种 Integer 缓存策略仅在自动装箱（autoboxing）的时候有用，使用构造器创建的 Integer 对象不能被缓存</strong></p>
</blockquote>
<h3 id="容易混乱的对象和原始数据值"><a href="#容易混乱的对象和原始数据值" class="headerlink" title="容易混乱的对象和原始数据值"></a>容易混乱的对象和原始数据值</h3><ul>
<li>一个很容易犯错的问题，就是忽略对象与原始数据值之间的差异，在进行比较操作时，对象如果没有初始化或者为null，在自动拆箱过程中obj.xxxValue，则会抛出NullPointerException，可通过以下例子进行探讨：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Integer count;</div><div class="line"><span class="comment">//NullPointerException on unboxing</span></div><div class="line"><span class="keyword">if</span>( count &lt;= <span class="number">0</span>)&#123;</div><div class="line">  System.out.println(<span class="string">"Count is not started yet"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生成无用对象增加GC压力"><a href="#生成无用对象增加GC压力" class="headerlink" title="生成无用对象增加GC压力"></a>生成无用对象增加GC压力</h3><ul>
<li>因为自动装箱会隐式地创建对象，像前面提到的那样，如果在一个循环体中，会创建无用的中间对象，这样会增加GC压力，拉低程序的性能。所以在写循环时一定要注意代码，避免引入不必要的自动装箱操作</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://gongchuangsu.com/2016/05/25/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/15.Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/" target="_blank" rel="external">Java学习笔记之自动装箱与拆箱</a>  </p>
</li>
<li><p><a href="http://ryan-hou.github.io/blog/2016/06/08/zi-dong-zhuang-xiang-yu-chai-xiang/" target="_blank" rel="external">自动装箱与拆箱</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Java%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%92%8C%E8%A3%85%E7%AE%B1.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;什么是自动拆箱和装箱&quot;&gt;&lt;a href=&quot;#什么是自动拆箱和装箱&quot; class=&quot;headerlink&quot; title=&quot;什么是自动拆箱和装箱&quot;&gt;&lt;/a&gt;什么是自动拆箱和装箱&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自动装箱就是 Java 自动将原始数据类型转为对应的包装类对象 比如将 int 型的变量转成 Integer对象 自动拆箱反之(从 Java 1.5 开始引入)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;过程&quot;&gt;&lt;a href=&quot;#过程&quot; class=&quot;headerlink&quot; title=&quot;过程&quot;&gt;&lt;/a&gt;过程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自动装箱时，编译器调用 valueOf() 将原始数据类型值转为对象；同时自动拆箱时，编译器调用类似 intValue(), doubleValue() 这类方法将对象转换成原始类型值&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基本类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;大小&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;数值范围&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;默认值&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;包装类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;true,false&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Boolean&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;8bit&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-2^7 – 2^7-1&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Byte&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;16bit&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\u0000 – \uffff&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\u0000&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;16bit&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-2^15 – 2^15-1&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Short&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;32bit&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-2^31 – 2^31-1&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;64bit&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-2^63 – 2^63-1&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;32bit&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;IEEE 754&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0.0f&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Float&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;64bit&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;IEEE 754&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0.0d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Void&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;基本类型与装箱基本类型的区别&quot;&gt;&lt;a href=&quot;#基本类型与装箱基本类型的区别&quot; class=&quot;headerlink&quot; title=&quot;基本类型与装箱基本类型的区别&quot;&gt;&lt;/a&gt;基本类型与装箱基本类型的区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本类型只有值，而装箱基本类型则具有与它们的值不同的同一性。换句话说，对装箱基本类型运用 == 操作符几乎总是错的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基本类型只有功能完备的值，而装箱基本类型除了它对应基本类型的所有功能值外，还有一个非功能值 null，这导致了对于包装基本类型进行拆箱操作后所进行的操作存在 NPE 的风险&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基本类型更加省空间和时间，如果对包装类型进行频繁的装箱和拆箱操作会影响性能&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java注解</title>
    <link href="http://www.qiuchengjia.cn/2016/08/07/JAVA/Java%E6%B3%A8%E8%A7%A3/"/>
    <id>http://www.qiuchengjia.cn/2016/08/07/JAVA/Java注解/</id>
    <published>2016-08-07T13:20:39.000Z</published>
    <updated>2016-08-09T12:29:19.076Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h3><ul>
<li><p>注解对于开发人员来讲既熟悉又陌生，熟悉是因为只要你是做开发，都会用到注解（常见的@Override）；陌生是因为即使不使用注解也照常能够进行开发；注解不是必须的，但了解注解有助于我们深入理解某些第三方框架（比如Android Support Annotations、JUnit、xUtils、ActiveAndroid等），提高工作效率</p>
</li>
<li><p>ava注解又称为标注，是Java从1.5开始支持加入源码的特殊语法元数据；Java中的类、方法、变量、参数、包都可以被注解。这里提到的元数据是描述数据的数据，结合实例来说明：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>AnnotionDemo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>这里的”app_name”就是描述数据”AnnotionDemo”的数据，这是在配置文件中写的，注解是在源码中写的，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main_layout);</div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            setTextInOtherThread();</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>在上面的代码中，在MainActivity.java中复写了父类Activity.java的onCreate方法，使用到了@Override注解。但即使不加上@Override注解标记代码，程序也能够正常运行。那这里的@Override注解有什么用呢？使用它有什么好处？事实上，@Override是告诉编译器这个方法是一个重写方法，如果父类中不存在该方法，编译器会报错，提示该方法不是父类中的方法。如果不小心拼写错误，将onCreate写成了onCreat，而且没有使用@Override注解，程序依然能够编译通过，但运行结果和期望的大不相同。从示例可以看出，注解有助于阅读代码</p>
</li>
<li><p>使用注解很简单，根据注解类的@Target所修饰的对象范围，可以在类、方法、变量、参数、包中使用“@+注解类名+[属性值]”的方式使用注解。比如：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@UiThread</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTextInOtherThread</span><span class="params">(@StringRes <span class="keyword">int</span> resId)</span></span>&#123;</div><div class="line">    TextView threadTxtView = (TextView)MainActivity.<span class="keyword">this</span>.findViewById(R.id.threadTxtViewId);</div><div class="line">    threadTxtView.setText(resId);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="特别说明："><a href="#特别说明：" class="headerlink" title="特别说明："></a><strong>特别说明：</strong></h4><ul>
<li><p>注解仅仅是元数据，和业务逻辑无关，所以当你查看注解类时，发现里面没有任何逻辑处理；</p>
</li>
<li><p>javadoc中的@author、@version、@param、@return、@deprecated、@hide、@throws、@exception、@see是标记，并不是注解；</p>
</li>
</ul>
<a id="more"></a>
<h3 id="注解的作用"><a href="#注解的作用" class="headerlink" title="注解的作用"></a>注解的作用</h3><ul>
<li><p><strong>格式检查：</strong>告诉编译器信息，比如被@Override标记的方法如果不是父类的某个方法，IDE会报错；</p>
</li>
<li><p><strong>减少配置：</strong>运行时动态处理，得到注解信息，实现代替配置文件的功能；</p>
</li>
<li><p><strong>减少重复工作：</strong>比如第三方框架xUtils，通过注解@ViewInject减少对findViewById的调用，类似的还有（JUnit、ActiveAndroid等）；</p>
</li>
</ul>
<h3 id="注解是如何工作的？"><a href="#注解是如何工作的？" class="headerlink" title="注解是如何工作的？"></a>注解是如何工作的？</h3><ul>
<li>注解仅仅是元数据，和业务逻辑无关，所以当你查看注解类时，发现里面没有任何逻辑处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ViewInject &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/* parent view id */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">parentId</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果注解不包含业务逻辑处理，必然有人来实现这些逻辑。注解的逻辑实现是元数据的用户来处理的，注解仅仅提供它定义的属性（类/方法/变量/参数/包）的信息，注解的用户来读取这些信息并实现必要的逻辑。当使用java中的注解时（比如@Override、@Deprecated、@SuppressWarnings）JVM就是用户，它在字节码层面工作。如果是自定义的注解，比如第三方框架ActiveAndroid，它的用户是每个使用注解的类，所有使用注解的类都需要继承Model.java，在Model.java的构造方法中通过反射来获取注解类中的每个属性：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TableInfo</span><span class="params">(Class&lt;? extends Model&gt; type)</span> </span>&#123;</div><div class="line">    mType = type;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Table tableAnnotation = type.getAnnotation(Table.class);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (tableAnnotation != <span class="keyword">null</span>) &#123;</div><div class="line">        mTableName = tableAnnotation.name();</div><div class="line">        mIdName = tableAnnotation.id();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        mTableName = type.getSimpleName();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Manually add the id column since it is not declared like the other columns.</span></div><div class="line">    Field idField = getIdField(type);</div><div class="line">    mColumnNames.put(idField, mIdName);</div><div class="line"></div><div class="line">    List&lt;Field&gt; fields = <span class="keyword">new</span> LinkedList&lt;Field&gt;(ReflectionUtils.getDeclaredColumnFields(type));</div><div class="line">    Collections.reverse(fields);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">        <span class="keyword">if</span> (field.isAnnotationPresent(Column.class)) &#123;</div><div class="line">            <span class="keyword">final</span> Column columnAnnotation = field.getAnnotation(Column.class);</div><div class="line">            String columnName = columnAnnotation.name();</div><div class="line">            <span class="keyword">if</span> (TextUtils.isEmpty(columnName)) &#123;</div><div class="line">                columnName = field.getName();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mColumnNames.put(field, columnName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注解和配置文件的区别"><a href="#注解和配置文件的区别" class="headerlink" title="注解和配置文件的区别"></a>注解和配置文件的区别</h3><ul>
<li>通过上面的描述可以发现，其实注解干的很多事情，通过配置文件也可以干，比如为类设置配置属性；但注解和配置文件是有很多区别的，在实际编程过程中，注解和配置文件配合使用在工作效率、低耦合、可拓展性方面才会达到权衡</li>
</ul>
<hr>
<h4 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a><strong>配置文件：</strong></h4><p><strong>使用场合：</strong></p>
<ul>
<li><p>外部依赖的配置，比如build.gradle中的依赖配置；</p>
</li>
<li><p>同一项目团队内部达成一致的时候；</p>
</li>
<li><p>非代码类的资源文件（比如图片、布局、数据、签名文件等）；</p>
</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li><p>降低耦合，配置集中，容易扩展，比如Android应用多语言支持；</p>
</li>
<li><p>对象之间的关系一目了然，比如strings.xml；</p>
</li>
<li><p>xml配置文件比注解功能齐全，支持的类型更多，比如drawable、style等；</p>
</li>
</ul>
<p><strong> 缺点：</strong></p>
<ul>
<li><p>繁琐；</p>
</li>
<li><p>类型不安全，比如R.java中的都是资源ID，用TextView的setText方法时传入int值时无法检测出该值是否为资源ID，但@StringRes可以；</p>
</li>
</ul>
<hr>
<h4 id="注解："><a href="#注解：" class="headerlink" title="注解："></a><strong>注解：</strong></h4><p><strong>使用场合：</strong></p>
<ul>
<li><p>动态配置信息；</p>
</li>
<li><p>代为实现程序逻辑（比如xUtils中的@ViewInject代为实现findViewById）；</p>
</li>
<li><p>代码格式检查，比如Override、Deprecated、NonNull、StringRes等，便于IDE能够检查出代码错误</p>
</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li><p>在class文件中，提高程序的内聚性；</p>
</li>
<li><p>减少重复工作，提高开发效率，比如findViewById</p>
</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><p>如果对annotation进行修改，需要重新编译整个工程；</p>
</li>
<li><p>业务类之间的关系不如XML配置那样一目了然；</p>
</li>
<li><p>程序中过多的annotation，对于代码的简洁度有一定影响；</p>
</li>
<li><p>扩展性较差；</p>
</li>
</ul>
<hr>
<h3 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h3><h4 id="API"><a href="#API" class="headerlink" title="API"></a><strong>API</strong></h4><p>Android开发过程中使用到的注解主要来自如下几个地方：</p>
<ul>
<li><p>Android SDK：在包android.annotation下；</p>
</li>
<li><p>Android Annotation Support包：在包android.support.annotation下；</p>
</li>
<li><p>JDK：在包java.lang下；</p>
</li>
<li><p>第三方框架中的自定义注解；</p>
</li>
</ul>
<h4 id="最常见注解"><a href="#最常见注解" class="headerlink" title="最常见注解"></a><strong>最常见注解</strong></h4><ul>
<li><strong>@Override</strong></li>
</ul>
<p>属于标记注解，不需要设置属性值；只能添加在方法的前面，用于标记该方法是复写的父类中的某个方法，如果在父类没有的方法前面加上@Override注解，编译器会报错：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@Deprecated</strong></li>
</ul>
<p>属于标记注解，不需要设置属性值；可以对构造方法、变量、方法、包、参数标记，告知用户和编译器被标记的内容已不建议被使用，如果被使用，编译器会报警告，但不会报错，程序也能正常运行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.LOCAL_VARIABLE, ElementType.METHOD, ElementType.PACKAGE, ElementType.PARAMETER, ElementType.TYPE&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@SuppressWarnings</strong></li>
</ul>
<p>可以对构造方法、变量、方法、包、参数标记，用于告知编译器忽略指定的警告，不用再编译完成后出现警告信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.CONSTRUCTOR, ElementType.LOCAL_VARIABLE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</div><div class="line">    String[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@TargetApi</strong></li>
</ul>
<p>可以对接口、方法、构造方法标记，如果在应用中指定minSdkVersion为8，但有地方需要使用API 11中的方法，为了避免编译器报错，在调用API11中方法的接口、方法或者构造方法前面加上@Target(11)，这样该方法就可以使用&lt;=11的API接口了。虽然这样能够避免编译器报错，但在运行时需要注意，不能在API低于11的设备中使用该方法，否则会crash（可以获取程序运行设备的API版本来判断是否调用该方法）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;TYPE, METHOD, CONSTRUCTOR&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TargetApi &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This sets the target api level for the type..</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@SuppressLint</strong></li>
</ul>
<p>和@Target的功能差不多，但使用范围更广，主要用于避免在lint检查时报错：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressLint &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The set of warnings (identified by the lint issue id) that should be</div><div class="line">     * ignored by lint. It is not an error to specify an unrecognized name.</div><div class="line">     */</div><div class="line">    String[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Android-Annotation-Support包中的注解介绍："><a href="#Android-Annotation-Support包中的注解介绍：" class="headerlink" title="Android Annotation Support包中的注解介绍："></a>Android Annotation Support包中的注解介绍：</h3><p>Android support library从19.1版本开始引入了一个新的注解库，它包含很多有用的元注解，你能用它们修饰你的代码，帮助你发现bug。Support library自己本身也用到了这些注解，所以作为support library的用户，Android Studio已经基于这些注解校验了你的代码并且标注其中潜在的问题</p>
<p>这些注解是作为一个support包提供给开发者使用，要使用他们，需要在build.gradle中添加对android support-annotations的依赖：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.android.support:support-annotations:22.2.0'</span></div></pre></td></tr></table></figure>
<p>support包中的注解分为如下几大类：</p>
<h4 id="Nullness注解："><a href="#Nullness注解：" class="headerlink" title="Nullness注解："></a><strong>Nullness注解：</strong></h4><ul>
<li><p><strong>@Nullable:</strong>用于标记方法参数或者返回值可以为空；</p>
</li>
<li><p><strong>@NonNull:</strong>用于标记方法参数或者返回值不能为空，如果为空编译器会报警告；</p>
</li>
</ul>
<h4 id="资源类型注解："><a href="#资源类型注解：" class="headerlink" title="资源类型注解："></a><strong>资源类型注解：</strong></h4><ul>
<li>这类注解主要用于标记方法的参数必须要是指定的资源类型，如果不是，IDE就会报错；因为资源文件都是静态的，所以在编写代码时IDE就知道传值是否错误，可以避免传的资源id错误导致运行时异常。资源类型注解包括@AnimatorRes、@AnimRes、@AnyRes、@ArrayRes、@BoolRes、@ColorRes、@DimenRes、@DrawableRes、@FractionRes、@IdRes、@IntgerRes、@InterpolatorRes、@LayoutRes、@MenuRes、@PluralsRes、@RawRes、@StringRes、@StyleableRes、@StyleRes、@TransitionRes、@XmlRes</li>
</ul>
<h4 id="类型定义注解："><a href="#类型定义注解：" class="headerlink" title="类型定义注解："></a><strong>类型定义注解：</strong></h4><ul>
<li>这类注解用于检查“魔幻数”，很多时候，我们使用整型常量代替枚举类型（性能考虑），例如我们有一个IceCreamFlavourManager类，它具有三种模式的操作：VANILLA，CHOCOLATE和STRAWBERRY。我们可以定义一个名为@Flavour的新注解，并使用@IntDef指定它可以接受的值类型：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceCreamFlavourManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flavour;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VANILLA = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CHOCOLATE = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STRAWBERRY = <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="meta">@IntDef</span>(&#123;VANILLA, CHOCOLATE, STRAWBERRY&#125;)</div><div class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Flavour &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Flavour</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFlavour</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> flavour;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlavour</span><span class="params">(@Flavour <span class="keyword">int</span> flavour)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.flavour = flavour;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这时如果我们使用错误的整型值调用IceCreamFlavourManager.setFlavour时，IDE将报错如下：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A32.jpg" alt=""></center>

<ul>
<li>IDE甚至会提示我们可以使用的有效的取值：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A31.jpg" alt=""></center>

<ul>
<li>我们也可以指定整型值作为标志位，也就是说这些整型值可以使用’｜’或者’&amp;’进行与或等操作。如果我们把@Flavour定义为如下标志位：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IntDef</span>(flag = <span class="keyword">true</span>, value = &#123;VANILLA, CHOCOLATE, STRAWBERRY&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Flavour &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>那么可以如下调用：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.setFlavour(IceCreamFlavourManager.VANILLA &amp; IceCreamFlavourManager.CHOCOLATE);</div></pre></td></tr></table></figure>
<h4 id="线程注解："><a href="#线程注解：" class="headerlink" title="线程注解："></a><strong>线程注解：</strong></h4><ul>
<li>用于标记指定的方法、类（如果一个类中的所有方法都有相同的线程需求，就可以对这个类进行注解，比如View.java就被@UIThread所标记）只能在指定的线程类中被调用，包括：@UiThread、@MainThread、@WorkerThread、@BinderThread；以@UIThread为例，说明这类注解的使用方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main_layout);</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                setTextInOtherThread(R.string.app_name);</div><div class="line">             <span class="comment">// setTextInOtherThread2(R.string.app_name);</span></div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@UiThread</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTextInOtherThread</span><span class="params">(@StringRes <span class="keyword">int</span> resId)</span></span>&#123;</div><div class="line">        TextView threadTxtView = (TextView)MainActivity.<span class="keyword">this</span>.findViewById(R.id.threadTxtViewId);</div><div class="line">        threadTxtView.setText(resId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTextInOtherThread2</span><span class="params">(@StringRes <span class="keyword">final</span> <span class="keyword">int</span> resId)</span></span>&#123;</div><div class="line">        MainActivity.<span class="keyword">this</span>.runOnUiThread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                TextView threadTxtView = (TextView)MainActivity.<span class="keyword">this</span>.findViewById(R.id.threadTxtViewId);</div><div class="line">                threadTxtView.setText(resId);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@UIThread和@MainThread的区别：</strong>在进程里只有一个主线程。这个就是@MainThread。同时这个线程也是一个@UiThread。比如activity的主要窗口就运行在这个线程上。然而它也有能力为应用创建其他线程。这很少见，一般具备这样功能的都是系统进程。通常是把和生命周期有关的用@MainThread标注，和View层级结构相关的用@UiThread标注。但是由于@MainThread本质上是一个@UiThread，而大部分情况下@UiThread又是一个@MainThread，所以工具(lint ,Android Studio,等等)可以把他们互换，所以你能在一个可以调用@MainThread方法的地方也能调用@UiThread方法，反之亦然</li>
</ul>
<h4 id="GRB颜色值注解："><a href="#GRB颜色值注解：" class="headerlink" title="GRB颜色值注解："></a><strong>GRB颜色值注解：</strong></h4><ul>
<li>用于标记传递的颜色值必须是整型值，并且不能是color资源ID；当你的API期望一个颜色资源的时候，可以用@ColorRes标注，但是当你有一个相反的使用场景时，这种用法就不可用了，因为你并不是期望一个颜色资源id，而是一个真实的RGB或者ARGB的颜色值。在这种情况下，你可以使用@ColorInt注解，表示你期望的是一个代表颜色的整数值：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(@ColorInt <span class="keyword">int</span> color)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>有了这个，当你传递一个颜色id而不是颜色值的时候，lint就会标记出这段不正确的代码：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A34.jpg" alt=""></center>

<h4 id="值约束注解："><a href="#值约束注解：" class="headerlink" title="值约束注解："></a><strong>值约束注解：</strong></h4><ul>
<li>用于标记参数必须是指定类型的值，并且值的范围必须在约束的范围内，包括@Size、@IntRange、@FloatRange。如果你的参数是一个float或者double类型，并且一定要在某个范围内，你可以使用@FloatRange注解：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlpha</span><span class="params">(@FloatRange(from=<span class="number">0.0</span>, to=<span class="number">1.0</span>)</span> <span class="keyword">float</span> alpha)</span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果有人使用该API的时候传递一个0-255的值，比如尝试调用setAlpha(128)，那么工具就会捕获这一问题：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A36.jpg" alt=""></center>

<ul>
<li><p>把这些注解应用到参数上是非常有用的，因为用户很有可能会提供错误范围的参数，比如上面的setAlpha例子，有的API是采用0-255的方式，而有的是采用0-1的float值的方式</p>
</li>
<li><p>对于数据、集合以及字符串，你可以用@Size注解参数来限定集合的大小(当参数是字符串的时候，可以限定字符串的长度)。举几个例子:</p>
<ol>
<li><p>集合不能为空: @Size(min=1)；</p>
</li>
<li><p>字符串最大只能有23个字符: @Size(max=23)；</p>
</li>
<li><p>数组只能有2个元素: @Size(2)；</p>
</li>
<li><p>数组的大小必须是2的倍数 (例如图形API中获取位置的x/y坐标数组: @Size(multiple=2)</p>
</li>
</ol>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A37.jpg" alt=""></center>

<h4 id="权限注解："><a href="#权限注解：" class="headerlink" title="权限注解："></a><strong>权限注解：</strong></h4><ul>
<li>如果你的方法需要调用者有特定的权限，你可以使用@RequiresPermission注解：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>(Manifest.permission.SET_WALLPAPER)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setWallpaper</span><span class="params">(Bitmap bitmap)</span> <span class="keyword">throws</span> IOException</span>;</div></pre></td></tr></table></figure>
<ul>
<li>如果你至少需要权限集合中的一个，你可以使用anyOf属性：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>(anyOf = &#123;</div><div class="line">    Manifest.permission.ACCESS_COARSE_LOCATION,</div><div class="line">    Manifest.permission.ACCESS_FINE_LOCATION&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Location <span class="title">getLastKnownLocation</span><span class="params">(String provider)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>如果你同时需要多个权限，你可以用allOf属性：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>(allOf = &#123;</div><div class="line">    Manifest.permission.READ_HISTORY_BOOKMARKS, </div><div class="line">    Manifest.permission.WRITE_HISTORY_BOOKMARKS&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">updateVisitedHistory</span><span class="params">(ContentResolver cr, String url, <span class="keyword">boolean</span> real)</span> </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>对于intents的权限，可以直接在定义的intent常量字符串字段上标注权限需求(他们通常都已经被@SdkConstant注解标注过了):</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>(android.Manifest.permission.BLUETOOTH)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_REQUEST_DISCOVERABLE =</div><div class="line">            <span class="string">"android.bluetooth.adapter.action.REQUEST_DISCOVERABLE"</span>;</div></pre></td></tr></table></figure>
<ul>
<li>对于content providers的权限，你可能需要单独的标注读和写的权限访问，所以可以用@Read或者@Write标注每一个权限需求：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>.Read(<span class="meta">@RequiresPermission</span>(READ_HISTORY_BOOKMARKS))</div><div class="line"><span class="meta">@RequiresPermission</span>.Write(<span class="meta">@RequiresPermission</span>(WRITE_HISTORY_BOOKMARKS))</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Uri BOOKMARKS_URI = Uri.parse(<span class="string">"content://browser/bookmarks"</span>);</div></pre></td></tr></table></figure>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A38.jpg" alt=""></center>


<h4 id="复写方法注解："><a href="#复写方法注解：" class="headerlink" title="复写方法注解："></a><strong>复写方法注解：</strong></h4><ul>
<li>如果你的API允许使用者重写你的方法，但你又需要你自己的方法(父方法)在重写的时候也被调用，这时候你可以使用@CallSuper标注：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CallSuper</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>用了这个后，当重写的方法没有调用父方法时，工具就会给予警告提示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A39.jpg" alt=""></center>

<h4 id="返回值注解："><a href="#返回值注解：" class="headerlink" title="返回值注解："></a><strong>返回值注解：</strong></h4><ul>
<li><p>如果你的方法有返回值，你期望调用者用这个值做些事情，那么你可以使用@CheckResult注解标注这个方法</p>
</li>
<li><p>你并不需要为每个非空方法都进行标注。它主要的目的是帮助哪些容易被混淆，难以被理解的API的使用者</p>
</li>
<li><p>比如，可能很多开发者都对String.trim()一知半解，认为调用了这个方法，就可以让字符串改变以去掉空白字符。如果这个方法被@CheckResult标注，工具就会对那些没有使用trim()返回结果的调用者发出警告</p>
</li>
<li><p>Android中，Context#checkPermission这个方法已经被@CheckResult标注了：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CheckResult</span>(suggest=<span class="string">"#enforcePermission(String,int,int,String)"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">checkPermission</span><span class="params">(@NonNull String permission, <span class="keyword">int</span> pid, <span class="keyword">int</span> uid)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>这是非常重要的，因为有些使用context.checkPermission的开发者认为他们已经执行了一个权限 —-但其实这个方法仅仅只做了检查并且反馈一个是否成功的值而已。如果开发者使用了这个方法，但是又不用其返回值，那么这个开发者真正想调用的可能是这个Context#enforcePermission方法，而不是checkPermission</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A310.jpg" alt=""></center>

<h4 id="测试可见注解："><a href="#测试可见注解：" class="headerlink" title="测试可见注解："></a><strong>测试可见注解：</strong></h4><ul>
<li>你可以把这个注解标注到类、方法或者字段上，以便你在测试的时候可以使用他们</li>
</ul>
<hr>
<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>通过阅读注解类的源码可以发现，任何一个注解类都有如下特征：</p>
<ul>
<li><p>注解类会被@interface标记；</p>
</li>
<li><p>注解类的顶部会被@Documented、@Retention、@Target、@Inherited这四个注解标记（@Documented、@Inherited可选，@Retention、@Target必须要有）；</p>
</li>
</ul>
<p><strong>@UiThread源码：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(CLASS)</div><div class="line"><span class="meta">@Target</span>(&#123;METHOD,CONSTRUCTOR,TYPE&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UiThread &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>上文提到的四个注解：@Documented、@Retention、@Target、@Inherited就是元注解，它们的作用是负责注解其它注解，主要是描述注解的一些属性，任何注解都离不开元注解（包括元注解自身，通过元注解可以自定义注解），元注解的用户是JDK，JDK已经帮助我们实现了这四个注解的逻辑。这四个注解在JDK的java.lang.annotation包中。对每个元注解的详细说明如下：</p>
<h4 id="Target："><a href="#Target：" class="headerlink" title="@Target："></a><strong>@Target：</strong></h4><ul>
<li><p><strong>作用：</strong>用于描述注解的使用范围，即被描述的注解可以用在什么地方；</p>
</li>
<li><p><strong>取值：</strong></p>
</li>
</ul>
<ol>
<li><p>CONSTRUCTOR:构造器；</p>
</li>
<li><p>FIELD:实例；</p>
</li>
<li><p>LOCAL_VARIABLE:局部变量；</p>
</li>
<li><p>METHOD:方法；</p>
</li>
<li><p>PACKAGE:包；</p>
</li>
<li><p>PARAMETER:参数;</p>
</li>
<li><p>TYPE:类、接口(包括注解类型) 或enum声明</p>
</li>
</ol>
<ul>
<li><strong>示例：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/***</span></div><div class="line"> *</div><div class="line"> * 实体注解接口</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(value = &#123;ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(value = RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Entity &#123;</div><div class="line">    <span class="comment">/***</span></div><div class="line">     * 实体默认firstLevelCache属性为false</div><div class="line">     * <span class="doctag">@return</span> boolean</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">firstLevelCache</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</div><div class="line">    <span class="comment">/***</span></div><div class="line">     * 实体默认secondLevelCache属性为false</div><div class="line">     * <span class="doctag">@return</span> boolean</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">secondLevelCache</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</div><div class="line">    <span class="comment">/***</span></div><div class="line">     * 表名默认为空</div><div class="line">     * <span class="doctag">@return</span> String</div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">tableName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">    <span class="comment">/***</span></div><div class="line">     * 默认以""分割注解</div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">split</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Retention："><a href="#Retention：" class="headerlink" title="@Retention："></a><strong>@Retention：</strong></h4><ul>
<li><p><strong>作用：</strong>表示需要在什么级别保存该注解信息，用于描述注解的生命周期，即被描述的注解在什么范围内有效；</p>
</li>
<li><p><strong>取值：</strong></p>
</li>
</ul>
<ol>
<li><p>SOURCE:在源文件中有效，即源文件保留；</p>
</li>
<li><p>CLASS:在class文件中有效，即class保留；</p>
</li>
<li><p>RUNTIME:在运行时有效，即运行时保留；</p>
</li>
</ol>
<ul>
<li><strong>示例：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/***</span></div><div class="line"> * 字段注解接口</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(value = &#123;ElementType.FIELD&#125;)<span class="comment">//注解可以被添加在实例上</span></div><div class="line"><span class="meta">@Retention</span>(value = RetentionPolicy.RUNTIME)<span class="comment">//注解保存在JVM运行时刻,能够在运行时刻通过反射API来获取到注解的信息</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;<span class="comment">//注解的name属性</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Documented："><a href="#Documented：" class="headerlink" title="@Documented："></a><strong>@Documented：</strong></h4><ul>
<li><p><strong>作用：</strong>用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化</p>
</li>
<li><p><strong>取值：</strong>它属于标记注解，没有成员；</p>
</li>
<li><p><strong>示例：</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(CLASS)</div><div class="line"><span class="meta">@Target</span>(&#123;METHOD,CONSTRUCTOR,TYPE&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UiThread &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Inherited："><a href="#Inherited：" class="headerlink" title="@Inherited："></a><strong>@Inherited：</strong></h4><ul>
<li><p><strong>作用：</strong>用于描述某个被标注的类型是可被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类</p>
</li>
<li><p><strong>取值：</strong>它属于标记注解，没有成员；</p>
</li>
<li><p><strong>示例：</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  </span></div><div class="line"> * <span class="doctag">@author</span> wangsheng </div><div class="line"> **/  </div><div class="line"><span class="meta">@Inherited</span>  </div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Greeting &#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> FontColor&#123; BULE,RED,GREEN&#125;;  </div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;  </div><div class="line">    <span class="function">FontColor <span class="title">fontColor</span><span class="params">()</span> <span class="keyword">default</span> FontColor.GREEN</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如何自定义注解"><a href="#如何自定义注解" class="headerlink" title="如何自定义注解"></a>如何自定义注解</h3><p>使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。</p>
<ul>
<li><strong>自定义注解格式：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">元注解</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名&#123;</div><div class="line">    定义体；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>注解参数可支持的数据类型：</strong></li>
</ul>
<ol>
<li><p>所有基本数据类型（int,float,boolean,byte,double,char,long,short)；</p>
</li>
<li><p>String类型；</p>
</li>
<li><p>Class类型；</p>
</li>
<li><p>enum类型；</p>
</li>
<li><p>Annotation类型；</p>
</li>
<li><p>以上所有类型的数组</p>
</li>
</ol>
<hr>
<p><strong>特别说明：</strong></p>
<ul>
<li>注解类中的方法只能用public或者默认这两个访问权修饰，不写public就是默认，eg：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FruitColor &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Color&#123; BULE,RED,GREEN&#125;;</div><div class="line">    <span class="function">Color <span class="title">fruitColor</span><span class="params">()</span> <span class="keyword">default</span> Color.GREEN</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>如果注解类中只有一个成员，最好把方法名设置为”value”，比如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FruitName &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解元素的值不可为null。因此, 使用空字符串或0作为默认值是一种常用的做法</li>
</ul>
<hr>
<h4 id="实例演示："><a href="#实例演示：" class="headerlink" title="实例演示："></a><strong>实例演示：</strong></h4><ul>
<li><strong>ToDo.java：</strong>注解类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@interface</span> Todo &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Priority &#123;LOW, MEDIUM, HIGH&#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Status &#123;STARTED, NOT_STARTED&#125;    </div><div class="line">    <span class="function">String <span class="title">author</span><span class="params">()</span> <span class="keyword">default</span> "Yash"</span>;</div><div class="line">    <span class="function">Priority <span class="title">priority</span><span class="params">()</span> <span class="keyword">default</span> Priority.LOW</span>;</div><div class="line">    <span class="function">Status <span class="title">status</span><span class="params">()</span> <span class="keyword">default</span> Status.NOT_STARTED</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>BusinessLogic:</strong>使用注解的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessLogic</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessLogic</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compltedMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"This method is complete"</span>);</div><div class="line">    &#125;    </div><div class="line"></div><div class="line">    <span class="meta">@Todo</span>(priority = Todo.Priority.HIGH)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notYetStartedMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// No Code Written yet</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Todo</span>(priority = Todo.Priority.MEDIUM, author = <span class="string">"Uday"</span>, status = Todo.Status.STARTED)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">incompleteMethod1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//Some business logic is written</span></div><div class="line">        <span class="comment">//But its not complete yet</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Todo</span>(priority = Todo.Priority.LOW, status = Todo.Status.STARTED )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">incompleteMethod2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//Some business logic is written</span></div><div class="line">        <span class="comment">//But its not complete yet</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>TodoReport.java：</strong>解析注解信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoReport</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TodoReport</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        getTodoReportForBusinessLogic();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 解析使用注解的类，获取通过注解设置的属性</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getTodoReportForBusinessLogic</span><span class="params">()</span> </span>&#123;</div><div class="line">        Class businessLogicClass = BusinessLogic.class;</div><div class="line">        <span class="keyword">for</span>(Method method : businessLogicClass.getMethods()) &#123;</div><div class="line">            Todo todoAnnotation = (Todo)method.getAnnotation(Todo.class);</div><div class="line">            <span class="keyword">if</span>(todoAnnotation != <span class="keyword">null</span>) &#123;</div><div class="line">                System.out.println(<span class="string">" Method Name : "</span> + method.getName());</div><div class="line">                System.out.println(<span class="string">" Author : "</span> + todoAnnotation.author());</div><div class="line">                System.out.println(<span class="string">" Priority : "</span> + todoAnnotation.priority());</div><div class="line">                System.out.println(<span class="string">" Status : "</span> + todoAnnotation.status());</div><div class="line">                System.out.println(<span class="string">" --------------------------- "</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>执行结果如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A311.jpg" alt=""></center>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/21410338?f3fb8ead20=ede8379d6b659f7594e37ed09c7c0b50" target="_blank" rel="external">深入浅出Java注解</a></p>
</li>
<li><p><a href="http://www.in-droid.com/2016/06/02/Java%E6%B3%A8%E8%A7%A3/" target="_blank" rel="external">Java注解</a></p>
</li>
<li><p><a href="http://josh-persistence.iteye.com/blog/2226493" target="_blank" rel="external">深入浅出Java Annotation(元注解和自定义注解）</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是注解&quot;&gt;&lt;a href=&quot;#什么是注解&quot; class=&quot;headerlink&quot; title=&quot;什么是注解&quot;&gt;&lt;/a&gt;什么是注解&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注解对于开发人员来讲既熟悉又陌生，熟悉是因为只要你是做开发，都会用到注解（常见的@Override）；陌生是因为即使不使用注解也照常能够进行开发；注解不是必须的，但了解注解有助于我们深入理解某些第三方框架（比如Android Support Annotations、JUnit、xUtils、ActiveAndroid等），提高工作效率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ava注解又称为标注，是Java从1.5开始支持加入源码的特殊语法元数据；Java中的类、方法、变量、参数、包都可以被注解。这里提到的元数据是描述数据的数据，结合实例来说明：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;app_name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;AnnotionDemo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;这里的”app_name”就是描述数据”AnnotionDemo”的数据，这是在配置文件中写的，注解是在源码中写的，如下所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    setContentView(R.layout.activity_main_layout);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            setTextInOtherThread();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;).start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在上面的代码中，在MainActivity.java中复写了父类Activity.java的onCreate方法，使用到了@Override注解。但即使不加上@Override注解标记代码，程序也能够正常运行。那这里的@Override注解有什么用呢？使用它有什么好处？事实上，@Override是告诉编译器这个方法是一个重写方法，如果父类中不存在该方法，编译器会报错，提示该方法不是父类中的方法。如果不小心拼写错误，将onCreate写成了onCreat，而且没有使用@Override注解，程序依然能够编译通过，但运行结果和期望的大不相同。从示例可以看出，注解有助于阅读代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用注解很简单，根据注解类的@Target所修饰的对象范围，可以在类、方法、变量、参数、包中使用“@+注解类名+[属性值]”的方式使用注解。比如：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@UiThread&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setTextInOtherThread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@StringRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resId)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    TextView threadTxtView = (TextView)MainActivity.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.findViewById(R.id.threadTxtViewId);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    threadTxtView.setText(resId);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;特别说明：&quot;&gt;&lt;a href=&quot;#特别说明：&quot; class=&quot;headerlink&quot; title=&quot;特别说明：&quot;&gt;&lt;/a&gt;&lt;strong&gt;特别说明：&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注解仅仅是元数据，和业务逻辑无关，所以当你查看注解类时，发现里面没有任何逻辑处理；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javadoc中的@author、@version、@param、@return、@deprecated、@hide、@throws、@exception、@see是标记，并不是注解；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Javadoc标签</title>
    <link href="http://www.qiuchengjia.cn/2016/08/04/JAVA/Javadoc%E6%A0%87%E7%AD%BE/"/>
    <id>http://www.qiuchengjia.cn/2016/08/04/JAVA/Javadoc标签/</id>
    <published>2016-08-04T15:12:13.000Z</published>
    <updated>2016-08-04T07:17:11.693Z</updated>
    
    <content type="html"><![CDATA[<h3 id="javadoc-标签"><a href="#javadoc-标签" class="headerlink" title="javadoc 标签"></a>javadoc 标签</h3><ul>
<li>javadoc工具软件识别以下标签：</li>
</ul>
<table>
<thead>
<tr>
<th>标签</th>
<th style="text-align:left">描述</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>@author</td>
<td style="text-align:left">标识一个类的作者</td>
<td style="text-align:center">@author description</td>
</tr>
<tr>
<td>@deprecated</td>
<td style="text-align:left">指名一个过期的类或成员</td>
<td style="text-align:center">@deprecated description</td>
</tr>
<tr>
<td>{@docRoot}</td>
<td style="text-align:left">指明当前文档根目录的路径</td>
<td style="text-align:center">Directory Path</td>
</tr>
<tr>
<td>@exception</td>
<td style="text-align:left">标志一个类抛出的异常</td>
<td style="text-align:center">@exception exception-name explanation</td>
</tr>
<tr>
<td>{@inheritDoc}</td>
<td style="text-align:left">从直接父类继承的注释</td>
<td style="text-align:center">Inherits a comment from the immediate surperclass.</td>
</tr>
<tr>
<td>{@link}</td>
<td style="text-align:left">插入一个到另一个主题的链接</td>
<td style="text-align:center">{@link name text}</td>
</tr>
<tr>
<td>{@linkplain}</td>
<td style="text-align:left">插入一个到另一个主题的链接，但是该链接显示纯文本字体</td>
<td style="text-align:center">Inserts an in-line link to another topic.</td>
</tr>
<tr>
<td>@param</td>
<td style="text-align:left">说明一个方法的参数</td>
<td style="text-align:center">@param parameter-name explanation</td>
</tr>
<tr>
<td>@return</td>
<td style="text-align:left">说明返回值类型</td>
<td style="text-align:center">@return explanation</td>
</tr>
<tr>
<td>@see</td>
<td style="text-align:left">指定一个到另一个主题的链接</td>
<td style="text-align:center">@see anchor</td>
</tr>
<tr>
<td>@serial</td>
<td style="text-align:left">说明一个序列化属性</td>
<td style="text-align:center">@serial description</td>
</tr>
<tr>
<td>@serialData</td>
<td style="text-align:left">说明通过writeObject( ) 和 writeExternal( )方法写的数据</td>
<td style="text-align:center">@serialData description</td>
</tr>
<tr>
<td>@serialField</td>
<td style="text-align:left">说明一个ObjectStreamField组件</td>
<td style="text-align:center">@serialField name type description</td>
</tr>
<tr>
<td>@since</td>
<td style="text-align:left">标记当引入一个特定的变化时</td>
<td style="text-align:center">@since release</td>
</tr>
<tr>
<td>@throws</td>
<td style="text-align:left">和 @exception标签一样.</td>
<td style="text-align:center">The @throws tag has the same meaning as the @exception tag.</td>
</tr>
<tr>
<td>{@value}</td>
<td style="text-align:left">显示常量的值，该常量必须是static属性。</td>
<td style="text-align:center">Displays the value of a constant, which must be a static field.</td>
</tr>
<tr>
<td>@version</td>
<td style="text-align:left">指定类的版本</td>
<td style="text-align:center">@version info</td>
</tr>
</tbody>
</table>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;javadoc-标签&quot;&gt;&lt;a href=&quot;#javadoc-标签&quot; class=&quot;headerlink&quot; title=&quot;javadoc 标签&quot;&gt;&lt;/a&gt;javadoc 标签&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;javadoc工具软件识别以下标签：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标签&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@author&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;标识一个类的作者&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;@author description&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@deprecated&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;指名一个过期的类或成员&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;@deprecated description&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{@docRoot}&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;指明当前文档根目录的路径&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Directory Path&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@exception&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;标志一个类抛出的异常&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;@exception exception-name explanation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{@inheritDoc}&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;从直接父类继承的注释&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Inherits a comment from the immediate surperclass.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{@link}&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入一个到另一个主题的链接&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;{@link name text}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{@linkplain}&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入一个到另一个主题的链接，但是该链接显示纯文本字体&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Inserts an in-line link to another topic.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@param&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;说明一个方法的参数&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;@param parameter-name explanation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@return&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;说明返回值类型&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;@return explanation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@see&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;指定一个到另一个主题的链接&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;@see anchor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@serial&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;说明一个序列化属性&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;@serial description&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@serialData&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;说明通过writeObject( ) 和 writeExternal( )方法写的数据&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;@serialData description&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@serialField&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;说明一个ObjectStreamField组件&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;@serialField name type description&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@since&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;标记当引入一个特定的变化时&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;@since release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@throws&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;和 @exception标签一样.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;The @throws tag has the same meaning as the @exception tag.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{@value}&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示常量的值，该常量必须是static属性。&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Displays the value of a constant, which must be a static field.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@version&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;指定类的版本&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;@version info&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java泛型</title>
    <link href="http://www.qiuchengjia.cn/2016/08/03/JAVA/Java%E6%B3%9B%E5%9E%8B/"/>
    <id>http://www.qiuchengjia.cn/2016/08/03/JAVA/Java泛型/</id>
    <published>2016-08-02T20:52:08.000Z</published>
    <updated>2016-08-04T06:43:39.725Z</updated>
    
    <content type="html"><![CDATA[<p>泛型（Generic Type）是Java中重要的一部分。在J2SE 5.0之后新增。在使用Java标准库中的内容的时候，经常会遇到泛型。这里将泛型总结一下</p>
<h3 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h3><ul>
<li>讨论一个内容的时候，首先会来说什么是什么。在官方的文档中说到</li>
</ul>
<blockquote>
<p>A generic type is a generic class or interface that is parameterized over types.</p>
</blockquote>
<ul>
<li>泛型又可以称作参数化类型，这是在Java SE新增添的特性。一对尖括号，中间包含类型信息。将类型独立成参数，在使用的时候才指定实际的类型</li>
</ul>
<p>如果没有泛型会怎么样？我们考虑以下几种情况：</p>
<ol>
<li><p>你实现了一个存储整数类型（Integer）的列表，这时候你又需要存储字符串（String）的列表，两种列表逻辑行为完全一样，只是存储的类型不同</p>
</li>
<li><p>为了保证列表的通用性，你将列表的类型改为了Object，这样就不用为类型修改代码了。但是每次从列表中取对象的时候都需要强制转换，而且很很容易出错</p>
</li>
</ol>
<ul>
<li>有了泛型之后，可以将逻辑相同类型不同的代码独立出来，由编译器负责进行<strong>类型转换</strong></li>
</ul>
<a id="more"></a>
<h3 id="泛型的声明"><a href="#泛型的声明" class="headerlink" title="泛型的声明"></a>泛型的声明</h3><h4 id="泛型方法（Generic-Method）"><a href="#泛型方法（Generic-Method）" class="headerlink" title="泛型方法（Generic Method）"></a>泛型方法（Generic Method）</h4><ul>
<li>泛型方法是在普通方法声明上加入了泛型</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">( E[] inputArray )</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> ( E element : inputArray )&#123;        </div><div class="line">        System.out.printf( <span class="string">"%s "</span>, element );</div><div class="line">    &#125;</div><div class="line">    System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>调用：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create arrays of Integer, Double and Character</span></div><div class="line">Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</div><div class="line">Double[] doubleArray = &#123; <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span> &#125;;</div><div class="line">Character[] charArray = &#123; <span class="string">'H'</span>, <span class="string">'E'</span>, <span class="string">'L'</span>, <span class="string">'L'</span>, <span class="string">'O'</span> &#125;;</div><div class="line">System.out.println( <span class="string">"Array integerArray contains:"</span> );</div><div class="line">printArray( intArray  ); <span class="comment">// pass an Integer array</span></div><div class="line">System.out.println( <span class="string">"\nArray doubleArray contains:"</span> );</div><div class="line">printArray( doubleArray ); <span class="comment">// pass a Double array</span></div><div class="line">System.out.println( <span class="string">"\nArray characterArray contains:"</span> );</div><div class="line">printArray( charArray ); <span class="comment">// pass a Character array</span></div></pre></td></tr></table></figure>
<ul>
<li>输出：</li>
</ul>
<blockquote>
<p>Array integerArray contains:<br>1 2 3 4 5 6<br>Array doubleArray contains:<br>1.1 2.2 3.3 4.4<br>Array characterArray contains:<br>H E L L O</p>
</blockquote>
<p>Java泛型方法的声明格式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[权限] [修饰符] [泛型] [返回值] [方法名]  (    [参数列表]   ) &#123;&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span>  &lt; E &gt;   <span class="function"><span class="keyword">void</span>   <span class="title">printArray</span><span class="params">( E[] inputArray )</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>泛型的声明，必须在方法的修饰符（public,static,final,abstract等）之后，返回值声明之前。可以声明多个泛型，用逗号隔开。泛型的声明要用&lt;&gt;包裹</li>
</ul>
<p>泛型方法的使用有两种：</p>
<h5 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h5><ul>
<li>以声明键值对的例子来说，通常的写法会有一长串，不免有些痛苦</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, List&lt;String&gt;&gt; m = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;();</div></pre></td></tr></table></figure>
<ul>
<li>我们可以构造一个泛型方法作为静态工厂，来完成这一操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; <span class="function">HashMap&lt;K, V&gt; <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;K, V&gt;();</div><div class="line">&#125;</div><div class="line">Map&lt;String, List&lt;String&gt;&gt; m = newInstance();</div></pre></td></tr></table></figure>
<ul>
<li>编译器在编译代码的时候推导出了K, V分别对应的类型。当然，编译器的推导能力也是有限的，这里也就不过多讨论了</li>
</ul>
<h5 id="指定类型"><a href="#指定类型" class="headerlink" title="指定类型"></a>指定类型</h5><ul>
<li>不赘述</li>
</ul>
<h4 id="泛型类（Generic-Class）"><a href="#泛型类（Generic-Class）" class="headerlink" title="泛型类（Generic Class）"></a>泛型类（Generic Class）</h4><ul>
<li>泛型类和普通类的声明一样，只是在类名后面加上了类型表示。就像泛型方法，泛型类可以有一个或多个类型表示，用逗号进行分隔</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">private</span> T t;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.t = t;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">     Box&lt;Integer&gt; integerBox = <span class="keyword">new</span> Box&lt;Integer&gt;();</div><div class="line">     Box&lt;String&gt; stringBox = <span class="keyword">new</span> Box&lt;String&gt;();</div><div class="line">    </div><div class="line">     integerBox.add(<span class="keyword">new</span> Integer(<span class="number">10</span>));</div><div class="line">     stringBox.add(<span class="keyword">new</span> String(<span class="string">"Hello World"</span>));</div><div class="line">     System.out.printf(<span class="string">"Integer Value :%d\n\n"</span>, integerBox.get());</div><div class="line">     System.out.printf(<span class="string">"String Value :%s\n"</span>, stringBox.get());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Integer Value :10<br>String Value :Hello World</p>
</blockquote>
<ul>
<li><p>在泛型类上声明的类型，可以被用到类中任何表示类型的地方</p>
</li>
<li><p>泛型类只能通过以指定类型的方式进行使用。在之后的Java版本中，加入了类型推导功能，可以将后面的泛型类型省略，但是还是需要保留尖括号</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">// 普通的写法</span></div><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 省略的写法</span></div></pre></td></tr></table></figure>
<h4 id="泛型接口（Generic-Interface）"><a href="#泛型接口（Generic-Interface）" class="headerlink" title="泛型接口（Generic Interface）"></a>泛型接口（Generic Interface）</h4><ul>
<li>泛型接口是在声明接口的时候指定，类在继承接口的时候需要补充泛型类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Info</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getInfo</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后定义一个类实现这个接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> InfoImp implements Info&lt;String&gt; &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以发现实现接口里的方法需要使用具体的类型</li>
</ul>
<p>泛型接口的一般格式：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[访问权限] interface [接口名] &lt;泛型标识&gt; &#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>当然，我们可以实现泛型接口的时候不指名泛型类型，这样这个类就需要定义为泛型类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> InfoImp&lt;T&gt; implements Info&lt;T&gt; &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="泛型标识与泛型通配符"><a href="#泛型标识与泛型通配符" class="headerlink" title="泛型标识与泛型通配符"></a>泛型标识与泛型通配符</h3><ul>
<li>理论上泛型标识可以使用任意的字母或字母序列，可以考虑以下的例子，但是不推荐这样使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;STRING&gt; <span class="function">STRING <span class="title">sayHello</span><span class="params">(STRING word)</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"Hello "</span> + word);</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>但是Java内部有一套自己的规范，这样在阅读JDK代码的时候会更加明确泛型标识的含义</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">E - Element (在集合中使用，因为集合中存放的是元素)</div><div class="line">T - Type（Java 类）</div><div class="line">K - Key（键）</div><div class="line">V - Value（值）</div><div class="line">N - Number（数值类型）</div><div class="line">? - 表示不确定的java类型</div><div class="line">S、U、V - <span class="number">2</span>nd、<span class="number">3</span>rd、<span class="number">4</span>th types</div></pre></td></tr></table></figure>
<ul>
<li>说到泛型标识符，再说一说泛型通配符。常用的泛型通配符有三种</li>
</ul>
<h4 id="任意类型-“-lt-”-gt"><a href="#任意类型-“-lt-”-gt" class="headerlink" title="任意类型 “&lt;”?&gt;"></a>任意类型 “&lt;”?&gt;</h4><ul>
<li>“&lt;”?&gt; 可以理解为泛型中的 Object，为什么这么说呢？因为任意类型的通配符可以接受任意类型的泛型。下面的例子表示出了这种关系</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Box&lt;?&gt; box = <span class="keyword">new</span> Box&lt;String&gt;();</div></pre></td></tr></table></figure>
<ul>
<li>类似于将后面的类型转换到前面的类型。但是&lt;?&gt;只能用作接收，不能用来定义，下面的例子是错误的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;?&gt; </span>&#123;&#125; <span class="comment">//错误的泛型类定义</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;?&gt; <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(? helloString)</span> </span>&#123;&#125; <span class="comment">//错误的泛型方法定义</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Box</span>&lt;?&gt; </span>&#123;&#125; <span class="comment">//错误的泛型接口定义</span></div></pre></td></tr></table></figure>
<h4 id="上限类型-“-lt-”-extends-类-gt"><a href="#上限类型-“-lt-”-extends-类-gt" class="headerlink" title="上限类型 “&lt;”? extends 类&gt;"></a>上限类型 “&lt;”? extends 类&gt;</h4><ul>
<li>“&lt;”? extends 类&gt; 表示泛型只能使用这个类或这个类的<strong>子类</strong>。举个例子</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends String&gt; <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(T helloString)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>在该方法中调用sayHello(“xiaoming”);是正确的，但是调用sayHello(2333);就是错误的</p>
</li>
<li><p>考虑一种更通用的情况</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">(List&lt;? extends String&gt; list)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(String str:list)&#123;</div><div class="line">        System.out.println(str);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这个例子指定了泛型类的具体类型的范围。在JDK中经常可以看到这样的使用方法</li>
</ul>
<h4 id="下限类型-“-lt-”-super-类-gt"><a href="#下限类型-“-lt-”-super-类-gt" class="headerlink" title="下限类型 “&lt;”? super 类&gt;"></a>下限类型 “&lt;”? super 类&gt;</h4><ul>
<li>同上限方法，”&lt;”? super 类&gt; 表示泛型只能使用这个类或这个类的<strong>父类</strong></li>
</ul>
<h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><ul>
<li><p>泛型只在编译时有效，编译成字节码的过程中会进行类型擦除的操作。当然并不是所有的泛型类型都被擦除，有些也会保留下来</p>
</li>
<li><p>一个简单的类型擦除的例子：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">Iterator&lt;String&gt; it = list.iterator();</div><div class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">   String s = it.next();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>我们对其编译，然后再反编译，反编译引擎用的CFR：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayList arrayList = <span class="keyword">new</span> ArrayList();</div><div class="line">Iterator iterator = arrayList.iterator();</div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">    String string = (String)iterator.next();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>从上面的结果可以看出，泛型类上面的类型被去掉了，但是增加了一个类型强制转换。解释器默认认为里面的类型都会是String。这是因为在编译的时候会进行类型检查，如果发现使用的类型与泛型声明类型不符，编译是不会通过的</p>
</li>
<li><p>那能不能绕过这个检查呢？这个时候就需要使用<strong>反射</strong>来进行操作了。就上面的例子来说，ArrayList可以放入任意类型，所以使用反射只要保证类型强制转换不出问题，程序还是可以使用的</p>
</li>
</ul>
<p>在Java文档中提到，类型擦除主要进行以下工作：</p>
<ol>
<li><p>将泛型中的所有类型参数更换成类型界限，或者无界的类型替换成Object。所以生成的字节码只包含普通类、接口和方法</p>
</li>
<li><p>为了确保类型安全，必要时插入强制类型转换</p>
</li>
<li><p>生成桥接方法保持扩展泛型类型中的多态性</p>
</li>
</ol>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><ul>
<li>使用泛型方法可以使用可变参数：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T... args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (T t : args) &#123;</div><div class="line">            System.out.println(t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        out(<span class="string">"findingsea"</span>, <span class="number">123</span>, <span class="number">11.11</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="new-T"><a href="#new-T" class="headerlink" title="new T()?"></a>new T()?</h3><ul>
<li>能不能在泛型方法（类）中创建泛型类型的实例呢？答案是不可以的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(List&lt;E&gt; list)</span> </span>&#123;</div><div class="line">    E elem = <span class="keyword">new</span> E();  <span class="comment">// 编译错误</span></div><div class="line">    list.add(elem);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>不过可以使用反射来创建实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(List&lt;E&gt; list, Class&lt;E&gt; cls)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    E elem = cls.newInstance();   <span class="comment">// OK</span></div><div class="line">    list.add(elem);</div><div class="line">&#125;</div><div class="line">List&lt;String&gt; ls = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">append(ls, String.class);</div></pre></td></tr></table></figure>
<ul>
<li>因为类型擦除的缘故，部分类型信息会丢失，我们在运行时不会获取到相应的类型，所以也就无法将该类型实例化成对象</li>
</ul>
<h3 id="泛型和数组"><a href="#泛型和数组" class="headerlink" title="泛型和数组"></a>泛型和数组</h3><p>在Java中，直接创建泛型数组是非法的（要注意的一点是，Java中没有所谓的泛型数组一说）。泛型设计的初衷是为了简化程序员类型转换的操作，保证类型安全。数组是<strong>协变</strong>的，如果Sub为Super的子类型，那么数组Sub[]就是Super[]的子类型。这样做就很难保证存储上的安全</p>
<ul>
<li>但在实际使用过程中，往往需要创建泛型数组：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; E[] newArray(<span class="keyword">int</span> n) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> E[n];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这个时候运行程序，会抛出异常</li>
</ul>
<blockquote>
<p>Exception in thread “main” java.lang.Error: Unresolved compilation problem:<br>    Cannot create a generic array of E</p>
</blockquote>
<ul>
<li>在这种情况下，可以使用 List 来代替数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">newList</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;E&gt;();</div></pre></td></tr></table></figure>
<ul>
<li><p>但是，Java不是生来就有List的，如果遇到必须使用数组的情况该怎么办？</p>
</li>
<li><p>在这里可以参考Java里聚合类型的实现，以一个简单的例子说明</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> E[] elements;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</div><div class="line">        elements = <span class="keyword">new</span> E[<span class="number">10</span>];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        elements[size++] = e;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        E result = elements[--size];</div><div class="line">        elements[size] = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>上面的例子和java.util.Stack还是有区别的，只是为了说明如何处理泛型数组问题</p>
</li>
<li><p>同样运行的时候会出错</p>
</li>
</ul>
<blockquote>
<p>Exception in thread “main” java.lang.Error: Unresolved compilation problem:<br>    Cannot create a generic array of E</p>
</blockquote>
<ul>
<li>一种方法是在创建泛型数组的时候创建一个Object数组，然后转换成E数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elements = (E[]) <span class="keyword">new</span> Object[<span class="number">10</span>];</div></pre></td></tr></table></figure>
<ul>
<li>第二种方法将数组类型改为Object，在弹出元素的时候进行转换</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Object[] elements;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        E result = (E) elements[--size];</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>泛型数组的返回和传递</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> generics;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsArray</span> </span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 返回一个泛型数组</div><div class="line">   * <span class="doctag">@param</span> ts</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="meta">@SafeVarargs</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] getArray(T...ts)&#123;</div><div class="line">     <span class="keyword">return</span> ts;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 为方法传递一个泛型数组</div><div class="line">   * <span class="doctag">@param</span> param</div><div class="line">   */</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T[] param)</span></span>&#123;</div><div class="line"></div><div class="line">     System.out.println(<span class="string">"the Param is:"</span>);</div><div class="line"></div><div class="line">     <span class="keyword">for</span>(T c:param)&#123;</div><div class="line"></div><div class="line">       System.out.print(c);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line"></div><div class="line">     Integer[] arr = getArray(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</div><div class="line"></div><div class="line">     System.out.println(arr);</div><div class="line"></div><div class="line">     print(arr);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><p><a href="http://sumyblog.me/2015/12/15/java-generic-type-one-two-and-three/#undefined" target="_blank" rel="external">Java泛型二三事</a></p>
</li>
<li><p><a href="http://0opslab.com/2016/01/02/Java%E6%B3%9B%E5%9E%8B/" target="_blank" rel="external">Java泛型</a></p>
</li>
<li><p><a href="https://github.com/JustinSDK/JavaSE6Tutorial/blob/master/docs/CH12.md#%E7%AC%AC-12-%E7%AB%A0-%E6%B3%9B%E5%9E%8B" target="_blank" rel="external">Java SE 6 技术手册</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;泛型（Generic Type）是Java中重要的一部分。在J2SE 5.0之后新增。在使用Java标准库中的内容的时候，经常会遇到泛型。这里将泛型总结一下&lt;/p&gt;
&lt;h3 id=&quot;什么是泛型&quot;&gt;&lt;a href=&quot;#什么是泛型&quot; class=&quot;headerlink&quot; title=&quot;什么是泛型&quot;&gt;&lt;/a&gt;什么是泛型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;讨论一个内容的时候，首先会来说什么是什么。在官方的文档中说到&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A generic type is a generic class or interface that is parameterized over types.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;泛型又可以称作参数化类型，这是在Java SE新增添的特性。一对尖括号，中间包含类型信息。将类型独立成参数，在使用的时候才指定实际的类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没有泛型会怎么样？我们考虑以下几种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;你实现了一个存储整数类型（Integer）的列表，这时候你又需要存储字符串（String）的列表，两种列表逻辑行为完全一样，只是存储的类型不同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了保证列表的通用性，你将列表的类型改为了Object，这样就不用为类型修改代码了。但是每次从列表中取对象的时候都需要强制转换，而且很很容易出错&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;有了泛型之后，可以将逻辑相同类型不同的代码独立出来，由编译器负责进行&lt;strong&gt;类型转换&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java反射</title>
    <link href="http://www.qiuchengjia.cn/2016/07/30/JAVA/Java%E5%8F%8D%E5%B0%84/"/>
    <id>http://www.qiuchengjia.cn/2016/07/30/JAVA/Java反射/</id>
    <published>2016-07-29T16:18:26.000Z</published>
    <updated>2016-08-02T13:21:35.538Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h3><p>“<strong>反射（Reflection）能够让运行于JVM中的程序检测和修改运行时的行为。</strong>”这个概念常常会和内省（Introspection）混淆，以下是这两个术语在Wikipedia中的解释：</p>
<ul>
<li><p>内省用于在运行时检测某个对象的类型和其包含的属性</p>
</li>
<li><p>反射用于在运行时检测和修改某个对象的结构及其行为</p>
</li>
</ul>
<p>从它们的定义可以看出，内省是反射的一个子集。有些语言支持内省，但并不支持反射，如C++</p>
<ul>
<li>内省示例：instanceof 运算符用于检测某个对象是否属于特定的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Dog) &#123;</div><div class="line">    Dog d = (Dog) obj;</div><div class="line">    d.bark();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>反射示例：Class.forName()方法可以通过类或接口的名称（一个字符串或完全限定名）来获取对应的Class对象。forName方法会触发类的初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用反射</span></div><div class="line">Class&lt;?&gt; c = Class.forName(<span class="string">"classpath.and.classname"</span>);</div><div class="line">Object dog = c.newInstance();</div><div class="line">Method m = c.getDeclaredMethod(<span class="string">"bark"</span>, <span class="keyword">new</span> Class&lt;?&gt;[<span class="number">0</span>]);</div><div class="line">m.invoke(dog);</div></pre></td></tr></table></figure>
<ul>
<li>在Java中，反射更接近于内省，因为你无法改变一个对象的结构。虽然一些API可以用来修改方法和属性的可见性，但并不能修改结构<a id="more"></a>
</li>
</ul>
<h3 id="为什么需要反射"><a href="#为什么需要反射" class="headerlink" title="为什么需要反射"></a>为什么需要反射</h3><p>反射能够让我们：</p>
<ul>
<li><p>在运行时检测对象的类型</p>
</li>
<li><p>动态构造某个类的对象</p>
</li>
<li><p>检测类的属性和方法</p>
</li>
<li><p>任意调用对象的方法</p>
</li>
<li><p>修改构造函数、方法、属性的可见性</p>
</li>
<li><p>以及其他</p>
</li>
</ul>
<p><strong>反射是框架中常用的方法</strong></p>
<ul>
<li>例如，<a href="http://www.programcreek.com/2012/02/junit-tutorial-2-annotations/" target="_blank" rel="external">JUnit</a> 通过反射来遍历包含 @Test 注解的方法，并在运行单元测试时调用它们。（这个连接中包含了一些<a href="http://www.programcreek.com/2012/02/junit-tutorial-2-annotations/" target="_blank" rel="external">JUnit</a> 的使用案例）</li>
</ul>
<p>对于Web框架，开发人员在配置文件中定义他们对各种接口和类的实现。通过反射机制，框架能够快速地动态初始化所需要的类</p>
<ul>
<li>例如，Spring框架使用如下的配置文件：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"someID"</span> <span class="attr">class</span>=<span class="string">"com.programcreek.Foo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someField"</span> <span class="attr">value</span>=<span class="string">"someValue"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>当Spring容器处理<bean>元素时，会使用Class.forName(“com.programcreek.Foo”)来初始化这个类，并再次使用反射获取<property>元素对应的setter方法，为对象的属性赋值</property></bean></p>
</li>
<li><p>Servlet也会使用相同的机制：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>someServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.programcreek.WhyReflectionServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="处理泛型"><a href="#处理泛型" class="headerlink" title="处理泛型"></a>处理泛型</h3><ul>
<li>Java 5中引入了泛型的概念之后，Java反射API也做了相应的修改，以提供对泛型的支持。由于类型擦除机制的存在，泛型类中的类型参数等信息，在运行时刻是不存在的。JVM看到的都是原始类型。对此，Java 5对Java类文件的格式做了修订，添加了Signature属性，用来包含不在JVM类型系统中的类型信息。 在运行时刻，JVM会读取Signature属性的内容并提供给反射API来使用。<br>比如在代码中声明了一个域是List类型的，虽然在运行时刻其类型会变成原始类型List，但是仍然可以通过反射来获取到所用的实际的类型参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Field field = Pair.class.getDeclaredField(<span class="string">"myList"</span>); <span class="comment">//myList的类型是List </span></div><div class="line">Type type = field.getGenericType(); </div><div class="line"><span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType) &#123;     </div><div class="line">    ParameterizedType paramType = (ParameterizedType) type;     </div><div class="line">    Type[] actualTypes = paramType.getActualTypeArguments();     </div><div class="line">    <span class="keyword">for</span> (Type aType : actualTypes) &#123;         </div><div class="line">        <span class="keyword">if</span> (aType <span class="keyword">instanceof</span> Class) &#123;         </div><div class="line">            Class clz = (Class) aType;             </div><div class="line">            System.out.println(clz.getName()); <span class="comment">//输出java.lang.String         </span></div><div class="line">        &#125;     </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>在程序运行期间，Java运行时系统始终为所有的对象维护一个被称为运行时的类型标识。这个信息跟踪着这个对象所属的类。可以通过专门的Java类访问这些信息，保存这些信息的类被称为<strong>Class类</strong>。<br>获取Class对象的三种方法：</p>
<ol>
<li><p>通过调用Object类中的getClass()方法返回一个Class对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Object myObject = <span class="keyword">new</span> Object();</div><div class="line">Class myObjectClass = myObject.getClass();</div></pre></td></tr></table></figure>
</li>
<li><p>通过调用静态方法forName获得类名对应的Class对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String className = <span class="string">"java.util.Date"</span>;</div><div class="line">Class cl = Class.forName(className);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>注意：在使用<code>Class.forName()</code>方法时，必须提供一个类的全名，这个全名包括类所在的包的名字。</p>
<ol>
<li>如果在调用该方法时，没有找到该路径的类，将会抛出ClassNotFoundException。<br>获得Class对象的第三种方法非常简单，如果<code>T</code>是任意的Java类型，<code>T.class</code>将代表匹配的类对象<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class cl1 = Date.class;</div><div class="line">Class cl2 = <span class="keyword">int</span>.class;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>补充：可通过下面方式访问类的父类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Object myObject = <span class="keyword">new</span> Object();</div><div class="line">Class myObjectClass = myObject.getSuperclass();</div></pre></td></tr></table></figure></p>
<h3 id="获取类名"><a href="#获取类名" class="headerlink" title="获取类名"></a>获取类名</h3><p>通过Class对象可以获取两个版本的类名：</p>
<ol>
<li><p>通过getName()方法返回类的全限定类名(包含包名)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">String className = aClass.getName();</div></pre></td></tr></table></figure>
</li>
<li><p>通过getSimpleName()方法返回类名(不包含包名)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">String className = aClass.getSimpleName();</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="获取修饰符"><a href="#获取修饰符" class="headerlink" title="获取修饰符"></a>获取修饰符</h3><p>可以通过Class对象的<code>getModifiers()</code>方法来访问一个类的修饰符，该方法通过返回一个整型数值，用不同的位开关描述public/private/static等修饰符的使用状况。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line"><span class="keyword">int</span> modifiers = aClass.getModifiers();</div></pre></td></tr></table></figure></p>
<p>还可以使用Modifier类中的isPublic、isPrivate或isFinal判断方法或构造器是否是public、private或final。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Modifier.isAbstract(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isFinal(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isInterface(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isNative(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isPrivate(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isProtected(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isPublic(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isStatic(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isStrict(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isSynchronized(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isTransient(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isVolatile(<span class="keyword">int</span> modifiers);</div></pre></td></tr></table></figure></p>
<h3 id="获取包信息"><a href="#获取包信息" class="headerlink" title="获取包信息"></a>获取包信息</h3><p>可通过以下方式获取包信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">Object object = <span class="keyword">new</span> Object();</div><div class="line">Class cl = object.getClass();</div><div class="line">System.out.println(cl.getPackage());</div><div class="line">...</div><div class="line"><span class="comment">/*output</span></div><div class="line">package java.lang, Java Platform API Specification, version 1.7</div><div class="line">*/</div></pre></td></tr></table></figure></p>
<h3 id="获取实现的接口集合"><a href="#获取实现的接口集合" class="headerlink" title="获取实现的接口集合"></a>获取实现的接口集合</h3><p>可通过调用Class对象的<code>getInterfaces()</code>方法获取一个类实现的接口集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">Class[] interfaces = aClass.getInterfaces();</div></pre></td></tr></table></figure></p>
<p>注意：getInterfaces()方法仅仅只返回当前类所实现的接口，不包括当前类的父类所实现的接口。</p>
<h3 id="获取构造器"><a href="#获取构造器" class="headerlink" title="获取构造器"></a>获取构造器</h3><p>可通过调用Class对象的<code>getConstructors()</code>方法获取一个类的构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">Constructor[] constructors = aClass.getConstructors();</div></pre></td></tr></table></figure></p>
<p>返回的Constructor数组包含每一个声明为<code>public</code>的构造方法。</p>
<hr>
<p>还可以通过给定的构造方法的参数类型获取指定的构造方法，如下：返回的构造方法的方法参数为String类型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">Constructor constructor = aClass.getConstructor(<span class="keyword">new</span> Class[]&#123;String.class&#125;);</div></pre></td></tr></table></figure></p>
<p>注意：如果没有指定的构造方法能匹配给定的方法参数，则会抛出<code>NoSuchMethodException</code>异常。</p>
<hr>
<p>还可以获取指定构造方法的方法参数信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Constructor constructor = ... <span class="comment">//获取Constructor对象</span></div><div class="line">Class[] parameterTypes = constructor.getParameterTypes();</div></pre></td></tr></table></figure></p>
<hr>
<p>利用Constructor对象实例化一个类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Constructor constructor = ... <span class="comment">//获取Constructor对象</span></div><div class="line">Class[] parameterTypes = constructor.getParameterTypes();</div></pre></td></tr></table></figure></p>
<h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><p>可通过调用Class对象的<code>getMethods()</code>方法获取一个类的所有方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ...<span class="comment">//获取Class对象</span></div><div class="line">Method[] methods = aClass.getMethods();</div></pre></td></tr></table></figure></p>
<p>返回的Method对象数组包含了指定类中声明为public的所有变量集合。</p>
<hr>
<p>还可以通过具体的参数类型来获取指定的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class  aClass = ...<span class="comment">//获取Class对象</span></div><div class="line">Method method = aClass.getMethod(<span class="string">"doSomething"</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;);</div></pre></td></tr></table></figure></p>
<p>注意：如果根据给定的方法名称以及参数类型无法匹配到相应的方法，则会抛出NoSuchMethodException</p>
<hr>
<p>获取指定方法的方法参数以及返回类型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Method method = ... <span class="comment">//获取Class对象</span></div><div class="line">Class[] parameterTypes = method.getParameterTypes();</div><div class="line">Class returnType = method.getReturnType();</div></pre></td></tr></table></figure></p>
<hr>
<p>通过Method对象调用方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取一个方法名为doSomesthing，参数类型为String的方法</span></div><div class="line">Method method = MyObject.class.getMethod(<span class="string">"doSomething"</span>, String.class);</div><div class="line">Object returnValue = method.invoke(<span class="keyword">null</span>, <span class="string">"parameter-value1"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="获取变量"><a href="#获取变量" class="headerlink" title="获取变量"></a>获取变量</h3><p>可通过调用Class对象的<code>getFields()</code>方法获取一个类的成员变量<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">Field[] method = aClass.getFields();</div></pre></td></tr></table></figure></p>
<p>返回的Field对象数组包含了指定类中声明为<code>public</code>的所有变量集合</p>
<hr>
<p>还可以通过具体的变量名称获取指定的变量<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">Field[] method = aClass.getFields(<span class="string">"someField"</span>);</div></pre></td></tr></table></figure></p>
<p>注意：在调用<code>getField()</code>方法时，如果根据给定的方法参数没有找到对应的变量，那么就会抛出<code>NoSuchFieldException</code></p>
<hr>
<p>通过调用<code>Field</code>对象的<code>getName()</code>方法获取它的变量名称<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Field field = ... <span class="comment">//获取Field对象</span></div><div class="line">String fieldName = field.getName();</div></pre></td></tr></table></figure></p>
<hr>
<p>通过调用<code>Field</code>对象<code>getType()</code>方法来获取一个变量的类型（如String, int等等）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">Field field = aClass.getField(<span class="string">"someField"</span>);</div><div class="line">Object fieldType = field.getType();</div></pre></td></tr></table></figure></p>
<hr>
<p>通过调用<code>Field.get()</code>或<code>Field.set()</code>方法获取或设置(get/set)变量值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Class  aClass = MyObject.class</div><div class="line">Field field = aClass.getField(<span class="string">"someField"</span>);</div><div class="line"></div><div class="line">MyObject objectInstance = <span class="keyword">new</span> MyObject();</div><div class="line"></div><div class="line">Object value = field.get(objectInstance);</div><div class="line"></div><div class="line">field.set(objetInstance, value);</div></pre></td></tr></table></figure></p>
<h3 id="获取指定类的getters和setters"><a href="#获取指定类的getters和setters" class="headerlink" title="获取指定类的getters和setters"></a>获取指定类的getters和setters</h3><ul>
<li>Getter：Getter方法的名字以get开头，没有方法参数，返回一个值</li>
<li>Setter：Setter方法的名字以set开头，有一个方法参数</li>
</ul>
<p>一个获取getter方法和setter方法的例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printGettersSetters</span><span class="params">(Class aClass)</span></span>&#123;</div><div class="line">  Method[] methods = aClass.getMethods();</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(Method method : methods)&#123;</div><div class="line">    <span class="keyword">if</span>(isGetter(method)) System.out.println(<span class="string">"getter: "</span> + method);</div><div class="line">    <span class="keyword">if</span>(isSetter(method)) System.out.println(<span class="string">"setter: "</span> + method);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isGetter</span><span class="params">(Method method)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(!method.getName().startsWith(<span class="string">"get"</span>))      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">if</span>(method.getParameterTypes().length != <span class="number">0</span>)   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">void</span>.class.equals(method.getReturnType()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSetter</span><span class="params">(Method method)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(!method.getName().startsWith(<span class="string">"set"</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">if</span>(method.getParameterTypes().length != <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="获取私有变量"><a href="#获取私有变量" class="headerlink" title="获取私有变量"></a>获取私有变量</h3><p>可以通过调用<code>Class.getDeclaredField(String name)</code>方法或者<code>Class.getDeclaredFields()</code>方法获取私有变量和受保护变量，不包括超类的成员；<code>Class.getField(String name)</code>和<code>Class.getFields()</code>只会返回公有变量，其中包括超类的公有变量，而无法获取私有变量。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivateObject</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> String privateString = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PrivateObject</span><span class="params">(String privateString)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.privateString = privateString;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**********************************************************************/</span></div><div class="line">PrivateObject privateObject = <span class="keyword">new</span> PrivateObject(<span class="string">"The Private Value"</span>);</div><div class="line"></div><div class="line">Field privateStringField = PrivateObject.class.</div><div class="line">            getDeclaredField(<span class="string">"privateString"</span>);</div><div class="line"></div><div class="line">privateStringField.setAccessible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">String fieldValue = (String) privateStringField.get(privateObject);</div><div class="line">System.out.println(<span class="string">"fieldValue = "</span> + fieldValue);</div></pre></td></tr></table></figure></p>
<p>这个例子会输出”fieldValue = The Private Value”，<code>The Private Value</code>是<code>PrivateObject</code>实例的<code>privateString</code>私有变量的值，注意调用<code>PrivateObject.class.getDeclaredField(&quot;privateString&quot;)</code>方法会返回一个私有变量，这个方法返回的变量是定义在<code>PrivateObject</code>类中的而不是在它的父类中定义的变量。<br>注意：<code>privateStringField.setAccessible(true)</code>这行代码，通过调用<code>setAccessible()</code>方法会关闭指定类Field实例的反射访问检查，这行代码执行之后不论是私有的、受保护的以及包访问的作用域，你都可以在任何地方访问，即使你不在他的访问权限作用域之内。但是你如果你用一般代码来访问这些不在你权限作用域之内的代码依然是不可以的，在编译的时候就会报错。</p>
<h3 id="获取私有方法"><a href="#获取私有方法" class="headerlink" title="获取私有方法"></a>获取私有方法</h3><p>可以通过调用<code>Class.getDeclaredMethod(String name, Class[] parameterTypes)</code>或者<code>Class.getDeclaredMethods()</code>方法获取私有方法，不包括超类的成员；<code>Class.getMethod(String name, Class[] parameterTypes)</code>和<code>Class.getMethods()</code>方法，只会返回公有的方法，其中包括超类的公有方法，而无法获取私有方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivateObject</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> String privateString = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PrivateObject</span><span class="params">(String privateString)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.privateString = privateString;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">getPrivateString</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.privateString;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*******************************************************************/</span></div><div class="line">PrivateObject privateObject = <span class="keyword">new</span> PrivateObject(<span class="string">"The Private Value"</span>);</div><div class="line"></div><div class="line">Method privateStringMethod = PrivateObject.class.</div><div class="line">        getDeclaredMethod(<span class="string">"getPrivateString"</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">privateStringMethod.setAccessible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">String returnValue = (String)</div><div class="line">        privateStringMethod.invoke(privateObject, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"returnValue = "</span> + returnValue);</div></pre></td></tr></table></figure></p>
<p>这个例子会输出<code>&quot;returnValue = The Private Value&quot;</code>，<code>The Private Value</code>是<code>PrivateObject</code>实例的<code>getPrivateString()</code>方法的返回值。<code>PrivateObject.class.getDeclaredMethod(&quot;privateString&quot;)</code>方法会返回一个私有方法，这个方法是定义在<code>PrivateObject</code>类中的而不是在它的父类中定义的。<br>注意：Method.setAcessible(true)这行代码，通过调用setAccessible()方法会关闭指定类的Method实例的反射访问检查，这行代码执行之后不论是私有的、受保护的以及包访问的作用域，你都可以在任何地方访问，即使你不在他的访问权限作用域之内。但是你如果你用一般代码来访问这些不在你权限作用域之内的代码依然是不可以的，在编译的时候就会报错。</p>
<h3 id="获取注解"><a href="#获取注解" class="headerlink" title="获取注解"></a>获取注解</h3><p><strong>什么是注解？</strong><br>注解是Java 5的一个新特性。注解是插入你代码中的一种注释或者说是一种元数据（meta data）。这些注解信息可以在编译期使用预编译工具进行处理（pre-compiler tools），也可以在运行期使用Java反射机制进行处理。<br>下面是一个类注解的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@MyAnnotation</span>(name=<span class="string">"someName"</span>,  value = <span class="string">"Hello World"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在TheClass类定义的上面有一个@MyAnnotation的注解。注解的定义与接口的定义相似，下面是MyAnnotation注解的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在interface前面的@符号表名这是一个注解，一旦你定义了一个注解之后你就可以将其应用到你的代码中。</p>
<blockquote>
<p>说明：在注解定义中的两个指示@Retention(RetentionPolicy.RUNTIME)和@Target(ElementType.TYPE)，说明了这个注解该如何使用。</p>
<ol>
<li>@Retention(RetentionPolicy.RUNTIME)表示这个注解可以在运行期通过反射访问。如果你没有在注解定义的时候使用这个指示那么这个注解的信息不会保留到运行期，这样反射就无法获取它的信息。</li>
<li>@Target(ElementType.TYPE) 表示这个注解只能用在类型上面（比如类跟接口）。你同样可以把Type改为Field或者Method，或者你可以不用这个指示，这样的话你的注解在类，方法和变量上就都可以使用了。</li>
</ol>
</blockquote>
<hr>
<p><strong>类注解</strong><br>下是一个访问类注解的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Class aClass = TheClass.class;</div><div class="line">Annotation[] annotations = aClass.getAnnotations();</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Annotation annotation : annotations)&#123;</div><div class="line">    <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</div><div class="line">        MyAnnotation myAnnotation = (MyAnnotation) annotation;</div><div class="line">        System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</div><div class="line">        System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你还可以像下面这样指定访问一个类的注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Class aClass = TheClass.class;</div><div class="line">Annotation annotation = aClass.getAnnotation(MyAnnotation.class);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</div><div class="line">    MyAnnotation myAnnotation = (MyAnnotation) annotation;</div><div class="line">    System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</div><div class="line">    System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>方法注解</strong><br>下面是一个方法注解的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass</span> </span>&#123;</div><div class="line">  <span class="meta">@MyAnnotation</span>(name=<span class="string">"someName"</span>,  value = <span class="string">"Hello World"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你可以像这样访问方法注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Method method = ... <span class="comment">//获取方法对象</span></div><div class="line">Annotation[] annotations = method.getDeclaredAnnotations();</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Annotation annotation : annotations)&#123;</div><div class="line">    <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</div><div class="line">        MyAnnotation myAnnotation = (MyAnnotation) annotation;</div><div class="line">        System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</div><div class="line">        System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你可以像这样访问指定的方法注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Method method = ... <span class="comment">// 获取方法对象</span></div><div class="line">Annotation annotation = method.getAnnotation(MyAnnotation.class);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</div><div class="line">    MyAnnotation myAnnotation = (MyAnnotation) annotation;</div><div class="line">    System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</div><div class="line">    System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>参数注解</strong><br>方法参数也可以添加注解，就像下面这样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomethingElse</span><span class="params">(</span></span></div><div class="line">        @MyAnnotation(name=<span class="string">"aName"</span>, value=<span class="string">"aValue"</span>) String parameter)&#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你可以通过Method对象来访问方法参数注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Method method = ... <span class="comment">//获取方法对象</span></div><div class="line">Annotation[][] parameterAnnotations = method.getParameterAnnotations();</div><div class="line">Class[] parameterTypes = method.getParameterTypes();</div><div class="line"></div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(Annotation[] annotations : parameterAnnotations)&#123;</div><div class="line">  Class parameterType = parameterTypes[i++];</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(Annotation annotation : annotations)&#123;</div><div class="line">    <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</div><div class="line">        MyAnnotation myAnnotation = (MyAnnotation) annotation;</div><div class="line">        System.out.println(<span class="string">"param: "</span> + parameterType.getName());</div><div class="line">        System.out.println(<span class="string">"name : "</span> + myAnnotation.name());</div><div class="line">        System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>需要注意的是Method.getParameterAnnotations()方法返回一个注解类型的二维数组，每一个方法的参数包含一个注解数组。</p>
<hr>
<p><strong>变量注解</strong><br>下面是一个变量注解的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@MyAnnotation</span>(name=<span class="string">"someName"</span>,  value = <span class="string">"Hello World"</span>)</div><div class="line">  <span class="keyword">public</span> String myField = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你可以像这样来访问变量的注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Field field = ... <span class="comment">//获取方法对象&lt;/pre&gt;</span></div><div class="line">&lt;pre&gt;Annotation[] annotations = field.getDeclaredAnnotations();</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Annotation annotation : annotations)&#123;</div><div class="line"> <span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</div><div class="line"> MyAnnotation myAnnotation = (MyAnnotation) annotation;</div><div class="line"> System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</div><div class="line"> System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你可以像这样访问指定的变量注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Field field = ...<span class="comment">//获取方法对象&lt;/pre&gt;</span></div><div class="line">&lt;pre&gt;</div><div class="line">Annotation annotation = field.getAnnotation(MyAnnotation.class);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(annotation <span class="keyword">instanceof</span> MyAnnotation)&#123;</div><div class="line"> MyAnnotation myAnnotation = (MyAnnotation) annotation;</div><div class="line"> System.out.println(<span class="string">"name: "</span> + myAnnotation.name());</div><div class="line"> System.out.println(<span class="string">"value: "</span> + myAnnotation.value());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://ifeve.com/java-reflection/" target="_blank" rel="external">Java Reflection教程</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是反射&quot;&gt;&lt;a href=&quot;#什么是反射&quot; class=&quot;headerlink&quot; title=&quot;什么是反射&quot;&gt;&lt;/a&gt;什么是反射&lt;/h3&gt;&lt;p&gt;“&lt;strong&gt;反射（Reflection）能够让运行于JVM中的程序检测和修改运行时的行为。&lt;/strong&gt;”这个概念常常会和内省（Introspection）混淆，以下是这两个术语在Wikipedia中的解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;内省用于在运行时检测某个对象的类型和其包含的属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;反射用于在运行时检测和修改某个对象的结构及其行为&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从它们的定义可以看出，内省是反射的一个子集。有些语言支持内省，但并不支持反射，如C++&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内省示例：instanceof 运算符用于检测某个对象是否属于特定的类&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Dog) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Dog d = (Dog) obj;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    d.bark();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;反射示例：Class.forName()方法可以通过类或接口的名称（一个字符串或完全限定名）来获取对应的Class对象。forName方法会触发类的初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用反射&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Class&amp;lt;?&amp;gt; c = Class.forName(&lt;span class=&quot;string&quot;&gt;&quot;classpath.and.classname&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Object dog = c.newInstance();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Method m = c.getDeclaredMethod(&lt;span class=&quot;string&quot;&gt;&quot;bark&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Class&amp;lt;?&amp;gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;m.invoke(dog);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在Java中，反射更接近于内省，因为你无法改变一个对象的结构。虽然一些API可以用来修改方法和属性的可见性，但并不能修改结构
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java垃圾收集机制</title>
    <link href="http://www.qiuchengjia.cn/2016/07/24/JVM/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.qiuchengjia.cn/2016/07/24/JVM/Java垃圾收集机制/</id>
    <published>2016-07-23T22:57:23.000Z</published>
    <updated>2016-07-24T02:19:22.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象引用"><a href="#对象引用" class="headerlink" title="对象引用"></a>对象引用</h3><p> Java中的垃圾回收一般是在Java堆中进行，因为堆中几乎存放了Java中所有的对象实例。谈到Java堆中的垃圾回收，自然要谈到引用。在JDK1.2之前，Java中的引用定义很很纯粹：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。但在JDK1.2之后，Java对引用的概念进行了扩充，将其分为<strong>强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）四种</strong>，引用强度依次减弱</p>
<ul>
<li><p><strong>强引用：</strong>如“Object obj = new Object（）”，这类引用是Java程序中最普遍的。只要强引用还存在，垃圾收集器就永远不会回收掉被引用的对象</p>
</li>
<li><p><strong>软引用：</strong>它用来描述一些可能还有用，但并非必须的对象。在系统内存不够用时，这类引用关联的对象将被垃圾收集器回收。JDK1.2之后提供了SoftReference类来实现软引用</p>
</li>
<li><p><strong>弱引用：</strong>它也是用来描述非需对象的，但它的强度比软引用更弱些，被弱引用关联的对象只能生存岛下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2之后，提供了WeakReference类来实现弱引用</p>
</li>
<li><p><strong>虚引用：</strong>最弱的一种引用关系，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的是希望能在这个对象被收集器回收时收到一个系统通知。JDK1.2之后提供了PhantomReference类来实现虚引用</p>
</li>
</ul>
<a id="more"></a>
<h3 id="垃圾对象的判定"><a href="#垃圾对象的判定" class="headerlink" title="垃圾对象的判定"></a>垃圾对象的判定</h3><p>Java堆中存放着几乎所有的对象实例，垃圾收集器对堆中的对象进行回收前，要先确定这些对象是否还有用，判定对象是否为垃圾对象有如下算法：</p>
<h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><ul>
<li><p>给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1，当引用失效时，计数器值就减1，任何时刻计数器都为0的对象就是不可能再被使用的</p>
</li>
<li><p>引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的选择，<strong>当Java语言并没有选择这种算法来进行垃圾回收，主要原因是它很难解决对象之间的相互循环引用问题</strong></p>
</li>
</ul>
<h4 id="根搜索算法"><a href="#根搜索算法" class="headerlink" title="根搜索算法"></a>根搜索算法</h4><p><strong>Java和C#中都是采用根搜索算法来判定对象是否存活的。</strong>这种算法的基本思路是通过一系列名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，就证明此对象是不可用的。在Java语言里，可作为GC Roots的兑现包括下面几种：</p>
<ul>
<li><p>虚拟机栈（栈帧中的本地变量表）中引用的对象</p>
</li>
<li><p>方法区中的类静态属性引用的对象</p>
</li>
<li><p>方法区中的常量引用的对象</p>
</li>
<li><p>本地方法栈中JNI（Native方法）的引用对象</p>
</li>
</ul>
<p>实际上，在根搜索算法中，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行根搜索后发现没有与GC Roots相连接的引用链，那它会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize（）方法。当对象没有覆盖finalize（）方法，或finalize（）方法已经被虚拟机调用过，虚拟机将这两种情况都视为没有必要执行。如果该对象被判定为有必要执行finalize（）方法，那么这个对象将会被放置在一个名为F-Queue队列中，并在稍后由一条由虚拟机自动建立的、低优先级的Finalizer线程去执行finalize（）方法。finalize（）方法是对象逃脱死亡命运的最后一次机会（因为一个对象的finalize（）方法最多只会被系统自动调用一次），稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果要在finalize（）方法中成功拯救自己，只要在finalize（）方法中让该对象重引用链上的任何一个对象建立关联即可。而如果对象这时还没有关联到任何链上的引用，那它就会被回收掉</p>
<h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><ul>
<li>判定除了垃圾对象之后，便可以进行垃圾回收了。下面介绍一些垃圾收集算法，由于垃圾收集算法的实现涉及大量的程序细节，因此这里主要是阐明各算法的实现思想，而不去细论算法的具体实现</li>
</ul>
<h4 id="标记—清除算法"><a href="#标记—清除算法" class="headerlink" title="标记—清除算法"></a>标记—清除算法</h4><p>标记—清除算法是最基础的收集算法，它分为“标记”和“清除”两个阶段：首先标记出所需回收的对象，在标记完成后统一回收掉所有被标记的对象，它的标记过程其实就是前面的根搜索算法中判定垃圾对象的标记过程。标记—清除算法的执行情况如下图所示：</p>
<ul>
<li><p>回收前状态</p>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B6.jpg" alt=""></center>
</li>
<li><p>回收后状态</p>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B61.jpg" alt=""></center>

</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B62.jpg" alt=""></center>


<p>该算法有如下缺点：</p>
<ul>
<li><p>标记和清除过程的效率都不高</p>
</li>
<li><p>标记清除后会产生大量不连续的内存碎片，空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不触发另一次垃圾收集动作</p>
</li>
</ul>
<h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><p>复制算法是针对标记—清除算法的缺点，在其基础上进行改进而得到的，它讲课用内存按容量分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完了，就将还存活着的对象复制到另外一块内存上面，然后再把已使用过的内存空间一次清理掉。复制算法有如下优点：</p>
<ul>
<li><p>每次只对一块内存进行回收，运行高效</p>
</li>
<li><p>只需移动栈顶指针，按顺序分配内存即可，实现简单</p>
</li>
<li><p>内存回收时不用考虑内存碎片的出现</p>
</li>
</ul>
<p>它的缺点是：可一次性分配的最大内存缩小了一半</p>
<p>复制算法的执行情况如下图所示：</p>
<ul>
<li>回收前状态：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B63.jpg" alt=""></center>

<ul>
<li>回收后状态：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B64.jpg" alt=""></center>

<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B65.jpg" alt=""></center>

<h4 id="标记—整理算法"><a href="#标记—整理算法" class="headerlink" title="标记—整理算法"></a>标记—整理算法</h4><p>复制算法比较适合于新生代，在老年代中，对象存活率比较高，如果执行较多的复制操作，效率将会变低，所以老年代一般会选用其他算法，如标记—整理算法。该算法标记的过程与标记—清除算法中的标记过程一样，但对标记后出的垃圾对象的处理情况有所不同，它不是直接对可回收对象进行清理，而是让所有的对象都向一端移动，然后直接清理掉端边界以外的内存。标记—整理算法的回收情况如下所示：</p>
<ul>
<li>回收前状态：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B66.jpg" alt=""></center>

<ul>
<li>回收后状态：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B67.jpg" alt=""></center>

<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B62.jpg" alt=""></center>

<h4 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h4><ul>
<li><strong>当前商业虚拟机的垃圾收集 都采用分代收集</strong>，它根据对象的存活周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代。在新生代中，每次垃圾收集时都会发现有大量对象死去，只有少量存活，因此可选用复制算法来完成收集，而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记—清除算法或标记—整理算法来进行回收</li>
</ul>
<h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><ul>
<li>垃圾收集器是内存回收算法的具体实现，Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大的差别。Sun  HotSpot虚拟机1.6版包含了如下收集器：Serial、ParNew、Parallel Scavenge、CMS、Serial Old、Parallel Old。这些收集器以不同的组合形式配合工作来完成不同分代区的垃圾收集工作</li>
</ul>
<h3 id="垃圾回收分析"><a href="#垃圾回收分析" class="headerlink" title="垃圾回收分析"></a>垃圾回收分析</h3><p>在用代码分析之前，我们对内存的分配策略明确以下三点：</p>
<ul>
<li><p>对象优先在Eden分配</p>
</li>
<li><p>大对象直接进入老年代</p>
</li>
<li><p>长期存活的对象将进入老年代</p>
</li>
</ul>
<p>对垃圾回收策略说明以下两点：</p>
<ul>
<li><p>新生代GC（Minor GC）：发生在新生代的垃圾收集动作，因为Java对象大多都具有朝生夕灭的特性，因此Minor GC非常频繁，一般回收速度也比较快</p>
</li>
<li><p>老年代GC（Major GC/Full GC）：发生在老年代的GC，出现了Major GC，经常会伴随至少一次Minor GC。由于老年代中的对象生命周期比较长，因此Major GC并不频繁，一般都是等待老年代满了后才进行Full GC，而且其速度一般会比Minor GC慢10倍以上。另外，如果分配了Direct Memory，在老年代中进行Full GC时，会顺便清理掉Direct Memory中的废弃对象</p>
</li>
</ul>
<p>下面我们来看如下代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlotGc</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        <span class="keyword">byte</span>[] holder = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">32</span>*<span class="number">1024</span>*<span class="number">1024</span>];  </div><div class="line">        System.gc();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>代码很简单，就是向内存中填充了32MB的数据，然后通过虚拟机进行垃圾收集。在Javac编译后，我们执行如下指令：java -verbose:gc SlotGc来查看垃圾收集的结果，得到如下输出信息：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[GC <span class="number">208</span>K-&gt;<span class="number">134</span>K(<span class="number">5056</span>K), <span class="number">0.0017306</span> secs]</div><div class="line"></div><div class="line">[Full GC <span class="number">134</span>K-&gt;<span class="number">134</span>K(<span class="number">5056</span>K), <span class="number">0.0121194</span> secs]</div><div class="line"></div><div class="line">[Full GC <span class="number">32902</span>K-&gt;<span class="number">32902</span>K(<span class="number">37828</span>K), <span class="number">0.0094149</span> sec</div></pre></td></tr></table></figure>
<ul>
<li><p>注意第三行，“-&gt;”之前的数据表示垃圾回收前堆中存活对象所占用的内存大小，“-&gt;”之后的数据表示垃圾回收堆中存活对象所占用的内存大小，括号中的数据表示堆内存的总容量，0.0094149 sec 表示垃圾回收所用的时间。</p>
</li>
<li><p>从结果中可以看出，System.gc(（）运行后并没有回收掉这32MB的内存，这应该是意料之中的结果，因为变量holder还处在作用域内，虚拟机自然不会回收掉holder引用的对象所占用的内存。</p>
</li>
<li><p>我们把代码修改如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlotGc</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        &#123;  </div><div class="line">        <span class="keyword">byte</span>[] holder = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">32</span>*<span class="number">1024</span>*<span class="number">1024</span>];  </div><div class="line">        &#125;  </div><div class="line">        System.gc();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>加入花括号后，holder的作用域被限制在了花括号之内，因此，在执行System.gc（）时，holder引用已经不能再被访问，逻辑上来讲，这次应该会回收掉holder引用的对象所占的内存。但查看垃圾回收情况时，输出信息如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[GC <span class="number">208</span>K-&gt;<span class="number">134</span>K(<span class="number">5056</span>K), <span class="number">0.0017100</span> secs]</div><div class="line"></div><div class="line">[Full GC <span class="number">134</span>K-&gt;<span class="number">134</span>K(<span class="number">5056</span>K), <span class="number">0.0125887</span> secs]</div><div class="line"></div><div class="line">[Full GC <span class="number">32902</span>K-&gt;<span class="number">32902</span>K(<span class="number">37828</span>K), <span class="number">0.0089226</span> secs]</div></pre></td></tr></table></figure>
<ul>
<li>很明显，这32MB的数据并没有被回收。下面我们再做如下修改：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlotGc</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        &#123;  </div><div class="line">        <span class="keyword">byte</span>[] holder = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">32</span>*<span class="number">1024</span>*<span class="number">1024</span>];  </div><div class="line">        holder = <span class="keyword">null</span>;  </div><div class="line">        &#125;  </div><div class="line">        System.gc();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这次得到的垃圾回收信息如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[GC <span class="number">208</span>K-&gt;<span class="number">134</span>K(<span class="number">5056</span>K), <span class="number">0.0017194</span> secs]</div><div class="line"></div><div class="line">[Full GC <span class="number">134</span>K-&gt;<span class="number">134</span>K(<span class="number">5056</span>K), <span class="number">0.0124656</span> secs]</div><div class="line"></div><div class="line">[Full GC <span class="number">32902</span>K-&gt;<span class="number">134</span>K(<span class="number">37828</span>K), <span class="number">0.0091637</span> secs]</div></pre></td></tr></table></figure>
<ul>
<li><p>说明这次holder引用的对象所占的内存被回收了。我们慢慢来分析</p>
</li>
<li><p><strong>首先明确一点：holder能否被回收的根本原因是局部变量表中的Slot是否还存有关于holder数组对象的引用</strong></p>
</li>
<li><p>在第一次修改中，虽然在holder作用域之外进行回收，但是在此之后，没有对局部变量表的读写操作，holder所占用的Slot还没有被其他变量所复用（回忆Java内存区域与内存溢出一文中关于Slot的讲解），所以作为GC Roots一部分的局部变量表仍保持者对它的关联。这种关联没有被及时打断，因此GC收集器不会将holder引用的对象内存回收掉。 在第二次修改中，在GC收集器工作前，手动将holder设置为null值，就把holder所占用的局部变量表中的Slot清空了，因此，这次GC收集器工作时将holder之前引用的对象内存回收掉了</p>
</li>
<li><p>当然，我们也可以用其他方法来将holder引用的对象内存回收掉，只要复用holder所占用的slot即可，比如在holder作用域之外执行一次读写操作</p>
</li>
<li><p>为对象赋null值并不是控制变量回收的最好方法，以恰当的变量作用域来控制变量回收时间才是最优雅的解决办法。另外，赋null值的操作在经过虚拟机JIT编译器优化后会被消除掉，经过JIT编译后，System.gc（）执行时就可以正确地回收掉内存，而无需赋null值</p>
</li>
</ul>
<h3 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h3><p>Java虚拟机的内存管理与垃圾收集是虚拟机结构体系中最重要的组成部分，对程序（尤其服务器端）的性能和稳定性有着非常重要的影响。性能调优需要具体情况具体分析，而且实际分析时可能需要考虑的方面很多，这里仅就一些简单常用的情况作简要介绍</p>
<ul>
<li><p>我们可以通过给Java虚拟机分配超大堆（前提是物理机的内存足够大）来提升服务器的响应速度，但分配超大堆的前提是有把握把应用程序的Full GC频率控制得足够低，因为一次Full GC的时间造成比较长时间的停顿。控制Full GC频率的关键是保证应用中绝大多数对象的生存周期不应太长，尤其不能产生批量的、生命周期长的大对象，这样才能保证老年代的稳定</p>
</li>
<li><p>Direct Memory在堆内存外分配，而且二者均受限于物理机内存，且成负相关关系，因此分配超大堆时，如果用到了NIO机制分配使用了很多的Direct Memory，则有可能导致Direct Memory的OutOfMemoryError异常，这时可以通过-XX:MaxDirectMemorySize参数调整Direct Memory的大小</p>
</li>
<li><p>除了Java堆和永久代以及直接内存外，还要注意下面这些区域也会占用较多的内存，这些内存的总和会受到操作系统进程最大内存的限制：</p>
</li>
</ul>
<ol>
<li><p><strong>线程堆栈：</strong>可通过-Xss调整大小，内存不足时抛出StackOverflowError（纵向无法分配，即无法分配新的栈帧）或OutOfMemoryError（横向无法分配，即无法建立新的线程）</p>
</li>
<li><p><strong>Socket缓冲区：</strong>每个Socket连接都有Receive和Send两个缓冲区，分别占用大约37KB和25KB的内存。如果无法分配，可能会抛出IOException：Too many open files异常</p>
</li>
<li><p><strong>JNI代码：</strong>如果代码中使用了JNI调用本地库，那本地库使用的内存也不在堆中</p>
</li>
<li><p><strong>虚拟机和GC：</strong>虚拟机和GC的代码执行也要消耗一定的内存</p>
</li>
</ol>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://blog.csdn.net/ns_code/article/details/18076173" target="_blank" rel="external">传送门</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;对象引用&quot;&gt;&lt;a href=&quot;#对象引用&quot; class=&quot;headerlink&quot; title=&quot;对象引用&quot;&gt;&lt;/a&gt;对象引用&lt;/h3&gt;&lt;p&gt; Java中的垃圾回收一般是在Java堆中进行，因为堆中几乎存放了Java中所有的对象实例。谈到Java堆中的垃圾回收，自然要谈到引用。在JDK1.2之前，Java中的引用定义很很纯粹：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。但在JDK1.2之后，Java对引用的概念进行了扩充，将其分为&lt;strong&gt;强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）四种&lt;/strong&gt;，引用强度依次减弱&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;强引用：&lt;/strong&gt;如“Object obj = new Object（）”，这类引用是Java程序中最普遍的。只要强引用还存在，垃圾收集器就永远不会回收掉被引用的对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;软引用：&lt;/strong&gt;它用来描述一些可能还有用，但并非必须的对象。在系统内存不够用时，这类引用关联的对象将被垃圾收集器回收。JDK1.2之后提供了SoftReference类来实现软引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;弱引用：&lt;/strong&gt;它也是用来描述非需对象的，但它的强度比软引用更弱些，被弱引用关联的对象只能生存岛下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2之后，提供了WeakReference类来实现弱引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;虚引用：&lt;/strong&gt;最弱的一种引用关系，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的是希望能在这个对象被收集器回收时收到一个系统通知。JDK1.2之后提供了PhantomReference类来实现虚引用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Javac编译与JIT编译</title>
    <link href="http://www.qiuchengjia.cn/2016/07/24/JVM/Javac%E7%BC%96%E8%AF%91%E4%B8%8EJIT%E7%BC%96%E8%AF%91/"/>
    <id>http://www.qiuchengjia.cn/2016/07/24/JVM/Javac编译与JIT编译/</id>
    <published>2016-07-23T21:57:42.000Z</published>
    <updated>2016-08-12T05:24:49.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><ul>
<li>不论是物理机还是虚拟机，大部分的程序代码从开始编译到最终转化成物理机的目标代码或虚拟机能执行的指令集之前，都会按照如下图所示的各个步骤进行：</li>
</ul>
<p><br></p>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Javac%E7%BC%96%E8%AF%91%E4%B8%8EJIT%E7%BC%96%E8%AF%91.jpg" alt=""></center><br><br><br>- 其中绿色的模块可以选择性实现。很容易看出，上图中间的那条分支是解释执行的过程（即一条字节码一条字节码地解释执行，如JavaScript），而下面的那条分支就是传统编译原理中从源代码到目标机器代码的生成过程<br><br>- 如今，基于物理机、虚拟机等的语言，大多都遵循这种基于现代经典编译原理的思路，在执行前先对程序源码进行词法解析和语法解析处理，把源码转化为抽象语法树。<strong>对于一门具体语言的实现来说，词法和语法分析乃至后面的优化器和目标代码生成器都可以选择独立于执行引擎，形成一个完整意义的编译器去实现，这类代表是C/C++语言。也可以把抽象语法树或指令流之前的步骤实现一个半独立的编译器，这类代表是Java语言。又或者可以把这些步骤和执行引擎全部集中在一起实现，如大多数的JavaScript执行器</strong><br><br><br><a id="more"></a><br><br><br>## javac编译<br><br>- 在Java中提到“编译”，自然很容易想到Javac编译器将<em>.java文件编译成为</em>.class文件的过程，<strong>这里的Javac编译器称为前端编译器</strong>，其他的前端编译器还有诸如Eclipse JDT中的增量式编译器ECJ等。相对应的还有<strong>后端编译器</strong>，它在程序运行期间将字节码转变成机器码<strong>（现在的Java程序在运行时基本都是解释执行加编译执行）</strong>，如<strong>HotSpot虚拟机自带的JIT（Just In Time Compiler）编译器（分Client端和Server端）</strong>。另外，有时候还有可能会碰到静态提前编译器（AOT，Ahead Of Time Compiler）直接把*.java文件编译成本地机器代码，如GCJ、Excelsior JET等，这类编译器我们应该比较少遇到。<br><br>- 下面简要说下Javac编译（前端编译）的过程<br><br>### 词法、语法分析<br><br>- 词法分析是将源代码的字符流转变为标记（Token）集合。单个字符是程序编写过程中的的最小元素，而标记则是编译过程的最小元素，关键字、变量名、字面量、运算符等都可以成为标记，比如整型标志int由三个字符构成，但是它只是一个标记，不可拆分<br><br>- 语法分析是根据Token序列来构造抽象语法树的过程。抽象语法树是一种用来描述程序代码语法结构的树形表示方式，语法树的每一个节点都代表着程序代码中的一个语法结构，如bao、类型、修饰符、运算符等。经过这个步骤后，编译器就基本不会再对源码文件进行操作了，后续的操作都建立在<strong>抽象语法树之</strong>上<br><br>### 填充符号表<br><br>- 完成了语法分析和词法分析之后，下一步就是填充符号表的过程。符号表是由一组符号地址和符号信息构成的表格。符号表中所登记的信息在编译的不同阶段都要用到，在语义分析（后面的步骤）中，符号表所登记的内容将用于语义检查和产生中间代码，在目标代码生成阶段，当对符号名进行地址分配时，符号表是地址分配的依据<br><br><br>### 语义分析<br><br><br>语法树能表示一个结构正确的源程序的抽象，但无法保证源程序是符合逻辑的。而语义分析的主要任务是读结构上正确的源程序进行上下文有关性质的审查。语义分析过程分为标注检查和数据及控制流分析两个步骤：<br><br>- 标注检查步骤检查的内容包括诸如变量使用前是否已被声明、变量和赋值之间的数据类型是否匹配等<br><br>- 数据及控制流分析是对程序上下文逻辑更进一步的验证，它可以检查出诸如程序局部变量在使用前是否有赋值、方法的每条路径是否都有返回值、是否所有的受查异常都被正确处理了等问题<br><br><br>### 字节码生成<br><br><br>- 字节码生成是Javac编译过程的最后一个阶段。字节码生成阶段不仅仅是把前面各个步骤所生成的信息转化成字节码写到磁盘中，编译器还进行了少量的代码添加和转换工作。 实例构造器<init>（）方法和类构造器<clinit>（）方法就是在这个阶段添加到语法树之中的（这里的实例构造器并不是指默认的构造函数，而是指我们自己重载的构造函数，如果用户代码中没有提供任何构造函数，那编译器会自动添加一个没有参数、访问权限与当前类一致的默认构造函数，这个工作在填充符号表阶段就已经完成了）<br><br><br>## JIT编译<br><br>- Java程序最初是仅仅通过解释器解释执行的，即对字节码逐条解释执行，这种方式的执行速度相对会比较慢，尤其当某个方法或代码块运行的特别频繁时，这种方式的执行效率就显得很低。于是后来在虚拟机中引入了<strong>JIT编译器（即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“Hot Spot Code”（热点代码），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是JIT编译器</strong><br><br>- 现在主流的商用虚拟机（如Sun HotSpot、IBM J9）中几乎都同时包含解释器和编译器（三大商用虚拟机之一的JRockit是个例外，它内部没有解释器，因此会有启动相应时间长之类的缺点，但它主要是面向服务端的应用，这类应用一般不会重点关注启动时间）。二者各有优势：<strong>当程序需要迅速启动和执行时，解释器可以首先发挥作用，省去编译的时间，立即执行；当程序运行后，随着时间的推移，编译器逐渐会返回作用，把越来越多的代码编译成本地代码后，可以获取更高的执行效率。解释执行可以节约内存，而编译执行可以提升效率</strong><br><br>- HotSpot虚拟机中内置了两个JIT编译器：Client Complier和Server Complier，分别用在客户端和服务端，目前主流的HotSpot虚拟机中默认是采用解释器与其中一个编译器直接配合的方式工作<br><br>### 热点代码<br><br>运行过程中会被即时编译器编译的“热点代码”有两类：<br><br>- 被多次调用的方法<br><br>- 被多次调用的循环体<br><br>两种情况，编译器都是以整个方法作为编译对象，这种编译也是虚拟机中标准的编译方式。要知道一段代码或方法是不是热点代码，是不是需要触发即时编译，需要进行Hot Spot Detection（热点探测）。目前主要的热点 判定方式有以下两种：<br><br>- <strong>基于采样的热点探测：</strong>采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这段方法代码就是“热点代码”。这种探测方法的好处是实现简单高效，还可以很容易地获取方法调用关系，缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测<br><br>- <strong>基于计数器的热点探测：</strong>采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是“热点方法”。这种统计方法实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是它的统计结果相对更加精确严谨<br><br>在HotSpot虚拟机中使用的是第二种——基于计数器的热点探测方法，因此它为每个方法准备了两个计数器：方法调用计数器和回边计数器<br><br>- 方法调用计数器用来统计方法调用的次数，在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间内方法被调用的次数<br><br>- 回边计数器用于统计一个方法中循环体代码执行的次数（准确地说，应该是回边的次数，因为并非所有的循环都是回边），在字节码中遇到控制流向后跳转的指令就称为“回边”<br><br>- 在确定虚拟机运行参数的前提下，这两个计数器都有一个确定的阀值，当计数器的值超过了阀值，就会触发JIT编译。触发了JIT编译后，在默认设置下，执行引擎并不会同步等待编译请求完成，而是继续进入解释器按照解释方式执行字节码，直到提交的请求被编译器编译完成为止（编译工作在后台线程中进行）。当编译工作完成后，下一次调用该方法或代码时，就会使用已编译的版本<br><br>- 由于方法计数器触发即时编译的过程与回边计数器触发即时编译的过程类似，因此这里仅给出方法调用计数器触发即时编译的流程：<br><br><center><img src="http://o99dg8ap9.bkt.clouddn.com/Javac%E7%BC%96%E8%AF%91%E4%B8%8EJIT%E7%BC%96%E8%AF%911.jpg" alt=""></center>


<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>Javac字节码编译器与虚拟机内的JIT编译器的执行过程合起来其实就等同于一个传统的编译器所执行的编译过程</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://blog.csdn.net/ns_code/article/details/18009455" target="_blank" rel="external">传送门</a></li>
</ul>
</clinit></init>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编译过程&quot;&gt;&lt;a href=&quot;#编译过程&quot; class=&quot;headerlink&quot; title=&quot;编译过程&quot;&gt;&lt;/a&gt;编译过程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不论是物理机还是虚拟机，大部分的程序代码从开始编译到最终转化成物理机的目标代码或虚拟机能执行的指令集之前，都会按照如下图所示的各个步骤进行：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Javac%E7%BC%96%E8%AF%91%E4%B8%8EJIT%E7%BC%96%E8%AF%91.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;br&gt;&lt;br/&gt;&lt;br&gt;- 其中绿色的模块可以选择性实现。很容易看出，上图中间的那条分支是解释执行的过程（即一条字节码一条字节码地解释执行，如JavaScript），而下面的那条分支就是传统编译原理中从源代码到目标机器代码的生成过程&lt;br&gt;&lt;br&gt;- 如今，基于物理机、虚拟机等的语言，大多都遵循这种基于现代经典编译原理的思路，在执行前先对程序源码进行词法解析和语法解析处理，把源码转化为抽象语法树。&lt;strong&gt;对于一门具体语言的实现来说，词法和语法分析乃至后面的优化器和目标代码生成器都可以选择独立于执行引擎，形成一个完整意义的编译器去实现，这类代表是C/C++语言。也可以把抽象语法树或指令流之前的步骤实现一个半独立的编译器，这类代表是Java语言。又或者可以把这些步骤和执行引擎全部集中在一起实现，如大多数的JavaScript执行器&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java语法糖</title>
    <link href="http://www.qiuchengjia.cn/2016/07/24/JVM/Java%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
    <id>http://www.qiuchengjia.cn/2016/07/24/JVM/Java语法糖/</id>
    <published>2016-07-23T21:17:40.000Z</published>
    <updated>2016-07-23T13:26:43.759Z</updated>
    
    <content type="html"><![CDATA[<h3 id="语法糖来源"><a href="#语法糖来源" class="headerlink" title="语法糖来源"></a>语法糖来源</h3><ul>
<li>语法糖（Syntactic Sugar），也称糖衣语法，是由英国计算机学家Peter.J.Landin发明的一个术语，指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。<strong>Java中最常用的语法糖主要有泛型、变长参数、条件编译、自动拆装箱、内部类等。</strong>虚拟机并不支持这些语法，<strong>它们在编译阶段就被还原回了简单的基础语法结构，这个过程成为解语法糖</strong></li>
</ul>
<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ul>
<li><p>泛型是JDK1.5之后引入的一项新特性，Java语言在还没有出现泛型时，只能通过Object是所有类型的父类和类型强制转换这两个特点的配合来实现泛型的功能，这样实现的泛型功能要在程序运行期才能知道Object真正的对象类型，在Javac编译期，编译器无法检查这个Object的强制转型是否成功，这便将一些风险转接到了程序运行期中</p>
</li>
<li><p>Java语言在JDK1.5之后引入的泛型实际上只在程序源码中存在，在编译后的字节码文件中，就已经被替换为了原来的原生类型，并且在相应的地方插入了强制转型代码，因此对于运行期的Java语言来说，ArrayList<string>和ArrayList<integer>就是同一个类。所以泛型技术实际上是Java语言的一颗语法糖，Java语言中的泛型实现方法称为类型擦除，基于这种方法实现的泛型被称为<strong>伪泛型</strong></integer></string></p>
</li>
</ul>
<h4 id="泛型示例"><a href="#泛型示例" class="headerlink" title="泛型示例"></a>泛型示例</h4><ul>
<li>下面是一段简单的Java泛型代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,String&gt;();  </div><div class="line">map.put(<span class="number">1</span>,<span class="string">"No.1"</span>);  </div><div class="line">map.put(<span class="number">2</span>,<span class="string">"No.2"</span>);  </div><div class="line">System.out.println(map.get(<span class="number">1</span>));  </div><div class="line">System.out.println(map.get(<span class="number">2</span>));</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>将这段Java代码编译成Class文件，然后再用字节码反编译工具进行反编译后，将会发现泛型都变回了原生类型，如下面的代码所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Map map = <span class="keyword">new</span> HashMap();  </div><div class="line">map.put(<span class="number">1</span>,<span class="string">"No.1"</span>);  </div><div class="line">map.put(<span class="number">2</span>,<span class="string">"No.2"</span>);  </div><div class="line">System.out.println((String)map.get(<span class="number">1</span>));  </div><div class="line">System.out.println((String)map.get(<span class="number">2</span>));</div></pre></td></tr></table></figure>
<ul>
<li>为了更详细地说明类型擦除，再看如下代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.List;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanxingTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"List String"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(List&lt;Integer&gt; list)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"List Int"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>当我用Javac编译器编译这段代码时，报出了如下错误：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">FanxingTest.java:<span class="number">3</span>: 名称冲突：method(java.util.List&lt;java.lang.String&gt;) 和 method</div><div class="line"></div><div class="line">(java.util.List&lt;java.lang.Integer&gt;) 具有相同疑符</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</div><div class="line"></div><div class="line">                    ^</div><div class="line"></div><div class="line">FanxingTest.java:<span class="number">6</span>: 名称冲突：method(java.util.List&lt;java.lang.Integer&gt;) 和 <span class="function">metho</span></div><div class="line"></div><div class="line"><span class="title">d</span><span class="params">(java.util.List&lt;java.lang.String&gt;)</span> 具有相同疑符</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(List&lt;Integer&gt; list)</span>&#123;</div><div class="line"></div><div class="line">                    ^</div><div class="line"></div><div class="line"><span class="number">2</span> 错误</div></pre></td></tr></table></figure>
<ul>
<li><p>这是因为泛型List<string>和List<integer>编译后都被擦除了，变成了一样的原生类型List，擦除动作导致这两个方法的特征签名变得一模一样，在Class类文件结构一文中讲过，Class文件中不能存在特征签名相同的方法</integer></string></p>
</li>
<li><p>把以上代码修改如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.List;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanxingTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"List String"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">(List&lt;Integer&gt; list)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"List Int"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>发现这时编译可以通过了<strong>（注意：Java语言中true和1没有关联，二者属于不同的类型，不能相互转换，不存在C语言中整数值非零即真的情况）。</strong>两个不同类型的返回值的加入，使得方法的重载成功了。这是为什么呢？</p>
</li>
<li><p>我们知道，<strong>Java代码中的方法特征签名只包括了方法名称、参数顺序和参数类型，并不包括方法的返回值</strong>，因此方法的返回值并不参与重载方法的选择，这样看来为重载方法加入返回值貌似是多余的。对于重载方法的选择来说，这确实是多余的，但我们现在要解决的问题是让上述代码能通过编译，让两个重载方法能够合理地共存于同一个Class文件之中，这就要看字节码的方法特征签名，它不仅包括了Java代码中方法特征签名中所包含的那些信息，<strong>还包括方法返回值及受查异常表。</strong>为两个重载方法加入不同的返回值后，因为有了不同的字节码特征签名，它们便可以共存于一个Class文件之中。</p>
</li>
<li><p>自动拆装箱、变长参数等语法糖也都是在编译阶段就把它们该语法糖结构还原为了原生的语法结构，因此在Class文件中也只存在其对应的原生类型，这里不再一一说明</p>
</li>
</ul>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://blog.csdn.net/ns_code/article/details/18011009" target="_blank" rel="external">传送门</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;语法糖来源&quot;&gt;&lt;a href=&quot;#语法糖来源&quot; class=&quot;headerlink&quot; title=&quot;语法糖来源&quot;&gt;&lt;/a&gt;语法糖来源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;语法糖（Syntactic Sugar），也称糖衣语法，是由英国计算机学家Peter.J.Landin发明的一个术语，指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。&lt;strong&gt;Java中最常用的语法糖主要有泛型、变长参数、条件编译、自动拆装箱、内部类等。&lt;/strong&gt;虚拟机并不支持这些语法，&lt;strong&gt;它们在编译阶段就被还原回了简单的基础语法结构，这个过程成为解语法糖&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;泛型是JDK1.5之后引入的一项新特性，Java语言在还没有出现泛型时，只能通过Object是所有类型的父类和类型强制转换这两个特点的配合来实现泛型的功能，这样实现的泛型功能要在程序运行期才能知道Object真正的对象类型，在Javac编译期，编译器无法检查这个Object的强制转型是否成功，这便将一些风险转接到了程序运行期中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java语言在JDK1.5之后引入的泛型实际上只在程序源码中存在，在编译后的字节码文件中，就已经被替换为了原来的原生类型，并且在相应的地方插入了强制转型代码，因此对于运行期的Java语言来说，ArrayList&lt;String&gt;和ArrayList&lt;Integer&gt;就是同一个类。所以泛型技术实际上是Java语言的一颗语法糖，Java语言中的泛型实现方法称为类型擦除，基于这种方法实现的泛型被称为&lt;strong&gt;伪泛型&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;泛型示例&quot;&gt;&lt;a href=&quot;#泛型示例&quot; class=&quot;headerlink&quot; title=&quot;泛型示例&quot;&gt;&lt;/a&gt;泛型示例&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;下面是一段简单的Java泛型代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Map&amp;lt;Integer,String&amp;gt; map = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;Integer,String&amp;gt;();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;map.put(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;No.1&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;map.put(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;No.2&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(map.get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(map.get(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>多态性实现机制——静态分派与动态分派</title>
    <link href="http://www.qiuchengjia.cn/2016/07/24/JVM/%E5%A4%9A%E6%80%81%E6%80%A7%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E2%80%94%E2%80%94%E9%9D%99%E6%80%81%E5%88%86%E6%B4%BE%E4%B8%8E%E5%8A%A8%E6%80%81%E5%88%86%E6%B4%BE/"/>
    <id>http://www.qiuchengjia.cn/2016/07/24/JVM/多态性实现机制——静态分派与动态分派/</id>
    <published>2016-07-23T20:33:36.000Z</published>
    <updated>2016-07-23T13:08:09.302Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法解析"><a href="#方法解析" class="headerlink" title="方法解析"></a>方法解析</h3><ul>
<li><p>Class文件的编译过程中不包含传统编译中的连接步骤，一切方法调用在Class文件里面存储的都只是符号引用，而不是方法在实际运行时内存布局中的入口地址。这个特性给Java带来了更强大的动态扩展能力，使得可以在类运行期间才能确定某些目标方法的直接引用，称为动态连接，也有一部分方法的符号引用在类加载阶段或第一次使用时转化为直接引用，这种转化称为静态解析。这在前面的“Java内存区域与内存溢出”一文中有提到</p>
</li>
<li><p>静态解析成立的前提是：方法在程序真正执行前就有一个可确定的调用版本，并且这个方法的调用版本在运行期是不可改变的。换句话说，调用目标在编译器进行编译时就必须确定下来，这类方法的调用称为解析</p>
</li>
<li><p>在Java语言中，<strong>符合“编译器可知，运行期不可变”这个要求的方法主要有静态方法和私有方法两大类</strong>，前者与类型直接关联，后者在外部不可被访问，这两种方法都不可能通过继承或别的方式重写出其他的版本，<strong>因此它们都适合在类加载阶段进行解析</strong></p>
</li>
</ul>
<p>Java虚拟机里共提供了四条方法调用字节指令，分别是：</p>
<ul>
<li><p>invokestatic：调用静态方法</p>
</li>
<li><p>invokespecial：调用实例构造器<init>方法、私有方法和父类方法</init></p>
</li>
<li><p>invokevirtual：调用所有的虚方法</p>
</li>
<li><p>invokeinterface：调用接口方法，会在运行时再确定一个实现此接口的对象</p>
</li>
</ul>
<a id="more"></a>
<p>只要能被invokestatic和invokespecial指令调用的方法，都可以在解析阶段确定唯一的调用版本，符合这个条件的有静态方法、私有方法、实例构造器和父类方法四类，它们在类加载时就会把符号引用解析为该方法的直接引用。这些方法可以称为<strong>非虚方法</strong>（还包括final方法），与之相反，其他方法就称为<strong>虚方法</strong>（final方法除外）。这里要特别说明下final方法，虽然调用final方法使用的是invokevirtual指令，但是由于它无法覆盖，没有其他版本，所以也无需对方发接收者进行多态选择。Java语言规范中明确说明了final方法是一种非虚方法</p>
<ul>
<li>解析调用一定是个静态过程，在编译期间就完全确定，在类加载的解析阶段就会把涉及的符号引用转化为可确定的直接引用，不会延迟到运行期再去完成。而分派调用则可能是静态的也可能是动态的，根据分派依据的宗量数（方法的调用者和方法的参数统称为方法的宗量）又可分为单分派和多分派。两类分派方式两两组合便构成了静态单分派、静态多分派、动态单分派、动态多分派四种分派情况</li>
</ul>
<h3 id="静态分派"><a href="#静态分派" class="headerlink" title="静态分派"></a>静态分派</h3><ul>
<li><strong>所有依赖静态类型来定位方法执行版本的分派动作，都称为静态分派，静态分派的最典型应用就是多态性中的方法重载。</strong>静态分派发生在编译阶段，因此确定静态分配的动作实际上不是由虚拟机来执行的。下面通过一段方法重载的示例程序来更清晰地说明这种分派机制：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;  </div><div class="line">&#125;    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticPai</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Human hum)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"I am human"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Man hum)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"I am man"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Woman hum)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"I am woman"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        Human man = <span class="keyword">new</span> Man();  </div><div class="line">        Human woman = <span class="keyword">new</span> Woman();  </div><div class="line">        StaticPai sp = <span class="keyword">new</span> StaticPai();  </div><div class="line">        sp.say(man);  </div><div class="line">        sp.say(woman);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>上面代码的执行结果如下：</p>
<blockquote>
<p>I am human<br>I am human</p>
</blockquote>
</li>
<li><p>以上结果的得出应该不难分析。在分析为什么会选择参数类型为Human的重载方法去执行之前，先看如下代码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Human man = <span class="keyword">new</span> Man（）;</div></pre></td></tr></table></figure>
<ul>
<li><p>我们把上面代码中的<strong>“Human”称为变量的静态类型</strong>，后面的<strong>“Man”称为变量的实际类型</strong>。静态类型和实际类型在程序中都可以发生一些变化，区别是静态类型的变化仅仅在使用时发生，变量本身的静态类型不会被改变，并且最终的静态类型是在编译期可知的，而实际类型变化的结果在运行期才可确定</p>
</li>
<li><p>回到上面的代码分析中，在调用say（）方法时，方法的调用者（回忆上面关于宗量的定义，方法的调用者属于宗量）都为sp的前提下，使用哪个重载版本，完全取决于传入参数的数量和数据类型（方法的参数也是数据宗量）。代码中刻意定义了两个静态类型相同、实际类型不同的变量，可见<strong>编译器（不是虚拟机，因为如果是根据静态类型做出的判断，那么在编译期就确定了）在重载时是通过参数的静态类型而不是实际类型作为判定依据的。</strong>并且静态类型是编译期可知的，所以在编译阶段，Javac编译器就根据参数的静态类型决定使用哪个重载版本。这就是静态分派最典型的应用</p>
</li>
</ul>
<h3 id="动态分派"><a href="#动态分派" class="headerlink" title="动态分派"></a>动态分派</h3><ul>
<li>动态分派与多态性的另一个重要体现——方法覆写有着很紧密的关系。向上转型后调用子类覆写的方法便是一个很好地说明动态分派的例子。这种情况很常见，因此这里不再用示例程序进行分析。很显然，在判断执行父类中的方法还是子类中覆盖的方法时，如果用静态类型来判断，那么无论怎么进行向上转型，都只会调用父类中的方法，但实际情况是，根据对父类实例化的子类的不同，调用的是不同子类中覆写的方法，<strong>很明显，这里是要根据变量的实际类型来分派方法的执行版本的。而实际类型的确定需要在程序运行时才能确定下来，这种在运行期根据实际类型确定方法执行版本的分派过程称为动态分派</strong></li>
</ul>
<h3 id="单分派和多分派"><a href="#单分派和多分派" class="headerlink" title="单分派和多分派"></a>单分派和多分派</h3><ul>
<li><p>前面给出：方法的接受者（亦即方法的调用者）与方法的参数统称为方法的宗量。但分派是根据一个宗量对目标方法进行选择，多分派是根据多于一个宗量对目标方法进行选择</p>
</li>
<li><p>为了方便理解，下面给出一段示例代码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Eat</span></span>&#123;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drink</span></span>&#123;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Eat arg)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"爸爸在吃饭"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Drink arg)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"爸爸在喝水"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Eat arg)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"儿子在吃饭"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Drink arg)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"儿子在喝水"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDoublePai</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        Father father = <span class="keyword">new</span> Father();  </div><div class="line">        Father child = <span class="keyword">new</span> Child();  </div><div class="line">        father.doSomething(<span class="keyword">new</span> Eat());  </div><div class="line">        child.doSomething(<span class="keyword">new</span> Drink());  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>运行结果应该很容易预测到，如下：</li>
</ul>
<blockquote>
<p>爸爸在吃饭<br>    儿子在喝水</p>
</blockquote>
<ul>
<li><p>我们首先来看编译阶段编译器的选择过程，即静态分派过程。这时候选择目标方法的依据有两点：一是方法的接受者（即调用者）的静态类型是Father还是Child，二是方法参数类型是Eat还是Drink。<strong>因为是根据两个宗量进行选择，所以Java语言的静态分派属于多分派类型</strong></p>
</li>
<li><p>再来看运行阶段虚拟机的选择，即动态分派过程。由于编译期已经了确定了目标方法的参数类型（编译期根据参数的静态类型进行静态分派），因此唯一可以影响到虚拟机选择的因素只有此方法的接受者的实际类型是Father还是Child。<strong>因为只有一个宗量作为选择依据，所以Java语言的动态分派属于单分派类型</strong></p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%E5%A4%9A%E6%80%81%E6%80%A7%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E2%80%94%E2%80%94%E9%9D%99%E6%80%81%E5%88%86%E6%B4%BE%E4%B8%8E%E5%8A%A8%E6%80%81%E5%88%86%E6%B4%BE.jpg" alt=""></center>

<ul>
<li>根据以上论证，我们可以总结如下：目前的Java语言（JDK1.6）是一门<strong>静态多分派、动态单分派的语言</strong></li>
</ul>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://blog.csdn.net/ns_code/article/details/17965867" target="_blank" rel="external">传送门</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方法解析&quot;&gt;&lt;a href=&quot;#方法解析&quot; class=&quot;headerlink&quot; title=&quot;方法解析&quot;&gt;&lt;/a&gt;方法解析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Class文件的编译过程中不包含传统编译中的连接步骤，一切方法调用在Class文件里面存储的都只是符号引用，而不是方法在实际运行时内存布局中的入口地址。这个特性给Java带来了更强大的动态扩展能力，使得可以在类运行期间才能确定某些目标方法的直接引用，称为动态连接，也有一部分方法的符号引用在类加载阶段或第一次使用时转化为直接引用，这种转化称为静态解析。这在前面的“Java内存区域与内存溢出”一文中有提到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态解析成立的前提是：方法在程序真正执行前就有一个可确定的调用版本，并且这个方法的调用版本在运行期是不可改变的。换句话说，调用目标在编译器进行编译时就必须确定下来，这类方法的调用称为解析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在Java语言中，&lt;strong&gt;符合“编译器可知，运行期不可变”这个要求的方法主要有静态方法和私有方法两大类&lt;/strong&gt;，前者与类型直接关联，后者在外部不可被访问，这两种方法都不可能通过继承或别的方式重写出其他的版本，&lt;strong&gt;因此它们都适合在类加载阶段进行解析&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java虚拟机里共提供了四条方法调用字节指令，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;invokestatic：调用静态方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;invokespecial：调用实例构造器&lt;init&gt;方法、私有方法和父类方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;invokevirtual：调用所有的虚方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;invokeinterface：调用接口方法，会在运行时再确定一个实现此接口的对象&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>类加载机制</title>
    <link href="http://www.qiuchengjia.cn/2016/07/23/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.qiuchengjia.cn/2016/07/23/JVM/类加载机制/</id>
    <published>2016-07-22T21:57:30.000Z</published>
    <updated>2016-07-22T15:34:38.931Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><ul>
<li>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载七个阶段。它们开始的顺序如下图所示：<br><br><br><center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.jpg" alt=""></center><br><br></li>
<li><p>其中<strong>类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。</strong>在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序<strong>开始</strong>，而不是按顺序<strong>进行</strong>或<strong>完成</strong>，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段</p>
<p>这里简要说明下Java中的绑定：绑定指的是把一个方法的调用与方法所在的类(方法主体)关联起来，对java来说，绑定分为静态绑定和动态绑定：</p>
<ul>
<li>静态绑定：即前期绑定。在程序执行前方法已经被绑定，此时由编译器或其它连接程序实现。针对java，简单的可以理解为程序编译期的绑定。java当中的方法只有final，static，private和构造方法是前期绑定的</li>
</ul>
</li>
<li><p>动态绑定：即晚期绑定，也叫运行时绑定。在运行时根据具体对象的类型进行绑定。在java中，几乎所有的方法都是后期绑定的</p>
<a id="more"></a>
</li>
</ul>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>加载时类加载过程的第一个阶段，在加载阶段，虚拟机需要完成以下三件事情：</p>
<ul>
<li><p>通过一个类的全限定名来获取其定义的二进制字节流。</p>
</li>
<li><p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>
</li>
<li><p>在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口</p>
</li>
</ul>
<p>注意，这里第1条中的二进制字节流并不只是单纯地从Class文件中获取，比如它还可以从Jar包中获取、从网络中获取（最典型的应用便是Applet）、由其他文件生成（JSP应用）等</p>
<ul>
<li><p>相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载</p>
</li>
<li><p>加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据</p>
</li>
</ul>
<h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><ul>
<li><p>类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远远不限于类的加载阶段。对于任意一个类，都需要由它的类加载器和这个类本身一同确定其在就Java虚拟机中的唯一性，也就是说，即使两个类来源于同一个Class文件，只要加载它们的类加载器不同，那这两个类就必定不相等。这里的“相等”包括了代表类的Class对象的equals（）、isAssignableFrom（）、isInstance（）等方法的返回结果，也包括了使用instanceof关键字对对象所属关系的判定结果</p>
<p>站在<strong>Java虚拟机</strong>的角度来讲，只存在两种不同的类加载器：</p>
</li>
<li><p>启动类加载器：它使用C++实现（这里仅限于Hotspot，也就是JDK1.5之后默认的虚拟机，有很多其他的虚拟机是用Java语言实现的），是虚拟机自身的一部分</p>
</li>
<li><p>所有其他的类加载器：这些类加载器都由Java语言实现，独立于虚拟机之外，并且全部继承自抽象类java.lang.ClassLoader，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类</p>
</li>
</ul>
<p>站在<strong>Java开发人员</strong>的角度来看，类加载器可以大致划分为以下三类：</p>
<ul>
<li><p>启动类加载器：Bootstrap ClassLoader，跟上面相同。它负责加载存放在JDK\jre\lib(JDK代表JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库（如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载）。启动类加载器是无法被Java程序直接引用的</p>
</li>
<li><p>扩展类加载器：Extension ClassLoader，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载JDK\jre\lib\ext目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.*开头的类），开发者可以直接使用扩展类加载器</p>
</li>
<li><p>应用程序类加载器：Application ClassLoader，该类加载器由sun.misc.Launcher$AppClassLoader来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器</p>
</li>
</ul>
<p>应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。<strong>因为JVM自带的ClassLoader只是懂得从本地文件系统加载标准的java class文件，因此如果编写了自己的ClassLoader，便可以做到如下几点：</strong></p>
<ul>
<li><p>在执行非置信代码之前，自动验证数字签名</p>
</li>
<li><p>动态地创建符合用户特定需要的定制化构建类</p>
</li>
<li><p>从特定的场所取得java class，例如数据库中和网络中</p>
</li>
</ul>
<p>事实上当使用Applet的时候，就用到了特定的ClassLoader，因为这时需要从网络上加载java class，并且要检查相关的安全信息，应用服务器也大都使用了自定义的ClassLoader技术</p>
<ul>
<li>这几种类加载器的层次关系如下图所示：</li>
</ul>
<p><br></p>
<p><center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B62.jpg" alt=""></center><br><br></p>
<ul>
<li><p>这种层次关系称为类加载器的<strong>双亲委派模型</strong>。我们把每一层上面的类加载器叫做当前层类加载器的父加载器，当然，它们之间的父子关系并不是通过继承关系来实现的，而是使用组合关系来复用父加载器中的代码。该模型在JDK1.2期间被引入并广泛应用于之后几乎所有的Java程序中，但它并不是一个强制性的约束模型，而是Java设计者们推荐给开发者的一种类的加载器实现方式</p>
</li>
<li><p>双亲委派模型的工作流程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类</p>
</li>
<li><p>使用双亲委派模型来组织类加载器之间的关系，<strong>有一个很明显的好处，就是Java类随着它的类加载器（说白了，就是它所在的目录）一起具备了一种带有优先级的层次关系</strong>，这对于保证Java程序的稳定运作很重要。例如，类java.lang.Object类存放在JDK\jre\lib下的rt.jar之中，因此无论是哪个类加载器要加载此类，最终都会委派给启动类加载器进行加载，这边保证了Object类在程序中的各种类加载器中都是同一个类</p>
</li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p> 验证的目的是为了确保Class文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。不同的虚拟机对类验证的实现可能会有所不同，但大致都会完成以下四个阶段的验证：<strong>文件格式的验证、元数据的验证、字节码验证和符号引用验证</strong></p>
<ul>
<li><p>文件格式的验证：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理，该验证的主要目的是保证输入的字节流能正确地解析并存储于方法区之内。经过该阶段的验证后，字节流才会进入内存的方法区中进行存储，后面的三个验证都是基于方法区的存储结构进行的</p>
</li>
<li><p>元数据验证：对类的元数据信息进行语义校验（其实就是对类中的各数据类型进行语法校验），保证不存在不符合Java语法规范的元数据信息</p>
</li>
<li><p>字节码验证：该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为</p>
</li>
<li><p>符号引用验证：这是最后一个阶段的验证，它发生在虚拟机将符号引用转化为直接引用的时候（解析阶段中发生该转化，后面会有讲解），主要是对类自身以外的信息（常量池中的各种符号引用）进行匹配性的校验</p>
</li>
</ul>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：</p>
<hr>
<h4 id="类变量分配内存"><a href="#类变量分配内存" class="headerlink" title="类变量分配内存"></a>类变量分配内存</h4><ul>
<li>这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中</li>
</ul>
<hr>
<h4 id="数据默认值"><a href="#数据默认值" class="headerlink" title="数据默认值"></a>数据默认值</h4><p>这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值</p>
<ul>
<li><p>假设一个类变量的定义为：public static int value = 3；</p>
</li>
<li><p>那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器’&lt;’clinit&gt;（）方法之中的，<strong>所以把value赋值为3的动作将在初始化阶段才会执行</strong></p>
</li>
<li><p>下表列出了Java中所有基本数据类型以及reference类型的默认零值：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>数据类型</th>
<th style="text-align:center">默认零值</th>
</tr>
</thead>
<tbody>
<tr>
<td>int</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td>long</td>
<td style="text-align:center">0L</td>
</tr>
<tr>
<td>short</td>
<td style="text-align:center">(short)0</td>
</tr>
<tr>
<td>char</td>
<td style="text-align:center">‘\u0000’</td>
</tr>
<tr>
<td>byte</td>
<td style="text-align:center">(byte)0</td>
</tr>
<tr>
<td>boolean</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td>float</td>
<td style="text-align:center">0.0f</td>
</tr>
<tr>
<td>double</td>
<td style="text-align:center">0.0d</td>
</tr>
<tr>
<td>reference</td>
<td style="text-align:center">null</td>
</tr>
</tbody>
</table>
<p>这里还需要注意如下几点：</p>
<ul>
<li><p>对基本数据类型来说，对于类变量（static）和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过</p>
</li>
<li><p>对于同时被static和final修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被final修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值</p>
</li>
<li><p>对于引用数据类型reference来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即null。</p>
</li>
<li><p>如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值</p>
</li>
</ul>
<hr>
<h4 id="ConstantValue属性"><a href="#ConstantValue属性" class="headerlink" title="ConstantValue属性"></a>ConstantValue属性</h4><p>如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值</p>
<ul>
<li><p>假设上面的类变量value被定义为： public static final int value = 3；</p>
</li>
<li><p>编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为3。回忆 <a href="http://www.qiuchengjia.cn/2016/07/23/JVM/%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96/">上一篇博文</a> 中对象被动引用的第2个例子，便是这种情况。<strong>我们可以理解为static final常量在编译期就将其结果放入了调用它的类的常量池中</strong></p>
</li>
</ul>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ul>
<li><p>解析阶段是虚拟机将常量池中的符号引用转化为直接引用的过程。在Class类文件结构一文中已经比较过了符号引用和直接引用的区别和关联，这里不再赘述。前面说解析阶段可能开始于初始化之前，也可能在初始化之后开始，虚拟机会根据需要来判断，到底是在类被加载器加载时就对常量池中的符号引用进行解析（初始化之前），还是等到一个符号引用将要被使用前才去解析它（初始化之后）</p>
</li>
<li><p>对同一个符号引用进行多次解析请求时很常见的事情，虚拟机实现可能会对第一次解析的结果进行缓存（在运行时常量池中记录直接引用，并把常量标示为已解析状态），从而避免解析动作重复进行</p>
</li>
<li><p>解析动作主要针对类或接口、字段、类方法、接口方法四类符号引用进行，分别对应于常量池中的CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info、CONSTANT_InterfaceMethodref_info四种常量类型</p>
</li>
</ul>
<h4 id="类或接口的解析"><a href="#类或接口的解析" class="headerlink" title="类或接口的解析"></a>类或接口的解析</h4><ul>
<li>判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析</li>
</ul>
<h4 id="字段解析"><a href="#字段解析" class="headerlink" title="字段解析"></a>字段解析</h4><ul>
<li>对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束，查找流程如下图所示：</li>
</ul>
<p><br></p>
<p><center><img src="http://o99dg8ap9.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B63.jpg" alt=""></center><br><br></p>
<ul>
<li>从下面一段代码的执行结果中很容易看出来字段解析的搜索顺序：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">11</span>;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"执行了super类静态语句块"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Super</span></span>&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">33</span>;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"执行了父类静态语句块"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"执行了子类静态语句块"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        System.out.println(Child.m);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>执行结果如下：</li>
</ul>
<blockquote>
<p>执行了super类静态语句块<br>    执行了父类静态语句块<br>    33</p>
</blockquote>
<ul>
<li>如果注释掉Father类中对m定义的那一行，则输出结果如下：</li>
</ul>
<blockquote>
<p>  执行了super类静态语句块<br>    11</p>
</blockquote>
<ul>
<li><p>另外，很明显这就是<a href="http://www.qiuchengjia.cn/2016/07/23/JVM/%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96/">上篇博文</a>中的第1个例子的情况，这里我们便可以分析如下：static变量发生在静态解析阶段，也即是初始化之前，此时已经将字段的符号引用转化为了内存引用，也便将它与对应的类关联在了一起，由于在子类中没有查找到与m相匹配的字段，那么m便不会与子类关联在一起，因此并不会触发子类的初始化</p>
</li>
<li><p><strong>最后需要注意：理论上是按照上述顺序进行搜索解析，但在实际应用中，虚拟机的编译器实现可能要比上述规范要求的更严格一些。如果有一个同名字段同时出现在该类的接口和父类中，或同时在自己或父类的接口中出现，编译器可能会拒绝编译。</strong>如果对上面的代码做些修改，将Super改为接口，并将Child类继承Father类且实现Super接口，那么在编译时会报出如下错误：</p>
</li>
</ul>
<blockquote>
<p>StaticTest.java:24: 对 m 的引用不明确，Father 中的 变量 m 和 Super 中的 变量 m<br>都匹配<br>                System.out.println(Child.m);<br>                                        ^<br>1 错误</p>
</blockquote>
<h4 id="类方法解析"><a href="#类方法解析" class="headerlink" title="类方法解析"></a>类方法解析</h4><ul>
<li>对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口</li>
</ul>
<h4 id="接口方法解析"><a href="#接口方法解析" class="headerlink" title="接口方法解析"></a>接口方法解析</h4><ul>
<li>与类方法解析步骤类似，知识接口不会有父类，因此，只递归向上搜索父接口就行了</li>
</ul>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>初始化是类加载过程的最后一步，到了此阶段，才真正开始执行类中定义的Java程序代码。在准备阶段，类变量已经被赋过一次系统要求的初始值，而在初始化阶段，则是根据程序员通过程序指定的主观计划去初始化类变量和其他资源，或者可以从另一个角度来表达：初始化阶段是执行类构造器<clinit>()方法的过程</clinit></li>
</ul>
<h4 id="‘-lt-’clinit-gt-（）方法的执行规则"><a href="#‘-lt-’clinit-gt-（）方法的执行规则" class="headerlink" title="‘&lt;’clinit&gt;（）方法的执行规则"></a>‘&lt;’clinit&gt;（）方法的执行规则</h4><ul>
<li><p>‘&lt;’clinit&gt;（）方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句中可以赋值，但是不能访。</p>
</li>
<li><p>‘&lt;’clinit&gt;（）方法与实例构造器<init>（）方法（类的构造函数）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的’&lt;’clinit&gt;（）方法执行之前，父类的’&lt;’clinit&gt;（）方法已经执行完毕。因此，在虚拟机中第一个被执行的’&lt;’clinit&gt;（）方法的类肯定是java.lang.Object</init></p>
</li>
<li><p>‘&lt;’clinit&gt;（）方法对于类或接口来说并不是必须的，如果一个类中没有静态语句块，也没有对类变量的赋值操作，那么编译器可以不为这个类生成’&lt;’clinit&gt;（）方法</p>
</li>
<li><p>接口中不能使用静态语句块，但仍然有类变量（final static）初始化的赋值操作，因此接口与类一样会生成’&lt;’clinit&gt;（）方法。但是接口鱼类不同的是：执行接口的’&lt;’clinit&gt;（）方法不需要先执行父接口的’&lt;’clinit&gt;（）方法，只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也一样不会执行接口的’&lt;’clinit&gt;（）方法</p>
</li>
<li><p>虚拟机会保证一个类的’&lt;’clinit&gt;（）方法在多线程环境中被正确地加锁和同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的’&lt;’clinit&gt;（）方法，其他线程都需要阻塞等待，直到活动线程执行’&lt;’clinit&gt;（）方法完毕。如果在一个类的’&lt;’clinit&gt;（）方法中有耗时很长的操作，那就可能造成多个线程阻塞，在实际应用中这种阻塞往往是很隐蔽的</p>
</li>
</ul>
<p>下面给出一个简单的例子，以便更清晰地说明如上规则：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        a = <span class="number">2</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> b = a;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClinitTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        System.out.println(Child.b);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>执行上面的代码，会打印出2，也就是说b的值被赋为了2</p>
</li>
<li><p>我们来看得到该结果的步骤。首先在准备阶段为类变量分配内存并设置类变量初始值，这样A和B均被赋值为默认值0，而后再在调用’&lt;’clinit&gt;（）方法时给他们赋予程序中指定的值。当我们调用Child.b时，触发Child的’&lt;’clinit&gt;（）方法，根据规则2，在此之前，要先执行完其父类Father的’&lt;’clinit&gt;（）方法，又根据规则1，在执行’&lt;’clinit&gt;（）方法时，需要按static语句或static变量赋值操作等在代码中出现的顺序来执行相关的static语句，因此当触发执行Father的’&lt;’clinit&gt;（）方法时，会先将a赋值为1，再执行static语句块中语句，将a赋值为2，而后再执行Child类的’&lt;’clinit&gt;（）方法，这样便会将b的赋值为2</p>
</li>
<li><p>如果我们颠倒一下Father类中“public static int a = 1;”语句和“static语句块”的顺序，程序执行后，则会打印出1。很明显是根据规则1，执行Father的’&lt;’clinit&gt;（）方法时，根据顺序先执行了static语句块中的内容，后执行了“public static int a = 1;”语句</p>
</li>
<li><p>另外，在颠倒二者的顺序之后，如果在static语句块中对a进行访问（比如将a赋给某个变量），在编译时将会报错，因为根据规则1，它只能对a进行赋值，而不能访问</p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>整个类加载过程中，除了在加载阶段用户应用程序可以自定义类加载器参与之外，其余所有的动作完全由虚拟机主导和控制。到了初始化才开始执行类中定义的Java程序代码（亦及字节码），但这里的执行代码只是个开端，它仅限于’&lt;’clinit&gt;（）方法。类加载过程中主要是将Class文件（准确地讲，应该是类的二进制字节流）加载到虚拟机内存中，真正执行字节码的操作，在加载完成后才真正开始</li>
</ul>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://blog.csdn.net/ns_code/article/details/17881581" target="_blank" rel="external">传送门</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;类加载过程&quot;&gt;&lt;a href=&quot;#类加载过程&quot; class=&quot;headerlink&quot; title=&quot;类加载过程&quot;&gt;&lt;/a&gt;类加载过程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载七个阶段。它们开始的顺序如下图所示：&lt;br&gt;&lt;br/&gt;&lt;br&gt;&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;br&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其中&lt;strong&gt;类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。&lt;/strong&gt;在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序&lt;strong&gt;开始&lt;/strong&gt;，而不是按顺序&lt;strong&gt;进行&lt;/strong&gt;或&lt;strong&gt;完成&lt;/strong&gt;，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段&lt;/p&gt;
&lt;p&gt;这里简要说明下Java中的绑定：绑定指的是把一个方法的调用与方法所在的类(方法主体)关联起来，对java来说，绑定分为静态绑定和动态绑定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态绑定：即前期绑定。在程序执行前方法已经被绑定，此时由编译器或其它连接程序实现。针对java，简单的可以理解为程序编译期的绑定。java当中的方法只有final，static，private和构造方法是前期绑定的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态绑定：即晚期绑定，也叫运行时绑定。在运行时根据具体对象的类型进行绑定。在java中，几乎所有的方法都是后期绑定的&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>类初始化</title>
    <link href="http://www.qiuchengjia.cn/2016/07/23/JVM/%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://www.qiuchengjia.cn/2016/07/23/JVM/类初始化/</id>
    <published>2016-07-22T21:26:33.000Z</published>
    <updated>2016-07-22T13:43:52.826Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主动引用"><a href="#主动引用" class="headerlink" title="主动引用"></a>主动引用</h3><p>类初始化是类加载过程的最后一个阶段，到初始化阶段，才真正开始执行类中的Java程序代码。<strong>虚拟机规范严格规定了有且只有四种情况必须立即对类进行初始化：</strong></p>
<ul>
<li><p>遇到new、getstatic、putstatic、invokestatic这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。生成这四条指令最常见的Java代码场景是：使用new关键字实例化对象时、读取或设置一个类的静态字段（static）时（被static修饰又被final修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时</p>
</li>
<li><p>使用Java.lang.refect包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化</p>
</li>
<li><p>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化</p>
</li>
<li><p>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类</p>
<p>虚拟机规定只有这四种情况才会触发类的初始化，称为对一个类进行主动引用，除此之外所有引用类的方式都不会触发其初始化，称为被动引用</p>
</li>
</ul>
<a id="more"></a>
<h3 id="被动引用"><a href="#被动引用" class="headerlink" title="被动引用"></a>被动引用</h3><h4 id="子类引用父类"><a href="#子类引用父类" class="headerlink" title="子类引用父类"></a>子类引用父类</h4><ul>
<li>通过子类引用父类中的静态字段，这时对子类的引用为被动引用，因此不会初始化子类，只会初始化父类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">33</span>;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"父类被初始化"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125; </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"子类被初始化"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        System.out.println(Child.m);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行后输出的结果如下：</p>
<blockquote>
<p>父类被初始化<br>  33</p>
</blockquote>
<ul>
<li>对于静态字段，只有直接定义这个字段的类才会被初始化，因此，通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化</li>
</ul>
<h4 id="类的常量池"><a href="#类的常量池" class="headerlink" title="类的常量池"></a>类的常量池</h4><ul>
<li>常量在编译阶段会存入调用它的类的常量池中，本质上没有直接引用到定义该常量的类，因此不会触发定义常量的类的初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Const</span></span>&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"我是常量"</span>;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"初始化Const类"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        System.out.println(Const.NAME);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 执行后输出的结果如下：</p>
<blockquote>
<p>我是常量</p>
</blockquote>
<ul>
<li>虽然程序中引用了const类的常量NAME，但是在编译阶段将此常量的值“我是常量”存储到了调用它的类FinalTest的常量池中，对常量Const.NAME的引用实际上转化为了FinalTest类对自身常量池的引用。也就是说，实际上FinalTest的Class文件之中并没有Const类的符号引用入口，这两个类在编译成Class文件后就不存在任何联系了</li>
</ul>
<h4 id="数组引用类"><a href="#数组引用类" class="headerlink" title="数组引用类"></a>数组引用类</h4><ul>
<li>通过数组定义来引用类，不会触发类的初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Const</span></span>&#123;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"初始化Const类"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        Const[] con = <span class="keyword">new</span> Const[<span class="number">5</span>];  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p> 执行后不输出任何信息，说明Const类并没有被初始化</p>
</blockquote>
<ul>
<li>但这段代码里触发了另一个名为“LLConst”的类的初始化，它是一个由虚拟机自动生成的、直接继承于java.lang.Object的子类，创建动作由字节码指令newarray触发，很明显，这是一个对数组引用类型的初初始化，而该数组中的元素仅仅包含一个对Const类的引用，并没有对其进行初始化。如果我们加入对con数组中各个Const类元素的实例化代码，便会触发Const类的初始化，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Const</span></span>&#123;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.out.println(<span class="string">"初始化Const类"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        Const[] con = <span class="keyword">new</span> Const[<span class="number">5</span>];  </div><div class="line">        <span class="keyword">for</span>(Const a:con)  </div><div class="line">            a = <span class="keyword">new</span> Const();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这样便会得到如下输出结果：</p>
<blockquote>
<p>初始化Const类</p>
</blockquote>
<ul>
<li>根据四条规则的第一条，这里的new触发了Const类</li>
</ul>
<h3 id="接口和类初始化的不同"><a href="#接口和类初始化的不同" class="headerlink" title="接口和类初始化的不同"></a>接口和类初始化的不同</h3><ul>
<li><p>接口也有初始化过程，上面的代码中我们都是用静态语句块来输出初始化信息的，而在接口中不能使用“static{}”语句块，但编译器仍然会为接口生成<clinit>类构造器，用于初始化接口中定义的成员变量（实际上是static final修饰的全局常量）</clinit></p>
</li>
<li><p>二者在初始化时最主要的区别是：当一个类在初始化时，要求其父类全部已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量），才会初始化该父接口。这点也与类初始化的情况很不同，回过头来看第2个例子就知道，调用类中的static final常量时并不会 触发该类的初始化，但是调用接口中的static final常量时便会触发该接口的初始化</p>
</li>
</ul>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://blog.csdn.net/ns_code/article/details/17845821" target="_blank" rel="external">传送门</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;主动引用&quot;&gt;&lt;a href=&quot;#主动引用&quot; class=&quot;headerlink&quot; title=&quot;主动引用&quot;&gt;&lt;/a&gt;主动引用&lt;/h3&gt;&lt;p&gt;类初始化是类加载过程的最后一个阶段，到初始化阶段，才真正开始执行类中的Java程序代码。&lt;strong&gt;虚拟机规范严格规定了有且只有四种情况必须立即对类进行初始化：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;遇到new、getstatic、putstatic、invokestatic这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。生成这四条指令最常见的Java代码场景是：使用new关键字实例化对象时、读取或设置一个类的静态字段（static）时（被static修饰又被final修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用Java.lang.refect包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类&lt;/p&gt;
&lt;p&gt;虚拟机规定只有这四种情况才会触发类的初始化，称为对一个类进行主动引用，除此之外所有引用类的方式都不会触发其初始化，称为被动引用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Class类文件结构</title>
    <link href="http://www.qiuchengjia.cn/2016/07/18/JVM/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <id>http://www.qiuchengjia.cn/2016/07/18/JVM/Class类文件结构/</id>
    <published>2016-07-17T22:36:36.000Z</published>
    <updated>2016-07-18T05:14:59.162Z</updated>
    
    <content type="html"><![CDATA[<h3 id="平台无关性"><a href="#平台无关性" class="headerlink" title="平台无关性"></a>平台无关性</h3><ul>
<li>如图，源码经过编译得到的字节码文件可以由运行Java虚拟机的机器运行，因此可以说字节码是Java语言跨平台的基石，同样也是其他语言跨平台的有效途径</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png" alt=""></center>

<ul>
<li>只要目标语言的编译器按照Java字节码存储规范进行编译，那么得到的class文件都可以被正确执行</li>
</ul>
<a id="more"></a>
<h3 id="Class文件结构"><a href="#Class文件结构" class="headerlink" title="Class文件结构"></a>Class文件结构</h3><ul>
<li><p>Class文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件中，中间没有添加任何分隔符，这使得整个Class文件中存储的内容几乎全部都是程序运行的必要数据。根据Java虚拟机规范的规定，Class文件格式采用一种类似于C语言结构体的伪结构来存储，这种伪结构中只有两种数据类型：<strong>无符号数和表</strong></p>
</li>
<li><p>无符号数属于基本数据类型，主要可以用来描述数字、索引符号、数量值或者按照UTF-8编码构成的字符串值，大小使用u1、u2、u4、u8分别表示1字节、2字节、4字节和8字节</p>
</li>
<li><p>表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有的表都习惯以“_info”结尾。那么表是干嘛的呢？<strong>表主要用于描述有层次关系的复合结构的数据，比如方法、字段</strong>。需要注意的是class文件是没有分隔符的，所以每个的二进制数据类型都是严格定义的</p>
</li>
<li><p>整个Class文件本质上就是一张表，它由如下所示的数据项构成</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>u4</td>
<td>magic(魔术)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>u2</td>
<td>minor_version(次版本号)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>u2</td>
<td>major_version(主版本号)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>u2</td>
<td>constant_pool_count(常量个数)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>cp_info</td>
<td>constant_pool(常量池表)</td>
<td style="text-align:center">constant_pool_count - 1</td>
</tr>
<tr>
<td>u2</td>
<td>access_flags(类的访问控制权限)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>u2</td>
<td>this_class(类名)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>u2</td>
<td>super_class(父类名)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>u2</td>
<td>interfaces_count(接口个数)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>u2</td>
<td>interfaces(接口名)</td>
<td style="text-align:center">interfaces_count</td>
</tr>
<tr>
<td>u2</td>
<td>fields_count(域个数)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>field_info</td>
<td>fields(域的表)</td>
<td style="text-align:center">fields_count</td>
</tr>
<tr>
<td>u2</td>
<td>methods_count(方法的个数)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>method_info</td>
<td>methods(方法表)</td>
<td style="text-align:center">methods_count</td>
</tr>
<tr>
<td>u2</td>
<td>attribute_count(附加属性的个数)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>attribute_info</td>
<td>attributes(附加属性的表)</td>
<td style="text-align:center">attributes_count</td>
</tr>
</tbody>
</table>
<ul>
<li><p>从表中可以看出，无论是无符号数还是表，当需要描述同一类型但数量不定的多个数据时，经常会使用一个前置的容量计数器加若干个连续的该数据项的形式，称这一系列连续的摸一个类型的数据为某一类型的集合，比如，fields_count个field_info表数据构成了字段表集合。这里需要说明的是：Class文件中的数据项，都是严格按照上表中的顺序和数量被严格限定的，每个字节代表的含义，长度，先后顺序等都不允许改变</p>
</li>
<li><p>在class文件中，主要分为魔数、Class文件的版本号、常量池、访问标志、类索引（还包括父类索引和接口索引集合）、字段表集合、方法表集合、属性表集合。下面就分别对每一种文件进行说明</p>
</li>
</ul>
<h3 id="魔数与Class文件版本号"><a href="#魔数与Class文件版本号" class="headerlink" title="魔数与Class文件版本号"></a>魔数与Class文件版本号</h3><ul>
<li><p>每个class字节码文件头4个字节为魔数，作用是用于确定该文件是否能被虚拟机接受，固定为0xCAFEBABE</p>
</li>
<li><p>第5和第6个字节是次版本号，第7和第8是主版本号。因此，字节码文件的版本号确定了能执行该程序的虚拟机JDK版本。</p>
</li>
<li><p>用Sublime text打开自己的一个class文件，主版本号是50，因此要求JDK至少是1.6以上版本</p>
</li>
</ul>
<blockquote>
<p>cafe babe 0000 0032 00f1 0a00 3d00 7707<br>0078 0800 790a 0002 007a 0700 7b0a 0005<br>0077 0800 7c0a 0005 007d 0800 7e0a 0005<br>007f 0a00 8000 810a 001a 0082 0a00 1a00<br>830a 001a 0084 0700 850a 000f 0077 0800<br>860b 0087 0088 0700 890b 008a 008b 0800<br>8c08 008d 0800 8e07 008f 0800 9007 0091<br>0700 9207 0093 0700 940a 001d 007a 0a00<br>1c00 950a 001b 0096 0a00 1b00 9708 0098<br>0a00 9900 9a08 009b 0800 9c0a 001a 009d</p>
</blockquote>
<h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><ul>
<li><p>常量池可以简单理解为class文件的资源从库，这种数据类型是Class文件结构中与其他项目关联最多的数据类型，也是占用Class文件空间最大的项目之一</p>
</li>
<li><p>常量池中主要存放两大类常量：字面量和符号引用。字面量比较接近于Java层面的常量概念，如文本字符串、被声明为final的常量值等。而符号引用总结起来则包括了下面三类常量：</p>
</li>
<li><p><strong>类和接口的全限定名（即带有包名的Class名，如：org.lxh.test.TestClass）</strong></p>
</li>
<li><p><strong>字段的名称和描述符（private、static等描述符）</strong></p>
</li>
<li><p><strong>方法的名称和描述符（private、static等描述符）</strong></p>
</li>
</ul>
<p>虚拟机在加载Class文件时才会进行动态连接，也就是说，Class文件中不会保存各个方法和字段的最终内存布局信息，因此，这些字段和方法的符号引用不经过转换是无法直接被虚拟机使用的。当虚拟机运行时，需要从常量池中获得对应的符号引用，再在类加载过程中的解析阶段将其替换为直接引用，并翻译到具体的内存地址中</p>
<h4 id="符号引用和直接引用的区别与关联"><a href="#符号引用和直接引用的区别与关联" class="headerlink" title="符号引用和直接引用的区别与关联"></a>符号引用和直接引用的区别与关联</h4><ul>
<li><p>符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到了内存中</p>
</li>
<li><p>直接引用：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。<strong>如果有了直接引用，那说明引用的目标必定已经存在于内存之中了</strong></p>
</li>
</ul>
<p>在常量池中每一项常量都是一个表，在jdk1.7中共有14中常量类型，所以常量池的项目就对应14张表，这14张表的每种类型都不一样。但是有一个共同特点：表开始的第一位都是一个u1类型的标志位，代表这个常量属于哪种类型</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>标记</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONSTANT_Utf8_info</td>
<td>1</td>
<td>UTF-8编码的字符串</td>
</tr>
<tr>
<td>CONSTANT_Integer_info</td>
<td>3</td>
<td>整形字面量</td>
</tr>
<tr>
<td>CONSTANT_Float_info</td>
<td>4</td>
<td>浮点型字面量</td>
</tr>
<tr>
<td>CONSTANT_Long_info</td>
<td>5</td>
<td>长整形字面量</td>
</tr>
<tr>
<td>CONSTANT_Double_info</td>
<td>6</td>
<td>双精度字面量</td>
</tr>
<tr>
<td>CONSTANT_Class_info</td>
<td>7</td>
<td>类&amp;接口符号引用</td>
</tr>
<tr>
<td>CONSTANT_String_info</td>
<td>8</td>
<td>字符串类型字面量</td>
</tr>
<tr>
<td>CONSTANT_Fieldref_info</td>
<td>9</td>
<td>字段符号引用</td>
</tr>
<tr>
<td>CONSTANT_Methodref_info</td>
<td>10</td>
<td>类中方法符号引用</td>
</tr>
<tr>
<td>CONSTANT_InterfaceMethodref_info</td>
<td>11</td>
<td>接口方法符号引用</td>
</tr>
<tr>
<td>CONSTANT_NameAndType_info</td>
<td>12</td>
<td>字段&amp;方法部分符号引用</td>
</tr>
</tbody>
</table>
<ul>
<li>需要注意的是，在Class文件中，方法、字段都需要引用CONSTANT-Utf8_info类型的常量，所以这种类型的常量的长度有一定的限制，也就是Java中方法、字段的最大长度。在CONSTANT-Utf8_info中，其length的值u2，<strong>说明Java虚拟机只能编译最大大约64KB的变量或者方法名。超过的话将不会进行编译</strong></li>
</ul>
<h3 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h3><ul>
<li>常量池之后的数据结构是访问标志(access_flags),这个标志主要用于识别一些类或者接口层次的访问信息，主要包括：这个Class是类还是接口、是否定义public、是否定义abstract类型；如果是类的话是否被声明为final等。具体的标志访问如下：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%844.jpg" alt=""></center>

<h3 id="类索引、父类索引和接口索引集合"><a href="#类索引、父类索引和接口索引集合" class="headerlink" title="类索引、父类索引和接口索引集合"></a>类索引、父类索引和接口索引集合</h3><ul>
<li>这个数据项主要用于确定这个类的继承关系。其中类索引和父类所以都是一个u2类型的数据，而接口索引集合是一组u2类型的数据。在Java中由于不允许多继承，所以父类索引是唯一的，但是一个类可以实现多个接口，所以得到的接口索引是一个集合，表示这个类实现了哪些接口</li>
</ul>
<h3 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h3><p>字段表用于描述接口或者类中声明的变量。字段包括类级变量和实例级变量，但是不包括方法内部声明的局部变量（这些变量是存储在Java虚拟机栈中的局部变量表中的）。自然，描述一个字段的信息包括：字段的作用域（public、protected、private）、实例变量与否（static）、可变性（final）、并发可见性（volatile）、可否被序列化（transient）、字段数据类型（基本数据类型、对象、数组）、字段名称。字段的信息也被存放在一张表中，其字段表包括三种类型：</p>
<ul>
<li><p>u2类型访问标志（access_flags）</p>
</li>
<li><p>u2类型的name_index（字段的简单名称）</p>
</li>
<li><p>u2类型的描述符（descriptor_index）</p>
</li>
</ul>
<p>其访问标志在access_flags中，如下图所示：</p>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%843.jpg" alt=""></center>

<ul>
<li>上面出现了简单名称，上文中出现了全限定名，以及这里出现的描述符，三者有什么区别呢？其中全限定名称比较好理解，就是类的完整路径信息。而简单名称则是指没有类型和参数修饰的方法或者字段名称，比如一个方法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    System.out.println(a+b);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么这个方法的简单名称就是inc。</p>
<ul>
<li>相对于以上两者，描述符相对复杂一些。描述符的主要的作用是描述字段的数据类型、方法的参数列表和返回值。其中我们熟悉的void，在Class文件中用V表示。下面是完整的描述符标志的含义：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%842.jpg" alt=""></center>

<ul>
<li><p>对于数组类型，每一维度使用一个前置的“[”字符描述，如果是二维数组，那么就有两个“[”符号。比如“java.lang.String[][]”会被记录成“[[Ljava.lang.String;”</p>
</li>
<li><p>对于方法，则是按照县参数列表后返回值的顺序进行描述的。比如方法int inc(int a,int[] b,char[][] c,int d)的描述符是“(I[I[[CI)I”</p>
</li>
</ul>
<h3 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h3><ul>
<li><p>JVM中堆方法表的描述与字段表是一致的，包括了：访问标志、名称索引、描述符索引、属性表集合。方法表单额结构与字段表是一致的，区别在于访问标志的不同.在方法中不能了用volatile和transient关键字修饰，所以这两个标志不能用在方法表中。在方法中添加了字段不能使用的访问标志，比如方法可以使用synchronized、native、strictfp、abstract关键字修饰，所以在方法表中就增加了相应的访问标志</p>
</li>
<li><p>要注意的是，如果父类方法没有在子类中重写，那么在方法中不会自动出现来自父类的方法信息。同样的，有可能添加编译器自动增加的方法，比如方法</p>
</li>
</ul>
<h3 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h3><ul>
<li>前面的Class文件、字段表和方法表都可以携带自己的属性信息，这个信息用属性表进行描述，用于描述某些场景专有的信息。在属性表中没有类似Class文件的数据项目类型和顺序的严格要求，只要新的属性不与现有的属性名重复，任何人都可以向属性表中写入自己定义的属性信息</li>
</ul>
<h4 id="Code属性"><a href="#Code属性" class="headerlink" title="Code属性"></a>Code属性</h4><ul>
<li>Java程序方法体中的代码经过javac编译最终编译成的字节码指令就保存在Code属性中。但是并非所有的方法表都必须存在这个属性。Code属性是Class文件中最重要的一个属性，如果把一个Java程序中的信息分为代码（Code）和元数据（Metadata，包括类、字段、方法定义及其其他信息）两部分，那么在整个Class文件中，Code属性用于描述代码，所有其他的数据项目都用于描述元数据</li>
</ul>
<h4 id="Exceptions属性"><a href="#Exceptions属性" class="headerlink" title="Exceptions属性"></a>Exceptions属性</h4><ul>
<li>这个属性的作用是列举出方法中可能抛出的受查异常（Checked Exception），也就是描述throws 后的列举的异常</li>
</ul>
<h4 id="LineNumberTable属性"><a href="#LineNumberTable属性" class="headerlink" title="LineNumberTable属性"></a>LineNumberTable属性</h4><ul>
<li>主要用于描述Java源代码行号与字节码行号之间的对应关系。这个属性也不是必须的。如果没有这个属性，对程序的直接影响就是当抛出异常的时候无法显示对应的行号；并且在调试的时候无法通过设置断点的方法是调试程序</li>
</ul>
<h4 id="LocalVariableTable属性"><a href="#LocalVariableTable属性" class="headerlink" title="LocalVariableTable属性"></a>LocalVariableTable属性</h4><ul>
<li>用于描述栈帧中局部变量表中的变量与Java源码中定义的变量的之间的关系。也不属于必须的属性。如果没有这个属性，产生的直接影响就是当别人引用这个方法的时候，所有的参数名称都会丢失，IDE将会使用诸如args0、args1之类的参数进行显示。自然，当调试程序的时候，显示的参数名称是不可知的</li>
</ul>
<h4 id="SourceFile属性"><a href="#SourceFile属性" class="headerlink" title="SourceFile属性"></a>SourceFile属性</h4><ul>
<li>用于记录这个Class文件的源码文件名称。如果不使用这个属性，那么当抛出异常的时候，堆栈中将不会显示出错代码所属的文件名</li>
</ul>
<h4 id="ConstantValue属性"><a href="#ConstantValue属性" class="headerlink" title="ConstantValue属性"></a>ConstantValue属性</h4><p>作用是通知虚拟机自动为静态变量赋值。要注意的是，只有被static关键字修饰的额变量才可以使用这个属性（类变量）。对于非类变量，初始化是在方法中进行的；对于类变量可以选择两种方式进行变量的初始化：一是在类构造器方法中使用；二是是ConstantValue属性。目前Sun Hotspot的选择原则是：如果一个变量同时使用static和final关键字修饰，并且这个变量是基本数据类型或者java.lang.String类型的话，就使用ConstantValue属性进行初始化。如果没有被final修饰或者并非是基本数据类型，那么将会选择使用方法进行初始化</p>
<h4 id="InnerClass属性"><a href="#InnerClass属性" class="headerlink" title="InnerClass属性"></a>InnerClass属性</h4><ul>
<li>这个属性主要用于记录内部类与宿主类之间的关联关系</li>
</ul>
<h4 id="Deprecated以及Synthetic属性"><a href="#Deprecated以及Synthetic属性" class="headerlink" title="Deprecated以及Synthetic属性"></a>Deprecated以及Synthetic属性</h4><ul>
<li><p>这两个属性都属于标志类型的布尔属性，只存在有没有的区别。</p>
</li>
<li><p>Deprecated属性用于表示某个类、字段或者方法，已经被程序作者定为不再推荐使用，可以通过注解@deprecated实现</p>
</li>
<li><p>Synthetic属性代表此字段并不是由Java源码产生的，而是通过编译器自行添加的</p>
</li>
</ul>
<h4 id="StackMapTable属性"><a href="#StackMapTable属性" class="headerlink" title="StackMapTable属性"></a>StackMapTable属性</h4><ul>
<li>该属性的目的在于代替以前比较消耗性能的基于数据流分析的类型推导验证器</li>
</ul>
<h4 id="Signature属性"><a href="#Signature属性" class="headerlink" title="Signature属性"></a>Signature属性</h4><ul>
<li>这个属性是专门用来记录泛型类型的，因为在Java语言采用的是擦除法实现的泛型，在字节码（Code属性）中，泛型信息编译之后会被擦除。擦除法的优点是能够节省泛型所占的内存空间，缺点是在运行期间无法通过反射得到泛型信息，而Signature属性则弥补了这一缺陷。现在的Java反射API已经能够得到泛型信息，功劳就在于这个属性</li>
</ul>
<h4 id="BootstrapMethods属性"><a href="#BootstrapMethods属性" class="headerlink" title="BootstrapMethods属性"></a>BootstrapMethods属性</h4><ul>
<li>这个属性用于保存invokedynamic指令引用的引导方法限定符。（该指令用于在运行时动态解析出调用点限定符所引用的方法，并执行该方法）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;平台无关性&quot;&gt;&lt;a href=&quot;#平台无关性&quot; class=&quot;headerlink&quot; title=&quot;平台无关性&quot;&gt;&lt;/a&gt;平台无关性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如图，源码经过编译得到的字节码文件可以由运行Java虚拟机的机器运行，因此可以说字节码是Java语言跨平台的基石，同样也是其他语言跨平台的有效途径&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;只要目标语言的编译器按照Java字节码存储规范进行编译，那么得到的class文件都可以被正确执行&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>NexT主题配置</title>
    <link href="http://www.qiuchengjia.cn/2016/07/16/%E5%8D%9A%E5%AE%A2/NexT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.qiuchengjia.cn/2016/07/16/博客/NexT主题配置/</id>
    <published>2016-07-16T12:59:41.000Z</published>
    <updated>2016-07-16T11:51:25.370Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加站内搜索"><a href="#添加站内搜索" class="headerlink" title="添加站内搜索"></a>添加站内搜索</h3><ul>
<li><p>添加百度/谷歌/本地 自定义站点内容搜索</p>
</li>
<li><p>安装hexo-generator-search</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
<ul>
<li>在站点的 _config.yml中增加</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;添加站内搜索&quot;&gt;&lt;a href=&quot;#添加站内搜索&quot; class=&quot;headerlink&quot; title=&quot;添加站内搜索&quot;&gt;&lt;/a&gt;添加站内搜索&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;添加百度/谷歌/本地 自定义站点内容搜索&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装hexo-generator-search&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install hexo-generator-search --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在站点的 _config.yml中增加&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;search:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  path: search.xml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  field: post&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="博客" scheme="http://www.qiuchengjia.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://www.qiuchengjia.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Java内存区域与内存溢出</title>
    <link href="http://www.qiuchengjia.cn/2016/07/16/JVM/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
    <id>http://www.qiuchengjia.cn/2016/07/16/JVM/Java内存区域与内存溢出/</id>
    <published>2016-07-15T21:22:45.000Z</published>
    <updated>2016-07-16T11:29:52.665Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java内存区域"><a href="#Java内存区域" class="headerlink" title="Java内存区域"></a>Java内存区域</h3><p><center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA.png" alt=""></center><br><a id="more"></a></p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><ul>
<li><p>当前线程所执行的字节码的行号指示器</p>
</li>
<li><p>当前线程私有</p>
</li>
<li><p>不会出现OutOfMemoryError情况</p>
</li>
</ul>
<h3 id="java虚拟机栈"><a href="#java虚拟机栈" class="headerlink" title="java虚拟机栈"></a>java虚拟机栈</h3><ul>
<li><p>线程私有，生命周期与线程相同</p>
</li>
<li><p>java方法执行的内存模型，每个方法执行的同时都会创建一个栈帧，存储局部变量表(基本类型、对象引用)、操作数栈、动态链接、方法出口等信息</p>
</li>
<li><p>在编译程序代码时，栈帧中需要多大的局部变量表、多深的操作数栈都已经完全确定了，并且写入了方法表的Code属性之中。因此，一个栈帧需要分配多少内存，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现</p>
</li>
<li><p>StackOverflowError异常：当线程请求的栈深度大于虚拟机所允许的深度</p>
</li>
<li><p>OutOfMemoryError异常：如果栈的扩展时无法申请到足够的内存</p>
</li>
</ul>
<h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><ul>
<li><p>局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量</p>
</li>
<li><p>存放的数据的类型是编译期可知的各种基本数据类型、对象引用（reference）和returnAddress类型（它指向了一条字节码指令的地址）</p>
</li>
<li><p>局部变量表所需的内存空间在编译期间完成分配，即在Java程序被编译成Class文件时，就确定了所需分配的最大局部变量表的容量</p>
</li>
<li><p>当进入一个方法时，这个方法需要在栈中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小</p>
</li>
</ul>
<h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><ul>
<li><p>操作数栈又称为操作栈 </p>
</li>
<li><p>操作数栈的最大深度在编译的时候确定</p>
</li>
<li><p>Java虚拟机的解释执行引擎称为“基于栈的执行引擎”，其中所指的“栈”就是操作数栈。因此我们也称Java虚拟机是基于栈的，这点不同于Android虚拟机，Android虚拟机是基于寄存器的</p>
</li>
<li><p>基于栈的指令集最主要的优点是可移植性强，主要的缺点是执行速度相对会慢些；而由于寄存器由硬件直接提供，所以基于寄存器指令集最主要的优点是执行速度快，主要的缺点是可移植性差</p>
</li>
</ul>
<h4 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h4><ul>
<li>每个栈帧都包含一个指向运行时常量池（在方法区中，后面介绍）中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。Class文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如final、static域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接</li>
</ul>
<h4 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h4><ul>
<li>当一个方法被执行后，有两种方式退出该方法：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者的PC计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息</li>
</ul>
<ul>
<li>方法退出的过程实际上等同于把当前栈帧出站，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令</li>
</ul>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><ul>
<li>与虚拟机栈相似，主要为虚拟机使用到的Native方法服务，在HotSpot虚拟机中直接把本地方法栈与虚拟机栈二合一</li>
</ul>
<h3 id="Java堆-Java-Heap"><a href="#Java堆-Java-Heap" class="headerlink" title="Java堆(Java Heap)"></a>Java堆(Java Heap)</h3><ul>
<li><p>Java Heap是Java虚拟机所管理的内存中最大的一块，它是所有线程共享的一块内存区域</p>
</li>
<li><p>几乎所有的对象实例和数组都在这类分配内存 </p>
</li>
<li><p>Java Heap是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆” </p>
</li>
<li><p>Java堆只要求在逻辑上是连续的</p>
</li>
<li><p>在虚拟机启动时创建</p>
</li>
<li><p>OutOfMemoryError异常：当在堆中没有内存完成实例分配，且堆也无法再扩展时</p>
</li>
</ul>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ul>
<li><p>线程间共享</p>
</li>
<li><p>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</p>
</li>
<li><p>OutOfMemoryError异常：当方法区无法满足内存的分配需求时</p>
</li>
</ul>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><ul>
<li><p>方法区的一部分</p>
</li>
<li><p>用于存放编译期生成的各种字面量与符号引用</p>
</li>
<li><p>OutOfMemoryError异常：当常量池无法再申请到内存时</p>
</li>
</ul>
<h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><ul>
<li><p>NIO可以使用Native函数库直接分配堆外内存，堆中的DirectByteBuffer对象作为这块内存的引用进行操作</p>
</li>
<li><p>大小不受Java堆大小的限制，受本机(服务器)内存限制</p>
</li>
<li><p>OutOfMemoryError异常：系统内存不足时</p>
</li>
</ul>
<h3 id="HotSpot虚拟机"><a href="#HotSpot虚拟机" class="headerlink" title="HotSpot虚拟机"></a>HotSpot虚拟机</h3><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><p>虚拟机遇到一条new指令时，首先将去检查这个对象的参数是否在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，必须先执行类的加载过程。<br>在类加载检查通过后，虚拟机将为新生对象分配内存。对象所需内存大小再类加载完成后便可确定。内存分配可以采用“指针碰撞”与“空闲列表”的方式</p>
<h4 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h4><p>java程序需要通过栈上的reference数据来操作堆上的具体对象。访问方式有使用句柄和直接指针两种。</p>
<ul>
<li>句柄访问 java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息</li>
</ul>
<p><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BAvern%E9%80%9A%E8%BF%87%E5%8F%A5%E6%9F%84%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1.jpg" alt=""></p>
<ul>
<li>直接指针访问 java堆对象的布局中必须考虑如何放置访问类型数据的相关信息，reference中存储的就是对象地址</li>
</ul>
<p><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BAvern%E9%80%9A%E8%BF%87%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1.jpg" alt=""></p>
<h4 id="两种访问方式的比较"><a href="#两种访问方式的比较" class="headerlink" title="两种访问方式的比较"></a>两种访问方式的比较</h4><ul>
<li><p>使用句柄访问最大的好处是reference中存储的是稳定的句柄地址，在对象被移动（GC时移动对象是很普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要修改</p>
</li>
<li><p>使用直接指针访问方式的最大好处是速度更快，它节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本</p>
</li>
<li><p>HotSpot虚拟机采用指针访问方式进行对象访问，从整个软件开发范围看，各种语言和框架使用句柄来访问的情况也非常常见</p>
</li>
</ul>
<h3 id="内存溢出测试方法"><a href="#内存溢出测试方法" class="headerlink" title="内存溢出测试方法"></a>内存溢出测试方法</h3><table>
<thead>
<tr>
<th>内存区域</th>
<th style="text-align:left">内存溢出的测试方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>Java堆</td>
<td style="text-align:left">无限循环地new对象出来，在List中保存引用，以不被垃圾收集器回收。另外，该区域也有可能发生内存泄露（Memory Leak），出现问题时，要注意区别</td>
</tr>
<tr>
<td>方法区</td>
<td style="text-align:left">生成大量的动态类，或无线循环调用String的intern()方法产生不同的String对象实例，并在List中保存其引用，以不被垃圾收集器回收。后者测试常量池，前者测试方法区的非常量池部分</td>
</tr>
<tr>
<td>虚拟机栈和本地方法栈</td>
<td style="text-align:left">单线程：递归调用一个简单的方法（如不断累积的方法）会抛出StackOverError <br><br>多线程：无限循环地创建线程，并为每个线程无限循环地增加内存，会抛出OutOfMemoryError</td>
</tr>
</tbody>
</table>
<ul>
<li>这里有一点要重点说明，在多线程情况下，给每个线程的栈分配的内存越大，反而越容易产生内存溢出异常</li>
</ul>
<h3 id="OutOfMemoryError异常实例"><a href="#OutOfMemoryError异常实例" class="headerlink" title="OutOfMemoryError异常实例"></a>OutOfMemoryError异常实例</h3><ul>
<li><p>内存泄露，对象已经死了，无法通过垃圾收集器进行自动回收，通过找出泄露的代码位置和原因，才好确定解决方案</p>
</li>
<li><p>内存溢出，内存中的对象都还必须存活着，这说明Java堆分配空间不足，检查堆设置大小（-Xmx与-Xms），检查代码是否存在对象生命周期太长、持有状态时间过长的情况</p>
</li>
</ul>
<h4 id="Java堆溢出"><a href="#Java堆溢出" class="headerlink" title="Java堆溢出"></a>Java堆溢出</h4><ul>
<li><p>Java堆用于存储对象实例，我们只要不断创建对象，并且保证GC Roots到对象之间有可达路径来避免GC清除这些对象，就会在对象数量到达最大堆的容量限制后产生内存溢出异常</p>
</li>
<li><p>VM Args: -Xms10m -Xmx10m</p>
</li>
<li><p>-XX:+HeapDumpOnOutOfMemoryError</p>
</li>
<li><p>XX:+HeapDumpOnOutOfMemoryError这个参数可以让虚拟机在出现内存溢出异常时Dump出当前的内存堆转储快照以便事后进行分析。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList; </div><div class="line"><span class="keyword">import</span> java.util.List; </div><div class="line"><span class="comment">/**</span></div><div class="line"> * VM Args: -Xms10m -Xmx10m -XX:+HeapDumpOnOutOfMemoryError</div><div class="line"> */ </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapOOM</span> </span>&#123; </div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span></span>&#123; </div><div class="line">        <span class="keyword">private</span> String name; </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OOMObject</span><span class="params">(String name)</span> </span>&#123; </div><div class="line">            <span class="keyword">this</span>.name = name; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">        List&lt;OOMObject&gt; list = <span class="keyword">new</span> ArrayList&lt;OOMObject&gt;(); </div><div class="line">        <span class="keyword">long</span> i = <span class="number">1</span>; </div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123; </div><div class="line">            list.add(<span class="keyword">new</span> OOMObject(<span class="string">"IpConfig..."</span> + i++)); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>抛出的异常：</li>
</ul>
<blockquote>
<p>Dumping heap to java_pid27828.hprof …<br>Heap dump file created [14123367 bytes in 0.187 secs]<br>Exception in thread “main” java.lang.OutOfMemoryError: Java heap space<br>at java.lang.AbstractStringBuilder.&lt;init&gt;(AbstractStringBuilder.java:45)<br>at java.lang.StringBuilder.&lt;init&gt;(StringBuilder.java:92)<br>at com.baoxian.HeapOOM.main(HeapOOM.java:22)</p>
</blockquote>
<p>注：出现Java堆内存溢出时，异常堆栈信息java.lang.OutOfMemoryError后面会紧跟着JavaHeapSpace。</p>
<p>要解决这个异常，一般手段是首先通过内存映像分析工具比如Eclipse Memory Analyzer对dump出来的堆转储快照进行分析，重点是确认内存中对象是否是必要的，也就是要弄清楚到底是出现了内存泄露Memory Leak还是内存溢出Memory Overflow。</p>
<p>如果是内存泄露，可进一步通过工具查看泄露对象到GC Roots的引用链。于是就能找到泄露对象时通过怎样的路径与GC Roots相关联并导致垃圾收集器无法自动回收它们。掌握了泄露对象的类型信息，以及GC Roots引用链的信息，就可以比较准确的定位出泄露代码的位置了。</p>
<p>如果不存在泄露，那么就该修改-Xms和-Xms堆参数看能否加大点。</p>
<h4 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h4><ul>
<li>-Xoss参数设置本地方法栈大小，对于HotSpot没用。栈容量只由-Xss参数设定</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * VM Args: -Xss128k</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */ </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVMStackSOF</span> </span>&#123; </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stackLength = <span class="number">1</span>; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeak</span><span class="params">()</span> </span>&#123; </div><div class="line">        stackLength++; </div><div class="line">        stackLeak(); </div><div class="line">    &#125; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable</span>&#123; </div><div class="line">        JavaVMStackSOF oom = <span class="keyword">new</span> JavaVMStackSOF(); </div><div class="line">        <span class="keyword">try</span> &#123; </div><div class="line">            oom.stackLeak(); </div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123; </div><div class="line">            System.out.println(<span class="string">"stack length: "</span> + oom.stackLength); </div><div class="line">            <span class="keyword">throw</span> e; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>抛出异常：</li>
</ul>
<blockquote>
<p>stack length: 1007<br>Exception in thread “main” java.lang.StackOverflowError<br>at com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)<br>at com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)<br>at com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)<br>at com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)</p>
</blockquote>
<h4 id="运行时常量池溢出"><a href="#运行时常量池溢出" class="headerlink" title="运行时常量池溢出"></a>运行时常量池溢出</h4><ul>
<li>运行时常量池分配在方法区内，可以通过-XX:PermSize和-XX:MaxPermSize限制方法区大小，从而间接限制其中常量池的容量。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList; </div><div class="line"><span class="keyword">import</span> java.util.List; </div><div class="line"><span class="comment">/**</span></div><div class="line"> * VM Args: -XX:PermSize=10M -XX:MaxPermSize=10M</div><div class="line"> */ </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeConstantPoolOOM</span> </span>&#123; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">        <span class="comment">// 使用List保持着常量池引用，避免Full GC回收常量池行为 </span></div><div class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;;(); </div><div class="line">        <span class="comment">// 10MB的PermSize在integer范围内足够产生OOM了 </span></div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>; </div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123; </div><div class="line">            list.add(String.valueOf(i++).intern()); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>异常：</li>
</ul>
<blockquote>
<p>Exception in thread “main” java.lang.OutOfMemoryError: PermGen space<br>at java.lang.String.intern(Native Method)<br>at com.baoxian.RuntimeConstantPoolOOM.main(RuntimeConstantPoolOOM.java:18)</p>
</blockquote>
<ul>
<li>运行时常量池溢出，在java.lang.OutOfMemoryError后面紧跟着是PermGen space</li>
</ul>
<h4 id="方法区溢出"><a href="#方法区溢出" class="headerlink" title="方法区溢出"></a>方法区溢出</h4><ul>
<li><p>方法区用于存放Class的相关信息，如类名、访问修饰符、常量池、字段描述符、方法描述等。对于这个区域的测试，基本的思路是运行时产生大量的类去填满方法区，直到溢出。比如动态代理会生成动态类</p>
</li>
<li><p>使用CGLib技术直接操作字节码运行，生成大量的动态类。当前很多主流框架如Spring和Hibernate对类进行增强都会使用CGLib这类字节码技术，增强的类越多，就需要越大的方法区来保证动态生成的Class可以加载入内存</p>
</li>
<li><p>异常：</p>
</li>
</ul>
<blockquote>
<p>Exception in thread “main” java.lang.OutOfMemoryError: PermGen space at java.lang.String.intern(Native Method)</p>
</blockquote>
<ul>
<li><p>同样，跟常量池一样，都是PermGen space字符串出现</p>
</li>
<li><p>方法区溢出也是一种常见的内存溢出异常，一个类如果要被垃圾收集器回收，判定条件是非常苛刻的。在经常动态生成大量Class的应用中，需要特别注意类的回收状况。这类场景除了上面提到的程序使用GCLib字节码技术外，常见的还有：大量JSP或动态产生的JSP文件的应用（JSP第一次运行时需要编译为Java类）、基于OSGi应用等</p>
</li>
</ul>
<h4 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h4><ul>
<li><p>DirectMemory容量可以通过-XX:MaxDirectMemorySize指定，如果不指定，则默认与Java堆的最大值-Xmx指定一样。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * VM Args: -Xmx20M -XX:MaxDirectMemorySize=10M</div><div class="line"> */ </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectMemoryOOM</span> </span>&#123; </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">        Field unsafeField = Unsafe.class.getDeclaredFields()[<span class="number">0</span>]; </div><div class="line">        unsafeField.setAccessible(<span class="keyword">true</span>); </div><div class="line">        Unsafe unsafe = (Unsafe) unsafeField.get(<span class="keyword">null</span>); </div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123; </div><div class="line">            unsafe.allocateMemory(_1MB); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在OutOfMemoryError后面不会有任何东西了，这就是DirectMemory内存溢出了</p>
</li>
</ul>
<h3 id="Java中获取JVM内存使用情况"><a href="#Java中获取JVM内存使用情况" class="headerlink" title="Java中获取JVM内存使用情况"></a>Java中获取JVM内存使用情况</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.text.DecimalFormat;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 显示JVM总内存，JVM最大内存和总空闲内存</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayAvailableMemory</span><span class="params">()</span> </span>&#123;</div><div class="line"> </div><div class="line">DecimalFormat df = <span class="keyword">new</span> DecimalFormat(“<span class="number">0.00</span>″) ;</div><div class="line"> </div><div class="line"><span class="comment">//显示JVM总内存</span></div><div class="line"><span class="keyword">long</span> totalMem = Runtime.getRuntime().totalMemory();</div><div class="line"> </div><div class="line">System.out.println(df.format(totalMem <span class="number">1000000F</span>) + ” MB”);</div><div class="line"> </div><div class="line"><span class="comment">//显示JVM尝试使用的最大内存</span></div><div class="line"><span class="keyword">long</span> maxMem = Runtime.getRuntime().maxMemory();</div><div class="line">System.out.println(df.format(maxMem <span class="number">1000000F</span>) + ” MB”);</div><div class="line"> </div><div class="line"><span class="comment">//空闲内存</span></div><div class="line"><span class="keyword">long</span> freeMem = Runtime.getRuntime().freeMemory();</div><div class="line">System.out.println(df.format(freeMem <span class="number">1000000F</span>) + ” MB”);</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* Starts the program</div><div class="line">* <span class="doctag">@param</span> args the command line arguments</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">new</span> Main().displayAvailableMemory();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java内存区域&quot;&gt;&lt;a href=&quot;#Java内存区域&quot; class=&quot;headerlink&quot; title=&quot;Java内存区域&quot;&gt;&lt;/a&gt;Java内存区域&lt;/h3&gt;&lt;p&gt;&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://www.qiuchengjia.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>有趣代码注释</title>
    <link href="http://www.qiuchengjia.cn/2016/07/12/%E9%80%9A%E7%94%A8/%E6%9C%89%E8%B6%A3%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A/"/>
    <id>http://www.qiuchengjia.cn/2016/07/12/通用/有趣代码注释/</id>
    <published>2016-07-12T11:26:56.000Z</published>
    <updated>2016-07-12T03:50:14.819Z</updated>
    
    <content type="html"><![CDATA[<h3 id="佛祖保佑"><a href="#佛祖保佑" class="headerlink" title="佛祖保佑"></a>佛祖保佑</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                   _ooOoo_</div><div class="line">                  o8888888o</div><div class="line">                  88" . "88</div><div class="line">                  (| -_- |)</div><div class="line">                  O\  =  /O</div><div class="line">               ____/`---'\____</div><div class="line">             .'  \\|     |//  `.</div><div class="line">            /  \\|||  :  |||//  \</div><div class="line">           /  _||||| -:- |||||-  \</div><div class="line">           |   | \\\  -  /// |   |</div><div class="line">           | \_|  ''\---/''  |   |</div><div class="line">           \  .-\__  `-`  ___/-. /</div><div class="line">         ___`. .'  /--.--\  `. . __</div><div class="line">      ."" '&lt;  `.___\_&lt;|&gt;_/___.'  &gt;'"".</div><div class="line">     | | :  `- \`.;`\ _ /`;.`/ - ` : | |</div><div class="line">     \  \ `-.   \_ __\ /__ _/   .-` /  /</div><div class="line">======`-.____`-.___\_____/___.-`____.-'======</div><div class="line">                   `=---='</div><div class="line">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</div><div class="line">         佛祖保佑       永无BUG</div><div class="line">*/</div><div class="line"><span class="comment">//          佛曰:  </span></div><div class="line"><span class="comment">//                  写字楼里写字间，写字间里程序员；  </span></div><div class="line"><span class="comment">//                  程序人员写程序，又拿程序换酒钱。  </span></div><div class="line"><span class="comment">//                  酒醒只在网上坐，酒醉还来网下眠；  </span></div><div class="line"><span class="comment">//                  酒醉酒醒日复日，网上网下年复年。  </span></div><div class="line"><span class="comment">//                  但愿老死电脑间，不愿鞠躬老板前；  </span></div><div class="line"><span class="comment">//                  奔驰宝马贵者趣，公交自行程序员。  </span></div><div class="line"><span class="comment">//                  别人笑我忒疯癫，我笑自己命太贱；  </span></div><div class="line"><span class="comment">//                  不见满街漂亮妹，哪个归得程序员？</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="神兽草泥马"><a href="#神兽草泥马" class="headerlink" title="神兽草泥马"></a>神兽草泥马</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">*</div><div class="line">*          ┌─┐       ┌─┐</div><div class="line">*       ┌──┘ ┴───────┘ ┴──┐</div><div class="line">*       │                 │</div><div class="line">*       │       ───       │</div><div class="line">*       │  ─┬┘       └┬─  │</div><div class="line">*       │                 │</div><div class="line">*       │       ─┴─       │</div><div class="line">*       │                 │</div><div class="line">*       └───┐         ┌───┘</div><div class="line">*           │         │</div><div class="line">*           │         │</div><div class="line">*           │         │</div><div class="line">*           │         └──────────────┐</div><div class="line">*           │                        │</div><div class="line">*           │                        ├─┐</div><div class="line">*           │                        ┌─┘</div><div class="line">*           │                        │</div><div class="line">*           └─┐  ┐  ┌───────┬──┐  ┌──┘</div><div class="line">*             │ ─┤ ─┤       │ ─┤ ─┤</div><div class="line">*             └──┴──┘       └──┴──┘</div><div class="line">*                 神兽保佑</div><div class="line">*                 代码无BUG!</div><div class="line">*/</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *   ┏┓　　　┏┓</div><div class="line"> * ┏┛┻━━━┛┻┓</div><div class="line"> * ┃　　　　　　　┃</div><div class="line"> * ┃　　　━　　　┃</div><div class="line"> * ┃　┳┛　┗┳　┃</div><div class="line"> * ┃　　　　　　　┃</div><div class="line"> * ┃　　　┻　　　┃</div><div class="line"> * ┃　　　　　　　┃</div><div class="line"> * ┗━┓　　　┏━┛</div><div class="line"> *    ┃　　　┃   </div><div class="line"> *    ┃　　　┃   </div><div class="line"> *    ┃　　　┗━━━┓</div><div class="line"> *    ┃　　　　　　　┣┓</div><div class="line"> *    ┃　　　　　　　┏┛</div><div class="line"> *    ┗┓┓┏━┳┓┏┛</div><div class="line"> *      ┃┫┫　┃┫┫</div><div class="line"> *      ┗┻┛　┗┻┛</div><div class="line"> *        神兽保佑 </div><div class="line"> *        代码无BUG! </div><div class="line"> */</div></pre></td></tr></table></figure>
<h3 id="胜利手势"><a href="#胜利手势" class="headerlink" title="胜利手势"></a>胜利手势</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//                      d*##$.</span></div><div class="line"><span class="comment">// zP"""""$e.           $"    $o</span></div><div class="line"><span class="comment">//4$       '$          $"      $</span></div><div class="line"><span class="comment">//'$        '$        J$       $F</span></div><div class="line"><span class="comment">// 'b        $k       $&gt;       $</span></div><div class="line"><span class="comment">//  $k        $r     J$       d$</span></div><div class="line"><span class="comment">//  '$         $     $"       $~</span></div><div class="line"><span class="comment">//   '$        "$   '$E       $</span></div><div class="line"><span class="comment">//    $         $L   $"      $F ...</span></div><div class="line"><span class="comment">//     $.       4B   $      $$$*"""*b</span></div><div class="line"><span class="comment">//     '$        $.  $$     $$      $F</span></div><div class="line"><span class="comment">//      "$       R$  $F     $"      $</span></div><div class="line"><span class="comment">//       $k      ?$ u*     dF      .$</span></div><div class="line"><span class="comment">//       ^$.      $$"     z$      u$$$$e</span></div><div class="line"><span class="comment">//        #$b             $E.dW@e$"    ?$</span></div><div class="line"><span class="comment">//         #$           .o$$# d$$$$c    ?F</span></div><div class="line"><span class="comment">//          $      .d$$#" . zo$&gt;   #$r .uF</span></div><div class="line"><span class="comment">//          $L .u$*"      $&amp;$$$k   .$$d$$F</span></div><div class="line"><span class="comment">//           $$"            ""^"$$$P"$P9$</span></div><div class="line"><span class="comment">//          JP              .o$$$$u:$P $$</span></div><div class="line"><span class="comment">//          $          ..ue$"      ""  $"</span></div><div class="line"><span class="comment">//         d$          $F              $</span></div><div class="line"><span class="comment">//         $$     ....udE             4B</span></div><div class="line"><span class="comment">//          #$    """"` $r            @$</span></div><div class="line"><span class="comment">//           ^$L        '$            $F</span></div><div class="line"><span class="comment">//             RN        4N           $</span></div><div class="line"><span class="comment">//              *$b                  d$</span></div><div class="line"><span class="comment">//               $$k                 $F</span></div><div class="line"><span class="comment">//               $$b                $F</span></div><div class="line"><span class="comment">//                 $""               $F</span></div><div class="line"><span class="comment">//                 '$                $</span></div><div class="line"><span class="comment">//                  $L               $</span></div><div class="line"><span class="comment">//                  '$               $</span></div><div class="line"><span class="comment">//                   $               $</span></div></pre></td></tr></table></figure>
<h3 id="围棋棋盘"><a href="#围棋棋盘" class="headerlink" title="围棋棋盘"></a>围棋棋盘</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//                             _______________________________________  </span></div><div class="line"><span class="comment">//                            /  ___________________________________  \</span></div><div class="line"><span class="comment">//     _--""""--_            /  /_/_/_/_/_|_|_|_|_|_|_|_|_|_\_\_\_\_\  \</span></div><div class="line"><span class="comment">//    /          \          /  /_/_/_/_J__L_L_L_|_|_|_J_J_J__L_\_\_\_\  \</span></div><div class="line"><span class="comment">//   /\          /\        /  /_/_/_J__L_J__L_L_|_|_|_J_J__L_J__L_\_\_\  \</span></div><div class="line"><span class="comment">//   L ""-____-"" J       /  /_/_J__L_J__L_J_J__L_|_J__L_L_J__L_J__L_\_\  \</span></div><div class="line"><span class="comment">//   \            /      /  /_/__L_/__L_J__L_J__L_|_J__L_J__L_J__\_J__\_\  \</span></div><div class="line"><span class="comment">//    \_        _/      /  /_J__/_J__/__L_J__|__L_|_J__|__L_J__\__L_\__L_\  \</span></div><div class="line"><span class="comment">//  _--"""""--_"       /  /  F /  F J  J  |  F J  |  F J  |  F  F J  \ J  \  \</span></div><div class="line"><span class="comment">// /           \      /  /--/-J--/--L--|--L-J--J--|--L--L-J--|--J--\--L-\--\  \</span></div><div class="line"><span class="comment">///\           /\    /  /__/__L_J__J___L_J__J__|__|__|__L__L_J___L__L_J__\__\  \</span></div><div class="line"><span class="comment">//L ""-_____-"" J   /  /  /  /  F  F  J  J  |  |  |  |  |  F  F  J  J  \  \  \  \</span></div><div class="line"><span class="comment">//\             /  /  /--/--/--/--J---L--|--|--|--o--|--|--|--J---L--\--\--\--\  \</span></div><div class="line"><span class="comment">// \_         _/  /  /__/__J__J___L__J___L__L__L__|__J__J__J___L__J___L__L__\__\  \</span></div><div class="line"><span class="comment">//   "--___--"   /  /  /   F  F  J   F  J  J   F  |  J   F  F  J   F  J  J   \  \  \</span></div><div class="line"><span class="comment">//              /  /--/---/--J---L--J---L--|--J---|---L--|--J---L--J---L--\---\--\  \</span></div><div class="line"><span class="comment">//             /  /__J___/___L__/___L__J___L__J___|___L__J___L__J___\__J___\___L__\  \</span></div><div class="line"><span class="comment">//            /  /   F  J   /  J   J   |  J   J   |   F   F  |   F   F  \   F  J   \  \</span></div><div class="line"><span class="comment">//           /  /---/---L--J---L---L---L--|---|---|---|---|--J---J---J---L--J---\---\  \</span></div><div class="line"><span class="comment">//          /  /___/___/___L__J___J___J___|___|___|___|___|___L___L___L__J___\___\___\  \</span></div><div class="line"><span class="comment">//         /  /   /   /   /   F   F   F   F   F   |   J   J   J   J   J   \   \   \   \  \</span></div><div class="line"><span class="comment">//        /  /___/___J___J___J___J___J____L___L___|___J___J____L___L___L___L___L___\___\  \</span></div><div class="line"><span class="comment">//       /  /   /    F   F   F   |   |   J    F   |   J    F   |   |   J   J   J    \   \  \</span></div><div class="line"><span class="comment">//      /  /___J____/___/___J____L___L___|___J____|____L___|___J___J____L___\___\____L___\  \</span></div><div class="line"><span class="comment">//     /  /    F   /   J    F   J   J    |   J    |    F   |    F   F   J    F   \   J    \  \</span></div><div class="line"><span class="comment">//    /  /____/___J____L___/____L___|____L___|____|____|___J____|___J____\___J____L___\____\  \</span></div><div class="line"><span class="comment">//   /  /    /    F   /   J    J    F   J    F    |    J    F   J    F    F   \   J    \    \  \</span></div><div class="line"><span class="comment">//  /  /____/____/___J____L____|____L___J____L____|____J____L___J____|____J____L___\____\____\  \</span></div><div class="line"><span class="comment">// /                                                                                             \</span></div><div class="line"><span class="comment">///_______________________________________________________________________________________________\</span></div><div class="line"><span class="comment">//|                                                                                               |</span></div><div class="line"><span class="comment">//| hs                                                                                            |</span></div><div class="line"><span class="comment">//|_______________________________________________________________________________________________|</span></div></pre></td></tr></table></figure>
<h3 id="书本"><a href="#书本" class="headerlink" title="书本"></a>书本</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//                .-~~~~~~~~~-._       _.-~~~~~~~~~-.</span></div><div class="line"><span class="comment">//            __.'              ~.   .~              `.__</span></div><div class="line"><span class="comment">//          .'//                  \./                  \\`.</span></div><div class="line"><span class="comment">//        .'//                     |                     \\`.</span></div><div class="line"><span class="comment">//      .'// .-~"""""""~~~~-._     |     _,-~~~~"""""""~-. \\`.</span></div><div class="line"><span class="comment">//    .'//.-"                 `-.  |  .-'                 "-.\\`.</span></div><div class="line"><span class="comment">//  .'//______.============-..   \ | /   ..-============.______\\`.</span></div><div class="line"><span class="comment">//.'______________________________\|/______________________________`.</span></div></pre></td></tr></table></figure>
<h3 id="微软金典图标"><a href="#微软金典图标" class="headerlink" title="微软金典图标"></a>微软金典图标</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                       __</div><div class="line">                  ,-~¨^  ^¨-,           _,</div><div class="line">                 /          / ;^-._...,¨/</div><div class="line">                /          / /         /</div><div class="line">               /          / /         /</div><div class="line">              /          / /         /</div><div class="line">             /,.-:''-,_ / /         /</div><div class="line">             _,.-:--._ ^ ^:-._ __../</div><div class="line">           /^         / /¨:.._¨__.;</div><div class="line">          /          / /      ^  /</div><div class="line">         /          / /         /</div><div class="line">        /          / /         /</div><div class="line">       /_,.--:^-._/ /         /</div><div class="line">      ^            ^¨¨-.___.:^  (R) - G33K</div><div class="line">     </div><div class="line">      */</div></pre></td></tr></table></figure>
<h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">          ___                _</div><div class="line">         / __|___  ___  __ _| |___</div><div class="line">        | (_ / _ \/ _ \/ _` |   -_)</div><div class="line">         \___\___/\___/\__, |_\___|</div><div class="line">                       |___/</div><div class="line">         </div><div class="line">        */</div></pre></td></tr></table></figure>
<h3 id="奥运五环"><a href="#奥运五环" class="headerlink" title="奥运五环"></a>奥运五环</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">             _.-"""""-._         _.-"""""-._         _.-"""""-._</div><div class="line">          ,'           `.     ,'           `.     ,'           `.</div><div class="line">         /               \   /               \   /               \</div><div class="line">        |                 | |                 | |                 |</div><div class="line">       |                   |                   |                   |</div><div class="line">       |                   |                   |                   |</div><div class="line">        |             _.-"|"|"-._         _.-"|"|"-._             |</div><div class="line">         \          ,'   /   \   `.     ,'   /   \   `.          /</div><div class="line">          `.       /   ,'     `.   \   /   ,'     `.   \       ,'</div><div class="line">            `-..__|..-'         `-..|_|..-'         `-..|__..-'</div><div class="line">                 |                   |                   |</div><div class="line">                 |                   |                   |</div><div class="line">                  |                 | |                 |</div><div class="line">                   \               /   \               /</div><div class="line">                    `.           ,'     `.           ,'</div><div class="line">                      `-..___..-'         `-..___..-'</div><div class="line"></div><div class="line">        */</div></pre></td></tr></table></figure>
<h3 id="七龙珠比克"><a href="#七龙珠比克" class="headerlink" title="七龙珠比克"></a>七龙珠比克</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                      _.---..._</div><div class="line">                  ./^         ^-._</div><div class="line">                ./^C===.         ^\.   /\</div><div class="line">               .|'     \\        _ ^|.^.|</div><div class="line">          ___.--'_     ( )  .      ./ /||</div><div class="line">         /.---^T\      ,     |     / /|||</div><div class="line">        C'   ._`|  ._ /  __,-/    / /-,||</div><div class="line">             \ \/    ;  /O  / _    |) )|,</div><div class="line">              i \./^O\./_,-^/^    ,;-^,'</div><div class="line">               \ |`--/ ..-^^      |_-^</div><div class="line">                `|  \^-           /|:</div><div class="line">                 i.  .--         / '|.</div><div class="line">                  i   =='       /'  |\._</div><div class="line">                _./`._        //    |.  ^-ooo.._</div><div class="line">         _.oo../'  |  ^-.__./X/   . `|    |#######b</div><div class="line">        d####     |'      ^^^^   /   |    _\#######</div><div class="line">        #####b ^^^^^^^^--. ...--^--^^^^^^^_.d######</div><div class="line">        ######b._         Y            _.d#########</div><div class="line">        ##########b._     |        _.d#############</div><div class="line"></div><div class="line">                                       "Piccolo" no. 2</div><div class="line">                                          (from Dragonball Z)</div><div class="line">                                               --- Steven J. Simmons</div><div class="line">        */</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                             /^_.-^  _  --^=_</div><div class="line">                          ./'-^__    _&gt;=\^^==^-.</div><div class="line">                          |'/^^_/  /^    \ \.^\\\/\</div><div class="line">                         ,|/| '  /'  _____\ `\|.^.|</div><div class="line">                         |'/   /_--^^ .   ^^-./ /||</div><div class="line">                         |/,--^  ,     |     / /||'</div><div class="line">                       ._|/   \ /  __,-/    / /-,||</div><div class="line">                       \ '/    ;  /O  / _    |) )|,</div><div class="line">                        i \./^O\./_,-^/^    ,;-^,'</div><div class="line">                         \ |`--/ ..-^^      |_-^</div><div class="line">                          `|  \^-_,/^Y\      | ^^\</div><div class="line">                          _i.  \".--V_/     /| \. ^\._____...--.&gt;^^^^^^-------...._</div><div class="line">                         /  i   ^--^^     /'|' |\. |./'        |                  ;</div><div class="line">       ___...----/^^^^---|.  `._\  /^   /' |'_/' \ `|         |'               ,/'</div><div class="line">                |'        \   _|^-.__./'__.^^\     .|        ,|            _.-^</div><div class="line">                `\       ,|`_./^^-----^^._    ` ./ /        /^        _.-^^/</div><div class="line">                         |'  ^                  /-^                ./^    /</div><div class="line">       \                 `\_     __.-&lt;       _,/                 ./'     |'</div><div class="line">        `\.        `i       ^^--/._____...--^            .      ./       |.</div><div class="line">          `|        |                                   /       /        `|</div><div class="line"></div><div class="line"></div><div class="line">                                       "Piccolo"</div><div class="line">                                          (from Dragonball Z)</div><div class="line">                                               --- Steven J. Simmons         </div><div class="line">       */</div></pre></td></tr></table></figure>
<h3 id="七龙珠孙悟空"><a href="#七龙珠孙悟空" class="headerlink" title="七龙珠孙悟空"></a>七龙珠孙悟空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                           _</div><div class="line">                           \"-._ _.--"~~"--._</div><div class="line">                            \   "            ^.    ___</div><div class="line">                            /                  \.-~_.-~</div><div class="line">                     .-----'     /\/"\ /~-._      /</div><div class="line">                    /  __      _/\-.__\L_.-/\     "-.</div><div class="line">                   /.-"  \    ( ` \_o&gt;"&lt;o_/  \  .--._\</div><div class="line">                  /'      \    \:     "     :/_/     "`</div><div class="line">                          /  /\ "\    ~    /~"</div><div class="line">                          \ I  \/]"-._ _.-"[</div><div class="line">                       ___ \|___/ ./    l   \___   ___</div><div class="line">                  .--v~   "v` ( `-.__   __.-' ) ~v"   ~v--.</div><div class="line">               .-&#123;   |     :   \_    "~"    _/   :     |   &#125;-.</div><div class="line">              /   \  |           ~-.,___,.-~           |  /   \</div><div class="line">             ]     \ |                                 | /     [</div><div class="line">             /\     \|     :                     :     |/     /\</div><div class="line">            /  ^._  _K.___,^                     ^.___,K_  _.^  \</div><div class="line">           /   /  "~/  "\                           /"  \~"  \   \</div><div class="line">          /   /    /     \ _          :          _ /     \    \   \</div><div class="line">        .^--./    /       Y___________l___________Y       \    \.--^.</div><div class="line">        [    \   /        |        [/    ]        |        \   /    ]</div><div class="line">        |     "v"         l________[____/]________j  -Row   &#125;r"     /</div><div class="line">        &#125;------t          /                       \       /`-.     /</div><div class="line">        |      |         Y                         Y     /    "-._/</div><div class="line">        &#125;-----v'         |         :               |     7-.     /</div><div class="line">        |   |_|          |         l               |    / . "-._/</div><div class="line">        l  .[_]          :          \              :  r[]/_.  /</div><div class="line">         \_____]                     "--.             "-.____/</div><div class="line"></div><div class="line">                                            "Dragonball Z"</div><div class="line">                                                        ---Row</div><div class="line">         </div><div class="line">        */</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                               MMMMM</div><div class="line">                                 MMMMMM</div><div class="line">                                   MMMMMMM</div><div class="line">                                    MMMMMMMM     .</div><div class="line">                                     MMMMMMMMM</div><div class="line">                                     HMMMMMMMMMM</div><div class="line">                                      MMMMMMMMMMMM  M</div><div class="line">                                      MMMMMMMMMMMMM  M</div><div class="line">                                       MMMMMMMMMMMMM  M</div><div class="line">                                       MMMMMMMMMMMMM:</div><div class="line">                                       oMMMMMMMMMMMMMM</div><div class="line">             .MMMMMMMMMMMMMMo           MMMMMMMMMMMMMMM M</div><div class="line">       MMMMMMMMMMMMMMMMMMMMMMMMMMM      MMMMMMMMMMMMMMMM</div><div class="line">         MMMMMMMMMMMMMMMMMMMMMMMMMMMM.  oMMMMMMMMMMMMMMM.M</div><div class="line">           MMMMMMMMMMMMMMMMMMMMMMMMMMMM  MMMMMMMMMMMMMMMM</div><div class="line">             MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">               oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                 MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                   MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM:                     H</div><div class="line">                    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                  .         MMM</div><div class="line">                     MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM              M       MMMMMM</div><div class="line">                      .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM          M   MMMMMMMMMM</div><div class="line">               MM.      MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM       M MMMMMMMMMMMM</div><div class="line">                   MM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM    .MMMMMMMMMMMMMM</div><div class="line">                     MM  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                       MM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">              .MMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMM.MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                 HMMMMMMMMMMMMMMMMMMMMM.MMMMMMMMM.MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                    MMMMMMMMMMMMMMM MMM.oMMMMMMM..MMMMMMMMM:MMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                      MMMMMMMMMMMMMM MM..MMMMMMM...MMMMMMM. MMMMMMMMMMMMMMMMMMMMM</div><div class="line">                        MMMMMMMMMMMMMMM ..MMMMMM...MMMMMM ..MMMMMMMMMMMMMMMMMMM</div><div class="line">                         MMMMMMM:M.MMM.M.. MMMMM M..MMMMM...MMMMMMMMMMMMMMMMMM  MMM</div><div class="line">                           MMMM. .M..MM.M...MMMMMM..MMMMM.. MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM .</div><div class="line">                            MMMM..M....M.....:MMM .MMMMMM..MMMMMMM...MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                             MMM.M.. ...M......MM.MMMMM.......MHM.M  .MMMMMMMMMMMMMMMMMMMMMMMMM</div><div class="line">                        MMMMMMMM..MM. . MMM.....MMMMMM.M.....M ..MM..M MMMMMMMMMMMMMMMMMMM</div><div class="line">                           .MMMMMHMM. ..MMMM. MMM............o..... . .MMMMMMMMMMMMMMM</div><div class="line">                              MMM. M... .........................M..:.MMMMMMMMMMMM</div><div class="line">                                oMMM............ .................M.M.MMMMMMMMM</div><div class="line">                                   .....MM........................ . MMMMMM</div><div class="line">                                  M.....M.....................o.MM.MMMMMMMM.</div><div class="line">                                   M........................M.. ...MMMMMMMMMMMMMo</div><div class="line">                                     :....MMM..............MMM..oMMMMMMM</div><div class="line">                                      M...MMM.............MMMMMMM</div><div class="line">                                         .............:MMMMMMMM</div><div class="line">                                         M..... MMM.....M</div><div class="line">                                         M M.............</div><div class="line">                                         ................M</div><div class="line">                                      ooM.................MM  MoMMMMMoooM</div><div class="line">                                 MMoooM......................MoooooooH..oMM</div><div class="line">                             MHooooMoM.....................MMooooooM........M</div><div class="line">                           oooooooMoooM......... o........MoooooooM............</div><div class="line">                           Mooooooooooo.......M.........Moooooooo:..............M</div><div class="line">                          MooMoooooooooM...M........:Mooooooooooo:..............M</div><div class="line">                         M..oooooooooooo .........Mooooooooooooooo..............M</div><div class="line">                        M...Mooo:oooooooo.M....ooooooooooooooooooo..M...........M</div><div class="line">                         ...oooooMoooooooM..Mooooooooooooo:oooooooM.M...........M.</div><div class="line">                        M...ooooooMoo:ooooMoooooooooooooHoooooooooH:M. ...........:</div><div class="line">                        M..MoooooooMoooooooooooooooooo:ooooooMooooMoM..............M</div><div class="line">                        M..ooooooooooMooooooooooooooHoooooooMooHooooM...............M</div><div class="line">                        ...ooooooooooooooooooo:MooooooooooooooMoMoooM................</div><div class="line">                       M...oooooooooooooooooooooooooooooooooooooMooMM................M</div><div class="line">                       ...MooooooooooooooooooooooooooooooooooooooooMo ................</div><div class="line">                       ...MooooooooooooooooooooooooooooooooooooooooM M................M</div><div class="line">                      M...ooooooooooooooooooooooooooooooooooooooooM   ................M</div><div class="line">                      ...MoooooooooooooooooooooooooooooooooooooooMM   .:...............</div><div class="line">                      .....MooooooooooooooooooooooooooooooooooooMoo       .............M</div><div class="line">                      M...... ooooooooooooooooooooooooooooooooooooM       M..............M</div><div class="line">                      M........MooooMMM MM MM  MMMMMMMMMooooooooM         M...............M</div><div class="line">                      .........HM     M:  MM :MMMMMM          M           M...............</div><div class="line">                     M..........M     M   MoM M                           M................M</div><div class="line">                     M.........:M  MoH  M M M MooooHoooMM.   M             M...............M</div><div class="line">                     M..........Moooo MMooM    oooooMooooooooM              M..............H</div><div class="line">                     M.........MooooM  Mooo  : ooooooMooooMoooM              M........ . .o.M</div><div class="line">                     H..  .....ooooo   oooo  M MooooooooooooooM               M... MMMMMMMMMMM</div><div class="line">                     MMMMMMMMMMooooM M oooo  .  ooooooMooooooooM              .MMMMMMMMMMMMMMM</div><div class="line">                     MMMMMMMMMMooooH : ooooH    oooooooooooooooo               MMMMMMMMMMMMMMM</div><div class="line">                     MMMMMMMMMMoooo    ooooM    Moooooooooooooooo              .MMMMMMMMMMMMMMM</div><div class="line">                     MMMMMMMMMMoooo    ooooM    MooooooooooooooooM              MMMMMMMMMMMMMMM</div><div class="line">                     MMMMMMMMMMoooM    ooooM     ooooooooooooooooo               MMMMMMMMMMM:M</div><div class="line">                     MMMMMMMMMMoooM   MooooM     oooooooooooMoooooo               MH...........</div><div class="line">                      . ......Mooo.   MooooM     oooooooooooooooooo              M............M</div><div class="line">                     M.M......oooo    MooooM     Moooooooooooooooooo:           .........M.....</div><div class="line">                     M.M.....Moooo    MooooM      ooooooooooooooooooM            .M............</div><div class="line">                     .......MooooH    MooooM      oooooooooMoooooooooo          M..o...M..o....M</div><div class="line">                     .o....HMooooM    MooooH      MooooooooMooooooooooM          .:M...M.......M</div><div class="line">                    M..M.....MoooM    :oooo:    .MooooooooHooMoooooooooM         M M... ..oM.M</div><div class="line">                     M...M.:.Mooo. MMMMooooo   oooooooooooMoooooooooooooM          ....M. M</div><div class="line">                      M:M..o.Moooooooooooooo MooooooooooooooMooooooooooooM          .Mo</div><div class="line">                             MooooooooooooooMooooooooooooMoMoooooooooooooo</div><div class="line">                             Mooooooooooooooo:ooooooooooooooooooooooooooooo</div><div class="line">                             ooooooooooooooooMooooooooooMoooooooooooooooooo</div><div class="line">                             ooooooooooooooooMoooooooooooMooooooooooooooooHo</div><div class="line">                             ooMooooooooooooooMoooooooooooooooooooooooooooMoM</div><div class="line">                            MooMoooooooooooooo.ooooooooooooooooooooooooooo:oM</div><div class="line">                            MoooooooooooooooooooooooooooooooooooooooooooooooM</div><div class="line">                            MoooMooooooooooooooMooooooooooooooooooooooooooooo.</div><div class="line">                            MoooMooooooooooooooMoooooooooooooooooooooooooMooooM</div><div class="line">                            MooooooooooooooooooMoooooooooooooooooooooooooMoooooM</div><div class="line">                            MooooMoooooooooooooMoooooooooooooooooooooooooMoHooooM</div><div class="line">                            ooooooMooooooooooooooooooooooooooooooooooooooooMoMoooM</div><div class="line">                           MooooooooooooooooooooMooooooooooooooooooooooooooMoooooH:</div><div class="line">                           MoooooooMooooooooooooMoooooooooooooooooooooooooooooHoooM</div><div class="line">                           MooooooooMoooooooooooMoooooooooooooooooooooooooMoooMooooM</div><div class="line">                           Moooooooooooooooooooooooooooooooooooooooooooooo.oooMooooo</div><div class="line">                           MoooooooooooooooooooooooooooooooooooooooooooooMoooooooooM</div><div class="line">                            MooooooooooooooooooooMoooooooooooooooooooooooooooooooooM</div><div class="line">                             MooooooooooooooooooooMHooooooooooooooooooooMoooo:ooooo</div><div class="line">                              MMooooooooooooooooooMoMHoooooooooooooooooooooooMooooo</div><div class="line">                               MMoooooooooooooooMMooo MMooooooooooooooooooooooooooM</div><div class="line">                               MMMoooooooooooooMooooo  oooooooooooooooooooooMooooo</div><div class="line">                               MooMMoooooooooMoooMMoM  ooooHooooooooooooooooMooooM</div><div class="line">                               MooooMooooooMooooMoooM  MoooooMoooooooooooooMooooo</div><div class="line">                               ooooooMMooooooooMooooM  MoooooooooMooooooooooooooM</div><div class="line">                               HooooooMoooooooMooooM    HoooooooHooMooooooooooooo</div><div class="line">                                oooMoooooooooHoooM         MoooooooooMoooooooooM</div><div class="line">                                 HooooooooooooHM             MooooooooMMoooooooM</div><div class="line">                                  MMMMMMMMMMMMMM                Moooooo:MooooHMM</div><div class="line">                                   MMMMMMM: ...                  MMMMMMMMMMMMMM</div><div class="line">                                  M............M                  MMMMMMMMM ....</div><div class="line">                                  M.MM..........                  M.............M</div><div class="line">                               M ..............MM                 M..............</div><div class="line">                            MMMMM............MMMM                 ..MMMMMMMM ....M</div><div class="line">                          MMMMMMMMMMMMMMMMMMMMMMMM               MMMMMMMMMMMMM...M</div><div class="line">                       .MMMMMMMMMMMMMMMMMMMMMMMMMM               MMMMMMMMMMMMMMMMMM</div><div class="line">                       MMMMMMMMMMMMMMMMMMMMMMMMM                MMMMMMMMMMMMMMMMMMM</div><div class="line">                       :MMMMMMMMMMMMMMMMMMH                     MMMMMMMMMMMMMMMMMMM</div><div class="line">                          By EBEN Jérôme                        MMMMMMMMMMMMMMMMMM</div><div class="line">                                                                MMMMMMMMMMMMMMM</div><div class="line">                                                                 HMMMMMM</div><div class="line">        </div><div class="line">       */</div></pre></td></tr></table></figure>
<h3 id="皮卡丘"><a href="#皮卡丘" class="headerlink" title="皮卡丘"></a>皮卡丘</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">       quu..__</div><div class="line">        $$$b  `---.__</div><div class="line">         "$$b        `--.                          ___.---uuudP</div><div class="line">          `$$b           `.__.------.__     __.---'      $$$$"              .</div><div class="line">            "$b          -'            `-.-'            $$$"              .'|</div><div class="line">              ".                                       d$"             _.'  |</div><div class="line">                `.   /                              ..."             .'     |</div><div class="line">                  `./                           ..::-'            _.'       |</div><div class="line">                   /                         .:::-'            .-'         .'</div><div class="line">                  :                          ::''\          _.'            |</div><div class="line">                 .' .-.             .-.           `.      .'               |</div><div class="line">                 : /'$$|           .@"$\           `.   .'              _.-'</div><div class="line">                .'|$u$$|          |$$,$$|           |  &lt;            _.-'</div><div class="line">                | `:$$:'          :$$$$$:           `.  `.       .-'</div><div class="line">                :                  `"--'             |    `-.     \</div><div class="line">               :##.       ==             .###.       `.      `.    `\</div><div class="line">               |##:                      :###:        |        &gt;     &gt;</div><div class="line">               |#'     `..'`..'          `###'        x:      /     /</div><div class="line">                \                                   xXX|     /    ./</div><div class="line">                 \                                xXXX'|    /   ./</div><div class="line">                 /`-.                                  `.  /   /</div><div class="line">                :    `-  ...........,                   | /  .'</div><div class="line">                |         ``:::::::'       .            |&lt;    `.</div><div class="line">                |             ```          |           x| \ `.:``.</div><div class="line">                |                         .'    /'   xXX|  `:`M`M':.</div><div class="line">                |    |                    ;    /:' xXXX'|  -'MMMMM:'</div><div class="line">                `.  .'                   :    /:'       |-'MMMM.-'</div><div class="line">                 |  |                   .'   /'        .'MMM.-'</div><div class="line">                 `'`'                   :  ,'          |MMM&lt;</div><div class="line">                   |                     `'            |tbap\</div><div class="line">                    \                                  :MM.-'</div><div class="line">                     \                 |              .''</div><div class="line">                      \.               `.            /</div><div class="line">                       /     .:::::::.. :           /</div><div class="line">                      |     .:::::::::::`.         /</div><div class="line">                      |   .:::------------\       /</div><div class="line">                     /   .''               &gt;::'  /</div><div class="line">                     `',:                 :    .'</div><div class="line">                                          `:.:'</div><div class="line"></div><div class="line">        </div><div class="line">       */</div></pre></td></tr></table></figure>
<h3 id="电脑图像"><a href="#电脑图像" class="headerlink" title="电脑图像"></a>电脑图像</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                    ,----------------,              ,---------,</div><div class="line">               ,-----------------------,          ,"        ,"|</div><div class="line">             ,"                      ,"|        ,"        ,"  |</div><div class="line">            +-----------------------+  |      ,"        ,"    |</div><div class="line">            |  .-----------------.  |  |     +---------+      |</div><div class="line">            |  |                 |  |  |     | -==----'|      |</div><div class="line">            |  |  I LOVE DOS!    |  |  |     |         |      |</div><div class="line">            |  |  Bad command or |  |  |/----|`---=    |      |</div><div class="line">            |  |  C:\&gt;_          |  |  |   ,/|==== ooo |      ;</div><div class="line">            |  |                 |  |  |  // |(((( [33]|    ,"</div><div class="line">            |  `-----------------'  |," .;'| |((((     |  ,"</div><div class="line">            +-----------------------+  ;;  | |         |,"</div><div class="line">               /_)______________(_/  //'   | +---------+</div><div class="line">          ___________________________/___  `,</div><div class="line">         /  oooooooooooooooo  .o.  oooo /,   \,"-----------</div><div class="line">        / ==ooooooooooooooo==.o.  ooo= //   ,`\--&#123;)B     ,"</div><div class="line">       /_==__==========__==_ooo__ooo=_/'   /___________,"</div><div class="line">        </div><div class="line">       */</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                                   _________</div><div class="line">                                  /         /.</div><div class="line">           .-------------.       /_________/ |</div><div class="line">          /             / |      |         | |</div><div class="line">         /+============+\ |      | |====|  | |</div><div class="line">         ||C:\&gt;        || |      |         | |</div><div class="line">         ||            || |      | |====|  | |</div><div class="line">         ||            || |      |   ___   | |</div><div class="line">         ||            || |      |  |166|  | |</div><div class="line">         ||            ||/@@@    |   ---   | |</div><div class="line">         \+============+/    @   |_________|./.</div><div class="line">                            @          ..  ....'</div><div class="line">         ..................@     __.'.'  ''</div><div class="line">        /oooooooooooooooo//     ///</div><div class="line">       /................//     /_/</div><div class="line">       ------------------</div><div class="line">       */</div></pre></td></tr></table></figure>
<h3 id="龙"><a href="#龙" class="headerlink" title="龙"></a>龙</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">        11111111111111111111111111111111111111001111111111111111111111111</div><div class="line">        11111111111111111111111111111111111100011111111111111111111111111</div><div class="line">        11111111111111111111111111111111100001111111111111111111111111111</div><div class="line">        11111111111111111111111111111110000111111111111111111111111111111</div><div class="line">        11111111111111111111111111111000000111111111111111111111111111111</div><div class="line">        11111111111111111111111111100000011110001100000000000000011111111</div><div class="line">        11111111111111111100000000000000000000000000000000011111111111111</div><div class="line">        11111111111111110111000000000000000000000000000011111111111111111</div><div class="line">        11111111111111111111111000000000000000000000000000000000111111111</div><div class="line">        11111111111111111110000000000000000000000000000000111111111111111</div><div class="line">        11111111111111111100011100000000000000000000000000000111111111111</div><div class="line">        11111111111111100000110000000000011000000000000000000011111111111</div><div class="line">        11111111111111000000000000000100111100000000000001100000111111111</div><div class="line">        11111111110000000000000000001110111110000000000000111000011111111</div><div class="line">        11111111000000000000000000011111111100000000000000011110001111111</div><div class="line">        11111110000000011111111111111111111100000000000000001111100111111</div><div class="line">        11111111000001111111111111111111110000000000000000001111111111111</div><div class="line">        11111111110111111111111111111100000000000000000000000111111111111</div><div class="line">        11111111111111110000000000000000000000000000000000000111111111111</div><div class="line">        11111111111111111100000000000000000000000000001100000111111111111</div><div class="line">        11111111111111000000000000000000000000000000111100000111111111111</div><div class="line">        11111111111000000000000000000000000000000001111110000111111111111</div><div class="line">        11111111100000000000000000000000000000001111111110000111111111111</div><div class="line">        11111110000000000000000000000000000000111111111110000111111111111</div><div class="line">        11111100000000000000000001110000001111111111111110001111111111111</div><div class="line">        11111000000000000000011111111111111111111111111110011111111111111</div><div class="line">        11110000000000000001111111111111111100111111111111111111111111111</div><div class="line">        11100000000000000011111111111111111111100001111111111111111111111</div><div class="line">        11100000000001000111111111111111111111111000001111111111111111111</div><div class="line">        11000000000001100111111111111111111111111110000000111111111111111</div><div class="line">        11000000000000111011111111111100011111000011100000001111111111111</div><div class="line">        11000000000000011111111111111111000111110000000000000011111111111</div><div class="line">        11000000000000000011111111111111000000000000000000000000111111111</div><div class="line">        11001000000000000000001111111110000000000000000000000000001111111</div><div class="line">        11100110000000000001111111110000000000000000111000000000000111111</div><div class="line">        11110110000000000000000000000000000000000111111111110000000011111</div><div class="line">        11111110000000000000000000000000000000001111111111111100000001111</div><div class="line">        11111110000010000000000000000001100000000111011111111110000001111</div><div class="line">        11111111000111110000000000000111110000000000111111111110110000111</div><div class="line">        11111110001111111100010000000001111100000111111111111111110000111</div><div class="line">        11111110001111111111111110000000111111100000000111111111111000111</div><div class="line">        11111111001111111111111111111000000111111111111111111111111100011</div><div class="line">        11111111101111111111111111111110000111111111111111111111111001111</div><div class="line">        11111111111111111111111111111110001111111111111111111111100111111</div><div class="line">        11111111111111111111111111111111001111111111111111111111001111111</div><div class="line">        11111111111111111111111111111111100111111111111111111111111111111</div><div class="line">        11111111111111111111111111111111110111111111111111111111111111111</div><div class="line"></div><div class="line"></div><div class="line">        */</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                                                    __----~~~~~~~~~~~------___</div><div class="line">                                         .  .   ~~//====......          __--~ ~~</div><div class="line">                         -.            \_|//     |||\\  ~~~~~~::::... /~</div><div class="line">                      ___-==_       _-~o~  \/    |||  \\            _/~~-</div><div class="line">              __---~~~.==~||\=_    -_--~/_-~|-   |\\   \\        _/~</div><div class="line">          _-~~     .=~    |  \\-_    '-~7  /-   /  ||    \      /</div><div class="line">        .~       .~       |   \\ -_    /  /-   /   ||      \   /</div><div class="line">       /  ____  /         |     \\ ~-_/  /|- _/   .||       \ /</div><div class="line">       |~~    ~~|--~~~~--_ \     ~==-/   | \~--===~~        .\</div><div class="line">                '         ~-|      /|    |-~\~~       __--~~</div><div class="line">                            |-~~-_/ |    |   ~\_   _-~            /\</div><div class="line">                                 /  \     \__   \/~                \__</div><div class="line">                             _--~ _/ | .-~~____--~-/                  ~~==.</div><div class="line">                            ((-&gt;/~   '.|||' -_|    ~~-/ ,              . _||</div><div class="line">                                       -_     ~\      ~~---l__i__i__i--~~_/</div><div class="line">                                       _-~-__   ~)  \--______________--~~</div><div class="line">                                     //.-~~~-~_--~- |-------~~~~~~~~</div><div class="line">                                            //.-~~~--\</div><div class="line"></div><div class="line">        </div><div class="line">       */</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//                       )      (</span></div><div class="line"><span class="comment">//                  /+++=))    ((=+++\</span></div><div class="line"><span class="comment">//             /++++++++//      \\+++++++++\</span></div><div class="line"><span class="comment">//          /++++++++++//(  /\  )\\++++++++++\</span></div><div class="line"><span class="comment">//        /+++++++++++//  \\^^//  \\+++++++++++\</span></div><div class="line"><span class="comment">//     _/++++++++++++//  &#123;&#123;@::@&#125;&#125;  \\++++++++++++\_</span></div><div class="line"><span class="comment">//    /+++++++++++++((     &#123;\/&#125;     ))+++++++++++++\</span></div><div class="line"><span class="comment">//   /+++++++++++++++\\    &lt;**&gt;    //+++++++++++++++\</span></div><div class="line"><span class="comment">//  /+++++++++++++++++\\  / VV \  //+++++++++++++++++\</span></div><div class="line"><span class="comment">// /+++++++++++++++++++\\/******\//+++++++++++++++++++\</span></div><div class="line"><span class="comment">//|+/|++++++++++/\++++++(***/\***)++++++/\++++++++++|\+\</span></div><div class="line"><span class="comment">//|/ |+/\+/\+/\/  \+/\++\**|**|**/++/\+/  \/\+/\+/\+| \|</span></div><div class="line"><span class="comment">//v  |/  V  V  V   V  \+\|*|**|*|/+/  V   v  V  V  \|  v</span></div><div class="line"><span class="comment">//   v                 /*|*|**|*|*\...              v</span></div><div class="line"><span class="comment">//                    (**|*|**|*|**). .</span></div><div class="line"><span class="comment">//                   __\*|*|**|*|*/__. .</span></div><div class="line"><span class="comment">//                  (vvv(VVV)(VVV)vvv). .</span></div><div class="line"><span class="comment">//                      ............../ /</span></div><div class="line"><span class="comment">//                     / ............../</span></div><div class="line"><span class="comment">//                     ((</span></div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                 ___====-_  _-====___</div><div class="line">           _--^^^#####//      \\#####^^^--_</div><div class="line">        _-^##########// (    ) \\##########^-_</div><div class="line">       -############//  |\^^/|  \\############-</div><div class="line">     _/############//   (@::@)   \\############\_</div><div class="line">    /#############((     \\//     ))#############\</div><div class="line">   -###############\\    (oo)    //###############-</div><div class="line">  -#################\\  / VV \  //#################-</div><div class="line"> -###################\\/      \//###################-</div><div class="line">_#/|##########/\######(   /\   )######/\##########|\#_</div><div class="line">|/ |#/\#/\#/\/  \#/\##\  |  |  /##/\#/  \/\#/\#/\#| \|</div><div class="line">`  |/  V  V  `   V  \#\| |  | |/#/  V   '  V  V  \|  '</div><div class="line">   `   `  `      `   / | |  | | \   '      '  '   '</div><div class="line">                    (  | |  | |  )</div><div class="line">                   __\ | |  | | /__</div><div class="line">                  (vvv(VVV)(VVV)vvv)</div><div class="line">                  </div><div class="line">*/</div></pre></td></tr></table></figure>
<p><a href="http://shiyousan.com/post/635479912728885400" target="_blank" rel="external">参考博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;佛祖保佑&quot;&gt;&lt;a href=&quot;#佛祖保佑&quot; class=&quot;headerlink&quot; title=&quot;佛祖保佑&quot;&gt;&lt;/a&gt;佛祖保佑&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   _ooOoo_&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  o8888888o&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  88&quot; . &quot;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  (| -_- |)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  O\  =  /O&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               ____/`---&#39;\____&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             .&#39;  \\|     |//  `.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            /  \\|||  :  |||//  \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           /  _||||| -:- |||||-  \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           |   | \\\  -  /// |   |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           | \_|  &#39;&#39;\---/&#39;&#39;  |   |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           \  .-\__  `-`  ___/-. /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         ___`. .&#39;  /--.--\  `. . __&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .&quot;&quot; &#39;&amp;lt;  `.___\_&amp;lt;|&amp;gt;_/___.&#39;  &amp;gt;&#39;&quot;&quot;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     | | :  `- \`.;`\ _ /`;.`/ - ` : | |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     \  \ `-.   \_ __\ /__ _/   .-` /  /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;======`-.____`-.___\_____/___.-`____.-&#39;======&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   `=---=&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         佛祖保佑       永无BUG&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//          佛曰:  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                  写字楼里写字间，写字间里程序员；  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                  程序人员写程序，又拿程序换酒钱。  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                  酒醒只在网上坐，酒醉还来网下眠；  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                  酒醉酒醒日复日，网上网下年复年。  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                  但愿老死电脑间，不愿鞠躬老板前；  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                  奔驰宝马贵者趣，公交自行程序员。  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                  别人笑我忒疯癫，我笑自己命太贱；  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                  不见满街漂亮妹，哪个归得程序员？&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="通用" scheme="http://www.qiuchengjia.cn/categories/%E9%80%9A%E7%94%A8/"/>
    
    
      <category term="代码注释" scheme="http://www.qiuchengjia.cn/tags/%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A/"/>
    
  </entry>
  
</feed>
