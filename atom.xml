<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>戎码人生</title>
  <subtitle>世界上有10种人，一种懂二进制，一种不懂二进制 ！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.qiuchengjia.cn/"/>
  <updated>2016-10-24T05:03:10.983Z</updated>
  <id>http://www.qiuchengjia.cn/</id>
  
  <author>
    <name>戎码人生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>刷CSDN访问量</title>
    <link href="http://www.qiuchengjia.cn/2016/10/24/%E5%B7%A5%E5%85%B7/%E5%88%B7CSDN%E8%AE%BF%E9%97%AE%E9%87%8F/"/>
    <id>http://www.qiuchengjia.cn/2016/10/24/工具/刷CSDN访问量/</id>
    <published>2016-10-23T16:18:50.000Z</published>
    <updated>2016-10-24T05:03:10.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP刷"><a href="#PHP刷" class="headerlink" title="PHP刷"></a>PHP刷</h2><ul>
<li><p>搭建PHP运行环境</p>
</li>
<li><p>然后写下如下PHP代码，假设保存为csdn.php：</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">"Content-Type: text/html;charset=utf-8"</span>);</div><div class="line"></div><div class="line">$url = <span class="keyword">array</span>();</div><div class="line">$url[<span class="number">0</span>] = <span class="string">"http://blog.csdn.net/qiuchengjia/article/details/52901693"</span>;</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">    <span class="comment">// 随机文章</span></div><div class="line">    $rand = rand(<span class="number">0</span>,count($url) - <span class="number">1</span>);</div><div class="line">    <span class="comment">// 初始化</span></div><div class="line">    $ch = curl_init();</div><div class="line">    <span class="comment">//设置选项，包括URL</span></div><div class="line">    curl_setopt($ch, CURLOPT_URL, $url[$rand]);</div><div class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</div><div class="line">    <span class="comment">//执行并获取HTML文档内容</span></div><div class="line">    $output = curl_exec($ch);</div><div class="line">    <span class="comment">//释放curl句柄</span></div><div class="line">    curl_close($ch);</div><div class="line">    <span class="comment">//打印获得的数据</span></div><div class="line">    <span class="comment">// print_r($output);</span></div><div class="line">    <span class="comment">// echo $output;</span></div><div class="line">    <span class="comment">// 延迟10秒</span></div><div class="line">    usleep(<span class="number">10000000</span>);</div><div class="line">&#125;</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>最后在终端运行，或者浏览器打开这个PHP脚本</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ php csdn.php &amp;</div></pre></td></tr></table></figure>
<ul>
<li>然后终端会出现一个进程的PID，假如是9999，如果不想刷了，kill掉它就行了</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ kill <span class="number">9999</span></div></pre></td></tr></table></figure>
<ul>
<li>如果找不到PID，可以用命令来找</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ps aux | grep php</div></pre></td></tr></table></figure>
<ul>
<li>至于浏览器的，关闭浏览器就行了</li>
</ul>
<a id="more"></a>
<h2 id="exe工具"><a href="#exe工具" class="headerlink" title="exe工具"></a>exe工具</h2><ul>
<li><p>直接运行就行</p>
</li>
<li><p><a href="http://oe7guoyyy.bkt.clouddn.com/csdn.exe" target="_blank" rel="external">传送门</a></p>
</li>
<li><p><a href="http://o9fnxzb1g.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E8%BD%B0%E7%82%B8%E6%9C%BA3.0.exe" target="_blank" rel="external">博客轰炸机</a></p>
</li>
<li><p><a href="https://pan.baidu.com/s/1nvnmY61" target="_blank" rel="external">博客轰炸机_百度云</a></p>
</li>
</ul>
<h2 id="禁用浏览器的Cookie"><a href="#禁用浏览器的Cookie" class="headerlink" title="禁用浏览器的Cookie"></a>禁用浏览器的Cookie</h2><ul>
<li><p>通过禁用浏览器的cookie，然后就可以实现刷新之后浏览量加1</p>
</li>
<li><p>然后再使用自动刷新插件就可以刷了</p>
</li>
</ul>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><ul>
<li><p><a href="https://github.com/fengyuanzemin/blog-markdown/blob/master/%E5%A6%82%E4%BD%95%E5%88%B7CSDN%E8%AE%BF%E9%97%AE%E9%87%8F.md" target="_blank" rel="external">如何刷CSDN访问量</a></p>
</li>
<li><p><a href="http://www.jtahstu.com/blog/post-14.html" target="_blank" rel="external">博客轰炸机</a></p>
</li>
<li><p><a href="http://www.jtahstu.com/blog/post-71.html" target="_blank" rel="external">论如何一天时间进CSDN博客排名前500</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PHP刷&quot;&gt;&lt;a href=&quot;#PHP刷&quot; class=&quot;headerlink&quot; title=&quot;PHP刷&quot;&gt;&lt;/a&gt;PHP刷&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;搭建PHP运行环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后写下如下PHP代码，假设保存为csdn.php：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;header(&lt;span class=&quot;string&quot;&gt;&quot;Content-Type: text/html;charset=utf-8&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$url = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$url[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;http://blog.csdn.net/qiuchengjia/article/details/52901693&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 随机文章&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $rand = rand(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,count($url) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 初始化&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $ch = curl_init();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//设置选项，包括URL&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    curl_setopt($ch, CURLOPT_URL, $url[$rand]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    curl_setopt($ch, CURLOPT_RETURNTRANSFER, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    curl_setopt($ch, CURLOPT_HEADER, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//执行并获取HTML文档内容&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $output = curl_exec($ch);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//释放curl句柄&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    curl_close($ch);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//打印获得的数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// print_r($output);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// echo $output;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 延迟10秒&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    usleep(&lt;span class=&quot;number&quot;&gt;10000000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;最后在终端运行，或者浏览器打开这个PHP脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ php csdn.php &amp;amp;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;然后终端会出现一个进程的PID，假如是9999，如果不想刷了，kill掉它就行了&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ kill &lt;span class=&quot;number&quot;&gt;9999&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;如果找不到PID，可以用命令来找&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ ps aux | grep php&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;至于浏览器的，关闭浏览器就行了&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu下使用SSH和FileZilla远程登陆</title>
    <link href="http://www.qiuchengjia.cn/2016/10/16/ubuntu/Ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8SSH%E5%92%8CFileZilla%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86/"/>
    <id>http://www.qiuchengjia.cn/2016/10/16/ubuntu/Ubuntu下使用SSH和FileZilla远程登陆/</id>
    <published>2016-10-15T17:12:03.000Z</published>
    <updated>2016-10-15T09:36:59.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="File-Zilla下载安装"><a href="#File-Zilla下载安装" class="headerlink" title="File Zilla下载安装"></a>File Zilla下载安装</h2><ul>
<li>File Zilla是一个开源的，跨平台的Linux FTP客户端。File Zilla有一个标签式的用户界面，允许用户查看正在传输的文件的所有细节。File Zilla是通过网络传输较大文件的完美方式，它允许恢复大于4GB的文件。它的拖放功能使其能够更轻松地通过FTP传输文件</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8SSH%E5%92%8CFileZilla%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86.jpg" alt=""></center>

<ul>
<li><a href="https://filezilla-project.org/download.php?show_all=1" target="_blank" rel="external">下载地址</a></li>
</ul>
<h2 id="SSH概述"><a href="#SSH概述" class="headerlink" title="SSH概述"></a>SSH概述</h2><ul>
<li><p>SSH是指Secure Shell,是一种安全的传输协议，Ubuntu客户端可以通过SSH访问远程服务器 </p>
</li>
<li><p>SSH分客户端openssh-client和openssh-server<br>如果你只是想登陆别的机器的SSH只需要安装openssh-client（ubuntu有默认安装，如果没有则sudoapt-get install openssh-client），如果要使本机开放SSH服务就需要安装openssh-server</p>
</li>
</ul>
<h2 id="安装SSH客户端"><a href="#安装SSH客户端" class="headerlink" title="安装SSH客户端"></a>安装SSH客户端</h2><ul>
<li>Ubuntu缺省已经安装了ssh client</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install ssh  或者 sudo apt-get installopenssh-client</div><div class="line"> ssh-keygen</div></pre></td></tr></table></figure>
<ul>
<li><p>(按回车设置默认值)</p>
</li>
<li><p>按缺省生成id_rsa和id_rsa.pub文件，分别是私钥和公钥</p>
</li>
<li><p>说明：如果sudo apt-get insall ssh出错，无法安装可使用sudo apt-get install openssh-client进行安装</p>
</li>
</ul>
<h2 id="SSH登陆远程服务器"><a href="#SSH登陆远程服务器" class="headerlink" title="SSH登陆远程服务器"></a>SSH登陆远程服务器</h2><ul>
<li><p>假定服务器ip为192.168.1.1，ssh服务的端口号为22，服务器上有个用户为root</p>
</li>
<li><p>用ssh登录服务器的命令为：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;ssh –p <span class="number">22</span> root@<span class="number">192.168</span>.1.1</div><div class="line">&gt;输入root用户的密码</div></pre></td></tr></table></figure>
<h2 id="安装SSH服务端"><a href="#安装SSH服务端" class="headerlink" title="安装SSH服务端"></a>安装SSH服务端</h2><ul>
<li>Ubuntu缺省没有安装SSH Server，使用以下命令安装：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openssh-server</div></pre></td></tr></table></figure>
<ul>
<li>然后确认sshserver是否启动了：（或用“netstat -tlp”命令）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -e|grep ssh</div></pre></td></tr></table></figure>
<ul>
<li><p>如果只有ssh-agent那ssh-server还没有启动，需要/etc/init.d/ssh start，如果看到sshd那说明ssh-server已经启动了</p>
</li>
<li><p>如果没有则可以这样启动：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo/etc/init.d/ssh start</div></pre></td></tr></table></figure>
<ul>
<li>事实上如果没什么特别需求，到这里 OpenSSH Server 就算安装好了。但是进一步设置一下，可以让 OpenSSH 登录时间更短，并且更加安全。这一切都是通过修改 openssh 的配置文件 sshd_config 实现的</li>
</ul>
<a id="more"></a>
<h2 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h2><ul>
<li>ssh-server配置文件位于/etc/ssh/sshd_config，在这里可以定义SSH的服务端口，默认端口是22，你可以自己定义成其他端口号，如222。然后重启SSH服务：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/sshresart</div></pre></td></tr></table></figure>
<ul>
<li>通过修改配置文件/etc/ssh/sshd_config，可以改ssh登录端口和禁止root登录。改端口可以防止被端口扫描</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo cp/etc/ssh/sshd_config /etc/ssh/sshd_config.original  </div><div class="line">sudochmod a-w /etc/ssh/sshd_config.original</div></pre></td></tr></table></figure>
<ul>
<li>编辑配置文件：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gedit /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<ul>
<li>找到#Port 22，去掉注释，修改成一个五位的端口：<br>Port 22333<br>找到#PermitRootLogin yes，去掉注释，修改为：<br>PermitRootLogin no<br>配置完成后重起：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo/etc/init.d/ssh restart</div></pre></td></tr></table></figure>
<h2 id="SSH服务命令"><a href="#SSH服务命令" class="headerlink" title="SSH服务命令"></a>SSH服务命令</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">停止服务：sudo /etc/init.d/ssh stop</div><div class="line">启动服务：sudo /etc/init.d/ssh start</div><div class="line">重启服务：sudo /etc/init.d/sshresart</div><div class="line">断开连接：exit</div><div class="line">登录：ssh root@<span class="number">192.168</span>.0.100</div></pre></td></tr></table></figure>
<ul>
<li>root为192.168.0.100机器上的用户，需要输入密码</li>
</ul>
<h2 id="SSH登录命令"><a href="#SSH登录命令" class="headerlink" title="SSH登录命令"></a>SSH登录命令</h2><ul>
<li>常用格式：ssh [-llogin_name] [-p port] [user@]hostname<br>更详细的可以用ssh -h查看</li>
</ul>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ul>
<li>不指定用户：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh <span class="number">192.168</span>.0.1</div></pre></td></tr></table></figure>
<ul>
<li>指定用户：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh -l root <span class="number">192.168</span>.0.1  </div><div class="line">ssh root@<span class="number">192.168</span>.0.1</div></pre></td></tr></table></figure>
<ul>
<li>如果修改过ssh登录端口的可以：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssh -p <span class="number">22333</span> <span class="number">192.168</span>.0.111  </div><div class="line">ssh -l root -p <span class="number">22333</span> <span class="number">216.230</span>.230.105  </div><div class="line">ssh -p <span class="number">22333</span> root@<span class="number">216.230</span>.230.105</div></pre></td></tr></table></figure>
<h2 id="提高SSH登录速度"><a href="#提高SSH登录速度" class="headerlink" title="提高SSH登录速度"></a>提高SSH登录速度</h2><ul>
<li>在远程登录的时候可能会发现，在输入完用户名后需要等很长一段时间才会提示输入密码。其实这是由于 sshd 需要反查客户端的 dns 信息导致的。可以通过禁用这个特性来大幅提高登录的速度。首先，打开 sshd_config 文件：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<ul>
<li>找到 GSSAPI options 这一节，将下面两行注释掉：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#GSSAPIAuthentication yes </div><div class="line">#GSSAPIDelegateCredentials no</div></pre></td></tr></table></figure>
<ul>
<li>然后重新启动 ssh 服务即可：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/ssh restart</div></pre></td></tr></table></figure>
<ul>
<li>再登录试试，应该非常快了吧</li>
</ul>
<h2 id="转载博客"><a href="#转载博客" class="headerlink" title="转载博客"></a>转载博客</h2><ul>
<li><a href="http://blog.csdn.net/netwalk/article/details/12952051" target="_blank" rel="external">Ubuntu环境下SSH的安装及使用</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;File-Zilla下载安装&quot;&gt;&lt;a href=&quot;#File-Zilla下载安装&quot; class=&quot;headerlink&quot; title=&quot;File Zilla下载安装&quot;&gt;&lt;/a&gt;File Zilla下载安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;File Zilla是一个开源的，跨平台的Linux FTP客户端。File Zilla有一个标签式的用户界面，允许用户查看正在传输的文件的所有细节。File Zilla是通过网络传输较大文件的完美方式，它允许恢复大于4GB的文件。它的拖放功能使其能够更轻松地通过FTP传输文件&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8SSH%E5%92%8CFileZilla%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://filezilla-project.org/download.php?show_all=1&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;SSH概述&quot;&gt;&lt;a href=&quot;#SSH概述&quot; class=&quot;headerlink&quot; title=&quot;SSH概述&quot;&gt;&lt;/a&gt;SSH概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SSH是指Secure Shell,是一种安全的传输协议，Ubuntu客户端可以通过SSH访问远程服务器 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SSH分客户端openssh-client和openssh-server&lt;br&gt;如果你只是想登陆别的机器的SSH只需要安装openssh-client（ubuntu有默认安装，如果没有则sudoapt-get install openssh-client），如果要使本机开放SSH服务就需要安装openssh-server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装SSH客户端&quot;&gt;&lt;a href=&quot;#安装SSH客户端&quot; class=&quot;headerlink&quot; title=&quot;安装SSH客户端&quot;&gt;&lt;/a&gt;安装SSH客户端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Ubuntu缺省已经安装了ssh client&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install ssh  或者 sudo apt-get installopenssh-client&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; ssh-keygen&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(按回车设置默认值)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按缺省生成id_rsa和id_rsa.pub文件，分别是私钥和公钥&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;说明：如果sudo apt-get insall ssh出错，无法安装可使用sudo apt-get install openssh-client进行安装&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;SSH登陆远程服务器&quot;&gt;&lt;a href=&quot;#SSH登陆远程服务器&quot; class=&quot;headerlink&quot; title=&quot;SSH登陆远程服务器&quot;&gt;&lt;/a&gt;SSH登陆远程服务器&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;假定服务器ip为192.168.1.1，ssh服务的端口号为22，服务器上有个用户为root&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用ssh登录服务器的命令为：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;ssh –p &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; root@&lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;.1.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;输入root用户的密码&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装SSH服务端&quot;&gt;&lt;a href=&quot;#安装SSH服务端&quot; class=&quot;headerlink&quot; title=&quot;安装SSH服务端&quot;&gt;&lt;/a&gt;安装SSH服务端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Ubuntu缺省没有安装SSH Server，使用以下命令安装：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install openssh-server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;然后确认sshserver是否启动了：（或用“netstat -tlp”命令）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ps -e|grep ssh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果只有ssh-agent那ssh-server还没有启动，需要/etc/init.d/ssh start，如果看到sshd那说明ssh-server已经启动了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果没有则可以这样启动：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo/etc/init.d/ssh start&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;事实上如果没什么特别需求，到这里 OpenSSH Server 就算安装好了。但是进一步设置一下，可以让 OpenSSH 登录时间更短，并且更加安全。这一切都是通过修改 openssh 的配置文件 sshd_config 实现的&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://www.qiuchengjia.cn/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://www.qiuchengjia.cn/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装lampp</title>
    <link href="http://www.qiuchengjia.cn/2016/10/16/ubuntu/ubuntu%E5%AE%89%E8%A3%85lampp/"/>
    <id>http://www.qiuchengjia.cn/2016/10/16/ubuntu/ubuntu安装lampp/</id>
    <published>2016-10-15T16:33:10.000Z</published>
    <updated>2016-10-15T08:59:42.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h2><ul>
<li><p><a href="https://www.apachefriends.org/zh_cn/index.html" target="_blank" rel="external">下载地址</a></p>
</li>
<li><p>在终端中使用 root 权限，然后进入你刚刚下载的文件的那个目录</p>
</li>
<li><p>修改权限，将刚刚下载的文件变成可执行</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod <span class="number">777</span> *.run</div></pre></td></tr></table></figure>
<ul>
<li>然后进行安装</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">./ 你刚刚下载的文件名.run</div><div class="line"></div><div class="line"><span class="comment">//例如</span></div><div class="line">./xampp-linux-x64-<span class="number">5.6</span>.23-<span class="number">0</span>-installer.run</div></pre></td></tr></table></figure>
<ul>
<li>文件安装后的默认保存路径是 /opt/lampp</li>
</ul>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul>
<li><p>Apache文档根目录：/opt/lampp/htdocs/</p>
</li>
<li><p>Apache配置文件：/opt/lampp/etc/httpd.conf</p>
</li>
<li><p>MySQL配置文件：/opt/lampp/etc/my.cnf</p>
</li>
<li><p>PHP配置文件：/opt/lampp/etc/php.ini</p>
</li>
<li><p>ProFTPD配置文件：/opt/lampp/etc/proftpd.conf</p>
</li>
<li><p>PHPMyadmin配置文件：/opt/lampp/phpmyadmin/config.inc.php</p>
</li>
</ul>
<a id="more"></a>
<h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><ul>
<li>调出控制界面</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd /opt/lampp/share/xampp-control-panel</div><div class="line">$ sudo ./xampp-control-panel</div></pre></td></tr></table></figure>
<ul>
<li>启动/停止/重启Apache：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">启动：/opt/lampp/lampp start</div><div class="line">停止：/opt/lampp/lampp stop</div><div class="line">重启：/opt/lampp/lampp restart</div></pre></td></tr></table></figure>
<ul>
<li>安全设置：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/lampp/lampp  security</div></pre></td></tr></table></figure>
<ul>
<li>使用php版本/查看版本：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">使用php4：/opt/lampp/lampp php4</div><div class="line">使用php5：/opt/lampp/lampp php5</div><div class="line">查看php版本：/opt/lampp/lampp phpstatus</div></pre></td></tr></table></figure>
<ul>
<li>只启动和停止Apache：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">启动：/opt/lampp/lampp stopapache</div><div class="line">停止：/opt/lampp/lampp startapache</div></pre></td></tr></table></figure>
<ul>
<li>只启动和停止MySQL：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">启动：/opt/lampp/lampp startmysql</div><div class="line">停止：/opt/lampp/lampp stopmysql</div></pre></td></tr></table></figure>
<ul>
<li>只启动和停止ProFTPD服务器：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">启动：/opt/lampp/lampp startftp</div><div class="line">停止：/opt/lampp/lampp stopftp</div></pre></td></tr></table></figure>
<ul>
<li>启动和停止Apache的SSL支持：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">启动：/opt/lampp/lampp startssl</div><div class="line">停止：/opt/lampp/lampp stopssl</div></pre></td></tr></table></figure>
<ul>
<li>随系统自启动：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ln –s /opt/lampp/lampp/etc/rc.d/rc3.d/S99lampp</div><div class="line"></div><div class="line">ln –s /opt/lampp/lampp/etc/rc.d/rc4.d/S99lampp</div><div class="line"></div><div class="line">ln –s /opt/lampp/lampp/etc/rc.d/rc5.d/S99lampp</div></pre></td></tr></table></figure>
<ul>
<li>取消自启动：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln –s /opt/lampp/lampp K01lampp</div></pre></td></tr></table></figure>
<ul>
<li>卸载XAMPP：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm –rf /opt/lampp</div></pre></td></tr></table></figure>
<h2 id="XAMPP-Couldn’t-start-MySQL-解决方案-启动不了mysql服务）"><a href="#XAMPP-Couldn’t-start-MySQL-解决方案-启动不了mysql服务）" class="headerlink" title="XAMPP: Couldn’t start MySQL!解决方案 (启动不了mysql服务）"></a>XAMPP: Couldn’t start MySQL!解决方案 (启动不了mysql服务）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod <span class="number">777</span> -R /opt/lampp/var</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载和安装&quot;&gt;&lt;a href=&quot;#下载和安装&quot; class=&quot;headerlink&quot; title=&quot;下载和安装&quot;&gt;&lt;/a&gt;下载和安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.apachefriends.org/zh_cn/index.html&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在终端中使用 root 权限，然后进入你刚刚下载的文件的那个目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改权限，将刚刚下载的文件变成可执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;chmod &lt;span class=&quot;number&quot;&gt;777&lt;/span&gt; *.run&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;然后进行安装&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;./ 你刚刚下载的文件名.run&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//例如&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./xampp-linux-x64-&lt;span class=&quot;number&quot;&gt;5.6&lt;/span&gt;.23-&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;-installer.run&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;文件安装后的默认保存路径是 /opt/lampp&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Apache文档根目录：/opt/lampp/htdocs/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apache配置文件：/opt/lampp/etc/httpd.conf&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MySQL配置文件：/opt/lampp/etc/my.cnf&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PHP配置文件：/opt/lampp/etc/php.ini&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ProFTPD配置文件：/opt/lampp/etc/proftpd.conf&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PHPMyadmin配置文件：/opt/lampp/phpmyadmin/config.inc.php&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://www.qiuchengjia.cn/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://www.qiuchengjia.cn/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Socket多客户端简易签到系统</title>
    <link href="http://www.qiuchengjia.cn/2016/10/13/JAVA%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/Socket%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%80%E6%98%93%E7%AD%BE%E5%88%B0%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.qiuchengjia.cn/2016/10/13/JAVA进阶之路/Socket多客户端简易签到系统/</id>
    <published>2016-10-12T16:53:51.000Z</published>
    <updated>2016-10-12T09:53:03.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><center><img src="http://o99dg8ap9.bkt.clouddn.com/Socket%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%80%E6%98%93%E7%AD%BE%E5%88%B0%E7%B3%BB%E7%BB%9F.png" alt=""></center>

<h3 id="原理和功能"><a href="#原理和功能" class="headerlink" title="原理和功能"></a>原理和功能</h3><ul>
<li><p>服务器搭建在内网上，通过内网访问实现签到者位置的判断</p>
</li>
<li><p>我这个签到系统没有使用数据库，是将每个人的mac地址和姓名存在数组中，每天签</p>
</li>
</ul>
<p>一次，然后每周可以自动发一封签到数据邮件给维护者</p>
<ul>
<li>以后可以实现数据库，然后扩展更多的功能</li>
</ul>
<a id="more"></a>
<h2 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h2><h3 id="服务器主类-MyServer"><a href="#服务器主类-MyServer" class="headerlink" title="服务器主类 MyServer"></a>服务器主类 MyServer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> qiu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.awt.print.Printable;</div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Calendar;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JPanel;</div><div class="line"><span class="keyword">import</span> javax.swing.JScrollPane;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextArea;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  服务端</div><div class="line"> * */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</div><div class="line">    </div><div class="line">	JTextArea jTextArea =<span class="keyword">null</span>;<span class="comment">//用来显示纯文本的单行区域</span></div><div class="line">	JPanel jPanel=<span class="keyword">null</span>;</div><div class="line">	JScrollPane jScrollPane =<span class="keyword">null</span>;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> num=<span class="number">0</span>;</div><div class="line">	ServerSocket ss;</div><div class="line">	<span class="comment">/*************************************************/</span></div><div class="line">	<span class="comment">/*****这里存放签到的人的信息,以后可以直接修改*********/</span></div><div class="line">	<span class="keyword">public</span> String [] name = &#123;<span class="string">"邱承佳"</span>,<span class="string">"姜伟"</span>,<span class="string">"邝遥黔"</span>,<span class="string">"王浩"</span>,<span class="string">"刁龙"</span>,<span class="string">"宋艳"</span>,<span class="string">"曾诚"</span></div><div class="line">			,<span class="string">"文浩轩"</span>,<span class="string">"陈鑫海"</span>,<span class="string">"曹兵"</span>,<span class="string">"江小斐"</span>,<span class="string">"魏圳辉"</span>,<span class="string">"李尚"</span>,<span class="string">"蔡洋"</span>,<span class="string">"曾玲萍"</span>,<span class="string">"邱承佳windows"</span>,</div><div class="line">			<span class="string">"丁涛"</span>,<span class="string">"余旺林"</span>,<span class="string">"苏相学"</span>,<span class="string">"黄立民"</span>,<span class="string">"邓诗洋"</span>,<span class="string">"宋璐君"</span>&#125;;</div><div class="line">	<span class="keyword">public</span> String [] mac = &#123;</div><div class="line">			<span class="string">"c4:54:44:39:e7:d0"</span>,<span class="comment">//邱承佳</span></div><div class="line">			<span class="string">"9C-5C-8E-1B-73-61"</span>,<span class="comment">//姜伟</span></div><div class="line">			<span class="string">"50-7B-9D-CF-A5-FD"</span>,<span class="comment">//邝遥黔</span></div><div class="line">			<span class="string">"1E-E0-10-14-7C-DB"</span>,<span class="comment">//王浩</span></div><div class="line">			<span class="string">"54-EE-75-86-D8-6A"</span>,<span class="comment">//刁龙</span></div><div class="line">			<span class="string">"00-AC-45-41-E6-AB"</span>,<span class="comment">//宋艳</span></div><div class="line">			<span class="string">"34-E6-AD-00-EF-75"</span>,<span class="comment">//曾诚</span></div><div class="line">			<span class="string">"12-A5-89-3E-43-B3"</span>,<span class="comment">//文浩轩</span></div><div class="line">			<span class="string">"F0-DE-F1-70-E8-BE"</span>,<span class="comment">//陈鑫海</span></div><div class="line">			<span class="string">"54-AB-3A-47-16-CC"</span>,<span class="comment">//曹兵</span></div><div class="line">			<span class="string">"80-56-F2-68-7C-CD"</span>,<span class="comment">//江小斐</span></div><div class="line">			<span class="string">"50-7B-9D-83-C8-7F"</span>,<span class="comment">//魏圳辉</span></div><div class="line">			<span class="string">"C8-5B-76-09-4C-F6"</span>,<span class="comment">//李尚</span></div><div class="line">			<span class="string">"30-3A-64-72-73-6B"</span>,<span class="comment">//蔡洋</span></div><div class="line">			<span class="string">"3C-97-0E-D3-FA-E9"</span>,<span class="comment">//曾玲萍</span></div><div class="line">			<span class="string">"08-00-27-D4-59-99"</span>,<span class="comment">//邱承佳windows</span></div><div class="line">			<span class="string">"C4-8E-8F-A7-3E-FD"</span>,<span class="comment">//丁涛</span></div><div class="line">			<span class="string">"B8-2A-72-F1-E3-EF"</span>,<span class="comment">//余旺林</span></div><div class="line">			<span class="string">"40-E2-30-74-16-D2"</span>,<span class="comment">//苏相学</span></div><div class="line">			<span class="string">"34-DE-1A-A7-45-8C"</span>,<span class="comment">//黄立民</span></div><div class="line">			<span class="string">"2E-84-DC-91-58-3F"</span>,<span class="comment">//邓诗洋</span></div><div class="line">			<span class="string">"12-52-CB-77-86-5B"</span><span class="comment">//宋璐君</span></div><div class="line">	&#125;;</div><div class="line"><span class="comment">//签到次数</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> [] time=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></div><div class="line">			,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</div><div class="line">			<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</div><div class="line"><span class="comment">//用来记录当天是否签到</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span>[] isQianDao=&#123;<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,</div><div class="line">			<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span></div><div class="line">			,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,</div><div class="line">			<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,</div><div class="line">			<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,</div><div class="line">			<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>&#125;;</div><div class="line">	<span class="comment">/*************************************************/</span></div><div class="line">	<span class="comment">//把信息发给客户端对象</span></div><div class="line">	PrintWriter printWriter =<span class="keyword">null</span>;</div><div class="line">	String firstQianDaoTime=<span class="string">""</span>;<span class="comment">//记录的开始签到时间</span></div><div class="line"><span class="comment">/**</span></div><div class="line">  *  服务端的主函数</div><div class="line">  * */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">       <span class="keyword">new</span> MyServer();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  服务端的构造函数,用来进行初始化</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyServer</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//这里是对GUI的初始化</span></div><div class="line">	jTextArea = <span class="keyword">new</span> JTextArea();</div><div class="line">	jScrollPane= <span class="keyword">new</span> JScrollPane(jTextArea);</div><div class="line">	jPanel = <span class="keyword">new</span> JPanel();</div><div class="line">		</div><div class="line">	<span class="comment">//将两个面板添加布局</span></div><div class="line">	<span class="keyword">this</span>.add(jScrollPane,BorderLayout.CENTER);</div><div class="line">	<span class="keyword">this</span>.add(jPanel,BorderLayout.SOUTH);</div><div class="line">		</div><div class="line">	<span class="keyword">this</span>.setSize(<span class="number">800</span>,<span class="number">600</span>);</div><div class="line">	<span class="keyword">this</span>.setTitle(<span class="string">"签到服务器"</span>);</div><div class="line">	<span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<span class="comment">//设置退出按钮</span></div><div class="line">	<span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">this</span>.setResizable(<span class="keyword">true</span>);</div><div class="line">    <span class="comment">//获取时间</span></div><div class="line">    firstQianDaoTime=getTime();</div><div class="line">        </div><div class="line">    <span class="keyword">new</span> TimeThread(firstQianDaoTime,time,name,isQianDao,jTextArea).start();</div><div class="line">    <span class="comment">//下面是socket服务器的搭建</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">//服务器监听</span></div><div class="line">       	 ss = <span class="keyword">new</span> ServerSocket(<span class="number">10124</span>);</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			</div><div class="line">			<span class="keyword">new</span> ServerThread(ss.accept(),num,printWriter,jTextArea,</div><div class="line">					name,mac,time,isQianDao).start();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;   </div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">		ss.close();</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line"> &#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用来获取当前的时间</div><div class="line"> * <span class="doctag">@return</span> 当前的时间</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTime</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//可以对每个单独时间域进行修改</span></div><div class="line">	Calendar c = Calendar.getInstance();</div><div class="line">	<span class="keyword">int</span> week = c.get(Calendar.DAY_OF_WEEK);<span class="comment">//周几</span></div><div class="line">	<span class="keyword">int</span> day = c.get(Calendar.DAY_OF_MONTH);<span class="comment">//r</span></div><div class="line">	<span class="keyword">int</span> month = c.get(Calendar.MONTH);<span class="comment">//月份</span></div><div class="line">	<span class="keyword">int</span> hour = c.get(Calendar.HOUR_OF_DAY);<span class="comment">//获取小时</span></div><div class="line">	<span class="keyword">int</span> minute = c.get(Calendar.MINUTE);</div><div class="line">	<span class="keyword">int</span> second = c.get(Calendar.SECOND);</div><div class="line">		</div><div class="line">	<span class="keyword">return</span> month+<span class="string">"月"</span>+day+<span class="string">"号-"</span>+<span class="string">"星期"</span>+week+<span class="string">"--"</span>+hour+<span class="string">"时"</span>+minute+<span class="string">"分"</span>+second+<span class="string">"秒"</span>;	</div><div class="line">   &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过 name 数组记录每个人的姓名，对应的数组 mac 记录每个人的mac地址，添加</li>
</ul>
<p>数据只要在数组中添加就行，time 用来记录每个人每个星期的签到次数，每周清零，</p>
<p>isQianDao用来记录用户当天是否签到，然后 MyServer() 里面是界面的初始化，每当有</p>
<p>一个用户请求签到的时候新建一个 ServerThread 线程用来处理用户的请求，</p>
<p>TimeThread 线程用来每天数据更新和每周发送一个电子邮件给维护者，ServerSocket </p>
<p>是服务器监听，用来接收客户端的请求，没有请求则阻塞等待</p>
<h3 id="时间线程类-TimeThread"><a href="#时间线程类-TimeThread" class="headerlink" title="时间线程类 TimeThread"></a>时间线程类 TimeThread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> qiu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.TextArea;</div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.util.Calendar;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextArea;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> [] time;</div><div class="line">	<span class="keyword">boolean</span> []isQianDao;</div><div class="line">	String firstQianDaoTime;</div><div class="line">	String  [] name;</div><div class="line">	JTextArea jTextArea;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TimeThread</span><span class="params">(String firstQianDaoTime ,<span class="keyword">int</span>[] time, String[] name, <span class="keyword">boolean</span>[] isQianDao,</span></span></div><div class="line">			JTextArea jTextArea)&#123;</div><div class="line">		<span class="keyword">this</span>.time=time;</div><div class="line">		<span class="keyword">this</span>.firstQianDaoTime=firstQianDaoTime;</div><div class="line">		<span class="keyword">this</span>.isQianDao=isQianDao;</div><div class="line">		<span class="keyword">this</span>.jTextArea = jTextArea;</div><div class="line">		<span class="keyword">this</span>.name=name;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> hourFlag=<span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> weekFlag=<span class="number">1</span>;</div><div class="line">		<span class="keyword">boolean</span> emailFlag=<span class="keyword">true</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(getHour()==<span class="number">1</span>)&#123;</div><div class="line">				hourFlag=<span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="comment">//当今天过完的时候将签到状态置为false</span></div><div class="line">			<span class="keyword">if</span>(getHour()==<span class="number">2</span> &amp;&amp; hourFlag==<span class="number">1</span>)&#123;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;isQianDao.length;i++)&#123;</div><div class="line">						isQianDao[i]=<span class="keyword">false</span>;</div><div class="line">				&#125;						</div><div class="line">				hourFlag--;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(getWeek()==<span class="number">4</span>)&#123;</div><div class="line">				weekFlag=<span class="number">1</span>;</div><div class="line">				emailFlag=<span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//当今天是周五的时候发送一封邮件，并将所有状态清空</span></div><div class="line">			<span class="keyword">if</span>(getWeek()==<span class="number">5</span> &amp;&amp; weekFlag==<span class="number">1</span>)&#123;</div><div class="line">				<span class="comment">//获取签到情况的起止时间</span></div><div class="line">				String s=<span class="string">"签到开始时间="</span>+firstQianDaoTime+<span class="string">"\r\n"</span>+</div><div class="line">				<span class="string">"签到结束时间="</span>+getTimeStr()+<span class="string">"\r\n"</span>;</div><div class="line">				firstQianDaoTime = getTimeStr();</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;name.length;i++)&#123;</div><div class="line">					s=s+name[i]+<span class="string">"--的签到次数="</span>+time[i]+<span class="string">"\r\n"</span>;</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				String [] emailArr = &#123;</div><div class="line">						<span class="string">"2470041229@qq.com"</span>,<span class="comment">//邱承佳</span></div><div class="line">						<span class="string">"478529861@qq.com"</span>,<span class="comment">//余旺林</span></div><div class="line">						<span class="string">"14880047@qq.com"</span>&#125;;<span class="comment">//王宁</span></div><div class="line">				String [] emailName = &#123;<span class="string">"邱承佳"</span>,<span class="string">"余旺林"</span>,<span class="string">"王宁"</span>&#125;;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;emailArr.length;i++)&#123;</div><div class="line">					<span class="comment">//发送邮件</span></div><div class="line">					JavaEmail email = <span class="keyword">new</span> JavaEmail(emailArr[i],s,jTextArea,emailName[i],emailFlag);</div><div class="line">					emailFlag=<span class="keyword">false</span>;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						email.send();</div><div class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">						<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;	</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;isQianDao.length;i++)&#123;</div><div class="line">					isQianDao[i]=<span class="keyword">false</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;time.length;i++)&#123;</div><div class="line">					time[i]=<span class="number">0</span>;</div><div class="line">				&#125;</div><div class="line">				weekFlag--;</div><div class="line">			&#125;</div><div class="line">		&#125;	</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 用来获取当前的时间</div><div class="line">	 * <span class="doctag">@return</span> 当前的时间</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHour</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//可以对每个单独时间域进行修改 分钟</span></div><div class="line">		Calendar c = Calendar.getInstance();</div><div class="line">		<span class="keyword">int</span> hour = c.get(Calendar.HOUR_OF_DAY);<span class="comment">//获取小时</span></div><div class="line">		<span class="keyword">int</span> min = c.get(Calendar.MINUTE);</div><div class="line">		<span class="keyword">return</span> hour;	</div><div class="line">	   &#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//可以对每个单独时间域进行修改 分钟</span></div><div class="line">		Calendar c = Calendar.getInstance();</div><div class="line">		<span class="keyword">int</span> hour = c.get(Calendar.HOUR_OF_DAY);<span class="comment">//获取小时</span></div><div class="line">		<span class="keyword">int</span> min = c.get(Calendar.MINUTE);</div><div class="line">		<span class="keyword">return</span> min;	</div><div class="line">	   &#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWeek</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//可以对每个单独时间域进行修改</span></div><div class="line">		Calendar c = Calendar.getInstance();</div><div class="line">		<span class="keyword">int</span> week = c.get(Calendar.DAY_OF_WEEK);<span class="comment">//周几</span></div><div class="line">		<span class="keyword">return</span> week;	</div><div class="line">	   &#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 用来获取当前的时间</div><div class="line">	 * <span class="doctag">@return</span> 当前的时间</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTime</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//可以对每个单独时间域进行修改</span></div><div class="line">		Calendar c = Calendar.getInstance();</div><div class="line">		<span class="keyword">int</span> week = c.get(Calendar.DAY_OF_WEEK);<span class="comment">//周几</span></div><div class="line">		<span class="keyword">int</span> day = c.get(Calendar.DAY_OF_MONTH);<span class="comment">//r</span></div><div class="line">		<span class="keyword">int</span> month = c.get(Calendar.MONTH);<span class="comment">//月份</span></div><div class="line">		<span class="keyword">int</span> hour = c.get(Calendar.HOUR_OF_DAY);<span class="comment">//获取小时</span></div><div class="line">		<span class="keyword">int</span> minute = c.get(Calendar.MINUTE);</div><div class="line">		<span class="keyword">int</span> second = c.get(Calendar.SECOND);</div><div class="line">			</div><div class="line">		<span class="keyword">return</span> week;	</div><div class="line">	   &#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 用来获取当前的时间</div><div class="line">	 * <span class="doctag">@return</span> 当前的时间</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTimeStr</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//可以对每个单独时间域进行修改</span></div><div class="line">				Calendar c = Calendar.getInstance();</div><div class="line">				<span class="keyword">int</span> week = c.get(Calendar.DAY_OF_WEEK);<span class="comment">//周几</span></div><div class="line">				<span class="keyword">int</span> day = c.get(Calendar.DAY_OF_MONTH);<span class="comment">//r</span></div><div class="line">				<span class="keyword">int</span> month = c.get(Calendar.MONTH);<span class="comment">//月份</span></div><div class="line">				<span class="keyword">int</span> hour = c.get(Calendar.HOUR_OF_DAY);<span class="comment">//获取小时</span></div><div class="line">				<span class="keyword">int</span> minute = c.get(Calendar.MINUTE);</div><div class="line">				<span class="keyword">int</span> second = c.get(Calendar.SECOND);</div><div class="line">					</div><div class="line">				<span class="keyword">return</span> month+<span class="string">"月"</span>+day+<span class="string">"号-"</span>+<span class="string">"星期"</span>+week+<span class="string">"--"</span>+hour+<span class="string">"时"</span>+minute+<span class="string">"分"</span>+second+<span class="string">"秒"</span>;	</div><div class="line">	   &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>TimeThread 继承了 Thread 类，在服务器主类 MyServer 中调用，用来实现每天</li>
</ul>
<p>签到状态的更新，以及每周发送一封邮件给维护者</p>
<h3 id="邮件发送类-JavaEmail"><a href="#邮件发送类-JavaEmail" class="headerlink" title="邮件发送类 JavaEmail"></a>邮件发送类 JavaEmail</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> qiu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> javax.mail.Address;</div><div class="line"><span class="keyword">import</span> javax.mail.Authenticator;</div><div class="line"><span class="keyword">import</span> javax.mail.Message;</div><div class="line"><span class="keyword">import</span> javax.mail.PasswordAuthentication;</div><div class="line"><span class="keyword">import</span> javax.mail.Session;</div><div class="line"><span class="keyword">import</span> javax.mail.Transport;</div><div class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</div><div class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextArea;</div><div class="line"><span class="comment">/** */</span><span class="comment">/**</span></div><div class="line"> * 发送普通邮件，接受普通邮件 发送带有附件的邮件，接收带有附件的邮件 发送html形式的邮件，接受html形式的邮件 发送带有图片的邮件等做了一个总结。</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaEmail</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 邮箱服务器</span></div><div class="line">    <span class="keyword">private</span> String host = <span class="string">"smtp.163.com"</span>;</div><div class="line">    <span class="comment">// 这个是你的邮箱用户名</span></div><div class="line">    <span class="keyword">private</span> String username = <span class="string">"qiandaoxitong313"</span>;</div><div class="line">    <span class="comment">// 你的邮箱密码</span></div><div class="line">    <span class="keyword">private</span> String password = <span class="string">"admin313"</span>;</div><div class="line">    <span class="keyword">private</span> String mail_head_name = <span class="string">"ACM实验室签到情况"</span>;</div><div class="line">    <span class="keyword">private</span> String mail_head_value = <span class="string">"ACM实验室签到情况"</span>;</div><div class="line">    <span class="keyword">private</span> String mail_from = <span class="string">"qiandaoxitong313@163.com"</span>;</div><div class="line">    <span class="keyword">private</span> String mail_subject = <span class="string">"ACM实验室签到情况统计"</span>;</div><div class="line">    <span class="keyword">private</span> String personalName = <span class="string">"ACM实验室签到情况"</span>;</div><div class="line">    String mail_to,mail_body;<span class="comment">//邮件接收者和邮件的内容</span></div><div class="line">    JTextArea jTextArea;</div><div class="line">    String emailName;</div><div class="line">    <span class="keyword">boolean</span> emailFlag;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 邮件要发送给谁，和邮件的内容,flag用来标示邮件有没有发送成功</div><div class="line">     * <span class="doctag">@param</span> jTextArea </div><div class="line">     * <span class="doctag">@param</span> emailName </div><div class="line">     * <span class="doctag">@param</span> emailFlag </div><div class="line">     * */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaEmail</span><span class="params">(String mail_to,String mail_body, JTextArea jTextArea,</span></span></div><div class="line">    		String emailName, <span class="keyword">boolean</span> emailFlag)&#123;</div><div class="line">    	<span class="keyword">this</span>.mail_to=mail_to;</div><div class="line">    	<span class="keyword">this</span>.emailName = emailName;</div><div class="line">    	<span class="keyword">this</span>.mail_body =mail_body;</div><div class="line">    	<span class="keyword">this</span>.jTextArea=jTextArea;</div><div class="line">    	<span class="keyword">this</span>.emailFlag = emailFlag;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/** */</span><span class="comment">/**</span></div><div class="line">     * 此段代码用来发送普通电子邮件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            Properties props = <span class="keyword">new</span> Properties(); <span class="comment">// 获取系统环境</span></div><div class="line">            Authenticator auth = <span class="keyword">new</span> Email_Autherticator(); <span class="comment">// 进行邮件服务器用户认证</span></div><div class="line">            props.put(<span class="string">"mail.smtp.host"</span>, host);</div><div class="line">            props.put(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</div><div class="line">            Session session = Session.getDefaultInstance(props, auth);</div><div class="line">            <span class="comment">// 设置session,和邮件服务器进行通讯。</span></div><div class="line">            MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</div><div class="line">            <span class="comment">// message.setContent("foobar, "application/x-foobar"); // 设置邮件格式</span></div><div class="line">            message.setSubject(mail_subject); <span class="comment">// 设置邮件主题</span></div><div class="line">            message.setText(mail_body); <span class="comment">// 设置邮件正文</span></div><div class="line">            message.setHeader(mail_head_name, mail_head_value); <span class="comment">// 设置邮件标题</span></div><div class="line">            message.setSentDate(<span class="keyword">new</span> Date()); <span class="comment">// 设置邮件发送日期</span></div><div class="line">            Address address = <span class="keyword">new</span> InternetAddress(mail_from, personalName);</div><div class="line">            message.setFrom(address); <span class="comment">// 设置邮件发送者的地址</span></div><div class="line">            Address toAddress = <span class="keyword">new</span> InternetAddress(mail_to); <span class="comment">// 设置邮件接收方的地址</span></div><div class="line">            message.addRecipient(Message.RecipientType.TO, toAddress);</div><div class="line">            Transport.send(message); <span class="comment">// 发送邮件</span></div><div class="line">            jTextArea.append(<span class="string">"\r\n*****发送邮件给-"</span>+emailName+<span class="string">"-成功*****\r\n"</span>);</div><div class="line">            <span class="keyword">if</span>(emailFlag)&#123;</div><div class="line">            	jTextArea.append(<span class="string">"*****邮件内容*****\r\n"</span>);</div><div class="line">                jTextArea.append(mail_body+<span class="string">"\r\n"</span>);</div><div class="line">            &#125;            </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</div><div class="line">            ex.printStackTrace();</div><div class="line">            jTextArea.append(<span class="string">"\r\n*****发送邮件失败*****\r\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/** */</span><span class="comment">/**</span></div><div class="line">     * 用来进行服务器对用户的认证</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email_Autherticator</span> <span class="keyword">extends</span> <span class="title">Authenticator</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Email_Autherticator</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Email_Autherticator</span><span class="params">(String user, String pwd)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">            username = user;</div><div class="line">            password = pwd;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(username, password);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>用来发送邮件，没什么好说的</li>
</ul>
<h3 id="服务器线程类-ServerThread"><a href="#服务器线程类-ServerThread" class="headerlink" title="服务器线程类 ServerThread"></a>服务器线程类 ServerThread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> qiu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.TextArea;</div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.util.Calendar;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextArea;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	Socket socket = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">int</span> clientNum;</div><div class="line">	 PrintWriter printWriter=<span class="keyword">null</span>;</div><div class="line">	 String info;</div><div class="line">	JTextArea jTextArea;</div><div class="line">	 String [] name ;</div><div class="line">	 String [] mac ;</div><div class="line">	 <span class="keyword">int</span> [] time;</div><div class="line">	 <span class="keyword">boolean</span>[] isQianDao;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ServerThread</span><span class="params">(Socket socket ,<span class="keyword">int</span> num,PrintWriter printWriter,JTextArea jTextArea</span></span></div><div class="line">			, String[] name,String[] mac, <span class="keyword">int</span>[] time, <span class="keyword">boolean</span>[] isQianDao)&#123;</div><div class="line">		<span class="keyword">this</span>.socket = socket;</div><div class="line">		clientNum = num + <span class="number">1</span>;</div><div class="line">		<span class="keyword">this</span>.printWriter = printWriter;</div><div class="line">		<span class="keyword">this</span>.jTextArea = jTextArea;</div><div class="line">		<span class="keyword">this</span>.name=name;</div><div class="line">		<span class="keyword">this</span>.mac=mac;</div><div class="line">		<span class="keyword">this</span>.time=time;</div><div class="line">		<span class="keyword">this</span>.isQianDao=isQianDao;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//获得客户端发送过来的数据的流</span></div><div class="line">       	<span class="keyword">try</span> &#123;</div><div class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader</div><div class="line">					(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</div><div class="line">			printWriter = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(),<span class="keyword">true</span>);</div><div class="line">			<span class="comment">//读取从客户端发送过来的信息</span></div><div class="line">	       	<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">	      		 info = br.readLine();</div><div class="line">	      		 <span class="keyword">if</span>(info!=<span class="keyword">null</span>)&#123;</div><div class="line">	      			 <span class="comment">//数组中存在此mac地址</span></div><div class="line">	      			 <span class="keyword">int</span> result = isMac(info);</div><div class="line">	      			 <span class="keyword">if</span>(result!=-<span class="number">1</span>)&#123;</div><div class="line">	      				 <span class="comment">//表示该用户已经签到</span></div><div class="line">	      				 <span class="keyword">if</span>(isQianDao[result]==<span class="keyword">true</span>)&#123;</div><div class="line">	      					printWriter.println(<span class="string">"-1"</span>);<span class="comment">//不能重复签到</span></div><div class="line">	      				 &#125;<span class="keyword">else</span>&#123;</div><div class="line">	      					 isQianDao[result]=<span class="keyword">true</span>;</div><div class="line">	      					 time[result]++;</div><div class="line">	      					jTextArea.append(<span class="string">"\r\n\n*****"</span>+name[result]+<span class="string">"-签到成功*****\r\n"</span></div><div class="line">	      					 +<span class="string">"*****总签到次数="</span>+time[result]+<span class="string">"*****\r\n"</span>+</div><div class="line">	      			      			 <span class="string">"*****时间="</span>+getTime()+<span class="string">"*****\r\n"</span>+<span class="string">"*****mac地址="</span>+info+<span class="string">"*****\r\n"</span>);</div><div class="line">	      					 printWriter.println(time[result]+<span class="string">""</span>);<span class="comment">//签到次数</span></div><div class="line">	      					</div><div class="line">	      				 &#125;</div><div class="line">	      				 </div><div class="line">	      			 &#125;<span class="keyword">else</span>&#123;</div><div class="line">	      				jTextArea.append(<span class="string">"\r\n\n*****不存在的mac地址*****\r\n"</span>+</div><div class="line">	      			 <span class="string">"*****时间="</span>+getTime()+<span class="string">"*****\r\n"</span>+<span class="string">"*****mac地址="</span>+info+<span class="string">"*****\r\n"</span>);</div><div class="line">			      		printWriter.println(<span class="string">"-2"</span>);<span class="comment">//不存在的mac地址，签到失败</span></div><div class="line">	      			 &#125; </div><div class="line">	       	&#125;</div><div class="line">	       &#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 用来判断mac地址是否存在在数组中</div><div class="line">	 * */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">isMac</span><span class="params">(String str)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> f=-<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mac.length;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(mac[i].equals(str))&#123;</div><div class="line">				f=i;</div><div class="line">				<span class="keyword">return</span> f;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> f;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 用来获取当前的时间</div><div class="line">	 * <span class="doctag">@return</span> 当前的时间</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTime</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//可以对每个单独时间域进行修改</span></div><div class="line">		Calendar c = Calendar.getInstance();</div><div class="line">		<span class="keyword">int</span> week = c.get(Calendar.DAY_OF_WEEK);<span class="comment">//周几</span></div><div class="line">		<span class="keyword">int</span> day = c.get(Calendar.DAY_OF_MONTH);<span class="comment">//r</span></div><div class="line">		<span class="keyword">int</span> month = c.get(Calendar.MONTH);<span class="comment">//月份</span></div><div class="line">		<span class="keyword">int</span> hour = c.get(Calendar.HOUR_OF_DAY);<span class="comment">//获取小时</span></div><div class="line">		<span class="keyword">int</span> minute = c.get(Calendar.MINUTE);</div><div class="line">		<span class="keyword">int</span> second = c.get(Calendar.SECOND);</div><div class="line">			</div><div class="line">		<span class="keyword">return</span> month+<span class="string">"月"</span>+day+<span class="string">"号-"</span>+<span class="string">"星期"</span>+week+<span class="string">"--"</span>+hour+<span class="string">"时"</span>+minute+<span class="string">"分"</span>+second+<span class="string">"秒"</span>;	</div><div class="line">	   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>每次服务器监听到有用户请求签到的时候就为用户开辟一个 ServerThread 线程用来</li>
</ul>
<p>处理用户请求，所谓的多客户端签到系统，多客户就是通过这里来实现的，里面的主要</p>
<p>判断逻辑是通过用户传递过来的 mac 地址来判断，如果服务器中不存在用户的 mac </p>
<p>地址，就认为是非法请求 ，如果存在再判断是否签到，然后进行处理，最后发送最后</p>
<p>的处理信息传递给客户端</p>
<h2 id="客户端-MyClient"><a href="#客户端-MyClient" class="headerlink" title="客户端 MyClient"></a>客户端 MyClient</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> qiu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.net.UnknownHostException;</div><div class="line"><span class="keyword">import</span> java.util.Calendar;</div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JPanel;</div><div class="line"><span class="keyword">import</span> javax.swing.JScrollPane;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextArea;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 客户端</div><div class="line"> * */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClient</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</div><div class="line">    </div><div class="line">	JTextArea jTextArea=<span class="keyword">null</span>;</div><div class="line">	JPanel jPanel=<span class="keyword">null</span>;</div><div class="line">	JScrollPane jScrollPane=<span class="keyword">null</span>;</div><div class="line">	JButton sendButton=<span class="keyword">null</span>;</div><div class="line">	PrintWriter printWriter=<span class="keyword">null</span>;</div><div class="line">	</div><div class="line"><span class="comment">/**</span></div><div class="line">  *  客户端的主函数</div><div class="line">  * */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">      <span class="keyword">new</span> MyClient();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 客户端构造函数用来初始化</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyClient</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//GUI初始化</span></div><div class="line">	jTextArea= <span class="keyword">new</span> JTextArea();</div><div class="line">	sendButton= <span class="keyword">new</span> JButton(<span class="string">"签到"</span>);</div><div class="line">	sendButton.addActionListener(<span class="keyword">this</span>);</div><div class="line">	sendButton.setActionCommand(<span class="string">"send"</span>);</div><div class="line">	jScrollPane=<span class="keyword">new</span> JScrollPane(jTextArea);</div><div class="line">	jPanel=<span class="keyword">new</span> JPanel();</div><div class="line">	jPanel.add(sendButton);</div><div class="line">		</div><div class="line">	<span class="keyword">this</span>.add(jScrollPane,BorderLayout.CENTER);</div><div class="line">	<span class="keyword">this</span>.add(jPanel,BorderLayout.SOUTH);</div><div class="line">		</div><div class="line">	<span class="keyword">this</span>.setSize(<span class="number">400</span>, <span class="number">300</span>);</div><div class="line">	<span class="keyword">this</span>.setTitle(<span class="string">"签到客户端"</span>);</div><div class="line">	<span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">	<span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">this</span>.setResizable(<span class="keyword">true</span>);	</div><div class="line">        </div><div class="line">    <span class="comment">//socket通信代码</span></div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">    	Socket s= <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">10124</span>);</div><div class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader</div><div class="line">				(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</div><div class="line">		printWriter= <span class="keyword">new</span> PrintWriter(s.getOutputStream(),<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">          	<span class="comment">//不停的读取服务器发过来的信息</span></div><div class="line">            String string=br.readLine();</div><div class="line">            <span class="keyword">if</span>(string.equals(<span class="string">"-1"</span>))&#123;<span class="comment">//不能重复签到</span></div><div class="line">            	jTextArea.append(<span class="string">"\r\n**********不能重复签到**********\r\n"</span>);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(string.equals(<span class="string">"-2"</span>))&#123;<span class="comment">//没有mac地址</span></div><div class="line">            	jTextArea.append(<span class="string">"\r\n**********服务器中不存在您的mac地址,签到失败**********\r\n"</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//签到成功，显示签到次数</span></div><div class="line">            	jTextArea.append(<span class="string">"\r\n**********签到成功**********\r\n\n"</span>+</div><div class="line">	      			      			 <span class="string">"*****你的总签到次数="</span>+string+<span class="string">"*****\r\n"</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            &#125;</div><div class="line">			</div><div class="line">	&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用来获取当前的时间</div><div class="line"> * <span class="doctag">@return</span> 当前的时间</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTime</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//可以对每个单独时间域进行修改</span></div><div class="line">	Calendar c = Calendar.getInstance();</div><div class="line">	<span class="keyword">int</span> week = c.get(Calendar.DAY_OF_WEEK);<span class="comment">//周几</span></div><div class="line">	<span class="keyword">int</span> day = c.get(Calendar.DAY_OF_MONTH);<span class="comment">//r</span></div><div class="line">	<span class="keyword">int</span> month = c.get(Calendar.MONTH);<span class="comment">//月份</span></div><div class="line">	<span class="keyword">int</span> hour = c.get(Calendar.HOUR_OF_DAY);<span class="comment">//获取小时</span></div><div class="line">	<span class="keyword">int</span> minute = c.get(Calendar.MINUTE);</div><div class="line">	<span class="keyword">int</span> second = c.get(Calendar.SECOND);</div><div class="line">		</div><div class="line">	<span class="keyword">return</span> month+<span class="string">"月"</span>+day+<span class="string">"号-"</span>+<span class="string">"星期"</span>+week+<span class="string">"--"</span>+hour+<span class="string">"时"</span>+minute+<span class="string">"分"</span>+second+<span class="string">"秒"</span>;	</div><div class="line">   &#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  * 当button被点击的时候调用</div><div class="line">  */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	<span class="keyword">if</span>(sendButton.getActionCommand().equals(<span class="string">"send"</span>))&#123;</div><div class="line">		<span class="comment">//将客户端发送的信息发送给服务端</span></div><div class="line">		jTextArea.append(<span class="string">"\r\n*****请求签到*****\r\n"</span>+<span class="string">"*****"</span>+getTime()+<span class="string">"*****\r\n"</span>);</div><div class="line">		<span class="comment">//getUnixMACAddress getWindowsMACAddress</span></div><div class="line">		printWriter.println(SystemTool.getUnixMACAddress());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用的时候注意在构造函数中的服务器 ip 地址和在 actionPerformed() 函数中</li>
</ul>
<p>得到的是 windows 的 mac 还是 linux 的 mac 地址 </p>
<ul>
<li>客户端中也是先初始化界面，然后监听服务端发送过来的消息</li>
</ul>
<h2 id="工具类-SystemTool"><a href="#工具类-SystemTool" class="headerlink" title="工具类 SystemTool"></a>工具类 SystemTool</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> qiu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"><span class="keyword">import</span> java.net.UnknownHostException;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@className</span>: SystemTool</div><div class="line"> * <span class="doctag">@description</span>: 与系统相关的一些常用工具方法. 目前实现的有：获取MAC地址、IP地址、主机名</div><div class="line"> * <span class="doctag">@author</span>: 笑遍世界</div><div class="line"> * <span class="doctag">@createTime</span>: 2010-11-13 下午08:03:44</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemTool</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 获取当前操作系统名称.</div><div class="line">* return 操作系统名称 例如:windows xp,linux 等.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getOSName</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> System.getProperty(<span class="string">"os.name"</span>).toLowerCase();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 获取unix网卡的mac地址.</div><div class="line">* 非windows的系统默认调用本方法获取.如果有特殊系统请继续扩充新的取mac地址方法.</div><div class="line">* <span class="doctag">@return</span> mac地址</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUnixMACAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">	String mac = <span class="keyword">null</span>;</div><div class="line">	BufferedReader bufferedReader = <span class="keyword">null</span>;</div><div class="line">	Process process = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">			process = Runtime.getRuntime().exec(<span class="string">"ifconfig"</span>);<span class="comment">// linux下的命令，一般取eth0作为本地主网卡 显示信息中包含有mac地址信息</span></div><div class="line">			bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process</div><div class="line">			.getInputStream()));</div><div class="line">		String line = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">int</span> index = -<span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">			index = line.toLowerCase().indexOf(<span class="string">"硬件地址"</span>);<span class="comment">// 寻找标示字符串[hwaddr]</span></div><div class="line">			<span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;<span class="comment">// 找到了</span></div><div class="line">				mac = line.substring(index +<span class="string">"硬件地址"</span>.length()+ <span class="number">1</span>).trim();<span class="comment">//  取出mac地址并去除2边空格</span></div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (bufferedReader != <span class="keyword">null</span>) &#123;</div><div class="line">				bufferedReader.close();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e1) &#123;</div><div class="line">			e1.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		bufferedReader = <span class="keyword">null</span>;</div><div class="line">		process = <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> mac;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 获取widnows网卡的mac地址.</div><div class="line">* <span class="doctag">@return</span> mac地址</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getWindowsMACAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">	String mac = <span class="keyword">null</span>;</div><div class="line">	BufferedReader bufferedReader = <span class="keyword">null</span>;</div><div class="line">	Process process = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		process = Runtime.getRuntime().exec(<span class="string">"ipconfig /all"</span>);<span class="comment">// windows下的命令，显示信息中包含有mac地址信息</span></div><div class="line">		bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process</div><div class="line">				.getInputStream()));</div><div class="line">		String line = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">int</span> index = -<span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">			index = line.toLowerCase().indexOf(<span class="string">"物理地址"</span>);<span class="comment">// 寻找标示字符串[physical address]物理地址</span></div><div class="line">			<span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;<span class="comment">// 找到了</span></div><div class="line">				index = line.indexOf(<span class="string">":"</span>);<span class="comment">// 寻找":"的位置</span></div><div class="line">				<span class="keyword">if</span> (index&gt;=<span class="number">0</span>) &#123;</div><div class="line">					mac = line.substring(index + <span class="number">1</span>).trim();<span class="comment">//  取出mac地址并去除2边空格</span></div><div class="line">				&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (bufferedReader != <span class="keyword">null</span>) &#123;</div><div class="line">				bufferedReader.close();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e1) &#123;</div><div class="line">			e1.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		bufferedReader = <span class="keyword">null</span>;</div><div class="line">		process = <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> mac;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* <span class="doctag">@return</span>  本机主机名</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getHostName</span><span class="params">()</span> </span>&#123;</div><div class="line">	InetAddress ia = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		ia = InetAddress.getLocalHost();</div><div class="line">	&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">if</span> (ia == <span class="keyword">null</span> ) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"some error.."</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> </div><div class="line">		<span class="keyword">return</span> ia.getHostName();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* <span class="doctag">@return</span>  本机IP 地址</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIPAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">	InetAddress ia = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		ia = InetAddress.getLocalHost();</div><div class="line">	&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">if</span> (ia == <span class="keyword">null</span> ) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"some error.."</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> </div><div class="line">		<span class="keyword">return</span> ia.getHostAddress();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 测试用的main方法.</div><div class="line">* </div><div class="line">* <span class="doctag">@param</span> argc</div><div class="line">*            运行参数.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argc)</span> </span>&#123;</div><div class="line">	</div><div class="line">	 String os = getOSName();</div><div class="line">	System.out.println(<span class="string">"OS Type:"</span>+os);</div><div class="line">	<span class="keyword">if</span>(os.startsWith(<span class="string">"windows"</span>))&#123;</div><div class="line">		<span class="comment">//本地是windows</span></div><div class="line">		String mac = getWindowsMACAddress();</div><div class="line">		System.out.println(<span class="string">"MAC Address:"</span>+mac);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="comment">//本地是非windows系统 一般就是unix</span></div><div class="line">		String mac = getUnixMACAddress();</div><div class="line">		System.out.println(mac);</div><div class="line">	&#125;</div><div class="line">	System.out.println(<span class="string">"HostName:"</span>+getHostName());</div><div class="line">	System.out.println(<span class="string">"IPAddress:"</span>+getIPAddress());</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>用来得到用户的 mac 地址，注意 windows 和 linux 是不一样的</li>
</ul>
<h2 id="源码，客户端，服务器和所需的jar包下载"><a href="#源码，客户端，服务器和所需的jar包下载" class="headerlink" title="源码，客户端，服务器和所需的jar包下载"></a>源码，客户端，服务器和所需的jar包下载</h2><ul>
<li><p><a href="http://oe7guoyyy.bkt.clouddn.com/mail.jar" target="_blank" rel="external">mail.jar</a> 邮件发送需要的jar包</p>
</li>
<li><p><a href="http://oe7guoyyy.bkt.clouddn.com/qiandao.zip" target="_blank" rel="external">源码</a></p>
</li>
<li><p><a href="http://oe7guoyyy.bkt.clouddn.com/%E7%AD%BE%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8.jar" target="_blank" rel="external">服务端</a></p>
</li>
<li><p><a href="http://oe7guoyyy.bkt.clouddn.com/windows%E5%AE%A2%E6%88%B7%E7%AB%AF.jar" target="_blank" rel="external">windows客户端</a></p>
</li>
<li><p><a href="http://oe7guoyyy.bkt.clouddn.com/linux%E5%AE%A2%E6%88%B7%E7%AB%AF.jar" target="_blank" rel="external">linux客户端</a></p>
</li>
</ul>
<h3 id="服务端的使用方法"><a href="#服务端的使用方法" class="headerlink" title="服务端的使用方法"></a>服务端的使用方法</h3><ul>
<li>通过命令</li>
</ul>
<blockquote>
<p>java -jar 签到服务器.jar</p>
</blockquote>
<h3 id="客户端的使用方法"><a href="#客户端的使用方法" class="headerlink" title="客户端的使用方法"></a>客户端的使用方法</h3><ul>
<li><p>windows 下安装 JDK 之后双击可执行</p>
</li>
<li><p>linux 下使用命令</p>
</li>
</ul>
<blockquote>
<p>java -jar linux客户端.jar</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Socket%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%80%E6%98%93%E7%AD%BE%E5%88%B0%E7%B3%BB%E7%BB%9F.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;原理和功能&quot;&gt;&lt;a href=&quot;#原理和功能&quot; class=&quot;headerlink&quot; title=&quot;原理和功能&quot;&gt;&lt;/a&gt;原理和功能&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;服务器搭建在内网上，通过内网访问实现签到者位置的判断&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我这个签到系统没有使用数据库，是将每个人的mac地址和姓名存在数组中，每天签&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一次，然后每周可以自动发一封签到数据邮件给维护者&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以后可以实现数据库，然后扩展更多的功能&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA进阶之路" scheme="http://www.qiuchengjia.cn/categories/JAVA%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="JAVA进阶之路" scheme="http://www.qiuchengjia.cn/tags/JAVA%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaMail发送邮件实例</title>
    <link href="http://www.qiuchengjia.cn/2016/10/11/JAVA%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/JavaMail%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%AE%9E%E4%BE%8B/"/>
    <id>http://www.qiuchengjia.cn/2016/10/11/JAVA进阶之路/JavaMail发送邮件实例/</id>
    <published>2016-10-10T19:55:36.000Z</published>
    <updated>2016-10-10T12:02:51.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="550类型错误"><a href="#550类型错误" class="headerlink" title="550类型错误"></a>550类型错误</h2><ul>
<li><p>登录自己的163邮箱，注意，要用你的应用程序中设置的邮箱地址去登录</p>
</li>
<li><p>在主菜单栏上的“设置”子菜单里面，选择POP3/SMTP/IAMP菜单</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/JavaMail%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%AE%9E%E4%BE%8B1.png" alt=""></center>

<ul>
<li>若没有开启“客户端授权密码”，则选择将其开启。开启后，会给你生成一个应用授权密码。要用这个生成的密码作为java mail API发送邮件的认证密码，如此，才能解除500密码，若用邮箱的登录密码去设置这个认证密码，会遇到500的错误。下图是开启“客户端授权密码”功能后的截图</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/JavaMail%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%AE%9E%E4%BE%8B2.png" alt=""></center>

<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> qiu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> javax.mail.Address;</div><div class="line"><span class="keyword">import</span> javax.mail.Authenticator;</div><div class="line"><span class="keyword">import</span> javax.mail.Message;</div><div class="line"><span class="keyword">import</span> javax.mail.PasswordAuthentication;</div><div class="line"><span class="keyword">import</span> javax.mail.Session;</div><div class="line"><span class="keyword">import</span> javax.mail.Transport;</div><div class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</div><div class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</div><div class="line"><span class="comment">/** */</span><span class="comment">/**</span></div><div class="line"> * 发送普通邮件，接受普通邮件 发送带有附件的邮件，接收带有附件的邮件 发送html形式的邮件，接受html形式的邮件 发送带有图片的邮件等做了一个总结。</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 邮箱服务器</span></div><div class="line">    <span class="keyword">private</span> String host = <span class="string">"smtp.163.com"</span>;</div><div class="line">    <span class="comment">// 这个是你的邮箱用户名</span></div><div class="line">    <span class="keyword">private</span> String username = <span class="string">"qiandaoxitong"</span>;</div><div class="line">    <span class="comment">// 你的邮箱密码</span></div><div class="line">    <span class="keyword">private</span> String password = <span class="string">"这里是密码"</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String mail_head_name = <span class="string">"mail_head_name是什么"</span>;</div><div class="line">    <span class="keyword">private</span> String mail_head_value = <span class="string">"this is head of this mail"</span>;</div><div class="line">    <span class="keyword">private</span> String mail_to = <span class="string">"2470041***@qq.com"</span>;</div><div class="line">    <span class="keyword">private</span> String mail_from = <span class="string">"qiandaoxitong@163.com"</span>;</div><div class="line">    <span class="keyword">private</span> String mail_subject = <span class="string">"this is the subject of this test mail"</span>;</div><div class="line">    <span class="keyword">private</span> String mail_body = <span class="string">"this is the mail_body of this test mail"</span>;</div><div class="line">    <span class="keyword">private</span> String personalName = <span class="string">"我的邮件"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</div><div class="line">    	</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/** */</span><span class="comment">/**</span></div><div class="line">     * 此段代码用来发送普通电子邮件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            Properties props = <span class="keyword">new</span> Properties(); <span class="comment">// 获取系统环境</span></div><div class="line">            Authenticator auth = <span class="keyword">new</span> Email_Autherticator(); <span class="comment">// 进行邮件服务器用户认证</span></div><div class="line">            props.put(<span class="string">"mail.smtp.host"</span>, host);</div><div class="line">            props.put(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</div><div class="line">            Session session = Session.getDefaultInstance(props, auth);</div><div class="line">            <span class="comment">// 设置session,和邮件服务器进行通讯。</span></div><div class="line">            MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</div><div class="line">            <span class="comment">// message.setContent("foobar, "application/x-foobar"); // 设置邮件格式</span></div><div class="line">            message.setSubject(mail_subject); <span class="comment">// 设置邮件主题</span></div><div class="line">            message.setText(mail_body); <span class="comment">// 设置邮件正文</span></div><div class="line">            message.setHeader(mail_head_name, mail_head_value); <span class="comment">// 设置邮件标题</span></div><div class="line">            message.setSentDate(<span class="keyword">new</span> Date()); <span class="comment">// 设置邮件发送日期</span></div><div class="line">            Address address = <span class="keyword">new</span> InternetAddress(mail_from, personalName);</div><div class="line">            message.setFrom(address); <span class="comment">// 设置邮件发送者的地址</span></div><div class="line">            Address toAddress = <span class="keyword">new</span> InternetAddress(mail_to); <span class="comment">// 设置邮件接收方的地址</span></div><div class="line">            message.addRecipient(Message.RecipientType.TO, toAddress);</div><div class="line">            Transport.send(message); <span class="comment">// 发送邮件</span></div><div class="line">            System.out.println(<span class="string">"send ok!"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex)</div><div class="line">        &#123;</div><div class="line">            ex.printStackTrace();</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(ex.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/** */</span><span class="comment">/**</span></div><div class="line">     * 用来进行服务器对用户的认证</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email_Autherticator</span> <span class="keyword">extends</span> <span class="title">Authenticator</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Email_Autherticator</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Email_Autherticator</span><span class="params">(String user, String pwd)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">            username = user;</div><div class="line">            password = pwd;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(username, password);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        Test sendmail = <span class="keyword">new</span> Test();</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            sendmail.send();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex)</div><div class="line">        &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="转载博客"><a href="#转载博客" class="headerlink" title="转载博客"></a>转载博客</h2><ul>
<li><a href="http://www.cnblogs.com/shihuc/p/5069783.html" target="_blank" rel="external">java mail使用中遇到的550类型错误</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;550类型错误&quot;&gt;&lt;a href=&quot;#550类型错误&quot; class=&quot;headerlink&quot; title=&quot;550类型错误&quot;&gt;&lt;/a&gt;550类型错误&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;登录自己的163邮箱，注意，要用你的应用程序中设置的邮箱地址去登录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在主菜单栏上的“设置”子菜单里面，选择POP3/SMTP/IAMP菜单&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/JavaMail%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%AE%9E%E4%BE%8B1.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;若没有开启“客户端授权密码”，则选择将其开启。开启后，会给你生成一个应用授权密码。要用这个生成的密码作为java mail API发送邮件的认证密码，如此，才能解除500密码，若用邮箱的登录密码去设置这个认证密码，会遇到500的错误。下图是开启“客户端授权密码”功能后的截图&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/JavaMail%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%AE%9E%E4%BE%8B2.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="JAVA进阶之路" scheme="http://www.qiuchengjia.cn/categories/JAVA%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="JAVA进阶之路" scheme="http://www.qiuchengjia.cn/tags/JAVA%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android照片墙应用实现，再多的图片也不怕崩溃</title>
    <link href="http://www.qiuchengjia.cn/2016/09/29/Android%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/Android%E7%85%A7%E7%89%87%E5%A2%99%E5%BA%94%E7%94%A8%E5%AE%9E%E7%8E%B0%EF%BC%8C%E5%86%8D%E5%A4%9A%E7%9A%84%E5%9B%BE%E7%89%87%E4%B9%9F%E4%B8%8D%E6%80%95%E5%B4%A9%E6%BA%83/"/>
    <id>http://www.qiuchengjia.cn/2016/09/29/Android项目实战/Android照片墙应用实现，再多的图片也不怕崩溃/</id>
    <published>2016-09-28T16:11:33.000Z</published>
    <updated>2016-09-29T04:21:23.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><p>照片墙这种功能现在应该算是挺常见了，在很多应用中你都可以经常看到照片墙的身影。它的设计思路其实也非常简单，用一个GridView控件当作“墙”，然后随着GridView的滚动将一张张照片贴在“墙”上，这些照片可以是手机本地中存储的，也可以是从网上下载的。制作类似于这种的功能的应用，有一个非常重要的问题需要考虑，就是图片资源何时应该释放。因为随着GridView的滚动，加载的图片可能会越来越多，如果没有一种合理的机制对图片进行释放，那么当图片达到一定上限时，程序就必然会崩溃</p>
</li>
<li><p>今天我们照片墙应用的实现，重点也是放在了如何防止由于图片过多导致程序崩溃上面。主要的核心算法使用了Android中提供的LruCache类，这个类是3.1版本中提供的，如果你是在更早的Android版本中开发，则需要导入android-support-v4的jar包</p>
</li>
<li><p>关于LruCache用法的详细讲解，可以参<a href="http://www.qiuchengjia.cn/2016/09/27/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/Android%E9%AB%98%E6%95%88%E5%8A%A0%E8%BD%BD%E5%A4%A7%E5%9B%BE%E3%80%81%E5%A4%9A%E5%9B%BE%E5%92%8CLruCache%E7%BC%93%E5%AD%98/">Android高效加载大图、多图和LruCache缓存</a></p>
</li>
<li><p>那我们开始动手吧，新建一个Android项目，起名叫PhotoWallDemo，这里我使用的是Android 4.4的API</p>
</li>
</ul>
<a id="more"></a>
<h2 id="Images类"><a href="#Images类" class="headerlink" title="Images类"></a>Images类</h2><ul>
<li>第一个要考虑的问题就是，我们从哪儿去收集这么多的图片呢？这里我从谷歌官方提供的Demo里将图片源取了出来，我们就从这些网址中下载图片，代码如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Images</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String[] imageThumbUrls = <span class="keyword">new</span> String[] &#123;  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-55osAWw3x0Q/URquUtcFr5I/AAAAAAAAAbs/rWlj1RUKrYI/s160-c/A%252520Photographer.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/--dq8niRp7W4/URquVgmXvgI/AAAAAAAAAbs/-gnuLQfNnBA/s160-c/A%252520Song%252520of%252520Ice%252520and%252520Fire.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-7qZeDtRKFKc/URquWZT1gOI/AAAAAAAAAbs/hqWgteyNXsg/s160-c/Another%252520Rockaway%252520Sunset.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/--L0Km39l5J8/URquXHGcdNI/AAAAAAAAAbs/3ZrSJNrSomQ/s160-c/Antelope%252520Butte.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-8HO-4vIFnlw/URquZnsFgtI/AAAAAAAAAbs/WT8jViTF7vw/s160-c/Antelope%252520Hallway.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-WIuWgVcU3Qw/URqubRVcj4I/AAAAAAAAAbs/YvbwgGjwdIQ/s160-c/Antelope%252520Walls.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-UBmLbPELvoQ/URqucCdv0kI/AAAAAAAAAbs/IdNhr2VQoQs/s160-c/Apre%2525CC%252580s%252520la%252520Pluie.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-s-AFpvgSeew/URquc6dF-JI/AAAAAAAAAbs/Mt3xNGRUd68/s160-c/Backlit%252520Cloud.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-bvmif9a9YOQ/URquea3heHI/AAAAAAAAAbs/rcr6wyeQtAo/s160-c/Bee%252520and%252520Flower.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-n7mdm7I7FGs/URqueT_BT-I/AAAAAAAAAbs/9MYmXlmpSAo/s160-c/Bonzai%252520Rock%252520Sunset.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-4CN4X4t0M1k/URqufPozWzI/AAAAAAAAAbs/8wK41lg1KPs/s160-c/Caterpillar.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-rrFnVC8xQEg/URqufdrLBaI/AAAAAAAAAbs/s69WYy_fl1E/s160-c/Chess.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-WVpRptWH8Yw/URqugh-QmDI/AAAAAAAAAbs/E-MgBgtlUWU/s160-c/Chihuly.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-0BDXkYmckbo/URquhKFW84I/AAAAAAAAAbs/ogQtHCTk2JQ/s160-c/Closed%252520Door.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-PyggXXZRykM/URquh-kVvoI/AAAAAAAAAbs/hFtDwhtrHHQ/s160-c/Colorado%252520River%252520Sunset.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-ZAs4dNZtALc/URquikvOCWI/AAAAAAAAAbs/DXz4h3dll1Y/s160-c/Colors%252520of%252520Autumn.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-GztnWEIiMz8/URqukVCU7bI/AAAAAAAAAbs/jo2Hjv6MZ6M/s160-c/Countryside.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-bEg9EZ9QoiM/URquklz3FGI/AAAAAAAAAbs/UUuv8Ac2BaE/s160-c/Death%252520Valley%252520-%252520Dunes.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-ijQJ8W68tEE/URqulGkvFEI/AAAAAAAAAbs/zPXvIwi_rFw/s160-c/Delicate%252520Arch.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-Oh8mMy2ieng/URqullDwehI/AAAAAAAAAbs/TbdeEfsaIZY/s160-c/Despair.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-gl0y4UiAOlk/URqumC_KjBI/AAAAAAAAAbs/PM1eT7dn4oo/s160-c/Eagle%252520Fall%252520Sunrise.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-hYYHd2_vXPQ/URqumtJa9eI/AAAAAAAAAbs/wAalXVkbSh0/s160-c/Electric%252520Storm.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-PyY_yiyjPTo/URqunUOhHFI/AAAAAAAAAbs/azZoULNuJXc/s160-c/False%252520Kiva.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-PYvLVdvXywk/URqunwd8hfI/AAAAAAAAAbs/qiMwgkFvf6I/s160-c/Fitzgerald%252520Streaks.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-KIR_UobIIqY/URquoCZ9SlI/AAAAAAAAAbs/Y4d4q8sXu4c/s160-c/Foggy%252520Sunset.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-9lzOk_OWZH0/URquoo4xYoI/AAAAAAAAAbs/AwgzHtNVCwU/s160-c/Frantic.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-0X3JNaKaz48/URqupH78wpI/AAAAAAAAAbs/lHXxu_zbH8s/s160-c/Golden%252520Gate%252520Afternoon.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-95sb5ag7ABc/URqupl95RDI/AAAAAAAAAbs/g73R20iVTRA/s160-c/Golden%252520Gate%252520Fog.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-JB9v6rtgHhk/URqup21F-zI/AAAAAAAAAbs/64Fb8qMZWXk/s160-c/Golden%252520Grass.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-EIBGfnuLtII/URquqVHwaRI/AAAAAAAAAbs/FA4McV2u8VE/s160-c/Grand%252520Teton.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-WoMxZvmN9nY/URquq1v2AoI/AAAAAAAAAbs/grj5uMhL6NA/s160-c/Grass%252520Closeup.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-6hZiEHXx64Q/URqurxvNdqI/AAAAAAAAAbs/kWMXM3o5OVI/s160-c/Green%252520Grass.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-6LVb9OXtQ60/URquteBFuKI/AAAAAAAAAbs/4F4kRgecwFs/s160-c/Hanging%252520Leaf.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-zAvf__52ONk/URqutT_IuxI/AAAAAAAAAbs/D_bcuc0thoU/s160-c/Highway%2525201.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-H4SrUg615rA/URquuL27fXI/AAAAAAAAAbs/4aEqJfiMsOU/s160-c/Horseshoe%252520Bend%252520Sunset.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-JhFi4fb_Pqw/URquuX-QXbI/AAAAAAAAAbs/IXpYUxuweYM/s160-c/Horseshoe%252520Bend.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-UGgssvFRJ7g/URquueyJzGI/AAAAAAAAAbs/yYIBlLT0toM/s160-c/Into%252520the%252520Blue.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-CH7KoupI7uI/URquu0FF__I/AAAAAAAAAbs/R7GDmI7v_G0/s160-c/Jelly%252520Fish%2525202.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-pwuuw6yhg8U/URquvPxR3FI/AAAAAAAAAbs/VNGk6f-tsGE/s160-c/Jelly%252520Fish%2525203.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-GoUQVw1fnFw/URquv6xbC0I/AAAAAAAAAbs/zEUVTQQ43Zc/s160-c/Kauai.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-8QdYYQEpYjw/URquwvdh88I/AAAAAAAAAbs/cktDy-ysfHo/s160-c/Kyoto%252520Sunset.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-vPeekyDjOE0/URquwzJ28qI/AAAAAAAAAbs/qxcyXULsZrg/s160-c/Lake%252520Tahoe%252520Colors.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-xBPxWpD4yxU/URquxWHk8AI/AAAAAAAAAbs/ARDPeDYPiMY/s160-c/Lava%252520from%252520the%252520Sky.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-897VXrJB6RE/URquxxxd-5I/AAAAAAAAAbs/j-Cz4T4YvIw/s160-c/Leica%25252050mm%252520Summilux.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-qSJ4D4iXzGo/URquyDWiJ1I/AAAAAAAAAbs/k2pBXeWehOA/s160-c/Leica%25252050mm%252520Summilux.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-dwlPg83vzLg/URquylTVuFI/AAAAAAAAAbs/G6SyQ8b4YsI/s160-c/Leica%252520M8%252520%252528Front%252529.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-R3_EYAyJvfk/URquzQBv8eI/AAAAAAAAAbs/b9xhpUM3pEI/s160-c/Light%252520to%252520Sand.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-fHY5h67QPi0/URqu0Cp4J1I/AAAAAAAAAbs/0lG6m94Z6vM/s160-c/Little%252520Bit%252520of%252520Paradise.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-TzF_LwrCnRM/URqu0RddPOI/AAAAAAAAAbs/gaj2dLiuX0s/s160-c/Lone%252520Pine%252520Sunset.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-4HdpJ4_DXU4/URqu046dJ9I/AAAAAAAAAbs/eBOodtk2_uk/s160-c/Lonely%252520Rock.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-erbF--z-W4s/URqu1ajSLkI/AAAAAAAAAbs/xjDCDO1INzM/s160-c/Longue%252520Vue.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-0CXJRdJaqvc/URqu1opNZNI/AAAAAAAAAbs/PFB2oPUU7Lk/s160-c/Look%252520Me%252520in%252520the%252520Eye.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-D_5lNxnDN6g/URqu2Tk7HVI/AAAAAAAAAbs/p0ddca9W__Y/s160-c/Lost%252520in%252520a%252520Field.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-flsqwMrIk2Q/URqu24PcmjI/AAAAAAAAAbs/5ocIH85XofM/s160-c/Marshall%252520Beach%252520Sunset.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-Y4lgryEVTmU/URqu28kG3gI/AAAAAAAAAbs/OjXpekqtbJ4/s160-c/Mono%252520Lake%252520Blue.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-AaHAJPmcGYA/URqu3PIldHI/AAAAAAAAAbs/lcTqk1SIcRs/s160-c/Monument%252520Valley%252520Overlook.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-vKxfdQ83dQA/URqu31Yq_BI/AAAAAAAAAbs/OUoGk_2AyfM/s160-c/Moving%252520Rock.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-CG62QiPpWXg/URqu4ia4vRI/AAAAAAAAAbs/0YOdqLAlcAc/s160-c/Napali%252520Coast.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-wdGrP5PMmJQ/URqu5PZvn7I/AAAAAAAAAbs/m0abEcdPXe4/s160-c/One%252520Wheel.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-6WS5DoCGuOA/URqu5qx1UgI/AAAAAAAAAbs/giMw2ixPvrY/s160-c/Open%252520Sky.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-u8EHKj8G8GQ/URqu55sM6yI/AAAAAAAAAbs/lIXX_GlTdmI/s160-c/Orange%252520Sunset.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-74Z5qj4bTDE/URqu6LSrJrI/AAAAAAAAAbs/XzmVkw90szQ/s160-c/Orchid.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-lEQE4h6TePE/URqu6t_lSkI/AAAAAAAAAbs/zvGYKOea_qY/s160-c/Over%252520there.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-cauH-53JH2M/URqu66v_USI/AAAAAAAAAbs/EucwwqclfKQ/s160-c/Plumes.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-eDLT2jHDoy4/URqu7axzkAI/AAAAAAAAAbs/iVZE-xJ7lZs/s160-c/Rainbokeh.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-j1NLqEFIyco/URqu8L1CGcI/AAAAAAAAAbs/aqZkgX66zlI/s160-c/Rainbow.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-DRnqmK0t4VU/URqu8XYN9yI/AAAAAAAAAbs/LgvF_592WLU/s160-c/Rice%252520Fields.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-hwh1v3EOGcQ/URqu8qOaKwI/AAAAAAAAAbs/IljRJRnbJGw/s160-c/Rockaway%252520Fire%252520Sky.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-wjV6FQk7tlk/URqu9jCQ8sI/AAAAAAAAAbs/RyYUpdo-c9o/s160-c/Rockaway%252520Flow.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-6cAXNfo7D20/URqu-BdzgPI/AAAAAAAAAbs/OmsYllzJqwo/s160-c/Rockaway%252520Sunset%252520Sky.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-sl8fpGPS-RE/URqu_BOkfgI/AAAAAAAAAbs/Dg2Fv-JxOeg/s160-c/Russian%252520Ridge%252520Sunset.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-gVtY36mMBIg/URqu_q91lkI/AAAAAAAAAbs/3CiFMBcy5MA/s160-c/Rust%252520Knot.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-GHeImuHqJBE/URqu_FKfVLI/AAAAAAAAAbs/axuEJeqam7Q/s160-c/Sailing%252520Stones.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-hBbYZjTOwGc/URqu_ycpIrI/AAAAAAAAAbs/nAdJUXnGJYE/s160-c/Seahorse.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-Iwi6-i6IexY/URqvAYZHsVI/AAAAAAAAAbs/5ETWl4qXsFE/s160-c/Shinjuku%252520Street.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-amhnySTM_MY/URqvAlb5KoI/AAAAAAAAAbs/pFCFgzlKsn0/s160-c/Sierra%252520Heavens.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-dJgjepFrYSo/URqvBVJZrAI/AAAAAAAAAbs/v-F5QWpYO6s/s160-c/Sierra%252520Sunset.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-Z4zGiC5nWdc/URqvBdEwivI/AAAAAAAAAbs/ZRZR1VJ84QA/s160-c/Sin%252520Lights.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-_0cYiWW8ccY/URqvBz3iM4I/AAAAAAAAAbs/9N_Wq8MhLTY/s160-c/Starry%252520Lake.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-A9LMoRyuQUA/URqvCYx_JoI/AAAAAAAAAbs/s7sde1Bz9cI/s160-c/Starry%252520Night.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-KtLJ3k858eY/URqvC_2h_bI/AAAAAAAAAbs/zzEBImwDA_g/s160-c/Stream.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-dFB7Lad6RcA/URqvDUftwWI/AAAAAAAAAbs/BrhoUtXTN7o/s160-c/Strip%252520Sunset.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-at6apgFiN20/URqvDyffUZI/AAAAAAAAAbs/clABCx171bE/s160-c/Sunset%252520Hills.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-7-EHhtQthII/URqvEYTk4vI/AAAAAAAAAbs/QSJZoB3YjVg/s160-c/Tenaya%252520Lake%2525202.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-8MrjV_a-Pok/URqvFC5repI/AAAAAAAAAbs/9inKTg9fbCE/s160-c/Tenaya%252520Lake.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-B1HW-z4zwao/URqvFWYRwUI/AAAAAAAAAbs/8Peli53Bs8I/s160-c/The%252520Cave%252520BW.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-PO4E-xZKAnQ/URqvGRqjYkI/AAAAAAAAAbs/42nyADFsXag/s160-c/The%252520Fisherman.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-iLyZlzfdy7s/URqvG0YScdI/AAAAAAAAAbs/1J9eDKmkXtk/s160-c/The%252520Night%252520is%252520Coming.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-G-k7YkkUco0/URqvHhah6fI/AAAAAAAAAbs/_taQQG7t0vo/s160-c/The%252520Road.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-h-ALJt7kSus/URqvIThqYfI/AAAAAAAAAbs/ejiv35olWS8/s160-c/Tokyo%252520Heights.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-Hy9k-TbS7xg/URqvIjQMOxI/AAAAAAAAAbs/RSpmmOATSkg/s160-c/Tokyo%252520Highway.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-83oOvMb4OZs/URqvJL0T7lI/AAAAAAAAAbs/c5TECZ6RONM/s160-c/Tokyo%252520Smog.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh3.googleusercontent.com/-FB-jfgREEfI/URqvJI3EXAI/AAAAAAAAAbs/XfyweiRF4v8/s160-c/Tufa%252520at%252520Night.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-vngKD5Z1U8w/URqvJUCEgPI/AAAAAAAAAbs/ulxCMVcU6EU/s160-c/Valley%252520Sunset.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh6.googleusercontent.com/-DOz5I2E2oMQ/URqvKMND1kI/AAAAAAAAAbs/Iqf0IsInleo/s160-c/Windmill%252520Sunrise.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-biyiyWcJ9MU/URqvKculiAI/AAAAAAAAAbs/jyPsCplJOpE/s160-c/Windmill.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-PDT167_xRdA/URqvK36mLcI/AAAAAAAAAbs/oi2ik9QseMI/s160-c/Windmills.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh5.googleusercontent.com/-kI_QdYx7VlU/URqvLXCB6gI/AAAAAAAAAbs/N31vlZ6u89o/s160-c/Yet%252520Another%252520Rockaway%252520Sunset.jpg"</span>,  </div><div class="line">            <span class="string">"https://lh4.googleusercontent.com/-e9NHZ5k5MSs/URqvMIBZjtI/AAAAAAAAAbs/1fV810rDNfQ/s160-c/Yosemite%252520Tree.jpg"</span>, &#125;;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><ul>
<li>图片源已经有了，现在我们就该考虑在哪里放置这些图片了。新建或打开activity_main.xml作为程序的主布局，加入如下代码：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>  </div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> &gt;  </div><div class="line">      </div><div class="line">    <span class="tag">&lt;<span class="name">GridView</span>   </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/photo_wall"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:columnWidth</span>=<span class="string">"90dip"</span>  </div><div class="line">        <span class="attr">android:stretchMode</span>=<span class="string">"columnWidth"</span>  </div><div class="line">        <span class="attr">android:numColumns</span>=<span class="string">"auto_fit"</span>  </div><div class="line">        <span class="attr">android:verticalSpacing</span>=<span class="string">"10dip"</span>  </div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span>  </div><div class="line">        &gt;<span class="tag">&lt;/<span class="name">GridView</span>&gt;</span>  </div><div class="line">      </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>可以看到，我们在这个布局文件中仅加入了一个GridView，这也就是我们程序中的“墙”，所有的图片都将贴在这个“墙”上</p>
</li>
<li><p>接着我们定义GridView中每一个子View的布局，新建一个photo_layout.xml布局，加入如下代码：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>  </div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> &gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span>   </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/photo"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"90dip"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"90dip"</span>  </div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/empty_photo"</span>  </div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span>  </div><div class="line">        /&gt;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PhotoWallAdapter"><a href="#PhotoWallAdapter" class="headerlink" title="PhotoWallAdapter"></a>PhotoWallAdapter</h2><ul>
<li><p>在每一个子View中我们就简单使用了一个ImageView来显示一张图片。这样所有的布局就已经定义好了</p>
</li>
<li><p>接下来新建PhotoWallAdapter做为GridView的适配器，代码如下所示：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhotoWallAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">String</span>&gt; <span class="keyword">implements</span> <span class="title">OnScrollListener</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 记录所有正在下载或等待下载的任务。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> Set&lt;BitmapWorkerTask&gt; taskCollection;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 图片缓存技术的核心类，用于缓存所有下载好的图片，在程序内存达到设定值时会将最少最近使用的图片移除掉。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * GridView的实例 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> GridView mPhotoWall;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 第一张可见图片的下标 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mFirstVisibleItem;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 一屏有多少张图片可见 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mVisibleItemCount;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 记录是否刚打开程序，用于解决进入程序不滚动屏幕，不会下载图片的问题。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFirstEnter = <span class="keyword">true</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PhotoWallAdapter</span><span class="params">(Context context, <span class="keyword">int</span> textViewResourceId, String[] objects,  </span></span></div><div class="line">            GridView photoWall) &#123;  </div><div class="line">        <span class="keyword">super</span>(context, textViewResourceId, objects);  </div><div class="line">        mPhotoWall = photoWall;  </div><div class="line">        taskCollection = <span class="keyword">new</span> HashSet&lt;BitmapWorkerTask&gt;();  </div><div class="line">        <span class="comment">// 获取应用程序最大可用内存  </span></div><div class="line">        <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) Runtime.getRuntime().maxMemory();  </div><div class="line">        <span class="keyword">int</span> cacheSize = maxMemory / <span class="number">8</span>;  </div><div class="line">        <span class="comment">// 设置图片缓存大小为程序最大可用内存的1/8  </span></div><div class="line">        mMemoryCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;  </div><div class="line">                <span class="keyword">return</span> bitmap.getByteCount();  </div><div class="line">            &#125;  </div><div class="line">        &#125;;  </div><div class="line">        mPhotoWall.setOnScrollListener(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;  </div><div class="line">        <span class="keyword">final</span> String url = getItem(position);  </div><div class="line">        View view;  </div><div class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;  </div><div class="line">            view = LayoutInflater.from(getContext()).inflate(R.layout.photo_layout, <span class="keyword">null</span>);  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            view = convertView;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">final</span> ImageView photo = (ImageView) view.findViewById(R.id.photo);  </div><div class="line">        <span class="comment">// 给ImageView设置一个Tag，保证异步加载图片时不会乱序  </span></div><div class="line">        photo.setTag(url);  </div><div class="line">        setImageView(url, photo);  </div><div class="line">        <span class="keyword">return</span> view;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 给ImageView设置图片。首先从LruCache中取出图片的缓存，设置到ImageView上。如果LruCache中没有该图片的缓存， </div><div class="line">     * 就给ImageView设置一张默认图片。 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@param</span> imageUrl </div><div class="line">     *            图片的URL地址，用于作为LruCache的键。 </div><div class="line">     * <span class="doctag">@param</span> imageView </div><div class="line">     *            用于显示图片的控件。 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setImageView</span><span class="params">(String imageUrl, ImageView imageView)</span> </span>&#123;  </div><div class="line">        Bitmap bitmap = getBitmapFromMemoryCache(imageUrl);  </div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;  </div><div class="line">            imageView.setImageBitmap(bitmap);  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            imageView.setImageResource(R.drawable.empty_photo);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 将一张图片存储到LruCache中。 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@param</span> key </div><div class="line">     *            LruCache的键，这里传入图片的URL地址。 </div><div class="line">     * <span class="doctag">@param</span> bitmap </div><div class="line">     *            LruCache的键，这里传入从网络上下载的Bitmap对象。 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBitmapToMemoryCache</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (getBitmapFromMemoryCache(key) == <span class="keyword">null</span>) &#123;  </div><div class="line">            mMemoryCache.put(key, bitmap);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 从LruCache中获取一张图片，如果不存在就返回null。 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@param</span> key </div><div class="line">     *            LruCache的键，这里传入图片的URL地址。 </div><div class="line">     * <span class="doctag">@return</span> 对应传入键的Bitmap对象，或者null。 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapFromMemoryCache</span><span class="params">(String key)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mMemoryCache.get(key);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;  </div><div class="line">        <span class="comment">// 仅当GridView静止时才去下载图片，GridView滑动时取消所有正在下载的任务  </span></div><div class="line">        <span class="keyword">if</span> (scrollState == SCROLL_STATE_IDLE) &#123;  </div><div class="line">            loadBitmaps(mFirstVisibleItem, mVisibleItemCount);  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            cancelAllTasks();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount,  </span></span></div><div class="line">            <span class="keyword">int</span> totalItemCount) &#123;  </div><div class="line">        mFirstVisibleItem = firstVisibleItem;  </div><div class="line">        mVisibleItemCount = visibleItemCount;  </div><div class="line">        <span class="comment">// 下载的任务应该由onScrollStateChanged里调用，但首次进入程序时onScrollStateChanged并不会调用，  </span></div><div class="line">        <span class="comment">// 因此在这里为首次进入程序开启下载任务。  </span></div><div class="line">        <span class="keyword">if</span> (isFirstEnter &amp;&amp; visibleItemCount &gt; <span class="number">0</span>) &#123;  </div><div class="line">            loadBitmaps(firstVisibleItem, visibleItemCount);  </div><div class="line">            isFirstEnter = <span class="keyword">false</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 加载Bitmap对象。此方法会在LruCache中检查所有屏幕中可见的ImageView的Bitmap对象， </div><div class="line">     * 如果发现任何一个ImageView的Bitmap对象不在缓存中，就会开启异步线程去下载图片。 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@param</span> firstVisibleItem </div><div class="line">     *            第一个可见的ImageView的下标 </div><div class="line">     * <span class="doctag">@param</span> visibleItemCount </div><div class="line">     *            屏幕中总共可见的元素数 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadBitmaps</span><span class="params">(<span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount)</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = firstVisibleItem; i &lt; firstVisibleItem + visibleItemCount; i++) &#123;  </div><div class="line">                String imageUrl = Images.imageThumbUrls[i];  </div><div class="line">                Bitmap bitmap = getBitmapFromMemoryCache(imageUrl);  </div><div class="line">                <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;  </div><div class="line">                    BitmapWorkerTask task = <span class="keyword">new</span> BitmapWorkerTask();  </div><div class="line">                    taskCollection.add(task);  </div><div class="line">                    task.execute(imageUrl);  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                    ImageView imageView = (ImageView) mPhotoWall.findViewWithTag(imageUrl);  </div><div class="line">                    <span class="keyword">if</span> (imageView != <span class="keyword">null</span> &amp;&amp; bitmap != <span class="keyword">null</span>) &#123;  </div><div class="line">                        imageView.setImageBitmap(bitmap);  </div><div class="line">                    &#125;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 取消所有正在下载或等待下载的任务。 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelAllTasks</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (taskCollection != <span class="keyword">null</span>) &#123;  </div><div class="line">            <span class="keyword">for</span> (BitmapWorkerTask task : taskCollection) &#123;  </div><div class="line">                task.cancel(<span class="keyword">false</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 异步下载图片的任务。 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@author</span> guolin </div><div class="line">     */  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BitmapWorkerTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Void</span>, <span class="title">Bitmap</span>&gt; </span>&#123;  </div><div class="line">  </div><div class="line">        <span class="comment">/** </span></div><div class="line">         * 图片的URL地址 </div><div class="line">         */  </div><div class="line">        <span class="keyword">private</span> String imageUrl;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;  </div><div class="line">            imageUrl = params[<span class="number">0</span>];  </div><div class="line">            <span class="comment">// 在后台开始下载图片  </span></div><div class="line">            Bitmap bitmap = downloadBitmap(params[<span class="number">0</span>]);  </div><div class="line">            <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;  </div><div class="line">                <span class="comment">// 图片下载完成后缓存到LrcCache中  </span></div><div class="line">                addBitmapToMemoryCache(params[<span class="number">0</span>], bitmap);  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">return</span> bitmap;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Bitmap bitmap)</span> </span>&#123;  </div><div class="line">            <span class="keyword">super</span>.onPostExecute(bitmap);  </div><div class="line">            <span class="comment">// 根据Tag找到相应的ImageView控件，将下载好的图片显示出来。  </span></div><div class="line">            ImageView imageView = (ImageView) mPhotoWall.findViewWithTag(imageUrl);  </div><div class="line">            <span class="keyword">if</span> (imageView != <span class="keyword">null</span> &amp;&amp; bitmap != <span class="keyword">null</span>) &#123;  </div><div class="line">                imageView.setImageBitmap(bitmap);  </div><div class="line">            &#125;  </div><div class="line">            taskCollection.remove(<span class="keyword">this</span>);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="comment">/** </span></div><div class="line">         * 建立HTTP请求，并获取Bitmap对象。 </div><div class="line">         *  </div><div class="line">         * <span class="doctag">@param</span> imageUrl </div><div class="line">         *            图片的URL地址 </div><div class="line">         * <span class="doctag">@return</span> 解析后的Bitmap对象 </div><div class="line">         */  </div><div class="line">        <span class="function"><span class="keyword">private</span> Bitmap <span class="title">downloadBitmap</span><span class="params">(String imageUrl)</span> </span>&#123;  </div><div class="line">            Bitmap bitmap = <span class="keyword">null</span>;  </div><div class="line">            HttpURLConnection con = <span class="keyword">null</span>;  </div><div class="line">            <span class="keyword">try</span> &#123;  </div><div class="line">                URL url = <span class="keyword">new</span> URL(imageUrl);  </div><div class="line">                con = (HttpURLConnection) url.openConnection();  </div><div class="line">                con.setConnectTimeout(<span class="number">5</span> * <span class="number">1000</span>);  </div><div class="line">                con.setReadTimeout(<span class="number">10</span> * <span class="number">1000</span>);  </div><div class="line">                bitmap = BitmapFactory.decodeStream(con.getInputStream());  </div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">                e.printStackTrace();  </div><div class="line">            &#125; <span class="keyword">finally</span> &#123;  </div><div class="line">                <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;  </div><div class="line">                    con.disconnect();  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">return</span> bitmap;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>PhotoWallAdapter是整个照片墙程序中最关键的一个类了，这里我来重点给大家讲解一下。首先在PhotoWallAdapter的构造函数中，我们初始化了LruCache类，并设置了最大缓存容量为程序最大可用内存的1/8，接下来又为GridView注册了一个滚动监听器。然后在getView()方法中，我们为每个ImageView设置了一个唯一的Tag，这个Tag的作用是为了后面能够准确地找回这个ImageView，不然异步加载图片会出现乱序的情况。之后调用了setImageView()方法为ImageView设置一张图片，这个方法首先会从LruCache缓存中查找是否已经缓存了这张图片，如果成功找到则将缓存中的图片显示在ImageView上，否则就显示一张默认的空图片</p>
</li>
<li><p>看了半天，那到底是在哪里下载图片的呢？这是在GridView的滚动监听器中进行的，在onScrollStateChanged()方法中，我们对GridView的滚动状态进行了判断，如果当前GridView是静止的，则调用loadBitmaps()方法去下载图片，如果GridView正在滚动，则取消掉所有下载任务，这样可以保证GridView滚动的流畅性。在loadBitmaps()方法中，我们为屏幕上所有可见的GridView子元素开启了一个线程去执行下载任务，下载成功后将图片存储到LruCache当中，然后通过Tag找到相应的ImageView控件，把下载好的图片显示出来</p>
</li>
<li><p>由于我们使用了LruCache来缓存图片，所以不需要担心内存溢出的情况，当LruCache中存储图片的总大小达到容量上限的时候，会自动把最近最少使用的图片从缓存中移除</p>
</li>
</ul>
<h2 id="MainActivity和网络权限声明"><a href="#MainActivity和网络权限声明" class="headerlink" title="MainActivity和网络权限声明"></a>MainActivity和网络权限声明</h2><ul>
<li>最后新建或打开MainActivity作为程序的主Activity，代码如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 用于展示照片墙的GridView </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> GridView mPhotoWall;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * GridView的适配器 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> PhotoWallAdapter adapter;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        mPhotoWall = (GridView) findViewById(R.id.photo_wall);  </div><div class="line">        adapter = <span class="keyword">new</span> PhotoWallAdapter(<span class="keyword">this</span>, <span class="number">0</span>, Images.imageThumbUrls, mPhotoWall);  </div><div class="line">        mPhotoWall.setAdapter(adapter);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        <span class="comment">// 退出程序时结束所有的下载任务  </span></div><div class="line">        adapter.cancelAllTasks();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>MainActivity中的代码非常简单，没什么需要说明的了，在Activity被销毁时取消掉了所有的下载任务，避免程序在后台耗费流量。另外由于我们使用了网络功能，别忘了在AndroidManifest.xml中加入网络权限的声明</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ul>
<li>现在可以运行一下程序了，效果如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/%20Android%E7%85%A7%E7%89%87%E5%A2%99%E5%BA%94%E7%94%A8%E5%AE%9E%E7%8E%B0%EF%BC%8C%E5%86%8D%E5%A4%9A%E7%9A%84%E5%9B%BE%E7%89%87%E4%B9%9F%E4%B8%8D%E6%80%95%E5%B4%A9%E6%BA%831.gif" alt=""></center>

<ul>
<li><p>可以看到，滚动照片墙，会异步加载图片到相应的ImageView上。随着加载图片的增多，会释放掉一些之前加载过的图片，你多滚动几次就可以看得出了。另外为了能让大家明显看出图片的释放情况，我在这个程序中没有使用本地缓存，所有被释放掉的图片再次显示需要从网络上再下载一遍。在实际的项目中配合适当的本地缓存效果会更好</p>
</li>
<li><p>打开DDMS，我们可以发现，由于有LruCache帮我们管理图片缓存，不管如何滚动照片墙，程序内存始终会保持在一个合理的范围内</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E7%85%A7%E7%89%87%E5%A2%99%E5%BA%94%E7%94%A8%E5%AE%9E%E7%8E%B0%EF%BC%8C%E5%86%8D%E5%A4%9A%E7%9A%84%E5%9B%BE%E7%89%87%E4%B9%9F%E4%B8%8D%E6%80%95%E5%B4%A9%E6%BA%83.png" alt=""></center>



<h2 id="源码和apk下载"><a href="#源码和apk下载" class="headerlink" title="源码和apk下载"></a>源码和apk下载</h2><ul>
<li><p><a href="http://oe7guoyyy.bkt.clouddn.com/%20Android%E7%85%A7%E7%89%87%E5%A2%99%E5%BA%94%E7%94%A8%E5%AE%9E%E7%8E%B0%EF%BC%8C%E5%86%8D%E5%A4%9A%E7%9A%84%E5%9B%BE%E7%89%87%E4%B9%9F%E4%B8%8D%E6%80%95%E5%B4%A9%E6%BA%83.zip" target="_blank" rel="external">源码</a></p>
</li>
<li><p><a href="http://oe7guoyyy.bkt.clouddn.com/%20Android%E7%85%A7%E7%89%87%E5%A2%99%E5%BA%94%E7%94%A8%E5%AE%9E%E7%8E%B0%EF%BC%8C%E5%86%8D%E5%A4%9A%E7%9A%84%E5%9B%BE%E7%89%87%E4%B9%9F%E4%B8%8D%E6%80%95%E5%B4%A9%E6%BA%83.apk" target="_blank" rel="external">apk</a></p>
</li>
</ul>
<h2 id="转载博客"><a href="#转载博客" class="headerlink" title="转载博客"></a>转载博客</h2><ul>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/9526203" target="_blank" rel="external">Android照片墙应用实现，再多的图片也不怕崩溃</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;照片墙这种功能现在应该算是挺常见了，在很多应用中你都可以经常看到照片墙的身影。它的设计思路其实也非常简单，用一个GridView控件当作“墙”，然后随着GridView的滚动将一张张照片贴在“墙”上，这些照片可以是手机本地中存储的，也可以是从网上下载的。制作类似于这种的功能的应用，有一个非常重要的问题需要考虑，就是图片资源何时应该释放。因为随着GridView的滚动，加载的图片可能会越来越多，如果没有一种合理的机制对图片进行释放，那么当图片达到一定上限时，程序就必然会崩溃&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;今天我们照片墙应用的实现，重点也是放在了如何防止由于图片过多导致程序崩溃上面。主要的核心算法使用了Android中提供的LruCache类，这个类是3.1版本中提供的，如果你是在更早的Android版本中开发，则需要导入android-support-v4的jar包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于LruCache用法的详细讲解，可以参&lt;a href=&quot;http://www.qiuchengjia.cn/2016/09/27/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/Android%E9%AB%98%E6%95%88%E5%8A%A0%E8%BD%BD%E5%A4%A7%E5%9B%BE%E3%80%81%E5%A4%9A%E5%9B%BE%E5%92%8CLruCache%E7%BC%93%E5%AD%98/&quot;&gt;Android高效加载大图、多图和LruCache缓存&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;那我们开始动手吧，新建一个Android项目，起名叫PhotoWallDemo，这里我使用的是Android 4.4的API&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android项目实战" scheme="http://www.qiuchengjia.cn/categories/Android%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="Android项目实战" scheme="http://www.qiuchengjia.cn/tags/Android%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Android DiskLruCache完全解析，硬盘缓存的最佳方案</title>
    <link href="http://www.qiuchengjia.cn/2016/09/27/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/Android%20DiskLruCache%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%8C%E7%A1%AC%E7%9B%98%E7%BC%93%E5%AD%98%E7%9A%84%E6%9C%80%E4%BD%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://www.qiuchengjia.cn/2016/09/27/Android进阶之路/Android DiskLruCache完全解析，硬盘缓存的最佳方案/</id>
    <published>2016-09-27T15:44:34.000Z</published>
    <updated>2016-09-29T04:20:50.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><p>防止多图OOM的核心解决思路就是使用LruCache技术。但LruCache只是管理了内存中图片的存储与释放，如果图片从内存中被移除的话，那么又需要从网络上重新加载一次图片，这显然非常耗时。对此，Google又提供了一套硬盘缓存的解决方案：DiskLruCache(非Google官方编写，但获得官方认证)。只可惜，Android Doc中并没有对DiskLruCache的用法给出详细的说明，而网上关于DiskLruCache的资料也少之又少，因此今天我准备专门写一篇博客来详细讲解DiskLruCache的用法，以及分析它的工作原理，这应该也是目前网上关于DiskLruCache最详细的资料了</p>
</li>
<li><p>那么我们先来看一下有哪些应用程序已经使用了DiskLruCache技术。在我所接触的应用范围里，Dropbox、Twitter、网易新闻等都是使用DiskLruCache来进行硬盘缓存的，其中Dropbox和Twitter大多数人应该都没用过，那么我们就从大家最熟悉的网易新闻开始着手分析，来对DiskLruCache有一个最初的认识吧</p>
</li>
</ul>
<h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><ul>
<li>相信所有人都知道，网易新闻中的数据都是从网络上获取的，包括了很多的新闻内容和新闻图片，如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20DiskLruCache%E5%92%8CLruCache%E7%BC%93%E5%AD%98%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%901.png" alt=""></center>

<a id="more"></a>
<ul>
<li><p>但是不知道大家有没有发现，这些内容和图片在从网络上获取到之后都会存入到本地缓存中，因此即使手机在没有网络的情况下依然能够加载出以前浏览过的新闻。而使用的缓存技术不用多说，自然是DiskLruCache了，那么首先第一个问题，这些数据都被缓存在了手机的什么位置呢？</p>
</li>
<li><p>其实DiskLruCache并没有限制数据的缓存位置，可以自由地进行设定，但是通常情况下多数应用程序都会将缓存的位置选择为 /sdcard/Android/data/<application package="">/cache 这个路径。选择在这个位置有两点好处：第一，这是存储在SD卡上的，因此即使缓存再多的数据也不会对手机的内置存储空间有任何影响，只要SD卡空间足够就行。第二，这个路径被Android系统认定为应用程序的缓存路径，当程序被卸载的时候，这里的数据也会一起被清除掉，这样就不会出现删除程序之后手机上还有很多残留数据的问题</application></p>
</li>
<li><p>那么这里还是以网易新闻为例，它的客户端的包名是com.netease.newsreader.activity，因此数据缓存地址就应该是 /sdcard/Android/data/com.netease.newsreader.activity/cache ，我们进入到这个目录中看一下，结果如下图所示：</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20DiskLruCache%E5%92%8CLruCache%E7%BC%93%E5%AD%98%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%902.png" alt=""></center>

<ul>
<li>可以看到有很多个文件夹，因为网易新闻对多种类型的数据都进行了缓存，这里简单起见我们只分析图片缓存就好，所以进入到bitmap文件夹当中。然后你将会看到一堆文件名很长的文件，这些文件命名没有任何规则，完全看不懂是什么意思，但如果你一直向下滚动，将会看到一个名为journal的文件，如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20DiskLruCache%E5%92%8CLruCache%E7%BC%93%E5%AD%98%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%903.png" alt=""></center>

<ul>
<li>那么这些文件到底都是什么呢？看到这里相信有些朋友已经是一头雾水了，这里我简单解释一下。上面那些文件名很长的文件就是一张张缓存的图片，每个文件都对应着一张图片，而journal文件是DiskLruCache的一个日志文件，程序对每张图片的操作记录都存放在这个文件中，基本上看到journal这个文件就标志着该程序使用DiskLruCache技术了</li>
</ul>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><p>好了，对DiskLruCache有了最初的认识之后，下面我们来学习一下DiskLruCache的用法吧。由于DiskLruCache并不是由Google官方编写的，所以这个类并没有被包含在Android API当中，我们需要将这个类从网上下载下来，然后手动添加到项目当中。DiskLruCache的源码在Google Source上，地址如下：</p>
</li>
<li><p><a href="https://android.googlesource.com/platform/libcore/+/jb-mr2-release/luni/src/main/java/libcore/io/DiskLruCache.java" target="_blank" rel="external">传送门</a></p>
</li>
<li><p>如果Google Source打不开的话，也可以 <a href="http://download.csdn.net/detail/sinyu890807/7709759" target="_blank" rel="external">点击这里</a> 下载DiskLruCache的源码。下载好了源码之后，只需要在项目中新建一个libcore.io包，然后将DiskLruCache.java文件复制到这个包中即可</p>
</li>
</ul>
<h2 id="打开缓存"><a href="#打开缓存" class="headerlink" title="打开缓存"></a>打开缓存</h2><ul>
<li>这样的话我们就把准备工作做好了，下面看一下DiskLruCache到底该如何使用。首先你要知道，DiskLruCache是不能new出实例的，如果我们要创建一个DiskLruCache的实例，则需要调用它的open()方法，接口如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DiskLruCache <span class="title">open</span><span class="params">(File directory, <span class="keyword">int</span> appVersion, <span class="keyword">int</span> valueCount, <span class="keyword">long</span> maxSize)</span></span></div></pre></td></tr></table></figure>
<ul>
<li><p>open()方法接收四个参数，第一个参数指定的是数据的缓存地址，第二个参数指定当前应用程序的版本号，第三个参数指定同一个key可以对应多少个缓存文件，基本都是传1，第四个参数指定最多可以缓存多少字节的数据</p>
</li>
<li><p>其中缓存地址前面已经说过了，通常都会存放在 /sdcard/Android/data/<application package="">/cache 这个路径下面，但同时我们又需要考虑如果这个手机没有SD卡，或者SD正好被移除了的情况，因此比较优秀的程序都会专门写一个方法来获取缓存地址，如下所示：</application></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getDiskCacheDir</span><span class="params">(Context context, String uniqueName)</span> </span>&#123;  </div><div class="line">    String cachePath;  </div><div class="line">    <span class="keyword">if</span> (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())  </div><div class="line">            || !Environment.isExternalStorageRemovable()) &#123;  </div><div class="line">        cachePath = context.getExternalCacheDir().getPath();  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        cachePath = context.getCacheDir().getPath();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> File(cachePath + File.separator + uniqueName);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>可以看到，当SD卡存在或者SD卡不可被移除的时候，就调用getExternalCacheDir()方法来获取缓存路径，否则就调用getCacheDir()方法来获取缓存路径。前者获取到的就是 /sdcard/Android/data/(application package)/cache 这个路径，而后者获取到的是 /data/data/(application package)/cache 这个路径</p>
</li>
<li><p>接着又将获取到的路径和一个uniqueName进行拼接，作为最终的缓存路径返回。那么这个uniqueName又是什么呢？其实这就是为了对不同类型的数据进行区分而设定的一个唯一值，比如说在网易新闻缓存路径下看到的bitmap、object等文件夹</p>
</li>
<li><p>接着是应用程序版本号，我们可以使用如下代码简单地获取到当前应用程序的版本号：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAppVersion</span><span class="params">(Context context)</span> </span>&#123;  </div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">        PackageInfo info = context.getPackageManager().getPackageInfo(context.getPackageName(), <span class="number">0</span>);  </div><div class="line">        <span class="keyword">return</span> info.versionCode;  </div><div class="line">    &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;  </div><div class="line">        e.printStackTrace();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>需要注意的是，每当版本号改变，缓存路径下存储的所有数据都会被清除掉，因为DiskLruCache认为当应用程序有版本更新的时候，所有的数据都应该从网上重新获取</p>
</li>
<li><p>后面两个参数就没什么需要解释的了，第三个参数传1，第四个参数通常传入10M的大小就够了，这个可以根据自身的情况进行调节。<br>因此，一个非常标准的open()方法就可以这样写：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DiskLruCache mDiskLruCache = <span class="keyword">null</span>;  </div><div class="line"><span class="keyword">try</span> &#123;  </div><div class="line">    File cacheDir = getDiskCacheDir(context, <span class="string">"bitmap"</span>);  </div><div class="line">    <span class="keyword">if</span> (!cacheDir.exists()) &#123;  </div><div class="line">        cacheDir.mkdirs();  </div><div class="line">    &#125;  </div><div class="line">    mDiskLruCache = DiskLruCache.open(cacheDir, getAppVersion(context), <span class="number">1</span>, <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>);  </div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;  </div><div class="line">    e.printStackTrace();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>首先调用getDiskCacheDir()方法获取到缓存地址的路径，然后判断一下该路径是否存在，如果不存在就创建一下。接着调用DiskLruCache的open()方法来创建实例，并把四个参数传入即可</p>
</li>
<li><p>有了DiskLruCache的实例之后，我们就可以对缓存的数据进行操作了，操作类型主要包括写入、访问、移除等，我们一个个进行学习</p>
</li>
</ul>
<h2 id="写入缓存"><a href="#写入缓存" class="headerlink" title="写入缓存"></a>写入缓存</h2><ul>
<li>先来看写入，比如说现在有一张图片，地址是</li>
</ul>
<blockquote>
<p><a href="http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg" target="_blank" rel="external">http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg</a></p>
</blockquote>
<ul>
<li>那么为了将这张图片下载下来，就可以这样写：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">downloadUrlToStream</span><span class="params">(String urlString, OutputStream outputStream)</span> </span>&#123;  </div><div class="line">    HttpURLConnection urlConnection = <span class="keyword">null</span>;  </div><div class="line">    BufferedOutputStream out = <span class="keyword">null</span>;  </div><div class="line">    BufferedInputStream in = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">        <span class="keyword">final</span> URL url = <span class="keyword">new</span> URL(urlString);  </div><div class="line">        urlConnection = (HttpURLConnection) url.openConnection();  </div><div class="line">        in = <span class="keyword">new</span> BufferedInputStream(urlConnection.getInputStream(), <span class="number">8</span> * <span class="number">1024</span>);  </div><div class="line">        out = <span class="keyword">new</span> BufferedOutputStream(outputStream, <span class="number">8</span> * <span class="number">1024</span>);  </div><div class="line">        <span class="keyword">int</span> b;  </div><div class="line">        <span class="keyword">while</span> ((b = in.read()) != -<span class="number">1</span>) &#123;  </div><div class="line">            out.write(b);  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException e) &#123;  </div><div class="line">        e.printStackTrace();  </div><div class="line">    &#125; <span class="keyword">finally</span> &#123;  </div><div class="line">        <span class="keyword">if</span> (urlConnection != <span class="keyword">null</span>) &#123;  </div><div class="line">            urlConnection.disconnect();  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;  </div><div class="line">                out.close();  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;  </div><div class="line">                in.close();  </div><div class="line">            &#125;  </div><div class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这段代码相当基础，相信大家都看得懂，就是访问urlString中传入的网址，并通过outputStream写入到本地。有了这个方法之后，下面我们就可以使用DiskLruCache来进行写入了，写入的操作是借助DiskLruCache.Editor这个类完成的。类似地，这个类也是不能new的，需要调用DiskLruCache的edit()方法来获取实例，接口如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Editor <span class="title">edit</span><span class="params">(String key)</span> <span class="keyword">throws</span> IOException</span></div></pre></td></tr></table></figure>
<ul>
<li><p>可以看到，edit()方法接收一个参数key，这个key将会成为缓存文件的文件名，并且必须要和图片的URL是一一对应的。那么怎样才能让key和图片的URL能够一一对应呢？直接使用URL来作为key？不太合适，因为图片URL中可能包含一些特殊字符，这些字符有可能在命名文件时是不合法的。其实最简单的做法就是将图片的URL进行MD5编码，编码后的字符串肯定是唯一的，并且只会包含0-F这样的字符，完全符合文件的命名规则</p>
</li>
<li><p>那么我们就写一个方法用来将字符串进行MD5编码，代码如下所示：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hashKeyForDisk</span><span class="params">(String key)</span> </span>&#123;  </div><div class="line">    String cacheKey;  </div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">        <span class="keyword">final</span> MessageDigest mDigest = MessageDigest.getInstance(<span class="string">"MD5"</span>);  </div><div class="line">        mDigest.update(key.getBytes());  </div><div class="line">        cacheKey = bytesToHexString(mDigest.digest());  </div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;  </div><div class="line">        cacheKey = String.valueOf(key.hashCode());  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> cacheKey;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">bytesToHexString</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;  </div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;  </div><div class="line">        String hex = Integer.toHexString(<span class="number">0xFF</span> &amp; bytes[i]);  </div><div class="line">        <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;  </div><div class="line">            sb.append(<span class="string">'0'</span>);  </div><div class="line">        &#125;  </div><div class="line">        sb.append(hex);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> sb.toString();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>代码很简单，现在我们只需要调用一下hashKeyForDisk()方法，并把图片的URL传入到这个方法中，就可以得到对应的key了</p>
</li>
<li><p>因此，现在就可以这样写来得到一个DiskLruCache.Editor的实例：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String imageUrl = <span class="string">"http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg"</span>;  </div><div class="line">String key = hashKeyForDisk(imageUrl);  </div><div class="line">DiskLruCache.Editor editor = mDiskLruCache.edit(key);</div></pre></td></tr></table></figure>
<ul>
<li><p>有了DiskLruCache.Editor的实例之后，我们可以调用它的newOutputStream()方法来创建一个输出流，然后把它传入到downloadUrlToStream()中就能实现下载并写入缓存的功能了。注意newOutputStream()方法接收一个index参数，由于前面在设置valueCount的时候指定的是1，所以这里index传0就可以了。在写入操作执行完之后，我们还需要调用一下commit()方法进行提交才能使写入生效，调用abort()方法的话则表示放弃此次写入</p>
</li>
<li><p>因此，一次完整写入操作的代码如下所示：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            String imageUrl = <span class="string">"http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg"</span>;  </div><div class="line">            String key = hashKeyForDisk(imageUrl);  </div><div class="line">            DiskLruCache.Editor editor = mDiskLruCache.edit(key);  </div><div class="line">            <span class="keyword">if</span> (editor != <span class="keyword">null</span>) &#123;  </div><div class="line">                OutputStream outputStream = editor.newOutputStream(<span class="number">0</span>);  </div><div class="line">                <span class="keyword">if</span> (downloadUrlToStream(imageUrl, outputStream)) &#123;  </div><div class="line">                    editor.commit();  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                    editor.abort();  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            mDiskLruCache.flush();  </div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<ul>
<li><p>由于这里调用了downloadUrlToStream()方法来从网络上下载图片，所以一定要确保这段代码是在子线程当中执行的。注意在代码的最后我还调用了一下flush()方法，这个方法并不是每次写入都必须要调用的，但在这里却不可缺少，我会在后面说明它的作用</p>
</li>
<li><p>现在的话缓存应该是已经成功写入了，我们进入到SD卡上的缓存目录里看一下，如下图所示：</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20DiskLruCache%E5%92%8CLruCache%E7%BC%93%E5%AD%98%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%905.png" alt=""></center>

<ul>
<li>可以看到，这里有一个文件名很长的文件，和一个journal文件，那个文件名很长的文件自然就是缓存的图片了，因为是使用了MD5编码来进行命名的</li>
</ul>
<h2 id="读取缓存"><a href="#读取缓存" class="headerlink" title="读取缓存"></a>读取缓存</h2><ul>
<li>缓存已经写入成功之后，接下来我们就该学习一下如何读取了。读取的方法要比写入简单一些，主要是借助DiskLruCache的get()方法实现的，接口如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Snapshot <span class="title">get</span><span class="params">(String key)</span> <span class="keyword">throws</span> IOException</span></div></pre></td></tr></table></figure>
<ul>
<li>很明显，get()方法要求传入一个key来获取到相应的缓存数据，而这个key毫无疑问就是将图片URL进行MD5编码后的值了，因此读取缓存数据的代码就可以这样写：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String imageUrl = <span class="string">"http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg"</span>;  </div><div class="line">String key = hashKeyForDisk(imageUrl);  </div><div class="line">DiskLruCache.Snapshot snapShot = mDiskLruCache.get(key);</div></pre></td></tr></table></figure>
<ul>
<li>很奇怪的是，这里获取到的是一个DiskLruCache.Snapshot对象，这个对象我们该怎么利用呢？很简单，只需要调用它的getInputStream()方法就可以得到缓存文件的输入流了。同样地，getInputStream()方法也需要传一个index参数，这里传入0就好。有了文件的输入流之后，想要把缓存图片显示到界面上就轻而易举了。所以，一段完整的读取缓存，并将图片加载到界面上的代码如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;  </div><div class="line">    String imageUrl = <span class="string">"http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg"</span>;  </div><div class="line">    String key = hashKeyForDisk(imageUrl);  </div><div class="line">    DiskLruCache.Snapshot snapShot = mDiskLruCache.get(key);  </div><div class="line">    <span class="keyword">if</span> (snapShot != <span class="keyword">null</span>) &#123;  </div><div class="line">        InputStream is = snapShot.getInputStream(<span class="number">0</span>);  </div><div class="line">        Bitmap bitmap = BitmapFactory.decodeStream(is);  </div><div class="line">        mImage.setImageBitmap(bitmap);  </div><div class="line">    &#125;  </div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;  </div><div class="line">    e.printStackTrace();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>我们使用了BitmapFactory的decodeStream()方法将文件流解析成Bitmap对象，然后把它设置到ImageView当中。如果运行一下程序，将会看到如下效果：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20DiskLruCache%E5%92%8CLruCache%E7%BC%93%E5%AD%98%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%906.png" alt=""></center>

<ul>
<li>OK，图片已经成功显示出来了。注意这是我们从本地缓存中加载的，而不是从网络上加载的，因此即使在你手机没有联网的情况下，这张图片仍然可以显示出来</li>
</ul>
<h2 id="移除缓存"><a href="#移除缓存" class="headerlink" title="移除缓存"></a>移除缓存</h2><ul>
<li>学习完了写入缓存和读取缓存的方法之后，最难的两个操作你就都已经掌握了，那么接下来要学习的移除缓存对你来说也一定非常轻松了。移除缓存主要是借助DiskLruCache的remove()方法实现的，接口如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(String key)</span> <span class="keyword">throws</span> IOException</span></div></pre></td></tr></table></figure>
<ul>
<li>相信你已经相当熟悉了，remove()方法中要求传入一个key，然后会删除这个key对应的缓存图片，示例代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;  </div><div class="line">    String imageUrl = <span class="string">"http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg"</span>;    </div><div class="line">    String key = hashKeyForDisk(imageUrl);    </div><div class="line">    mDiskLruCache.remove(key);  </div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;  </div><div class="line">    e.printStackTrace();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>用法虽然简单，但是你要知道，这个方法我们并不应该经常去调用它。因为你完全不需要担心缓存的数据过多从而占用SD卡太多空间的问题，DiskLruCache会根据我们在调用open()方法时设定的缓存最大值来自动删除多余的缓存。只有你确定某个key对应的缓存内容已经过期，需要从网络获取最新数据的时候才应该调用remove()方法来移除缓存</li>
</ul>
<h2 id="其它API"><a href="#其它API" class="headerlink" title="其它API"></a>其它API</h2><ul>
<li>除了写入缓存、读取缓存、移除缓存之外，DiskLruCache还提供了另外一些比较常用的API，我们简单学习一下</li>
</ul>
<h3 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h3><ul>
<li>这个方法会返回当前缓存路径下所有缓存数据的总字节数，以byte为单位，如果应用程序中需要在界面上显示当前缓存数据的总大小，就可以通过调用这个方法计算出来。比如网易新闻中就有这样一个功能，如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20DiskLruCache%E5%92%8CLruCache%E7%BC%93%E5%AD%98%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%907.png" alt=""></center>

<h3 id="flush"><a href="#flush" class="headerlink" title="flush()"></a>flush()</h3><ul>
<li>这个方法用于将内存中的操作记录同步到日志文件（也就是journal文件）当中。这个方法非常重要，因为DiskLruCache能够正常工作的前提就是要依赖于journal文件中的内容。前面在讲解写入缓存操作的时候我有调用过一次这个方法，但其实并不是每次写入缓存都要调用一次flush()方法的，频繁地调用并不会带来任何好处，只会额外增加同步journal文件的时间。比较标准的做法就是在Activity的onPause()方法中去调用一次flush()方法就可以了</li>
</ul>
<h3 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h3><ul>
<li>这个方法用于将DiskLruCache关闭掉，是和open()方法对应的一个方法。关闭掉了之后就不能再调用DiskLruCache中任何操作缓存数据的方法，通常只应该在Activity的onDestroy()方法中去调用close()方法</li>
</ul>
<h3 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h3><ul>
<li>这个方法用于将所有的缓存数据全部删除，比如说网易新闻中的那个手动清理缓存功能，其实只需要调用一下DiskLruCache的delete()方法就可以实现了</li>
</ul>
<h2 id="解读journal"><a href="#解读journal" class="headerlink" title="解读journal"></a>解读journal</h2><ul>
<li>前面已经提到过，DiskLruCache能够正常工作的前提就是要依赖于journal文件中的内容，因此，能够读懂journal文件对于我们理解DiskLruCache的工作原理有着非常重要的作用。那么journal文件中的内容到底是什么样的呢？我们来打开瞧一瞧吧，如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20DiskLruCache%E5%92%8CLruCache%E7%BC%93%E5%AD%98%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%908.png" alt=""></center>

<ul>
<li><p>由于现在只缓存了一张图片，所以journal中并没有几行日志，我们一行行进行分析。第一行是个固定的字符串“libcore.io.DiskLruCache”，标志着我们使用的是DiskLruCache技术。第二行是DiskLruCache的版本号，这个值是恒为1的。第三行是应用程序的版本号，我们在open()方法里传入的版本号是什么这里就会显示什么。第四行是valueCount，这个值也是在open()方法中传入的，通常情况下都为1。第五行是一个空行。前五行也被称为journal文件的头，这部分内容还是比较好理解的，但是接下来的部分就要稍微动点脑筋了</p>
</li>
<li><p>第六行是以一个DIRTY前缀开始的，后面紧跟着缓存图片的key。通常我们看到DIRTY这个字样都不代表着什么好事情，意味着这是一条脏数据。没错，每当我们调用一次DiskLruCache的edit()方法时，都会向journal文件中写入一条DIRTY记录，表示我们正准备写入一条缓存数据，但不知结果如何。然后调用commit()方法表示写入缓存成功，这时会向journal中写入一条CLEAN记录，意味着这条“脏”数据被“洗干净了”，调用abort()方法表示写入缓存失败，这时会向journal中写入一条REMOVE记录。也就是说，每一行DIRTY的key，后面都应该有一行对应的CLEAN或者REMOVE的记录，否则这条数据就是“脏”的，会被自动删除掉</p>
</li>
<li><p>如果你足够细心的话应该还会注意到，第七行的那条记录，除了CLEAN前缀和key之外，后面还有一个152313，这是什么意思呢？其实，DiskLruCache会在每一行CLEAN记录的最后加上该条缓存数据的大小，以字节为单位。152313也就是我们缓存的那张图片的字节数了，换算出来大概是148.74K，和缓存图片刚刚好一样大，如下图所示：</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20DiskLruCache%E5%92%8CLruCache%E7%BC%93%E5%AD%98%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%909.png" alt=""></center>

<ul>
<li><p>前面我们所学的size()方法可以获取到当前缓存路径下所有缓存数据的总字节数，其实它的工作原理就是把journal文件中所有CLEAN记录的字节数相加，求出的总合再把它返回而已</p>
</li>
<li><p>除了DIRTY、CLEAN、REMOVE之外，还有一种前缀是READ的记录，这个就非常简单了，每当我们调用get()方法去读取一条缓存数据时，就会向journal文件中写入一条READ记录。因此，像网易新闻这种图片和数据量都非常大的程序，journal文件中就可能会有大量的READ记录</p>
</li>
<li><p>那么你可能会担心了，如果我不停频繁操作的话，就会不断地向journal文件中写入数据，那这样journal文件岂不是会越来越大？这倒不必担心，DiskLruCache中使用了一个redundantOpCount变量来记录用户操作的次数，每执行一次写入、读取或移除缓存的操作，这个变量值都会加1，当变量值达到2000的时候就会触发重构journal的事件，这时会自动把journal中一些多余的、不必要的记录全部清除掉，保证journal文件的大小始终保持在一个合理的范围内</p>
</li>
<li><p>好了，这样的话我们就算是把DiskLruCache的用法以及简要的工作原理分析完了。至于DiskLruCache的源码还是比较简单的， 限于篇幅原因就不在这里展开了，感兴趣的朋友可以自己去摸索。下一篇文章中，我会带着大家通过一个项目实战的方式来更加深入地理解DiskLruCache的用法</p>
</li>
</ul>
<h2 id="转载博客"><a href="#转载博客" class="headerlink" title="转载博客"></a>转载博客</h2><ul>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/28863651" target="_blank" rel="external"> Android DiskLruCache完全解析，硬盘缓存的最佳方案</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;防止多图OOM的核心解决思路就是使用LruCache技术。但LruCache只是管理了内存中图片的存储与释放，如果图片从内存中被移除的话，那么又需要从网络上重新加载一次图片，这显然非常耗时。对此，Google又提供了一套硬盘缓存的解决方案：DiskLruCache(非Google官方编写，但获得官方认证)。只可惜，Android Doc中并没有对DiskLruCache的用法给出详细的说明，而网上关于DiskLruCache的资料也少之又少，因此今天我准备专门写一篇博客来详细讲解DiskLruCache的用法，以及分析它的工作原理，这应该也是目前网上关于DiskLruCache最详细的资料了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;那么我们先来看一下有哪些应用程序已经使用了DiskLruCache技术。在我所接触的应用范围里，Dropbox、Twitter、网易新闻等都是使用DiskLruCache来进行硬盘缓存的，其中Dropbox和Twitter大多数人应该都没用过，那么我们就从大家最熟悉的网易新闻开始着手分析，来对DiskLruCache有一个最初的认识吧&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;初探&quot;&gt;&lt;a href=&quot;#初探&quot; class=&quot;headerlink&quot; title=&quot;初探&quot;&gt;&lt;/a&gt;初探&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;相信所有人都知道，网易新闻中的数据都是从网络上获取的，包括了很多的新闻内容和新闻图片，如下图所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Android%20DiskLruCache%E5%92%8CLruCache%E7%BC%93%E5%AD%98%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%901.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Android进阶之路" scheme="http://www.qiuchengjia.cn/categories/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Android进阶之路" scheme="http://www.qiuchengjia.cn/tags/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android高效加载大图、多图和LruCache缓存</title>
    <link href="http://www.qiuchengjia.cn/2016/09/27/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/Android%E9%AB%98%E6%95%88%E5%8A%A0%E8%BD%BD%E5%A4%A7%E5%9B%BE%E3%80%81%E5%A4%9A%E5%9B%BE%E5%92%8CLruCache%E7%BC%93%E5%AD%98/"/>
    <id>http://www.qiuchengjia.cn/2016/09/27/Android进阶之路/Android高效加载大图、多图和LruCache缓存/</id>
    <published>2016-09-27T14:40:43.000Z</published>
    <updated>2016-09-28T08:28:28.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高效加载大图"><a href="#高效加载大图" class="headerlink" title="高效加载大图"></a>高效加载大图</h2><ul>
<li>我们在编写Android程序的时候经常要用到许多图片，不同图片总是会有不同的形状、不同的大小，但在大多数情况下，这些图片都会大于我们程序所需要的大小。比如说系统图片库里展示的图片大都是用手机摄像头拍出来的，这些图片的分辨率会比我们手机屏幕的分辨率高得多。大家应该知道，我们编写的应用程序都是有一定内存限制的，程序占用了过高的内存就容易出现OOM(OutOfMemory)异常。我们可以通过下面的代码看出每个应用程序最高可用内存是多少</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);  </div><div class="line">Log.d(<span class="string">"TAG"</span>, <span class="string">"Max memory is "</span> + maxMemory + <span class="string">"KB"</span>);</div></pre></td></tr></table></figure>
<ul>
<li><p>因此在展示高分辨率图片的时候，最好先将图片进行压缩。压缩后的图片大小应该和用来展示它的控件大小相近，在一个很小的ImageView上显示一张超大的图片不会带来任何视觉上的好处，但却会占用我们相当多宝贵的内存，而且在性能上还可能会带来负面影响。下面我们就来看一看，如何对一张大图片进行适当的压缩，让它能够以最佳大小显示的同时，还能防止OOM的出现</p>
</li>
<li><p>BitmapFactory这个类提供了多个解析方法(decodeByteArray, decodeFile, decodeResource等)用于创建Bitmap对象，我们应该根据图片的来源选择合适的方法。比如SD卡中的图片可以使用decodeFile方法，网络上的图片可以使用decodeStream方法，资源文件中的图片可以使用decodeResource方法。这些方法会尝试为已经构建的bitmap分配内存，这时就会很容易导致OOM出现。为此每一种解析方法都提供了一个可选的</p>
</li>
<li><p>BitmapFactory.Options参数，将这个参数的inJustDecodeBounds属性设置为true就可以让解析方法禁止为bitmap分配内存，返回值也不再是一个Bitmap对象，而是null。虽然Bitmap是null了，但是BitmapFactory.Options的outWidth、outHeight和outMimeType属性都会被赋值。这个技巧让我们可以在加载图片之前就获取到图片的长宽值和MIME类型，从而根据情况对图片进行压缩。如下代码所示：</p>
</li>
</ul>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();  </div><div class="line">options.inJustDecodeBounds = <span class="keyword">true</span>;  </div><div class="line">BitmapFactory.decodeResource(getResources(), R.id.myimage, options);  </div><div class="line"><span class="keyword">int</span> imageHeight = options.outHeight;  </div><div class="line"><span class="keyword">int</span> imageWidth = options.outWidth;  </div><div class="line">String imageType = options.outMimeType;</div></pre></td></tr></table></figure>
<ul>
<li>为了避免OOM异常，最好在解析每张图片的时候都先检查一下图片的大小，除非你非常信任图片的来源，保证这些图片都不会超出你程序的可用内存</li>
</ul>
<p>现在图片的大小已经知道了，我们就可以决定是把整张图片加载到内存中还是加载一个压缩版的图片到内存中。以下几个因素是我们需要考虑的：</p>
<ul>
<li><p>预估一下加载整张图片所需占用的内存</p>
</li>
<li><p>为了加载这一张图片你所愿意提供多少内存</p>
</li>
<li><p>用于展示这张图片的控件的实际大小</p>
</li>
<li><p>当前设备的屏幕尺寸和分辨率</p>
</li>
</ul>
<p>比如，你的ImageView只有128<em>96像素的大小，只是为了显示一张缩略图，这时候把一张1024</em>768像素的图片完全加载到内存中显然是不值得的</p>
<ul>
<li>那我们怎样才能对图片进行压缩呢？通过设置BitmapFactory.Options中inSampleSize的值就可以实现。比如我们有一张2048<em>1536像素的图片，将inSampleSize的值设置为4，就可以把这张图片压缩成512</em>384像素。原本加载这张图片需要占用13M的内存，压缩后就只需要占用0.75M了(假设图片是ARGB_8888类型，即每个像素点占用4个字节)。下面的方法可以根据传入的宽和高，计算出合适的inSampleSize值：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateInSampleSize</span><span class="params">(BitmapFactory.Options options,  </span></span></div><div class="line">        <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight) &#123;  </div><div class="line">    <span class="comment">// 源图片的高度和宽度  </span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;  </div><div class="line">    <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;  </div><div class="line">    <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;  </div><div class="line">        <span class="comment">// 计算出实际宽高和目标宽高的比率  </span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> heightRatio = Math.round((<span class="keyword">float</span>) height / (<span class="keyword">float</span>) reqHeight);  </div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> widthRatio = Math.round((<span class="keyword">float</span>) width / (<span class="keyword">float</span>) reqWidth);  </div><div class="line">        <span class="comment">// 选择宽和高中最小的比率作为inSampleSize的值，这样可以保证最终图片的宽和高  </span></div><div class="line">        <span class="comment">// 一定都会大于等于目标的宽和高。  </span></div><div class="line">        inSampleSize = heightRatio &lt; widthRatio ? heightRatio : widthRatio;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> inSampleSize;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用这个方法，首先你要将BitmapFactory.Options的inJustDecodeBounds属性设置为true，解析一次图片。然后将BitmapFactory.Options连同期望的宽度和高度一起传递到到calculateInSampleSize方法中，就可以得到合适的inSampleSize值了。之后再解析一次图片，使用新获取到的inSampleSize值，并把inJustDecodeBounds设置为false，就可以得到压缩后的图片了</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeSampledBitmapFromResource</span><span class="params">(Resources res, <span class="keyword">int</span> resId,  </span></span></div><div class="line">        <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight) &#123;  </div><div class="line">    <span class="comment">// 第一次解析将inJustDecodeBounds设置为true，来获取图片大小  </span></div><div class="line">    <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();  </div><div class="line">    options.inJustDecodeBounds = <span class="keyword">true</span>;  </div><div class="line">    BitmapFactory.decodeResource(res, resId, options);  </div><div class="line">    <span class="comment">// 调用上面定义的方法计算inSampleSize值  </span></div><div class="line">    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);  </div><div class="line">    <span class="comment">// 使用获取到的inSampleSize值再次解析图片  </span></div><div class="line">    options.inJustDecodeBounds = <span class="keyword">false</span>;  </div><div class="line">    <span class="keyword">return</span> BitmapFactory.decodeResource(res, resId, options);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>下面的代码非常简单地将任意一张图片压缩成100*100的缩略图，并在ImageView上展示</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mImageView.setImageBitmap(  </div><div class="line">    decodeSampledBitmapFromResource(getResources(), R.id.myimage, <span class="number">100</span>, <span class="number">100</span>));</div></pre></td></tr></table></figure>
<h2 id="LruCache缓存"><a href="#LruCache缓存" class="headerlink" title="LruCache缓存"></a>LruCache缓存</h2><ul>
<li><p>在你应用程序的UI界面加载一张图片是一件很简单的事情，但是当你需要在界面上加载一大堆图片的时候，情况就变得复杂起来。在很多情况下，（比如使用ListView, GridView 或者 ViewPager 这样的组件），屏幕上显示的图片可以通过滑动屏幕等事件不断地增加，最终导致OOM</p>
</li>
<li><p>为了保证内存的使用始终维持在一个合理的范围，通常会把被移除屏幕的图片进行回收处理。此时垃圾回收器也会认为你不再持有这些图片的引用，从而对这些图片进行GC操作。用这种思路来解决问题是非常好的，可是为了能让程序快速运行，在界面上迅速地加载图片，你又必须要考虑到某些图片被回收之后，用户又将它重新滑入屏幕这种情况。这时重新去加载一遍刚刚加载过的图片无疑是性能的瓶颈，你需要想办法去避免这个情况的发生</p>
</li>
<li><p>这个时候，使用内存缓存技术可以很好的解决这个问题，它可以让组件快速地重新加载和处理图片。下面我们就来看一看如何使用内存缓存技术来对图片进行缓存，从而让你的应用程序在加载很多图片的时候可以提高响应速度和流畅性</p>
</li>
<li><p>内存缓存技术对那些大量占用应用程序宝贵内存的图片提供了快速访问的方法。其中最核心的类是LruCache (此类在android-support-v4的包中提供) 。这个类非常适合用来缓存图片，它的主要算法原理是把最近使用的对象用强引用存储在 LinkedHashMap 中，并且把最近最少使用的对象在缓存值达到预设定值之前从内存中移除</p>
</li>
<li><p>在过去，我们经常会使用一种非常流行的内存缓存技术的实现，即软引用或弱引用 (SoftReference or WeakReference)。但是现在已经不再推荐使用这种方式了，因为从 Android 2.3 (API Level 9)开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。另外，Android 3.0 (API Level 11)中，图片的数据会存储在本地的内存当中，因而无法用一种可预见的方式将其释放，这就有潜在的风险造成应用程序的内存溢出并崩溃</p>
</li>
</ul>
<p>为了能够选择一个合适的缓存大小给LruCache, 有以下多个因素应该放入考虑范围内，例如：</p>
<ul>
<li><p>你的设备可以为每个应用程序分配多大的内存？</p>
</li>
<li><p>设备屏幕上一次最多能显示多少张图片？有多少图片需要进行预加载，因为有可能很快也会显示在屏幕上？</p>
</li>
<li><p>你的设备的屏幕大小和分辨率分别是多少？一个超高分辨率的设备（例如 Galaxy Nexus) 比起一个较低分辨率的设备（例如 Nexus S），在持有相同数量图片的时候，需要更大的缓存空间</p>
</li>
<li><p>图片的尺寸和大小，还有每张图片会占据多少内存空间</p>
</li>
<li><p>图片被访问的频率有多高？会不会有一些图片的访问频率比其它图片要高？如果有的话，你也许应该让一些图片常驻在内存当中，或者使用多个LruCache 对象来区分不同组的图片</p>
</li>
<li><p>你能维持好数量和质量之间的平衡吗？有些时候，存储多个低像素的图片，而在后台去开线程加载高像素的图片会更加的有效</p>
</li>
</ul>
<p>并没有一个指定的缓存大小可以满足所有的应用程序，这是由你决定的。你应该去分析程序内存的使用情况，然后制定出一个合适的解决方案。一个太小的缓存空间，有可能造成图片频繁地被释放和重新加载，这并没有好处。而一个太大的缓存空间，则有可能还是会引起 java.lang.OutOfMemory 的异常</p>
<!-- more -->
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul>
<li>下面是一个使用 LruCache 来缓存图片的例子：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;  </div><div class="line">  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">    <span class="comment">// 获取到可用内存的最大值，使用内存超出这个值会引起OutOfMemory异常。  </span></div><div class="line">    <span class="comment">// LruCache通过构造函数传入缓存值，以KB为单位。  </span></div><div class="line">    <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);  </div><div class="line">    <span class="comment">// 使用最大可用内存值的1/8作为缓存的大小。  </span></div><div class="line">    <span class="keyword">int</span> cacheSize = maxMemory / <span class="number">8</span>;  </div><div class="line">    mMemoryCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;  </div><div class="line">            <span class="comment">// 重写此方法来衡量每张图片的大小，默认返回图片数量。  </span></div><div class="line">            <span class="keyword">return</span> bitmap.getByteCount() / <span class="number">1024</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBitmapToMemoryCache</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (getBitmapFromMemCache(key) == <span class="keyword">null</span>) &#123;  </div><div class="line">        mMemoryCache.put(key, bitmap);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapFromMemCache</span><span class="params">(String key)</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> mMemoryCache.get(key);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在这个例子当中，使用了系统分配给应用程序的八分之一内存来作为缓存大小。在中高配置的手机当中，这大概会有4兆(32/8)的缓存空间。一个全屏幕的 GridView 使用4张 800x480分辨率的图片来填充，则大概会占用1.5兆的空间(800<em>480</em>4)。因此，这个缓存大小可以存储2.5页的图片。<br>当向 ImageView 中加载一张图片时,首先会在 LruCache 的缓存中进行检查。如果找到了相应的键值，则会立刻更新ImageView ，否则开启一个后台线程来加载这张图片</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBitmap</span><span class="params">(<span class="keyword">int</span> resId, ImageView imageView)</span> </span>&#123;  </div><div class="line">    <span class="keyword">final</span> String imageKey = String.valueOf(resId);  </div><div class="line">    <span class="keyword">final</span> Bitmap bitmap = getBitmapFromMemCache(imageKey);  </div><div class="line">    <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;  </div><div class="line">        imageView.setImageBitmap(bitmap);  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        imageView.setImageResource(R.drawable.image_placeholder);  </div><div class="line">        BitmapWorkerTask task = <span class="keyword">new</span> BitmapWorkerTask(imageView);  </div><div class="line">        task.execute(resId);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>BitmapWorkerTask 还要把新加载的图片的键值对放到缓存中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BitmapWorkerTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Integer</span>, <span class="title">Void</span>, <span class="title">Bitmap</span>&gt; </span>&#123;  </div><div class="line">    <span class="comment">// 在后台加载图片。  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(Integer... params)</span> </span>&#123;  </div><div class="line">        <span class="keyword">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(  </div><div class="line">                getResources(), params[<span class="number">0</span>], <span class="number">100</span>, <span class="number">100</span>);  </div><div class="line">        addBitmapToMemoryCache(String.valueOf(params[<span class="number">0</span>]), bitmap);  </div><div class="line">        <span class="keyword">return</span> bitmap;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>掌握了以上两种方法，不管是要在程序中加载超大图片，还是要加载大量图片，都不用担心OOM的问题了!不过仅仅是理论地介绍不知道大家能不能完全理解，在后面的文章中我会演示如何在实际程序中灵活运用上述技巧来避免程序OOM，感兴趣的朋友请继续阅读 <a href="http://www.qiuchengjia.cn/2016/09/29/Android%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/Android%E7%85%A7%E7%89%87%E5%A2%99%E5%BA%94%E7%94%A8%E5%AE%9E%E7%8E%B0%EF%BC%8C%E5%86%8D%E5%A4%9A%E7%9A%84%E5%9B%BE%E7%89%87%E4%B9%9F%E4%B8%8D%E6%80%95%E5%B4%A9%E6%BA%83/">Android照片墙应用实现，再多的图片也不怕崩溃</a></li>
</ul>
<h2 id="转载博客"><a href="#转载博客" class="headerlink" title="转载博客"></a>转载博客</h2><ul>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/9316683" target="_blank" rel="external">Android高效加载大图、多图解决方案，有效避免程序OOM</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;高效加载大图&quot;&gt;&lt;a href=&quot;#高效加载大图&quot; class=&quot;headerlink&quot; title=&quot;高效加载大图&quot;&gt;&lt;/a&gt;高效加载大图&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们在编写Android程序的时候经常要用到许多图片，不同图片总是会有不同的形状、不同的大小，但在大多数情况下，这些图片都会大于我们程序所需要的大小。比如说系统图片库里展示的图片大都是用手机摄像头拍出来的，这些图片的分辨率会比我们手机屏幕的分辨率高得多。大家应该知道，我们编写的应用程序都是有一定内存限制的，程序占用了过高的内存就容易出现OOM(OutOfMemory)异常。我们可以通过下面的代码看出每个应用程序最高可用内存是多少&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxMemory = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) (Runtime.getRuntime().maxMemory() / &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Log.d(&lt;span class=&quot;string&quot;&gt;&quot;TAG&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Max memory is &quot;&lt;/span&gt; + maxMemory + &lt;span class=&quot;string&quot;&gt;&quot;KB&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;因此在展示高分辨率图片的时候，最好先将图片进行压缩。压缩后的图片大小应该和用来展示它的控件大小相近，在一个很小的ImageView上显示一张超大的图片不会带来任何视觉上的好处，但却会占用我们相当多宝贵的内存，而且在性能上还可能会带来负面影响。下面我们就来看一看，如何对一张大图片进行适当的压缩，让它能够以最佳大小显示的同时，还能防止OOM的出现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BitmapFactory这个类提供了多个解析方法(decodeByteArray, decodeFile, decodeResource等)用于创建Bitmap对象，我们应该根据图片的来源选择合适的方法。比如SD卡中的图片可以使用decodeFile方法，网络上的图片可以使用decodeStream方法，资源文件中的图片可以使用decodeResource方法。这些方法会尝试为已经构建的bitmap分配内存，这时就会很容易导致OOM出现。为此每一种解析方法都提供了一个可选的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BitmapFactory.Options参数，将这个参数的inJustDecodeBounds属性设置为true就可以让解析方法禁止为bitmap分配内存，返回值也不再是一个Bitmap对象，而是null。虽然Bitmap是null了，但是BitmapFactory.Options的outWidth、outHeight和outMimeType属性都会被赋值。这个技巧让我们可以在加载图片之前就获取到图片的长宽值和MIME类型，从而根据情况对图片进行压缩。如下代码所示：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android进阶之路" scheme="http://www.qiuchengjia.cn/categories/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Android进阶之路" scheme="http://www.qiuchengjia.cn/tags/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title> Android ViewDragHelper完全解析 自定义ViewGroup神器</title>
    <link href="http://www.qiuchengjia.cn/2016/09/22/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/Android-ViewDragHelper%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90-%E8%87%AA%E5%AE%9A%E4%B9%89ViewGroup%E7%A5%9E%E5%99%A8/"/>
    <id>http://www.qiuchengjia.cn/2016/09/22/Android自定义控件/Android-ViewDragHelper完全解析-自定义ViewGroup神器/</id>
    <published>2016-09-21T16:57:22.000Z</published>
    <updated>2016-09-26T11:54:28.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><p>在自定义ViewGroup中，很多效果都包含用户手指去拖动其内部的某个View(eg:侧滑菜单等)，针对具体的需要去写好 <strong>onInterceptTouchEvent</strong> 和 <strong>onTouchEvent</strong> 这两个方法是一件很不容易的事，需要自己去处理：多手指的处理、加速度检测等等</p>
</li>
<li><p>好在官方在v4的支持包中提供了ViewDragHelper这样一个类来帮助我们方便的编写自定义ViewGroup。简单看一下它的注释：</p>
</li>
</ul>
<blockquote>
<p>ViewDragHelper is a utility class for writing custom ViewGroups. It offers a number<br>of useful operations and state tracking for allowing a user to drag and reposition<br>views within their parent ViewGroup.</p>
</blockquote>
<ul>
<li>本篇博客将重点介绍ViewDragHelper的使用，并且最终去实现一个类似DrawerLayout的一个自定义的ViewGroup。（ps:官方的DrawerLayout就是用此类实现）</li>
</ul>
<h2 id="入门小示例"><a href="#入门小示例" class="headerlink" title="入门小示例"></a>入门小示例</h2><p>首先我们通过一个简单的例子来看看其快捷的用法，分为以下几个步骤：</p>
<ol>
<li><p>创建实例</p>
</li>
<li><p>触摸相关的方法的调用</p>
</li>
<li><p>ViewDragHelper.Callback实例的编写</p>
</li>
</ol>
<a id="more"></a>
<h3 id="自定义ViewGroup"><a href="#自定义ViewGroup" class="headerlink" title="自定义ViewGroup"></a>自定义ViewGroup</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.support.v4.widget.ViewDragHelper;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.MotionEvent;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Description: 自定义ViewGroup</div><div class="line"> * Data：2016/9/21-12:20</div><div class="line"> * Blog：www.qiuchengjia.cn</div><div class="line"> * Author: qiu</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VDHLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> ViewDragHelper mDragger;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VDHLayout</span><span class="params">(Context context, AttributeSet attrs)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        mDragger = ViewDragHelper.create(<span class="keyword">this</span>, <span class="number">1.0f</span>, <span class="keyword">new</span> ViewDragHelper.Callback()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> left;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> top;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> mDragger.shouldInterceptTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span></span></div><div class="line">    &#123;</div><div class="line">        mDragger.processTouchEvent(event);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以看到，上面整个自定义ViewGroup的代码非常简洁，遵循上述3个步骤：</li>
</ul>
<h4 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a><strong>创建实例</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mDragger = ViewDragHelper.create(<span class="keyword">this</span>, <span class="number">1.0f</span>, <span class="keyword">new</span> ViewDragHelper.Callback()</div><div class="line">        &#123;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>创建实例需要3个参数，第一个就是当前的ViewGroup，第二个sensitivity，主要用于设置touchSlop:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">helper.mTouchSlop = (<span class="keyword">int</span>) (helper.mTouchSlop * (<span class="number">1</span> / sensitivity));</div></pre></td></tr></table></figure>
<ul>
<li>可见传入越大，mTouchSlop的值就会越小。第三个参数就是Callback，在用户的触摸过程中会回调相关方法，后面会细说</li>
</ul>
<h4 id="触摸相关方法"><a href="#触摸相关方法" class="headerlink" title="触摸相关方法"></a><strong>触摸相关方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> mDragger.shouldInterceptTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span></span></div><div class="line">    &#123;</div><div class="line">        mDragger.processTouchEvent(event);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>onInterceptTouchEvent中通过使用mDragger.shouldInterceptTouchEvent(event)来决定我们是否应该拦截当前的事件。onTouchEvent中通过mDragger.processTouchEvent(event)处理事件</li>
</ul>
<h4 id="实现ViewDragHelper-CallCack相关方法"><a href="#实现ViewDragHelper-CallCack相关方法" class="headerlink" title="实现ViewDragHelper.CallCack相关方法"></a><strong>实现ViewDragHelper.CallCack相关方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> ViewDragHelper.Callback()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> top;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>ViewDragHelper中拦截和处理事件时，需要会回调CallBack中的很多方法来决定一些事，比如：哪些子View可以移动、对个移动的View的边界的控制等等</li>
</ul>
<p><strong>上面复写的3个方法：</strong></p>
<ul>
<li><p>tryCaptureView如何返回ture则表示可以捕获该view，你可以根据传入的第一个view参数决定哪些可以捕获</p>
</li>
<li><p>clampViewPositionHorizontal,clampViewPositionVertical可以在该方法中对child移动的边界进行控制，left , top 分别为即将移动到的位置，比如横向的情况下，我希望只在ViewGroup的内部移动，即：最小&gt;=paddingleft，最大&lt;=ViewGroup.getWidth()-paddingright-child.getWidth。就可以按照如下代码编写：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span></span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> leftBound = getPaddingLeft();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> rightBound = getWidth() - child.getWidth() - leftBound;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> newLeft = Math.min(Math.max(left, leftBound), rightBound);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> newLeft;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>经过上述3个步骤，我们就完成了一个简单的自定义ViewGroup，可以自由的拖动子View</li>
</ul>
<h3 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">qiu.com.androidtest.VDHLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#44ff0000"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"I can be dragged !"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#7768F866"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"I can be dragged !"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#776D69FA"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"I can be dragged !"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">qiu.com.androidtest.VDHLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>我们的自定义ViewGroup中有三个TextView</p>
</li>
<li><p><strong>当前效果：</strong></p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android-ViewDragHelper%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90-%E8%87%AA%E5%AE%9A%E4%B9%89ViewGroup%E7%A5%9E%E5%99%A81.gif" alt=""></center>

<ul>
<li><p>可以看到短短数行代码就可以玩起来了</p>
</li>
<li><p>有了直观的认识以后，我们还需要对ViewDragHelper.CallBack里面的方法做下深入的理解。首先我们需要考虑的是：我们的ViewDragHelper不仅仅说只能够去让子View去跟随我们手指移动，我们继续往下学习其他的功能</p>
</li>
</ul>
<h2 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h2><p>ViewDragHelper还能做以下的一些操作：</p>
<ul>
<li><p>边界检测、加速度检测(eg：DrawerLayout边界触发拉出)</p>
</li>
<li><p>回调Drag Release（eg：DrawerLayout部分，手指抬起，自动展开/收缩）</p>
</li>
<li><p>移动到某个指定的位置(eg:点击Button，展开/关闭Drawerlayout)</p>
</li>
</ul>
<p>那么我们接下来对我们最基本的例子进行改造，包含上述的几个操作</p>
<ul>
<li>首先看一下我们修改后的效果：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android-ViewDragHelper%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90-%E8%87%AA%E5%AE%9A%E4%B9%89ViewGroup%E7%A5%9E%E5%99%A82.gif" alt=""></center>

<p>简单的为每个子View添加了不同的操作：</p>
<ul>
<li><p>第一个View，就是演示简单的移动 </p>
</li>
<li><p>第二个View，演示除了移动后，松手自动返回到原本的位置。（注意你拖动的越快，返回的越快） </p>
</li>
<li><p>第三个View，边界移动时对View进行捕获</p>
</li>
</ul>
<h3 id="修改后的代码"><a href="#修改后的代码" class="headerlink" title="修改后的代码"></a>修改后的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Point;</div><div class="line"><span class="keyword">import</span> android.support.v4.widget.ViewDragHelper;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.MotionEvent;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Description: 自定义ViewGroup</div><div class="line"> * Data：2016/9/21-12:20</div><div class="line"> * Blog：www.qiuchengjia.cn</div><div class="line"> * Author: qiu</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VDHLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> ViewDragHelper mDragger;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> View mDragView;</div><div class="line">    <span class="keyword">private</span> View mAutoBackView;</div><div class="line">    <span class="keyword">private</span> View mEdgeTrackerView;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Point mAutoBackOriginPos = <span class="keyword">new</span> Point();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VDHLayout</span><span class="params">(Context context, AttributeSet attrs)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        mDragger = ViewDragHelper.create(<span class="keyword">this</span>, <span class="number">1.0f</span>, <span class="keyword">new</span> ViewDragHelper.Callback()</div><div class="line">        &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">//mEdgeTrackerView禁止直接移动</span></div><div class="line">                <span class="keyword">return</span> child == mDragView || child == mAutoBackView;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> left;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> top;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="comment">//手指释放的时候回调</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewReleased</span><span class="params">(View releasedChild, <span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">//mAutoBackView手指释放时可以自动回去</span></div><div class="line">                <span class="keyword">if</span> (releasedChild == mAutoBackView)</div><div class="line">                &#123;</div><div class="line">                    mDragger.settleCapturedViewAt(mAutoBackOriginPos.x, mAutoBackOriginPos.y);</div><div class="line">                    invalidate();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//在边界拖动时回调</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEdgeDragStarted</span><span class="params">(<span class="keyword">int</span> edgeFlags, <span class="keyword">int</span> pointerId)</span></span></div><div class="line">            &#123;</div><div class="line">                mDragger.captureChildView(mEdgeTrackerView, pointerId);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        mDragger.setEdgeTrackingEnabled(ViewDragHelper.EDGE_LEFT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> mDragger.shouldInterceptTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span></span></div><div class="line">    &#123;</div><div class="line">        mDragger.processTouchEvent(event);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(mDragger.continueSettling(<span class="keyword">true</span>))</div><div class="line">        &#123;</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">super</span>.onLayout(changed, l, t, r, b);</div><div class="line"></div><div class="line">        mAutoBackOriginPos.x = mAutoBackView.getLeft();</div><div class="line">        mAutoBackOriginPos.y = mAutoBackView.getTop();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFinishInflate</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">super</span>.onFinishInflate();</div><div class="line"></div><div class="line">        mDragView = getChildAt(<span class="number">0</span>);</div><div class="line">        mAutoBackView = getChildAt(<span class="number">1</span>);</div><div class="line">        mEdgeTrackerView = getChildAt(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>布局文件我们仅仅是换了下文本和背景色就不重复贴了</li>
</ul>
<h3 id="修改代码注解"><a href="#修改代码注解" class="headerlink" title="修改代码注解"></a>修改代码注解</h3><ul>
<li><p>第一个View基本没做任何修改</p>
</li>
<li><p>第二个View，我们在onLayout之后保存了最开启的位置信息，最主要还是重写了Callback中的onViewReleased，我们在onViewReleased中判断如果是mAutoBackView则调用settleCapturedViewAt回到初始的位置。大家可以看到紧随其后的代码是invalidate();因为其内部使用的是mScroller.startScroll，所以别忘了需要invalidate()以及结合computeScroll方法一起</p>
</li>
<li><p>第三个View，我们在onEdgeDragStarted回调方法中，主动通过captureChildView对其进行捕获，该方法可以绕过tryCaptureView，所以我们的tryCaptureView虽然并为返回true，但却不影响。注意如果需要使用边界检测需要添加上mDragger.setEdgeTrackingEnabled(ViewDragHelper.EDGE_LEFT);</p>
</li>
</ul>
<h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><ul>
<li><p>到此，我们已经介绍了Callback中常用的回调方法了，当然还有一些方法没有介绍，接下来我们修改下我们的布局文件，我们把我们的TextView全部加上clickable=true，意思就是子View可以消耗事件。再次运行，你会发现本来可以拖动的View不动了，（如果有拿Button测试的兄弟应该已经发现这个问题了，我希望你看到这了，而不是已经提问了,哈）</p>
</li>
<li><p>原因是什么呢？主要是因为，如果子View不消耗事件，那么整个手势（DOWN-MOVE*-UP）都是直接进入onTouchEvent，在onTouchEvent的DOWN的时候就确定了captureView。如果消耗事件，那么就会先走onInterceptTouchEvent方法，判断是否可以捕获，而在判断的过程中会去判断另外两个回调的方法：getViewHorizontalDragRange和getViewVerticalDragRange，只有这两个方法返回大于0的值才能正常的捕获</p>
</li>
<li><p>所以，如果你用Button测试，或者给TextView添加了clickable = true ，都记得重写下面这两个方法：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewHorizontalDragRange</span><span class="params">(View child)</span></span></div><div class="line">&#123;</div><div class="line">     <span class="keyword">return</span> getMeasuredWidth()-child.getMeasuredWidth();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewVerticalDragRange</span><span class="params">(View child)</span></span></div><div class="line">&#123;</div><div class="line">     <span class="keyword">return</span> getMeasuredHeight()-child.getMeasuredHeight();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>方法的返回值应当是该childView横向或者纵向的移动的范围，当前如果只需要一个方向移动，可以只复写一个</li>
</ul>
<h3 id="所有的Callback方法"><a href="#所有的Callback方法" class="headerlink" title="所有的Callback方法"></a>所有的Callback方法</h3><p>到此，我们列一下所有的Callback方法，看看还有哪些没用过的：</p>
<ul>
<li><p>onViewDragStateChanged</p>
<blockquote>
<p>当ViewDragHelper状态发生变化时回调（IDLE,DRAGGING,SETTING[自动滚动时]）</p>
</blockquote>
</li>
<li><p>onViewPositionChanged</p>
<blockquote>
<p>当captureview的位置发生改变时回调</p>
</blockquote>
</li>
<li><p>onViewCaptured</p>
<blockquote>
<p>当captureview被捕获时回调</p>
</blockquote>
</li>
<li><p>onViewReleased 已用</p>
</li>
<li><p>onEdgeTouched</p>
<blockquote>
<p>当触摸到边界时回调</p>
</blockquote>
</li>
<li><p>onEdgeLock</p>
<blockquote>
<p>true的时候会锁住当前的边界，false则unLock</p>
</blockquote>
</li>
</ul>
<ul>
<li><p>onEdgeDragStarted 已用</p>
</li>
<li><p>getOrderedChildIndex</p>
<blockquote>
<p>改变同一个坐标（x,y）去寻找captureView位置的方法。（具体在：findTopChildUnder方法中）</p>
</blockquote>
</li>
<li><p>getViewHorizontalDragRange 已用</p>
</li>
<li><p>getViewVerticalDragRange 已用</p>
</li>
<li><p>tryCaptureView 已用</p>
</li>
<li><p>clampViewPositionHorizontal 已用</p>
</li>
<li><p>clampViewPositionVertical 已用</p>
</li>
<li><p>ok，至此所有的回调方法都有了一定的认识</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>总结下，方法的大致的回调顺序：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">shouldInterceptTouchEvent：</div><div class="line"></div><div class="line">DOWN:</div><div class="line">    getOrderedChildIndex(findTopChildUnder)</div><div class="line">    -&gt;onEdgeTouched</div><div class="line"></div><div class="line">MOVE:</div><div class="line">    getOrderedChildIndex(findTopChildUnder)</div><div class="line">    -&gt;getViewHorizontalDragRange &amp; </div><div class="line">      getViewVerticalDragRange(checkTouchSlop)(MOVE中可能不止一次)</div><div class="line">    -&gt;clampViewPositionHorizontal&amp;</div><div class="line">      clampViewPositionVertical</div><div class="line">    -&gt;onEdgeDragStarted</div><div class="line">    -&gt;tryCaptureView</div><div class="line">    -&gt;onViewCaptured</div><div class="line">    -&gt;onViewDragStateChanged</div><div class="line"></div><div class="line">processTouchEvent:</div><div class="line"></div><div class="line">DOWN:</div><div class="line">    getOrderedChildIndex(findTopChildUnder)</div><div class="line">    -&gt;tryCaptureView</div><div class="line">    -&gt;onViewCaptured</div><div class="line">    -&gt;onViewDragStateChanged</div><div class="line">    -&gt;onEdgeTouched</div><div class="line">MOVE:</div><div class="line">    -&gt;STATE==DRAGGING:dragTo</div><div class="line">    -&gt;STATE!=DRAGGING:</div><div class="line">        onEdgeDragStarted</div><div class="line">        -&gt;getOrderedChildIndex(findTopChildUnder)</div><div class="line">        -&gt;getViewHorizontalDragRange&amp;</div><div class="line">          getViewVerticalDragRange(checkTouchSlop)</div><div class="line">        -&gt;tryCaptureView</div><div class="line">        -&gt;onViewCaptured</div><div class="line">        -&gt;onViewDragStateChanged</div></pre></td></tr></table></figure>
<ul>
<li><p>ok，上述是正常情况下大致的流程，当然整个过程可能会存在很多判断不成立的情况</p>
</li>
<li><p>从上面也可以解释，我们在之前TextView(clickable=false)的情况下，没有编写getViewHorizontalDragRange方法时，是可以移动的。因为直接进入processTouchEvent的DOWN，然后就onViewCaptured、onViewDragStateChanged（进入DRAGGING状态），接下来MOVE就直接dragTo了</p>
</li>
<li><p>而当子View消耗事件的时候，就需要走shouldInterceptTouchEvent，MOVE的时候经过一系列的判断（getViewHorizontalDragRange，clampViewPositionVertical等），才能够去tryCaptureView</p>
</li>
</ul>
<h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><ul>
<li><a href="http://pan.baidu.com/s/1pLgvF2z" target="_blank" rel="external">源码下载</a></li>
</ul>
<h2 id="转载博客"><a href="#转载博客" class="headerlink" title="转载博客"></a>转载博客</h2><ul>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/46858663" target="_blank" rel="external">Android ViewDragHelper完全解析 自定义ViewGroup神器</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在自定义ViewGroup中，很多效果都包含用户手指去拖动其内部的某个View(eg:侧滑菜单等)，针对具体的需要去写好 &lt;strong&gt;onInterceptTouchEvent&lt;/strong&gt; 和 &lt;strong&gt;onTouchEvent&lt;/strong&gt; 这两个方法是一件很不容易的事，需要自己去处理：多手指的处理、加速度检测等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;好在官方在v4的支持包中提供了ViewDragHelper这样一个类来帮助我们方便的编写自定义ViewGroup。简单看一下它的注释：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ViewDragHelper is a utility class for writing custom ViewGroups. It offers a number&lt;br&gt;of useful operations and state tracking for allowing a user to drag and reposition&lt;br&gt;views within their parent ViewGroup.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本篇博客将重点介绍ViewDragHelper的使用，并且最终去实现一个类似DrawerLayout的一个自定义的ViewGroup。（ps:官方的DrawerLayout就是用此类实现）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;入门小示例&quot;&gt;&lt;a href=&quot;#入门小示例&quot; class=&quot;headerlink&quot; title=&quot;入门小示例&quot;&gt;&lt;/a&gt;入门小示例&lt;/h2&gt;&lt;p&gt;首先我们通过一个简单的例子来看看其快捷的用法，分为以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建实例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;触摸相关的方法的调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ViewDragHelper.Callback实例的编写&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android自定义控件" scheme="http://www.qiuchengjia.cn/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
    
      <category term="Android自定义控件" scheme="http://www.qiuchengjia.cn/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android美女拼图游戏</title>
    <link href="http://www.qiuchengjia.cn/2016/09/13/Android%E6%B8%B8%E6%88%8F/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8F/"/>
    <id>http://www.qiuchengjia.cn/2016/09/13/Android游戏/Android美女拼图游戏/</id>
    <published>2016-09-12T19:35:17.000Z</published>
    <updated>2016-09-26T11:54:28.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><p><a href="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE.apk" target="_blank" rel="external">游戏下载试玩</a></p>
</li>
<li><p><a href="https://github.com/qiuchengjia/Android-BeautyGame" target="_blank" rel="external">Github</a> 喜欢的同学可以Star一下，非常感谢</p>
</li>
<li><p>把图片切分很多份，点击交换拼成一张完整的；这样关卡也很容易设计，3<em>3；4</em>4；5<em>5；6</em>6；一直下去</p>
</li>
<li><p>效果</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE1.gif" alt=""></center>

<ul>
<li>加了个切换动画，效果还是不错的，其实游戏就是自定义了一个控件，下面我们开始自定义之旅</li>
</ul>
<a id="more"></a>
<h2 id="游戏的设计"><a href="#游戏的设计" class="headerlink" title="游戏的设计"></a>游戏的设计</h2><p>首先我们分析下如何设计这款游戏：</p>
<ol>
<li><p>我们需要一个容器，可以放这些图片的块块，为了方便，我们准备使用RelativeLayout配合addRule实现</p>
</li>
<li><p>每个图片的块块，我们准备使用ImageView</p>
</li>
<li><p>点击交换，我们准备使用传统的TranslationAnimation来实现</p>
</li>
</ol>
<p>有了初步的设计，感觉这游戏so easy~</p>
<h2 id="游戏布局的实现"><a href="#游戏布局的实现" class="headerlink" title="游戏布局的实现"></a>游戏布局的实现</h2><p>首先，我们准备实现能够把一张图片，切成n*n份，放在指定的位置；<br>我们只需要设置n这个数字，然后根据布局的宽或者高其中的小值，除以n，减去一些边距就可以得到我们ImageView的宽和高了~~</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line">     * 设置Item的数量n*n；默认为3 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColumn = <span class="number">3</span>;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 布局的宽度 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 布局的padding </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPadding;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 存放所有的Item </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> ImageView[] mGamePintuItems;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * Item的宽度 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mItemWidth;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * Item横向与纵向的边距 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMargin = <span class="number">3</span>;  </div><div class="line">      </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 拼图的图片 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> Bitmap mBitmap;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 存放切完以后的图片bean </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> List&lt;ImagePiece&gt; mItemBitmaps;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> once;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePintuLayout</span><span class="params">(Context context)</span>  </span>&#123;  </div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePintuLayout</span><span class="params">(Context context, AttributeSet attrs)</span>  </span>&#123;  </div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">     * 构造函数，用来初始化</div><div class="line">     * <span class="doctag">@param</span> context  the context</div><div class="line">     * <span class="doctag">@param</span> attrs    the attrs</div><div class="line">     * <span class="doctag">@param</span> defStyle the def style</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePintuLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span>  </span>&#123;  </div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);  </div><div class="line">  </div><div class="line">   <span class="comment">//把设置的margin值转换为dp</span></div><div class="line">        mMargin = (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,  </div><div class="line">                mMargin, getResources().getDisplayMetrics());  </div><div class="line">        <span class="comment">// 设置Layout的内边距，四边一致，设置为四内边距中的最小值  </span></div><div class="line">        mPadding = min(getPaddingLeft(), getPaddingTop(), getPaddingRight(),  </div><div class="line">                getPaddingBottom());  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>构造方法里面，我们得到把设置的margin值转化为dp；获得布局的padding值；整体是个正方形，所以我们取padding四个方向中的最小值；<br>至于margin，作为Item之间的横向与纵向的间距，你喜欢的话可以抽取为自定义属性~~</li>
</ul>
<h3 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 用来设置设置自定义的View的宽高，</div><div class="line">     * <span class="doctag">@param</span> widthMeasureSpec  the width measure spec</div><div class="line">     * <span class="doctag">@param</span> heightMeasureSpec the height measure spec</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">     */</div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span>  </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);  </div><div class="line">      </div><div class="line">        <span class="comment">// 获得游戏布局的边长  </span></div><div class="line">        mWidth = Math.min(getMeasuredHeight(), getMeasuredWidth());  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (!once)  &#123;  </div><div class="line">            initBitmap();  </div><div class="line">            initItem();  </div><div class="line">        &#125;  </div><div class="line">        once = <span class="keyword">true</span>;  </div><div class="line">        setMeasuredDimension(mWidth, mWidth);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>onMeasure里面主要就是获得到布局的宽度，然后进行图片的准备，以及初始化我们的Item，为Item设置宽度和高度</p>
</li>
<li><p>initBitmap自然就是准备图片了：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 初始化bitmap</div><div class="line">  * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initBitmap</span><span class="params">()</span>  </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (mBitmap == <span class="keyword">null</span>)  </div><div class="line">            mBitmap = BitmapFactory.decodeResource(getResources(),  </div><div class="line">                    R.drawable.aa);  </div><div class="line">  </div><div class="line">        mItemBitmaps = ImageSplitter.split(mBitmap, mColumn);  </div><div class="line">  </div><div class="line">   <span class="comment">//对图片进行排序</span></div><div class="line">        Collections.sort(mItemBitmaps, <span class="keyword">new</span> Comparator&lt;ImagePiece&gt;()&#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ImagePiece lhs, ImagePiece rhs)</span></span>&#123;  </div><div class="line">            <span class="comment">//我们使用random随机比较大小</span></div><div class="line">                <span class="keyword">return</span> Math.random() &gt; <span class="number">0.5</span> ? <span class="number">1</span> : -<span class="number">1</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>我们这里如果没有设置mBitmap就准备一张备用图片，然后调用ImageSplitter.split将图片切成n * n 返回一个List<imagepiece><br>切完以后，我们需要将顺序打乱，所以我们调用了sort方法，至于比较器，我们使用random随机比较大小，这样我们就完成了我们的乱序操作，赞不赞~~</imagepiece></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Description: 图片切片类</div><div class="line"> * Data：2016/9/11-19:53</div><div class="line"> * Blog：www.qiuchengjia.cn</div><div class="line"> * Author: qiu</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageSplitter</span>  </span>&#123;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 将图片切成 , piece *piece </div><div class="line">     * <span class="doctag">@param</span> bitmap </div><div class="line">     * <span class="doctag">@param</span> piece </div><div class="line">     * <span class="doctag">@return</span> </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;ImagePiece&gt; <span class="title">split</span><span class="params">(Bitmap bitmap, <span class="keyword">int</span> piece)</span></span>&#123;  </div><div class="line">  </div><div class="line">        List&lt;ImagePiece&gt; pieces = <span class="keyword">new</span> ArrayList&lt;ImagePiece&gt;(piece * piece);  </div><div class="line">  </div><div class="line">        <span class="keyword">int</span> width = bitmap.getWidth();  </div><div class="line">        <span class="keyword">int</span> height = bitmap.getHeight();  </div><div class="line">  </div><div class="line">        Log.e(<span class="string">"TAG"</span>, <span class="string">"bitmap Width = "</span> + width + <span class="string">" , height = "</span> + height);  </div><div class="line">        <span class="keyword">int</span> pieceWidth = Math.min(width, height) / piece;  </div><div class="line">  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; piece; i++)&#123;  </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; piece; j++)&#123;  </div><div class="line">                ImagePiece imagePiece = <span class="keyword">new</span> ImagePiece();  </div><div class="line">                imagePiece.index = j + i * piece;  </div><div class="line">                <span class="keyword">int</span> xValue = j * pieceWidth;  </div><div class="line">                <span class="keyword">int</span> yValue = i * pieceWidth;  </div><div class="line">                  </div><div class="line">                imagePiece.bitmap = Bitmap.createBitmap(bitmap, xValue, yValue,  </div><div class="line">                        pieceWidth, pieceWidth);  </div><div class="line">                pieces.add(imagePiece);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> pieces;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Description: 图片bean</div><div class="line"> * Data：2016/9/11-19:54</div><div class="line"> * Blog：www.qiuchengjia.cn</div><div class="line"> * Author: qiu</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImagePiece</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> index = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">public</span> Bitmap bitmap = <span class="keyword">null</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>没撒说的就是一个根据宽度高度，和n，来切图保存的过程~~<br>ImagePiece保存的图片以及索引，话说这两个类还是我无意中在网上发现的~~<br>图片到此就准备好了，现在看Item的生成已经设置宽高，即initItems</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line">   * 初始化每一个item</div><div class="line">   * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">   */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initItem</span><span class="params">()</span>  </span>&#123;  </div><div class="line">        <span class="comment">// 获得Item的宽度  </span></div><div class="line">        <span class="keyword">int</span> childWidth = (mWidth - mPadding * <span class="number">2</span> - mMargin * </div><div class="line">        (mColumn - <span class="number">1</span>)) / mColumn;  </div><div class="line">        mItemWidth = childWidth;  </div><div class="line">  </div><div class="line">        mGamePintuItems = <span class="keyword">new</span> ImageView[mColumn * mColumn];  </div><div class="line">        <span class="comment">// 放置Item  </span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mGamePintuItems.length; i++) &#123;  </div><div class="line">            ImageView item = <span class="keyword">new</span> ImageView(getContext());  </div><div class="line">  </div><div class="line">            item.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">  </div><div class="line">            item.setImageBitmap(mItemBitmaps.get(i).bitmap);  </div><div class="line">            mGamePintuItems[i] = item;  </div><div class="line">            item.setId(i + <span class="number">1</span>);  </div><div class="line">            item.setTag(i + <span class="string">"_"</span> + mItemBitmaps.get(i).index);  </div><div class="line">  </div><div class="line">            RelativeLayout.LayoutParams lp =</div><div class="line">                <span class="keyword">new</span> LayoutParams(mItemWidth,  </div><div class="line">                    mItemWidth);  </div><div class="line">            <span class="comment">// 设置横向边距,不是最后一列  </span></div><div class="line">            <span class="keyword">if</span> ((i + <span class="number">1</span>) % mColumn != <span class="number">0</span>)  &#123;  </div><div class="line">                lp.rightMargin = mMargin;  </div><div class="line">            &#125;  </div><div class="line">            <span class="comment">// 如果不是第一列  </span></div><div class="line">            <span class="keyword">if</span> (i % mColumn != <span class="number">0</span>)  &#123;  </div><div class="line">                lp.addRule(RelativeLayout.RIGHT_OF,<span class="comment">//  </span></div><div class="line">                        mGamePintuItems[i - <span class="number">1</span>].getId());  </div><div class="line">            &#125;  </div><div class="line">            <span class="comment">// 如果不是第一行，//设置纵向边距，非最后一行  </span></div><div class="line">            <span class="keyword">if</span> ((i + <span class="number">1</span>) &gt; mColumn)  &#123;  </div><div class="line">                lp.topMargin = mMargin;  </div><div class="line">                lp.addRule(RelativeLayout.BELOW,<span class="comment">//  </span></div><div class="line">                        mGamePintuItems[i - mColumn].getId());  </div><div class="line">            &#125;  </div><div class="line">            addView(item, lp);  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以看到我们的Item宽的计算：childWidth = (mWidth - mPadding <em> 2 - mMargin </em> (mColumn - 1) ) / mColumn;<br>容器的宽度，除去自己的内边距，除去Item间的间距，然后除以Item一行的个数就得到了Item的宽~~<br>接下来，就是遍历生成Item，根据他们的位置设置Rule，自己仔细看下注释~~</li>
</ul>
<p><strong>注意两点：</strong></p>
<ul>
<li><p>我们为Item设置了setOnClickListener，这个当然，因为我们的游戏就是点Item么~</p>
</li>
<li><p>还有我们为Item设置了Tag：item.setTag(i + “_” + mItemBitmaps.get(i).index);<br>tag里面存放了index，也就是正确的位置；还有i，i 可以帮助我们在mItemBitmaps找到当前的Item的图片：（mItemBitmaps.get(i).bitmap）</p>
</li>
<li><p>到此，我们游戏的布局的代码就结束了~~~</p>
</li>
<li><p>然后我们在布局文件里面声明下：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">game.qiu.com.beautygame.GamePintuLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_gameview"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:padding</span>=<span class="string">"5dp"</span> &gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">game.qiu.com.beautygame.GamePintuLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>Activity里面记得设置这个布局~~</p>
</li>
<li><p>现在的效果是：</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE5.png" alt=""></center>


<h2 id="游戏的切换效果"><a href="#游戏的切换效果" class="headerlink" title="游戏的切换效果"></a>游戏的切换效果</h2><h3 id="初步的切换"><a href="#初步的切换" class="headerlink" title="初步的切换"></a>初步的切换</h3><ul>
<li>还记得我们都给Item添加了onClick的监听么~~<br>现在我们需要实现，点击两个Item，他们的图片能够发生交换~<br>那么，我们需要两个成员变量来存储这两个Item，然后再去交换</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 记录第一次点击的ImageView</div><div class="line">  */</div><div class="line"><span class="keyword">private</span> ImageView mFirst;  </div><div class="line"><span class="comment">/**</span></div><div class="line">  * 记录第二次点击的ImageView</div><div class="line">  */</div><div class="line"><span class="keyword">private</span> ImageView mSecond;  </div><div class="line"><span class="comment">/**</span></div><div class="line">  * 点击事件</div><div class="line">  * <span class="doctag">@param</span> view the view</div><div class="line">  * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">  */  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span>  </span>&#123;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 如果两次点击是同一个 </div><div class="line">     */  </div><div class="line">    <span class="keyword">if</span> (mFirst == v)  &#123;  </div><div class="line">        mFirst.setColorFilter(<span class="keyword">null</span>);  </div><div class="line">        mFirst = <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">return</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//点击第一个Item  </span></div><div class="line">    <span class="keyword">if</span> (mFirst == <span class="keyword">null</span>)  &#123;  </div><div class="line">        mFirst = (ImageView) v;  </div><div class="line">        mFirst.setColorFilter(Color.parseColor(<span class="string">"#55FF0000"</span>));  </div><div class="line">    &#125; <span class="keyword">else</span><span class="comment">//点击第二个Item  </span></div><div class="line">    &#123;  </div><div class="line">        mSecond = (ImageView) v;  </div><div class="line">        exchangeView();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>点击第一个，通过setColorFilter设置下选中效果，再次点击另一个，那我们就准备调用exchangeView进行交换图片了，当然这个方法我们还没写，先放着~<br>如果两次点击同一个，去除选中效果，我们就当什么都没发生</p>
</li>
<li><p>接下来，我们来实现exchangeView：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 交换两个Item图片 </div><div class="line">  * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exchangeView</span><span class="params">()</span>  </span>&#123;  </div><div class="line">                </div><div class="line">        mFirst.setColorFilter(<span class="keyword">null</span>);  </div><div class="line">        String firstTag = (String) mFirst.getTag();  </div><div class="line">        String secondTag = (String) mSecond.getTag();  </div><div class="line">          </div><div class="line">        <span class="comment">//得到在list中索引位置  </span></div><div class="line">        String[] firstImageIndex = firstTag.split(<span class="string">"_"</span>);  </div><div class="line">        String[] secondImageIndex = secondTag.split(<span class="string">"_"</span>);  </div><div class="line">          </div><div class="line">        mFirst.setImageBitmap(mItemBitmaps.get(Integer  </div><div class="line">                .parseInt(secondImageIndex[<span class="number">0</span>])).bitmap);  </div><div class="line">        mSecond.setImageBitmap(mItemBitmaps.get(Integer  </div><div class="line">                .parseInt(firstImageIndex[<span class="number">0</span>])).bitmap);  </div><div class="line">  </div><div class="line">        mFirst.setTag(secondTag);  </div><div class="line">        mSecond.setTag(firstTag);  </div><div class="line">          </div><div class="line">        mFirst = mSecond = <span class="keyword">null</span>;  </div><div class="line">  </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>应该还记得我们之前的setTag吧，忘了，返回去看看，我们还说注意来着~<br>通过getTag，拿到在List中是索引，然后得到bitmap进行交换设置，最后交换tag；<br>到此我们的交换效果写完了，我们的游戏可以完了~~效果是这样的：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE3.gif" alt=""></center>

<ul>
<li>可以看到我们已经可以玩了，至于为什么不用清爽的风景图，是因为，实在是看不出来那块对那块，还是妹子直观~<br>大家肯定会吐槽，我擦，动画切换呢，明明不是两个飞过去交换位置么，尼玛这算什么<br>也是，对与程序我们要有追求，下面我们来添加动画切换效果~~</li>
</ul>
<h3 id="无缝的动画切换"><a href="#无缝的动画切换" class="headerlink" title="无缝的动画切换"></a>无缝的动画切换</h3><ul>
<li>我们先聊聊怎么添加，我准备使用TranslationAnimation，然后两个Item的top，left也很容器获取；<br>但是，要明白，我们实际上，Item只是setImage发生了变化，Item的位置没有变；<br>我们现在需要动画移动效果，比如A移动到B，没问题，移动完成以后，Item得回去吧，但是图片并没有发生变化，我们还是需要手动setImage<br>这样造成了一个现象，动画切换效果有了，但是最后还是会有一闪，是我们切换图片造成的；<br>为了避免上述现象，能够完美的做到切换效果，这里我们引入一个动画图层，专门做动画效果，有点类似ps的图层，下面看我们怎么做；</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line">  * 动画运行的标志位 </div><div class="line">  */  </div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isAniming;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  * 动画层 </div><div class="line">  */  </div><div class="line"><span class="keyword">private</span> RelativeLayout mAnimLayout;  </div><div class="line">      </div><div class="line"><span class="comment">/**</span></div><div class="line">  * 交换两个Item图片</div><div class="line">  * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exchangeView</span><span class="params">()</span></span>&#123;  </div><div class="line">        mFirst.setColorFilter(<span class="keyword">null</span>);  </div><div class="line">        setUpAnimLayout();  </div><div class="line">        <span class="comment">// 添加FirstView  </span></div><div class="line">        ImageView first = <span class="keyword">new</span> ImageView(getContext());  </div><div class="line">        first.setImageBitmap(mItemBitmaps  </div><div class="line">                .get(getImageIndexByTag((String) mFirst.getTag())).bitmap);  </div><div class="line">        LayoutParams lp = <span class="keyword">new</span> LayoutParams(mItemWidth, mItemWidth);  </div><div class="line">        lp.leftMargin = mFirst.getLeft() - mPadding;  </div><div class="line">        lp.topMargin = mFirst.getTop() - mPadding;  </div><div class="line">        first.setLayoutParams(lp);  </div><div class="line">        mAnimLayout.addView(first);  </div><div class="line">        <span class="comment">// 添加SecondView  </span></div><div class="line">        ImageView second = <span class="keyword">new</span> ImageView(getContext());  </div><div class="line">        second.setImageBitmap(mItemBitmaps  </div><div class="line">                .get(getImageIndexByTag((String) mSecond.getTag())).bitmap);  </div><div class="line">        LayoutParams lp2 = <span class="keyword">new</span> LayoutParams(mItemWidth, mItemWidth);  </div><div class="line">        lp2.leftMargin = mSecond.getLeft() - mPadding;  </div><div class="line">        lp2.topMargin = mSecond.getTop() - mPadding;  </div><div class="line">        second.setLayoutParams(lp2);  </div><div class="line">        mAnimLayout.addView(second);  </div><div class="line">  </div><div class="line">        <span class="comment">// 设置动画  </span></div><div class="line">        TranslateAnimation anim = <span class="keyword">new</span> TranslateAnimation(<span class="number">0</span>, mSecond.getLeft()  </div><div class="line">                - mFirst.getLeft(), <span class="number">0</span>, mSecond.getTop() - mFirst.getTop());  </div><div class="line">        anim.setDuration(<span class="number">300</span>);  </div><div class="line">        anim.setFillAfter(<span class="keyword">true</span>);  </div><div class="line">        first.startAnimation(anim);  </div><div class="line">  </div><div class="line">        TranslateAnimation animSecond = <span class="keyword">new</span> TranslateAnimation(<span class="number">0</span>,  </div><div class="line">                mFirst.getLeft() - mSecond.getLeft(), <span class="number">0</span>, mFirst.getTop()  </div><div class="line">                        - mSecond.getTop());  </div><div class="line">        animSecond.setDuration(<span class="number">300</span>);  </div><div class="line">        animSecond.setFillAfter(<span class="keyword">true</span>);  </div><div class="line">        second.startAnimation(animSecond);  </div><div class="line">        <span class="comment">// 添加动画监听  </span></div><div class="line">        anim.setAnimationListener(<span class="keyword">new</span> AnimationListener()&#123;  </div><div class="line">  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animation animation)</span></span>&#123;  </div><div class="line">                isAniming = <span class="keyword">true</span>;  </div><div class="line">                mFirst.setVisibility(INVISIBLE);  </div><div class="line">                mSecond.setVisibility(INVISIBLE);  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animation animation)</span></span>&#123;  </div><div class="line">  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animation animation)</span></span>&#123;  </div><div class="line">                String firstTag = (String) mFirst.getTag();  </div><div class="line">                String secondTag = (String) mSecond.getTag();  </div><div class="line">  </div><div class="line">                String[] firstParams = firstTag.split(<span class="string">"_"</span>);  </div><div class="line">                String[] secondParams = secondTag.split(<span class="string">"_"</span>);  </div><div class="line">  </div><div class="line">                mFirst.setImageBitmap(mItemBitmaps.get(Integer  </div><div class="line">                        .parseInt(secondParams[<span class="number">0</span>])).bitmap);  </div><div class="line">                mSecond.setImageBitmap(mItemBitmaps.get(Integer  </div><div class="line">                        .parseInt(firstParams[<span class="number">0</span>])).bitmap);  </div><div class="line">  </div><div class="line">                mFirst.setTag(secondTag);  </div><div class="line">                mSecond.setTag(firstTag);  </div><div class="line">                mFirst.setVisibility(VISIBLE);  </div><div class="line">                mSecond.setVisibility(VISIBLE);  </div><div class="line">                mFirst = mSecond = <span class="keyword">null</span>;  </div><div class="line">                mAnimLayout.removeAllViews();  </div><div class="line">                                <span class="comment">//checkSuccess();  </span></div><div class="line">                isAniming = <span class="keyword">false</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 创建动画层 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setUpAnimLayout</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">if</span> (mAnimLayout == <span class="keyword">null</span>)&#123;  </div><div class="line">            mAnimLayout = <span class="keyword">new</span> RelativeLayout(getContext());  </div><div class="line">            addView(mAnimLayout);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getImageIndexByTag</span><span class="params">(String tag)</span></span>&#123;  </div><div class="line">        String[] split = tag.split(<span class="string">"_"</span>);  </div><div class="line">        <span class="keyword">return</span> Integer.parseInt(split[<span class="number">0</span>]);  </div><div class="line">  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>开始交换时，我们创建一个动画层，然后在这一层上添加上两个一模一样的Item，把原来的Item隐藏了，然后尽情的进行动画切换，setFillAfter为true~<br>动画完毕，我们已经悄悄的把Item的图片交换了，直接显示出来。这样就完美的切换了：</li>
</ul>
<p><strong>大致过程：</strong></p>
<ol>
<li><p>A ，B隐藏 </p>
</li>
<li><p>A副本动画移动到B的位置；B副本移动到A的位置</p>
</li>
<li><p>A把图片设置为B，把B副本移除，A显示，这样就完美切合了，用户感觉是B移动过去的</p>
</li>
<li><p>B同上</p>
</li>
</ol>
<ul>
<li>现在我们的效果：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE6.gif" alt=""></center>

<ul>
<li>现在效果满意了把~~为了防止用户狂点，在onClick里面添加一句：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="comment">// 如果正在执行动画，则屏蔽  </span></div><div class="line">        <span class="keyword">if</span> (isAniming)  </div><div class="line">            <span class="keyword">return</span>;</div></pre></td></tr></table></figure>
<ul>
<li>到此我们的动画的切换，已经完美结束了~~<br>切换时，我们是不是应该判断是否成功了~~</li>
</ul>
<h2 id="游戏胜利的判断"><a href="#游戏胜利的判断" class="headerlink" title="游戏胜利的判断"></a>游戏胜利的判断</h2><ul>
<li>我们在切换完成，进行checkSuccess();的判断；好在我们把图片的正确的顺序存在tag里面~~</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 用来判断游戏是否成功</div><div class="line">  * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkSuccess</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">boolean</span> isSuccess = <span class="keyword">true</span>;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mGamePintuItems.length; i++)&#123;  </div><div class="line">            ImageView first = mGamePintuItems[i];  </div><div class="line">            Log.e(<span class="string">"TAG"</span>, getIndexByTag((String) first.getTag()) + <span class="string">""</span>);  </div><div class="line">            <span class="keyword">if</span> (getIndexByTag((String) first.getTag()) != i)&#123;  </div><div class="line">                isSuccess = <span class="keyword">false</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (isSuccess)&#123;  </div><div class="line">            Toast.makeText(getContext(), <span class="string">"Success , Level Up !"</span>,  </div><div class="line">                    Toast.LENGTH_LONG).show();  </div><div class="line">            <span class="comment">// nextLevel();  </span></div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 获得图片的真正索引 </div><div class="line">     * <span class="doctag">@param</span> tag </div><div class="line">     * <span class="doctag">@return</span> </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getIndexByTag</span><span class="params">(String tag)</span></span>&#123;  </div><div class="line">        String[] split = tag.split(<span class="string">"_"</span>);  </div><div class="line">        <span class="keyword">return</span> Integer.parseInt(split[<span class="number">1</span>]);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>很简单，遍历所有的Item，根据Tag拿到真正的索引和当然顺序比较，完全一致则胜利~~胜利以后进入下一关</p>
</li>
<li><p>至于下一关的代码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextLevel</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.removeAllViews();  </div><div class="line">        mAnimLayout = <span class="keyword">null</span>;  </div><div class="line">        mColumn++;  </div><div class="line">        initBitmap();  </div><div class="line">        initItem();  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>ok，到此我们的游戏结束了，我来带大家闯个关：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE7.gif" alt=""></center>

<h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><ul>
<li><a href="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%B8%B8%E6%88%8F-BeautyGame.zip" target="_blank" rel="external">传送门</a></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/40595385" target="_blank" rel="external">Android 实战美女拼图游戏 你能坚持到第几关</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE.apk&quot;&gt;游戏下载试玩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/qiuchengjia/Android-BeautyGame&quot;&gt;Github&lt;/a&gt; 喜欢的同学可以Star一下，非常感谢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把图片切分很多份，点击交换拼成一张完整的；这样关卡也很容易设计，3&lt;em&gt;3；4&lt;/em&gt;4；5&lt;em&gt;5；6&lt;/em&gt;6；一直下去&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;效果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE1.gif&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;加了个切换动画，效果还是不错的，其实游戏就是自定义了一个控件，下面我们开始自定义之旅&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android游戏" scheme="http://www.qiuchengjia.cn/categories/Android%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="Android游戏" scheme="http://www.qiuchengjia.cn/tags/Android%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android Broadcast广播机制分析</title>
    <link href="http://www.qiuchengjia.cn/2016/09/12/Android/Android-Broadcast%E5%B9%BF%E6%92%AD%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/"/>
    <id>http://www.qiuchengjia.cn/2016/09/12/Android/Android-Broadcast广播机制分析/</id>
    <published>2016-09-11T19:06:46.000Z</published>
    <updated>2016-09-26T11:54:28.089Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>基于Android 6.0的源码剖析， 分析android广播的发送与接收流程</p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>广播(Broadcast)机制用于进程/线程间通信，广播分为广播发送和广播接收两个过程，其中广播接收者BroadcastReceiver便是Android四大组件之一</p>
<p><strong>BroadcastReceiver分为两类：</strong></p>
<ul>
<li><p>静态广播接收者：通过AndroidManifest.xml的标签来申明的BroadcastReceiver</p>
</li>
<li><p>动态广播接收者：通过AMS.registerReceiver()方式注册的BroadcastReceiver，动态注册更为灵活，可在不需要时通过unregisterReceiver()取消注册</p>
</li>
</ul>
<p><strong>从广播发送方式可分为三类：</strong></p>
<ul>
<li><p>普通广播：通过Context.sendBroadcast()发送，可并行处理</p>
</li>
<li><p>有序广播：通过Context.sendOrderedBroadcast()发送，串行处理</p>
</li>
<li><p>Sticky广播：通过Context.sendStickyBroadcast()发送</p>
</li>
</ul>
<h2 id="注册广播"><a href="#注册广播" class="headerlink" title="注册广播"></a>注册广播</h2><h3 id="registerReceiver"><a href="#registerReceiver" class="headerlink" title="registerReceiver"></a>registerReceiver</h3><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;基于Android 6.0的源码剖析， 分析android广播的发送与接收流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;广播(Broadcast)机制用于进程/线程间通信，广播分为广播发送和广播接收两个过程，其中广播接收者BroadcastReceiver便是Android四大组件之一&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BroadcastReceiver分为两类：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态广播接收者：通过AndroidManifest.xml的标签来申明的BroadcastReceiver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态广播接收者：通过AMS.registerReceiver()方式注册的BroadcastReceiver，动态注册更为灵活，可在不需要时通过unregisterReceiver()取消注册&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;从广播发送方式可分为三类：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;普通广播：通过Context.sendBroadcast()发送，可并行处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有序广播：通过Context.sendOrderedBroadcast()发送，串行处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sticky广播：通过Context.sendStickyBroadcast()发送&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;注册广播&quot;&gt;&lt;a href=&quot;#注册广播&quot; class=&quot;headerlink&quot; title=&quot;注册广播&quot;&gt;&lt;/a&gt;注册广播&lt;/h2&gt;&lt;h3 id=&quot;registerReceiver&quot;&gt;&lt;a href=&quot;#registerReceiver&quot; class=&quot;headerlink&quot; title=&quot;registerReceiver&quot;&gt;&lt;/a&gt;registerReceiver&lt;/h3&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Service完全解析</title>
    <link href="http://www.qiuchengjia.cn/2016/09/12/Android/Android-Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.qiuchengjia.cn/2016/09/12/Android/Android-Service完全解析/</id>
    <published>2016-09-11T17:18:03.000Z</published>
    <updated>2016-09-26T11:54:28.093Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Service 是一个可以在后台执行长时间运行操作而不使用用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行</li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul>
<li>官方图解 </li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%901.png" alt=""></center>


<a id="more"></a>
<h3 id="onStartCommand"><a href="#onStartCommand" class="headerlink" title="onStartCommand()"></a>onStartCommand()</h3><ul>
<li>当另一个组件（如 Activity）通过调用 startService() 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 stopSelf() 或 stopService() 来停止服务。（如果您只想提供绑定，则无需实现此方法。）</li>
</ul>
<h3 id="onBind"><a href="#onBind" class="headerlink" title="onBind()"></a>onBind()</h3><ul>
<li>当另一个组件想通过调用 bindService() 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 IBinder 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 null</li>
</ul>
<h3 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate()"></a>onCreate()</h3><ul>
<li>首次创建服务时，系统将调用此方法来执行一次性设置程序（在调用 onStartCommand() 或 onBind() 之前）。如果服务已在运行，则不会调用此方法</li>
</ul>
<h3 id="onDestroy"><a href="#onDestroy" class="headerlink" title="onDestroy()"></a>onDestroy()</h3><ul>
<li>当服务不再使用且将被销毁时，系统将调用此方法。服务应该实现此方法来清理所有资源，如线程、注册的侦听器、接收器等。 这是服务接收的最后一个调用</li>
</ul>
<h2 id="Service的基本用法"><a href="#Service的基本用法" class="headerlink" title="Service的基本用法"></a>Service的基本用法</h2><ul>
<li><p>关于Service最基本的用法自然就是如何启动一个Service了，启动Service的方法和启动Activity很类似，都需要借助Intent来实现，下面我们就通过一个具体的例子来看一下</p>
</li>
<li><p>新建一个Android项目，项目名就叫ServiceTest，这里我选择使用4.0的API</p>
</li>
<li><p>然后新建一个MyService继承自Service，并重写父类的onCreate()、onStartCommand()和onDestroy()方法，如下所示：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyService"</span>;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate();  </div><div class="line">        Log.d(TAG, <span class="string">"onCreate() executed"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;  </div><div class="line">        Log.d(TAG, <span class="string">"onStartCommand() executed"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        Log.d(TAG, <span class="string">"onDestroy() executed"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以看到，我们只是在onCreate()、onStartCommand()和onDestroy()方法中分别打印了一句话，并没有进行其它任何的操作。<br>然后打开或新建activity_main.xml作为程序的主布局文件，代码如下所示：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"  </div><div class="line">    android:layout_width="match_parent"  </div><div class="line">    android:layout_height="match_parent"  </div><div class="line">    android:orientation="vertical" &gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/start_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Start Service" /&gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/stop_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Stop Service" /&gt;  </div><div class="line">  </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>我们在布局文件中加入了两个按钮，一个用于启动Service，一个用于停止Service</p>
</li>
<li><p>然后打开或新建MainActivity作为程序的主Activity，在里面加入启动Service和停止Service的逻辑，代码如下所示：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button startService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button stopService;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        startService = (Button) findViewById(R.id.start_service);  </div><div class="line">        stopService = (Button) findViewById(R.id.stop_service);  </div><div class="line">        startService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        stopService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;  </div><div class="line">        <span class="keyword">case</span> R.id.start_service:  </div><div class="line">            Intent startIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            startService(startIntent);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> R.id.stop_service:  </div><div class="line">            Intent stopIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            stopService(stopIntent);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">default</span>:  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>可以看到，在Start Service按钮的点击事件里，我们构建出了一个Intent对象，并调用startService()方法来启动MyService。然后在Stop Serivce按钮的点击事件里，我们同样构建出了一个Intent对象，并调用stopService()方法来停止MyService。代码的逻辑非常简单，相信不需要我再多做解释了吧</p>
</li>
<li><p>另外需要注意，项目中的每一个Service都必须在AndroidManifest.xml中注册才行，所以还需要编辑AndroidManifest.xml文件，代码如下所示：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">package</span>=<span class="string">"com.example.servicetest"</span>  </div><div class="line">    <span class="attr">android:versionCode</span>=<span class="string">"1"</span>  </div><div class="line">    <span class="attr">android:versionName</span>=<span class="string">"1.0"</span> &gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span>  </span></div><div class="line">        <span class="attr">android:minSdkVersion</span>=<span class="string">"14"</span>  </div><div class="line">        <span class="attr">android:targetSdkVersion</span>=<span class="string">"17"</span> /&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">application</span>  </span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span>  </div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span>  </div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>  </div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> &gt;  </div><div class="line">          </div><div class="line">    ……  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">"com.example.servicetest.MyService"</span> &gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>这样的话，一个简单的带有Service功能的程序就写好了，现在我们将程序运行起来，并点击一下Start Service按钮，可以看到LogCat的打印日志如下：</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService onStartCommand() executed</p>
</blockquote>
<ul>
<li><p>也就是说，当启动一个Service的时候，会调用该Service中的onCreate()和onStartCommand()方法</p>
</li>
<li><p>那么如果我再点击一次Start Service按钮呢？这个时候的打印日志如下：</p>
</li>
</ul>
<blockquote>
<p>MyService onStartCommand() executed</p>
</blockquote>
<ul>
<li>可以看到，这次只有onStartCommand()方法执行了，onCreate()方法并没有执行，为什么会这样呢？这是由于onCreate()方法只会在Service第一次被创建的时候调用，如果当前Service已经被创建过了，不管怎样调用startService()方法，onCreate()方法都不会再执行。因此你可以再多点击几次Start Service按钮试一次，每次都只会有onStartCommand()方法中的打印日志。<br>我们还可以到手机的应用程序管理界面来检查一下MyService是不是正在运行，如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%902.png" alt=""></center>

<ul>
<li>恩，MyService确实是正在运行的，即使它的内部并没有执行任何的逻辑。<br>回到ServiceTest程序，然后点击一下Stop Service按钮就可以将MyService停止掉了</li>
</ul>
<h2 id="Service和Activity通信"><a href="#Service和Activity通信" class="headerlink" title="Service和Activity通信"></a>Service和Activity通信</h2><ul>
<li><p>上面我们学习了Service的基本用法，启动Service之后，就可以在onCreate()或onStartCommand()方法里去执行一些具体的逻辑了。不过这样的话Service和Activity的关系并不大，只是Activity通知了Service一下：“你可以启动了。”然后Service就去忙自己的事情了。那么有没有什么办法能让它们俩的关联更多一些呢？比如说在Activity中可以指定让Service去执行什么任务。当然可以，只需要让Activity和Service建立关联就好了</p>
</li>
<li><p>观察MyService中的代码，你会发现一直有一个onBind()方法我们都没有使用到，这个方法其实就是用于和Activity建立关联的，修改MyService中的代码，如下所示：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyService"</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> MyBinder mBinder = <span class="keyword">new</span> MyBinder();  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate();  </div><div class="line">        Log.d(TAG, <span class="string">"onCreate() executed"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;  </div><div class="line">        Log.d(TAG, <span class="string">"onStartCommand() executed"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        Log.d(TAG, <span class="string">"onDestroy() executed"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mBinder;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">()</span> </span>&#123;  </div><div class="line">            Log.d(<span class="string">"TAG"</span>, <span class="string">"startDownload() executed"</span>);  </div><div class="line">            <span class="comment">// 执行具体的下载任务  </span></div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里我们新增了一个MyBinder类继承自Binder类，然后在MyBinder中添加了一个startDownload()方法用于在后台执行下载任务，当然这里并不是真正地去下载某个东西，只是做个测试，所以startDownload()方法只是打印了一行日志。<br>然后修改activity_main.xml中的代码，在布局文件中添加用于绑定Service和取消绑定Service的按钮：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"  </div><div class="line">    android:layout_width="match_parent"  </div><div class="line">    android:layout_height="match_parent"  </div><div class="line">    android:orientation="vertical" &gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/start_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Start Service" /&gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/stop_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Stop Service" /&gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/bind_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Bind Service" /&gt;  </div><div class="line">      </div><div class="line">    &lt;Button   </div><div class="line">        android:id="@+id/unbind_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Unbind Service"  </div><div class="line">        /&gt;  </div><div class="line">      </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<ul>
<li>接下来再修改MainActivity中的代码，让MainActivity和MyService之间建立关联，代码如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button startService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button stopService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button bindService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button unbindService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> MyService.MyBinder myBinder;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;  </div><div class="line">            myBinder = (MyService.MyBinder) service;  </div><div class="line">            myBinder.startDownload();  </div><div class="line">        &#125;  </div><div class="line">    &#125;;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        startService = (Button) findViewById(R.id.start_service);  </div><div class="line">        stopService = (Button) findViewById(R.id.stop_service);  </div><div class="line">        bindService = (Button) findViewById(R.id.bind_service);  </div><div class="line">        unbindService = (Button) findViewById(R.id.unbind_service);  </div><div class="line">        startService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        stopService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        bindService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        unbindService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;  </div><div class="line">        <span class="keyword">case</span> R.id.start_service:  </div><div class="line">            Intent startIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            startService(startIntent);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> R.id.stop_service:  </div><div class="line">            Intent stopIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            stopService(stopIntent);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> R.id.bind_service:  </div><div class="line">            Intent bindIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            bindService(bindIntent, connection, BIND_AUTO_CREATE);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> R.id.unbind_service:  </div><div class="line">            unbindService(connection);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">default</span>:  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>可以看到，这里我们首先创建了一个ServiceConnection的匿名类，在里面重写了onServiceConnected()方法和onServiceDisconnected()方法，这两个方法分别会在Activity与Service建立关联和解除关联的时候调用。在onServiceConnected()方法中，我们又通过向下转型得到了MyBinder的实例，有了这个实例，Activity和Service之间的关系就变得非常紧密了。现在我们可以在Activity中根据具体的场景来调用MyBinder中的任何public方法，即实现了Activity指挥Service干什么Service就去干什么的功能。<br>当然，现在Activity和Service其实还没关联起来了呢，这个功能是在Bind Service按钮的点击事件里完成的。可以看到，这里我们仍然是构建出了一个Intent对象，然后调用bindService()方法将Activity和Service进行绑定。bindService()方法接收三个参数，第一个参数就是刚刚构建出的Intent对象，第二个参数是前面创建出的ServiceConnection的实例，第三个参数是一个标志位，这里传入BIND_AUTO_CREATE表示在Activity和Service建立关联后自动创建Service，这会使得MyService中的onCreate()方法得到执行，但onStartCommand()方法不会执行.<br>然后如何我们想解除Activity和Service之间的关联怎么办呢？调用一下unbindService()方法就可以了，这也是Unbind Service按钮的点击事件里实现的逻辑.</p>
</li>
<li><p>现在让我们重新运行一下程序吧，在MainActivity中点击一下Bind Service按钮，LogCat里的打印日志如下所示：</p>
</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService startDownload() executed</p>
</blockquote>
<ul>
<li>另外需要注意，任何一个Service在整个应用程序范围内都是通用的，即MyService不仅可以和MainActivity建立关联，还可以和任何一个Activity建立关联，而且在建立关联时它们都可以获取到相同的MyBinder实例</li>
</ul>
<h2 id="如何销毁Service"><a href="#如何销毁Service" class="headerlink" title="如何销毁Service"></a>如何销毁Service</h2><ul>
<li>在Service的基本用法这一部分，我们介绍了销毁Service最简单的一种情况，点击Start Service按钮启动Service，再点击Stop Service按钮停止Service，这样MyService就被销毁了，可以看到打印日志如下所示：</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService onStartCommand() executed<br>MyService onDestroy() executed</p>
</blockquote>
<ul>
<li><p>那么如果我们是点击的Bind Service按钮呢？由于在绑定Service的时候指定的标志位是BIND_AUTO_CREATE，说明点击Bind Service按钮的时候Service也会被创建，这时应该怎么销毁Service呢？其实也很简单，点击一下Unbind Service按钮，将Activity和Service的关联解除就可以了</p>
</li>
<li><p>先点击一下Bind Service按钮，再点击一下Unbind Service按钮，打印日志如下所示：</p>
</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService startDownload() executed<br>MyService onDestroy() executed</p>
</blockquote>
<ul>
<li><p>以上这两种销毁的方式都很好理解。那么如果我们既点击了Start Service按钮，又点击了Bind Service按钮会怎么样呢？这个时候你会发现，不管你是单独点击Stop Service按钮还是Unbind Service按钮，Service都不会被销毁，必要将两个按钮都点击一下，Service才会被销毁。也就是说，点击Stop Service按钮只会让Service停止，点击Unbind Service按钮只会让Service和Activity解除关联，一个Service必须要在既没有和任何Activity关联又处理停止状态的时候才会被销毁</p>
</li>
<li><p>为了证实一下，我们在Stop Service和Unbind Service按钮的点击事件里面加入一行打印日志：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">    <span class="keyword">switch</span> (v.getId()) &#123;  </div><div class="line">    <span class="keyword">case</span> R.id.start_service:  </div><div class="line">        Intent startIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">        startService(startIntent);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> R.id.stop_service:  </div><div class="line">        Log.d(<span class="string">"MyService"</span>, <span class="string">"click Stop Service button"</span>);  </div><div class="line">        Intent stopIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">        stopService(stopIntent);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> R.id.bind_service:  </div><div class="line">        Intent bindIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">        bindService(bindIntent, connection, BIND_AUTO_CREATE);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> R.id.unbind_service:  </div><div class="line">        Log.d(<span class="string">"MyService"</span>, <span class="string">"click Unbind Service button"</span>);  </div><div class="line">        unbindService(connection);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">default</span>:  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后重新运行程序，先点击一下Start Service按钮，再点击一下Bind Service按钮，这样就将Service启动起来，并和Activity建立了关联。然后点击Stop Service按钮后Service并不会销毁，再点击一下Unbind Service按钮，Service就会销毁了，打印日志如下所示：</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService onStartCommand() executed<br>MyService startDownload() executed<br>MyService click Stop Service button<br>MyService click Unbind Service button<br>MyService onDestroy() executed</p>
</blockquote>
<ul>
<li>我们应该始终记得在Service的onDestroy()方法里去清理掉那些不再使用的资源，防止在Service被销毁后还会有一些不再使用的对象仍占用着内存</li>
</ul>
<h2 id="Service和Thread的关系"><a href="#Service和Thread的关系" class="headerlink" title="Service和Thread的关系"></a>Service和Thread的关系</h2><ul>
<li><p>不少Android初学者都可能会有这样的疑惑，Service和Thread到底有什么关系呢？什么时候应该用Service，什么时候又应该用Thread？答案可能会有点让你吃惊，因为Service和Thread之间没有任何关系！<br>之所以有不少人会把它们联系起来，主要就是因为Service的后台概念。Thread我们大家都知道，是用于开启一个子线程，在这里去执行一些耗时操作就不会阻塞主线程的运行。而Service我们最初理解的时候，总会觉得它是用来处理一些后台任务的，一些比较耗时的操作也可以放在这里运行，这就会让人产生混淆了。但是，如果我告诉你Service其实是运行在主线程里的，你还会觉得它和Thread有什么关系吗？让我们看一下这个残酷的事实吧</p>
</li>
<li><p>在MainActivity的onCreate()方法里加入一行打印当前线程id的语句：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.d(<span class="string">"MyService"</span>, <span class="string">"MainActivity thread id is "</span> + Thread.currentThread().getId());</div></pre></td></tr></table></figure>
<ul>
<li>然后在MyService的onCreate()方法里也加入一行打印当前线程id的语句：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.d(<span class="string">"MyService"</span>, <span class="string">"MyService thread id is "</span> + Thread.currentThread().getId());</div></pre></td></tr></table></figure>
<ul>
<li>现在重新运行一下程序，并点击Start Service按钮，会看到如下打印日志：</li>
</ul>
<blockquote>
<p>MyService MainActivity thread id is 1<br>MyService MyService thread id is 1</p>
</blockquote>
<ul>
<li><p>可以看到，它们的线程id完全是一样的，由此证实了Service确实是运行在主线程里的，也就是说如果你在Service里编写了非常耗时的代码，程序必定会出现ANR的。<br>你可能会惊呼，这不是坑爹么！？那我要Service又有何用呢？其实大家不要把后台和子线程联系在一起就行了，这是两个完全不同的概念。Android的后台就是指，它的运行是完全不依赖UI的。即使Activity被销毁，或者程序被关闭，只要进程还在，Service就可以继续运行。比如说一些应用程序，始终需要与服务器之间始终保持着心跳连接，就可以使用Service来实现。你可能又会问，前面不是刚刚验证过Service是运行在主线程里的么？在这里一直执行着心跳连接，难道就不会阻塞主线程的运行吗？当然会，但是我们可以在Service中再创建一个子线程，然后在这里去处理耗时逻辑就没问题了。<br>额，既然在Service里也要创建一个子线程，那为什么不直接在Activity里创建呢？这是因为Activity很难对Thread进行控制，当Activity被销毁之后，就没有任何其它的办法可以再重新获取到之前创建的子线程的实例。而且在一个Activity中创建的子线程，另一个Activity无法对其进行操作。但是Service就不同了，所有的Activity都可以与Service进行关联，然后可以很方便地操作其中的方法，即使Activity被销毁了，之后只要重新与Service建立关联，就又能够获取到原有的Service中Binder的实例。因此，使用Service来处理后台任务，Activity就可以放心地finish，完全不需要担心无法对后台任务进行控制的情况。</p>
</li>
<li><p>一个比较标准的Service就可以写成：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;  </div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">            <span class="comment">// 开始执行后台任务  </span></div><div class="line">        &#125;  </div><div class="line">    &#125;).start();  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                <span class="comment">// 执行具体的下载任务  </span></div><div class="line">            &#125;  </div><div class="line">        &#125;).start();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建前台Service"><a href="#创建前台Service" class="headerlink" title="创建前台Service"></a>创建前台Service</h2><ul>
<li>Service几乎都是在后台运行的，一直以来它都是默默地做着辛苦的工作。但是Service的系统优先级还是比较低的，当系统出现内存不足情况时，就有可能会回收掉正在后台运行的Service。如果你希望Service可以一直保持运行状态，而不会由于系统内存不足的原因导致被回收，就可以考虑使用前台Service。前台Service和普通Service最大的区别就在于，它会一直有一个正在运行的图标在系统的状态栏显示，下拉状态栏后可以看到更加详细的信息，非常类似于通知的效果。当然有时候你也可能不仅仅是为了防止Service被回收才使用前台Service，有些项目由于特殊的需求会要求必须使用前台Service，比如说墨迹天气，它的Service在后台更新天气数据的同时，还会在系统状态栏一直显示当前天气的信息，如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%903.png" alt=""></center>

<ul>
<li>那么我们就来看一下如何才能创建一个前台Service吧，其实并不复杂，修改MyService中的代码，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyService"</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> MyBinder mBinder = <span class="keyword">new</span> MyBinder();  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        Log.d(TAG, <span class="string">"onCreate() executed"</span>);</div><div class="line">        Log.d(<span class="string">"MyService"</span>, <span class="string">"MyService thread id is "</span> +</div><div class="line">        Thread.currentThread().getId());</div><div class="line">        Notification.Builder builder = <span class="keyword">new</span> Notification.Builder(<span class="keyword">this</span>);</div><div class="line">        PendingIntent contentIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>,</div><div class="line">                <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class), <span class="number">0</span>);</div><div class="line">        builder.setContentIntent(contentIntent);</div><div class="line">        builder.setSmallIcon(R.mipmap.ic_launcher);</div><div class="line">        builder.setTicker(<span class="string">"Foreground Service Start"</span>);</div><div class="line">        builder.setContentTitle(<span class="string">"Foreground Service"</span>);</div><div class="line">        builder.setContentText(<span class="string">"Make this service run in the foreground."</span>);</div><div class="line">        Notification notification = builder.build();</div><div class="line">        startForeground(BIND_AUTO_CREATE,notification);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    .........  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里只是修改了MyService中onCreate()方法的代码。可以看到，我们首先创建了一个Notification对象，然后调用了它的setLatestEventInfo()方法来为通知初始化布局和数据，并在这里设置了点击通知后就打开MainActivity。然后调用startForeground()方法就可以让MyService变成一个前台Service，并会将通知的图片显示出来。<br>现在重新运行一下程序，并点击Start Service或Bind Service按钮，MyService就会以前台Service的模式启动了，并且在系统状态栏会弹出一个通栏图标，下拉状态栏后可以看到通知的详细内容，如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%907.png" alt=""></center>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://developer.android.com/guide/components/services.html#Basics" target="_blank" rel="external">Android官方文档之Service</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/2fb6eb14fdec" target="_blank" rel="external">Android 服务两种启动方式的区别</a></p>
</li>
<li><p><a href="http://blog.csdn.net/guolin_blog/article/details/11952435" target="_blank" rel="external"> Android Service完全解析，关于服务你所需知道的一切(上)</a></p>
</li>
<li><p><a href="http://blog.csdn.net/guolin_blog/article/details/9797169" target="_blank" rel="external"> Android Service完全解析，关于服务你所需知道的一切(下)</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Service 是一个可以在后台执行长时间运行操作而不使用用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官方图解 &lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%901.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Activity生命周期详解</title>
    <link href="http://www.qiuchengjia.cn/2016/09/11/Android/Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.qiuchengjia.cn/2016/09/11/Android/Activity生命周期详解/</id>
    <published>2016-09-10T20:17:13.000Z</published>
    <updated>2016-09-26T11:54:28.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul>
<li>官方图解</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/activity_lifecycle.png" alt=""></center>

<a id="more"></a>
<h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><p>这张图列出了Activity生命周期最主要的一些方法，启动后依次执行：</p>
<p>onCreate –&gt; onStart –&gt; onResume –&gt; onPause –&gt; onStop –&gt; onDestroy</p>
<p>信很多人也都已经知道以上方法与执行顺序，但是Activity还有其他方法，如onContentChanged， onPostCreate， onPostResume， onConfigurationChanged， onSaveInstanceState， onRestoreInstanceState</p>
<h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String TAG=<span class="string">"MainActivity"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 首次创建Activity的时调用</div><div class="line">     * <span class="doctag">@param</span> savedInstanceState the saved instance state</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Log.d(<span class="string">"TAG"</span>,<span class="string">"onCreate"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当Activity的布局改动时，即setContentView()或者addContentView()</div><div class="line">     * 方法执行完毕时就会调用该方法</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContentChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onContentChanged();</div><div class="line">        Log.d(TAG, <span class="string">"onContentChanged: "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在Activity即将对用户可见时调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStart();</div><div class="line">        Log.d(<span class="string">"TAG"</span>,<span class="string">"onStart"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在 Activity 已停止并即将再次启动前调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.onRestart();</div><div class="line">        Log.d(TAG, <span class="string">"onRestart: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指onCreate方法彻底执行完毕的回调</div><div class="line">     * <span class="doctag">@param</span> savedInstanceState the saved instance state</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPostCreate(savedInstanceState);</div><div class="line">        Log.d(TAG, <span class="string">"onPostCreate: "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在Activity即将开始与用户交互时调用，此时，Activity 处于</div><div class="line">     * Activity 堆栈的顶层，并具有用户输入焦点</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        Log.d(TAG, <span class="string">"onResume"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPostResume();</div><div class="line">        Log.d(TAG, <span class="string">"onPostResume: "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当系统即将开始继续另一个 Activity 时调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        Log.d(TAG, <span class="string">"onPause"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Activity 对用户不再可见时调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">        Log.d(TAG, <span class="string">"onStop: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在 Activity 被销毁前调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        Log.d(TAG, <span class="string">"onDestroy: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onConfigurationChanged(newConfig);</div><div class="line">        Log.d(TAG, <span class="string">"onConfigurationChanged: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line">        Log.d(TAG, <span class="string">"onSaveInstanceState: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span></span></div><div class="line">    <span class="params">(Bundle savedInstanceState)</span>&#123;</div><div class="line">        <span class="keyword">super</span>.onRestoreInstanceState(savedInstanceState);</div><div class="line">        Log.d(TAG, <span class="string">"onRestoreInstanceState: "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>程序启动运行并结束上述生命周期的方法执行顺序是这样的：</p>
<p>  onCreate –&gt; onContentChanged –&gt; onStart –&gt; onPostCreate –&gt; onResume –&gt; onPostResume –&gt; onPause –&gt; onStop –&gt; onDestroy</p>
</li>
<li><p>具体参考 <a href="https://developer.android.com/guide/components/activities.html?hl=zh-cn#Creating" target="_blank" rel="external">Activity</a> 和 <a href="http://stormzhang.com/android/2014/09/14/activity-lifecycle1/" target="_blank" rel="external">ACTIVITY生命周期详解一</a></p>
</li>
</ul>
<h2 id="生命周期具体场景"><a href="#生命周期具体场景" class="headerlink" title="生命周期具体场景"></a>生命周期具体场景</h2><h3 id="首次启动"><a href="#首次启动" class="headerlink" title="首次启动"></a>首次启动</h3><ul>
<li>onCreate –&gt; onStart –&gt; onResume</li>
</ul>
<h3 id="按下返回按键"><a href="#按下返回按键" class="headerlink" title="按下返回按键"></a>按下返回按键</h3><ul>
<li>onPause –&gt; onStop –&gt; onDestroy</li>
</ul>
<h3 id="按Home键"><a href="#按Home键" class="headerlink" title="按Home键"></a>按Home键</h3><ul>
<li>onPause –&gt; onSaveInstanceState –&gt; onStop</li>
</ul>
<h3 id="再次打开"><a href="#再次打开" class="headerlink" title="再次打开"></a>再次打开</h3><ul>
<li>onRestart –&gt; onStart –&gt; onResume</li>
</ul>
<h3 id="屏幕旋转"><a href="#屏幕旋转" class="headerlink" title="屏幕旋转"></a>屏幕旋转</h3><ul>
<li><p>如果你不做任何配置</p>
<p>  启动Activity会执行如下方法：</p>
<p>  onCreate –&gt; onStart –&gt; onResume</p>
<p>  之后旋转屏幕，则Activity会被销毁并重新创建，之后便会执行如下方法：</p>
<p>  onPause –&gt; onSaveInstanceState –&gt; onStop –&gt; onDestroy –&gt; onCreate –&gt; onStart –&gt; onRestoreInstanceState –&gt; onResume</p>
</li>
<li><p>在AndroidManifest配置文件里声明android:configChanges属性<br>默认屏幕旋转会重新创建，当然可以通过在配置文件里加上如下代码：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">android:configChanges="keyboardHidden|orientation|screenSize"</div><div class="line">（sdk&gt;13时需加上screenSize）</div></pre></td></tr></table></figure>
<p>这个时候再旋转屏幕便不会销毁Activity，这时候再旋转屏幕可以看到只会执行onConfigurationChanged方法，有什么在屏幕旋转的逻辑可以重写这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (newConfig.orientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) &#123;</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span></span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">super</span>.onConfigurationChanged(newConfig);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="FirstActivity打开SecondActivity"><a href="#FirstActivity打开SecondActivity" class="headerlink" title="FirstActivity打开SecondActivity"></a>FirstActivity打开SecondActivity</h3><ul>
<li><p>FirstActivity打开SecondActivity，这时候FirstActivity生命周期的方法是这样的： onPause –&gt; onSaveInstanceState –&gt; onStop, 这个时候在SecondActivity按返回键，FirstActivity会有以下几种情况：</p>
</li>
<li><p>正常情况下会执行： onRestart -&gt; onStart -&gt; onResume</p>
</li>
<li><p>当系统由于要回收内存而把 activity 销毁时</p>
<p>  Activity在onPause或者onStop状态下都有可能遇到由于突发事件系统需要回收内存，之后的onDestroy方法便不会再执行，这时候会执行： onCreate –&gt; onStart –&gt; onRestoreInstanceState –&gt; onResume</p>
</li>
</ul>
<h2 id="保存-Activity-状态"><a href="#保存-Activity-状态" class="headerlink" title="保存 Activity 状态"></a>保存 Activity 状态</h2><ul>
<li><p>当系统为了恢复内存而销毁某项 Activity 时，Activity 对象也会被销毁，因此系统在继续 Activity 时根本无法让其状态保持完好，而是必须在用户返回Activity时重建 Activity 对象。但用户并不知道系统销毁 Activity 后又对其进行了重建，因此他们很可能认为 Activity 状态毫无变化。 在这种情况下，您可以实现另一个回调方法对有关 Activity 状态的信息进行保存，以确保有关 Activity 状态的重要信息得到保留：onSaveInstanceState()</p>
</li>
<li><p>系统会先调用 onSaveInstanceState()，然后再使 Activity 变得易于销毁。系统会向该方法传递一个 Bundle，您可以在其中使用 putString() 和 putInt() 等方法以名称-值对形式保存有关 Activity 状态的信息。然后，如果系统终止您的应用进程，并且用户返回您的 Activity，则系统会重建该 Activity，并将 Bundle 同时传递给 onCreate() 和 onRestoreInstanceState()。您可以使用上述任一方法从 Bundle 提取您保存的状态并恢复该 Activity 状态。如果没有状态信息需要恢复，则传递给您的 Bundle 是空值（如果是首次创建该 Activity，就会出现这种情况）</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3.png" alt=""></center>

<ul>
<li>您只需旋转设备，让屏幕方向发生变化，就能有效地测试您的应用的状态恢复能力。 当屏幕方向变化时，系统会销毁并重建 Activity，以便应用可供新屏幕配置使用的备用资源。 单凭这一理由，您的 Activity 在重建时能否完全恢复其状态就显得非常重要，因为用户在使用应用时经常需要旋转屏幕</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://stormzhang.com/android/2014/09/14/activity-lifecycle1/" target="_blank" rel="external">ACTIVITY生命周期详解一</a></p>
</li>
<li><p><a href="http://stormzhang.com/android/2014/09/17/android-lifecycle2/" target="_blank" rel="external">ACTIVITY生命周期详解二</a></p>
</li>
<li><p><a href="https://developer.android.com/guide/components/activities.html?hl=zh-cn#Creating" target="_blank" rel="external">Android官方文档之Activity</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官方图解&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/activity_lifecycle.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android学习之路</title>
    <link href="http://www.qiuchengjia.cn/2016/09/11/Android/Android%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>http://www.qiuchengjia.cn/2016/09/11/Android/Android学习之路/</id>
    <published>2016-09-10T19:58:11.000Z</published>
    <updated>2016-09-26T11:54:28.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习路线图"><a href="#学习路线图" class="headerlink" title="学习路线图"></a>学习路线图</h2><ul>
<li>一张图搞定，非常全面</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF.png" alt=""></center>


<h2 id="扩展资料"><a href="#扩展资料" class="headerlink" title="扩展资料"></a>扩展资料</h2><ul>
<li><a href="http://gold.xitu.io/entry/57566aca530fd30068150da3" target="_blank" rel="external">Android 开发书籍推荐 &amp; 学习路线图 &amp; 资料汇整</a></li>
</ul>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习路线图&quot;&gt;&lt;a href=&quot;#学习路线图&quot; class=&quot;headerlink&quot; title=&quot;学习路线图&quot;&gt;&lt;/a&gt;学习路线图&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一张图搞定，非常全面&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Android%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;


&lt;h2 id=&quot;扩展资料&quot;&gt;&lt;a href=&quot;#扩展资料&quot; class=&quot;headerlink&quot; title=&quot;扩展资料&quot;&gt;&lt;/a&gt;扩展资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gold.xitu.io/entry/57566aca530fd30068150da3&quot;&gt;Android 开发书籍推荐 &amp;amp; 学习路线图 &amp;amp; 资料汇整&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio自定义注释</title>
    <link href="http://www.qiuchengjia.cn/2016/08/22/AndroidStudio/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A/"/>
    <id>http://www.qiuchengjia.cn/2016/08/22/AndroidStudio/AndroidStudio自定义注释/</id>
    <published>2016-08-22T14:02:01.000Z</published>
    <updated>2016-09-26T11:54:28.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置类创建时自动生成头部注释"><a href="#设置类创建时自动生成头部注释" class="headerlink" title="设置类创建时自动生成头部注释"></a>设置类创建时自动生成头部注释</h2><ul>
<li>比如每次创建一个类自动在头部生成一个这样的头部,作为一个类的说明信息</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A1.png" alt=""></center>

<ul>
<li>设置方法</li>
</ul>
<p>点击设置—&gt;Editor–&gt;File and code Templates –&gt;Includes—&gt;File Header<br>代码：其中时间是自动获取的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Description: </div><div class="line"> * Data：$&#123;DATE&#125;-$&#123;TIME&#125;</div><div class="line"> * Blog：www.qiuchengjia.cn</div><div class="line"> * Author: qiu</div><div class="line"> */</div></pre></td></tr></table></figure>
<ul>
<li>效果和步骤</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A3.gif" alt=""></center>

<a id="more"></a>
<h2 id="设置快速生成方法注释的两种方式"><a href="#设置快速生成方法注释的两种方式" class="headerlink" title="设置快速生成方法注释的两种方式"></a>设置快速生成方法注释的两种方式</h2><h3 id="在studio-中自定义模板"><a href="#在studio-中自定义模板" class="headerlink" title="在studio 中自定义模板"></a>在studio 中自定义模板</h3><ul>
<li>在studio中自定义注释模板有一定的局限性，目前已知的studio的模板只能获取的时间，并不能获取返回值以及参数等信息，那是因为获取方法名的方法运行在方法内部才会生效,运行在方法外部是不能生效.<br>所以在方法外部用studio自定义模板的方式有一定的局限性</li>
</ul>
<ul>
<li>模板</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Description:$Method$</div><div class="line"> * Blog: www.qiuchengjia.cn</div><div class="line"> * Data: $Date$ $Time$</div><div class="line"> * <span class="doctag">@author</span>: qiu</div><div class="line"> */</div></pre></td></tr></table></figure>
<ul>
<li>点击设置—&gt;Editor–&gt;live Templates –&gt;点击+号 先创建1个组 再创建一个模板<br>编辑注释内容–&gt;声明作用域</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A2.gif" alt=""></center>

<h3 id="javaDoc自动生成注释"><a href="#javaDoc自动生成注释" class="headerlink" title="javaDoc自动生成注释"></a>javaDoc自动生成注释</h3><ul>
<li>如果我们想获取到方法名，参数返回值的信息，想让这些信息全部自动生成的注释里面的话，我们可以借助插件JavaDoc实现，安装插件javaDoc 安装完之后重启studio</li>
</ul>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A4.png" alt=""></center>

<h4 id="方法配置"><a href="#方法配置" class="headerlink" title="方法配置"></a>方法配置</h4><ul>
<li>我这儿拿method的来举例。我给每个方法的注解加 一个 作者以及时间</li>
</ul>
<ul>
<li><p><strong>@author qiu 博客：www.qiuchengjia.cn 时间：${.now?string[“yyyy-MM-dd”]}\n</strong></p>
</li>
<li><p><strong>原始配置</strong></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**\n</div><div class="line"> * $&#123;name&#125;<span class="tag">&lt;<span class="name">#if</span> <span class="attr">isNotVoid</span>&gt;</span> $&#123;return&#125;<span class="tag">&lt;/<span class="name">#if</span>&gt;</span>.\n</div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.typeParameters</span>?<span class="attr">has_content</span>&gt;</span>         * \n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.typeParameters</span> <span class="attr">as</span> <span class="attr">typeParameter</span>&gt;</span></div><div class="line">         * @param <span class="tag">&lt;<span class="name">$&#123;typeParameter.name&#125;</span>&gt;</span> the type parameter\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.parameterList.parameters</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.parameterList.parameters</span> <span class="attr">as</span> <span class="attr">parameter</span>&gt;</span></div><div class="line">         * @param $&#123;parameter.name&#125; the $&#123;paramNames[parameter.name]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">isNotVoid</span>&gt;</span></div><div class="line">         *\n</div><div class="line">         * @return the $&#123;return&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.throwsList.referenceElements</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.throwsList.referenceElements</span> <span class="attr">as</span> <span class="attr">exception</span>&gt;</span></div><div class="line">         * @throws $&#123;exception.referenceName&#125; the $&#123;exceptionNames[exception.referenceName]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"> */</div></pre></td></tr></table></figure>
<ul>
<li><strong>修改之后的配置</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/**\n</div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.typeParameters</span>?<span class="attr">has_content</span>&gt;</span>         * \n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.typeParameters</span> <span class="attr">as</span> <span class="attr">typeParameter</span>&gt;</span></div><div class="line">         * @param <span class="tag">&lt;<span class="name">$&#123;typeParameter.name&#125;</span>&gt;</span> the type parameter\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.parameterList.parameters</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.parameterList.parameters</span> <span class="attr">as</span> <span class="attr">parameter</span>&gt;</span></div><div class="line">         * @param $&#123;parameter.name&#125; the $&#123;paramNames[parameter.name]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">isNotVoid</span>&gt;</span></div><div class="line">         *\n</div><div class="line">         * @return the $&#123;return&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.throwsList.referenceElements</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.throwsList.referenceElements</span> <span class="attr">as</span> <span class="attr">exception</span>&gt;</span></div><div class="line">         * @throws $&#123;exception.referenceName&#125; the $&#123;exceptionNames[exception.referenceName]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line">         </div><div class="line">	\n * @author qiu\n</div><div class="line">\n *  博客：www.qiuchengjia.cn   时间：$&#123;.now?string["yyyy-MM-dd"]&#125;\n</div><div class="line">    </div><div class="line"> */</div></pre></td></tr></table></figure>
<h4 id="构造函数配置"><a href="#构造函数配置" class="headerlink" title="构造函数配置"></a>构造函数配置</h4><ul>
<li>原始配置</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**\n</div><div class="line"> * Instantiates a new $&#123;name&#125;.\n</div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.parameterList.parameters</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.parameterList.parameters</span> <span class="attr">as</span> <span class="attr">parameter</span>&gt;</span></div><div class="line">         * @param $&#123;parameter.name&#125; the $&#123;paramNames[parameter.name]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.throwsList.referenceElements</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.throwsList.referenceElements</span> <span class="attr">as</span> <span class="attr">exception</span>&gt;</span></div><div class="line">         * @throws $&#123;exception.referenceName&#125; the $&#123;exceptionNames[exception.referenceName]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"> */</div></pre></td></tr></table></figure>
<ul>
<li>修改后的配置</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**\n</div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.parameterList.parameters</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.parameterList.parameters</span> <span class="attr">as</span> <span class="attr">parameter</span>&gt;</span></div><div class="line">         * @param $&#123;parameter.name&#125; the $&#123;paramNames[parameter.name]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.throwsList.referenceElements</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.throwsList.referenceElements</span> <span class="attr">as</span> <span class="attr">exception</span>&gt;</span></div><div class="line">         * @throws $&#123;exception.referenceName&#125; the $&#123;exceptionNames[exception.referenceName]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line">\n * @author qiu\n</div><div class="line">\n *  博客：www.qiuchengjia.cn   时间：$&#123;.now?string["yyyy-MM-dd"]&#125;\n</div><div class="line"> */</div></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul>
<li><p>把鼠标移动到方法中，然后shift + alt + G</p>
</li>
<li><p>如果是对这个类所有的方法都进行注释，就是shift + ctrl + alt + G</p>
</li>
<li><p>也可以通过alt+insert来进行选择</p>
</li>
<li><p>shift + alt + Z是撤销当前/选择</p>
</li>
<li><p>shift + ctrl + alt + Z是撤销所有注释</p>
</li>
</ul>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ul>
<li><p>如果你对JavaDoc生成的模板如果还不满意，你还可以修改JavaDoc的模板，具体修改位置是 设置–&gt;other—&gt;javadoc<br>里面有对应的模板，模板语言使用的是一种 freemarker的标记语言，如果有感兴趣的同学可自己开发扩展；</p>
</li>
<li><p><a href="https://github.com/setial/intellij-javadocs/wiki" target="_blank" rel="external">javadoc网址</a></p>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://blog.csdn.net/dreamlivemeng/article/details/51499675" target="_blank" rel="external"> Android studio JavaDoc的使用</a></p>
</li>
<li><p><a href="http://www.codingnote.net/2016/05/12/Android-Studio-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A-%E5%BF%AB%E9%80%9F%E8%BE%93%E5%85%A5%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/" target="_blank" rel="external">(原创) Android Studio 自定义注释&amp;快速输入代码片段</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设置类创建时自动生成头部注释&quot;&gt;&lt;a href=&quot;#设置类创建时自动生成头部注释&quot; class=&quot;headerlink&quot; title=&quot;设置类创建时自动生成头部注释&quot;&gt;&lt;/a&gt;设置类创建时自动生成头部注释&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;比如每次创建一个类自动在头部生成一个这样的头部,作为一个类的说明信息&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A1.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;设置方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击设置—&amp;gt;Editor–&amp;gt;File and code Templates –&amp;gt;Includes—&amp;gt;File Header&lt;br&gt;代码：其中时间是自动获取的&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Description: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Data：$&amp;#123;DATE&amp;#125;-$&amp;#123;TIME&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Blog：www.qiuchengjia.cn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Author: qiu&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;效果和步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A3.gif&quot; alt=&quot;&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="AndroidStudio" scheme="http://www.qiuchengjia.cn/categories/AndroidStudio/"/>
    
    
      <category term="AndroidStudio" scheme="http://www.qiuchengjia.cn/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title>密码</title>
    <link href="http://www.qiuchengjia.cn/2016/08/22/%E9%80%9A%E7%94%A8/%E5%AF%86%E7%A0%81/"/>
    <id>http://www.qiuchengjia.cn/2016/08/22/通用/密码/</id>
    <published>2016-08-21T20:22:26.000Z</published>
    <updated>2016-09-26T11:54:28.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="合购VIP论坛"><a href="#合购VIP论坛" class="headerlink" title="合购VIP论坛"></a>合购VIP论坛</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">默认的密码是：www.hegouvip.com</div><div class="line"></div><div class="line">第一期解压密码 ：【http:<span class="comment">//www.hegouvip.com12yuemima】</span></div><div class="line">第二期解压密码 ：【hegouvipmima12yue】</div><div class="line">第三期解压密码 ：【<span class="number">52</span>hegouvipmima】</div><div class="line">第四期解压密码 ：【<span class="number">54</span>hegouvipdisiqimima】</div><div class="line">第五期解压密码 ：【http:<span class="comment">//www.hegouvip.comwoshidiwuqimima】</span></div><div class="line">第六期解压密码 ：【上合购VIP资源论坛下载就可以观看了】</div><div class="line">第七期解压密码 ：【http:<span class="comment">//www.hegouvip.com2014mashangchenggong】</span></div><div class="line">第八期解压密码 ：【<span class="number">2014</span>hegouvipdibaqijieyamima】</div><div class="line">第九期解压密码 ：【hegouvip2014dijiuqijieyamima】</div><div class="line">第十期解压密码 ：【dishiqimimahegouvip】</div><div class="line">第十一期解压密码：【dishiyiqihegoumima】</div></pre></td></tr></table></figure>
<h2 id="HK共享吧"><a href="#HK共享吧" class="headerlink" title="HK共享吧"></a>HK共享吧</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">默认的密码是：www.mfhk8.com</div><div class="line"></div><div class="line">编号一的解压密码：kIioOK9*</div><div class="line">编号二的解压密码：www.mfhk8.com_!h0jn3G+t@</div><div class="line">编号三的解压密码：www.mfhk8.com_rz~NWjU)cZ</div><div class="line">编号四的解压密码：www.mfhk8.com_$dCb11$d2t</div><div class="line">编号五的解压密码：www.mfhk8.com_$dF71@$d4rd2t</div><div class="line">编号六的解压密码：www.mfhk8.com_HdFD1@$^&amp;4dd1t</div><div class="line">编号七的解压密码：www.mfhk8.com_DF32D~@$^&amp;3Qd1*</div><div class="line">编号八的解压密码：www.mfhk8.com_SF5*^2K~@$^f3e1##</div><div class="line">编号九的解压密码：www.mfhk8.com_S123aaaA*^jgjkf2f@!!~~</div><div class="line">编号十的解压密码：www.mfhk8.com_S123f3*#(fA*^fgj32f@!!~~!hfu@**!!h847</div><div class="line">编号十一的解压密码：www.mfhk8.com_8#!k53[]]r[E$DS</div></pre></td></tr></table></figure>
<h2 id="龙天论坛"><a href="#龙天论坛" class="headerlink" title="龙天论坛"></a>龙天论坛</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">默认的密码是：www.lthack.com</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.mianfeib.com/three-resource-bbs-password.html" target="_blank" rel="external">三个VIP资源论坛解压密码汇总</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;合购VIP论坛&quot;&gt;&lt;a href=&quot;#合购VIP论坛&quot; class=&quot;headerlink&quot; title=&quot;合购VIP论坛&quot;&gt;&lt;/a&gt;合购VIP论坛&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;默认的密码是：www.hegouvip.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第一期解压密码 ：【http:&lt;span class=&quot;comment&quot;&gt;//www.hegouvip.com12yuemima】&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第二期解压密码 ：【hegouvipmima12yue】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第三期解压密码 ：【&lt;span class=&quot;number&quot;&gt;52&lt;/span&gt;hegouvipmima】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第四期解压密码 ：【&lt;span class=&quot;number&quot;&gt;54&lt;/span&gt;hegouvipdisiqimima】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第五期解压密码 ：【http:&lt;span class=&quot;comment&quot;&gt;//www.hegouvip.comwoshidiwuqimima】&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第六期解压密码 ：【上合购VIP资源论坛下载就可以观看了】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第七期解压密码 ：【http:&lt;span class=&quot;comment&quot;&gt;//www.hegouvip.com2014mashangchenggong】&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第八期解压密码 ：【&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;hegouvipdibaqijieyamima】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第九期解压密码 ：【hegouvip2014dijiuqijieyamima】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第十期解压密码 ：【dishiqimimahegouvip】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第十一期解压密码：【dishiyiqihegoumima】&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;HK共享吧&quot;&gt;&lt;a href=&quot;#HK共享吧&quot; class=&quot;headerlink&quot; title=&quot;HK共享吧&quot;&gt;&lt;/a&gt;HK共享吧&lt;/h2&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;默认的密码是：www.mfhk8.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号一的解压密码：kIioOK9*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号二的解压密码：www.mfhk8.com_!h0jn3G+t@&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号三的解压密码：www.mfhk8.com_rz~NWjU)cZ&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号四的解压密码：www.mfhk8.com_$dCb11$d2t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号五的解压密码：www.mfhk8.com_$dF71@$d4rd2t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号六的解压密码：www.mfhk8.com_HdFD1@$^&amp;amp;4dd1t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号七的解压密码：www.mfhk8.com_DF32D~@$^&amp;amp;3Qd1*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号八的解压密码：www.mfhk8.com_SF5*^2K~@$^f3e1##&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号九的解压密码：www.mfhk8.com_S123aaaA*^jgjkf2f@!!~~&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号十的解压密码：www.mfhk8.com_S123f3*#(fA*^fgj32f@!!~~!hfu@**!!h847&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号十一的解压密码：www.mfhk8.com_8#!k53[]]r[E$DS&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;龙天论坛&quot;&gt;&lt;a href=&quot;#龙天论坛&quot; class=&quot;headerlink&quot; title=&quot;龙天论坛&quot;&gt;&lt;/a&gt;龙天论坛&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;默认的密码是：www.lthack.com&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="通用" scheme="http://www.qiuchengjia.cn/categories/%E9%80%9A%E7%94%A8/"/>
    
    
      <category term="通用" scheme="http://www.qiuchengjia.cn/tags/%E9%80%9A%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>K歌之王</title>
    <link href="http://www.qiuchengjia.cn/2016/08/21/%E9%80%9A%E7%94%A8/K%E6%AD%8C%E4%B9%8B%E7%8E%8B/"/>
    <id>http://www.qiuchengjia.cn/2016/08/21/通用/K歌之王/</id>
    <published>2016-08-21T15:16:18.000Z</published>
    <updated>2016-09-26T11:54:28.057Z</updated>
    
    <content type="html"><![CDATA[<center><img src="http://o99dg8ap9.bkt.clouddn.com/K%E6%AD%8C%E4%B9%8B%E7%8E%8B.jpg" alt=""></center>

<h2 id="陈奕迅"><a href="#陈奕迅" class="headerlink" title="陈奕迅"></a>陈奕迅</h2><ul>
<li><p>《遥远的她》</p>
</li>
<li><p>《一生中最爱》</p>
</li>
<li><p>《明年今日》</p>
</li>
<li><p>《爱情转移》</p>
</li>
<li><p>《富士山下》</p>
</li>
<li><p>《葡萄成熟时》</p>
</li>
<li><p>《苦瓜》</p>
</li>
<li><p>《今天只做一件事》</p>
</li>
<li><p>《与我常在》</p>
</li>
<li><p>《单车》</p>
</li>
<li><p>《好歌献给你》</p>
</li>
<li><p>《阴天快乐》</p>
</li>
<li><p>《今天只做一件事》</p>
</li>
<li><p>《最后今晚》</p>
</li>
<li><p>《可以了》</p>
</li>
<li><p>《喜帖街》</p>
</li>
<li><p>《我什么都没有》</p>
</li>
<li><p>《时光倒流二十年》</p>
</li>
<li><p>《痛爱》</p>
</li>
<li><p>《歌颂》</p>
</li>
<li><p>《最佳损友》</p>
</li>
<li><p>《信心花舍》</p>
</li>
<li><p>《与我常在》</p>
</li>
<li><p>《阿牛》</p>
</li>
<li><p>《沙龙》</p>
</li>
<li><p>《圣诞节》</p>
</li>
<li><p>《兄妹》</p>
</li>
<li><p>《岁月如歌》</p>
</li>
</ul>
<h2 id="张国荣"><a href="#张国荣" class="headerlink" title="张国荣"></a>张国荣</h2><ul>
<li><p>《风继续吹》</p>
</li>
<li><p>《怪你过分美丽》</p>
</li>
<li><p>《有谁共鸣》</p>
</li>
<li><p>《当年情》</p>
</li>
<li><p>《为你钟情》 </p>
</li>
<li><p>《我》</p>
</li>
<li><p>《Monica》</p>
</li>
<li><p>《倩女幽魂》</p>
</li>
<li><p>《明星》</p>
</li>
<li><p>《共同渡过》</p>
</li>
<li><p>《春夏秋冬》</p>
</li>
<li><p>《风再起时》</p>
</li>
<li><p>《玻璃之情》</p>
</li>
<li><p>《左右手》</p>
</li>
<li><p>《追》</p>
</li>
<li><p>《寂寞夜晚》</p>
</li>
</ul>
<a id="more"></a>
<h2 id="谭咏麟"><a href="#谭咏麟" class="headerlink" title="谭咏麟"></a>谭咏麟</h2><ul>
<li><p>《朋友》</p>
</li>
<li><p>《讲不出再见》</p>
</li>
<li><p>《爱多一次痛多一次》</p>
</li>
<li><p>《无言感激》</p>
</li>
</ul>
<h2 id="刘德华"><a href="#刘德华" class="headerlink" title="刘德华"></a>刘德华</h2><ul>
<li><p>《暗里着迷》</p>
</li>
<li><p>《情感的禁区》</p>
</li>
<li><p>《今天》</p>
</li>
<li><p>《世界第一等》</p>
</li>
<li><p>《一起走过的日子》</p>
</li>
<li><p>《17岁》</p>
</li>
</ul>
<h2 id="张学友"><a href="#张学友" class="headerlink" title="张学友"></a>张学友</h2><ul>
<li><p>《祝福》</p>
</li>
<li><p>《眼泪》</p>
</li>
<li><p>《等》</p>
</li>
<li><p>《爱很简单》</p>
</li>
</ul>
<h2 id="李宗盛"><a href="#李宗盛" class="headerlink" title="李宗盛"></a>李宗盛</h2><ul>
<li><p>《爱的代价》</p>
</li>
<li><p>《山丘》</p>
</li>
<li><p>《明明白白我的心》</p>
</li>
<li><p>《阴天》</p>
</li>
<li><p>《我终于失去了你》</p>
</li>
</ul>
<h2 id="周杰伦"><a href="#周杰伦" class="headerlink" title="周杰伦"></a>周杰伦</h2><ul>
<li><p>《告白气球》</p>
</li>
<li><p>《稻香》</p>
</li>
<li><p>《开不了口》</p>
</li>
<li><p>《龙卷风》</p>
</li>
<li><p>《阳光宅男》</p>
</li>
<li><p>《晴天》</p>
</li>
<li><p>《七里香》</p>
</li>
<li><p>《彩虹》</p>
</li>
<li><p>《安静》</p>
</li>
<li><p>《简单爱》</p>
</li>
<li><p>《轨迹》</p>
</li>
<li><p>《回到过去》</p>
</li>
<li><p>《乌克丽丽》</p>
</li>
<li><p>《退后》</p>
</li>
<li><p>《蜗牛》</p>
</li>
<li><p>《暗号》</p>
</li>
</ul>
<h2 id="粤语"><a href="#粤语" class="headerlink" title="粤语"></a>粤语</h2><ul>
<li><p>《偏偏喜欢你》-陈百强</p>
</li>
<li><p>《我不是伟人》</p>
</li>
<li><p>《友情岁月》</p>
</li>
<li><p>《献世》</p>
</li>
<li><p>《眼睛不能没眼泪》</p>
</li>
</ul>
<h2 id="国语"><a href="#国语" class="headerlink" title="国语"></a>国语</h2><ul>
<li><p>《小手拉大手》</p>
</li>
<li><p>《会呼吸的痛》</p>
</li>
<li><p>《夜空中最亮的星》</p>
</li>
<li><p>《越长大越孤单》</p>
</li>
<li><p>《明天，你好》</p>
</li>
<li><p>《小幸运》</p>
</li>
<li><p>《忘了时间的钟》</p>
</li>
<li><p>《拥抱》</p>
</li>
<li><p>《好想你》</p>
</li>
<li><p>《他不爱我》</p>
</li>
<li><p>《绅士》</p>
</li>
<li><p>《丑八怪》</p>
</li>
<li><p>《认真的雪》</p>
</li>
<li><p>《演员》</p>
</li>
<li><p>《当你》</p>
</li>
<li><p>《她说》</p>
</li>
<li><p>《我很想爱他》</p>
</li>
<li><p>《其实都没有》</p>
</li>
<li><p>《原来你什么都不想要》</p>
</li>
<li><p>《hey Jude》</p>
</li>
<li><p>《我也很想他》</p>
</li>
<li><p>《天黑黑》</p>
</li>
<li><p>《我怀恋的》</p>
</li>
<li><p>《开始懂了》</p>
</li>
<li><p>《遇见》</p>
</li>
<li><p>《董小姐》</p>
</li>
<li><p>《斑马，斑马》</p>
</li>
<li><p>《野子》</p>
</li>
<li><p>《神啊，救救我》</p>
</li>
<li><p>《离不开你》</p>
</li>
<li><p>《独家记忆》</p>
</li>
<li><p>《把悲伤留给自己》</p>
</li>
<li><p>《会痛的石头》</p>
</li>
<li><p>《好想好想》</p>
</li>
<li><p>《断点》</p>
</li>
</ul>
<h2 id="民谣"><a href="#民谣" class="headerlink" title="民谣"></a>民谣</h2><ul>
<li><p>《米店》</p>
</li>
<li><p>《南山南》</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/K%E6%AD%8C%E4%B9%8B%E7%8E%8B.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;陈奕迅&quot;&gt;&lt;a href=&quot;#陈奕迅&quot; class=&quot;headerlink&quot; title=&quot;陈奕迅&quot;&gt;&lt;/a&gt;陈奕迅&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《遥远的她》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《一生中最爱》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《明年今日》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《爱情转移》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《富士山下》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《葡萄成熟时》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《苦瓜》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《今天只做一件事》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《与我常在》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《单车》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《好歌献给你》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《阴天快乐》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《今天只做一件事》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《最后今晚》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《可以了》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《喜帖街》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《我什么都没有》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《时光倒流二十年》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《痛爱》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《歌颂》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《最佳损友》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《信心花舍》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《与我常在》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《阿牛》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《沙龙》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《圣诞节》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《兄妹》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《岁月如歌》&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;张国荣&quot;&gt;&lt;a href=&quot;#张国荣&quot; class=&quot;headerlink&quot; title=&quot;张国荣&quot;&gt;&lt;/a&gt;张国荣&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《风继续吹》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《怪你过分美丽》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《有谁共鸣》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《当年情》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《为你钟情》 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《我》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《Monica》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《倩女幽魂》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《明星》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《共同渡过》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《春夏秋冬》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《风再起时》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《玻璃之情》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《左右手》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《追》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《寂寞夜晚》&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java Import</title>
    <link href="http://www.qiuchengjia.cn/2016/08/21/JAVA/Java-Import/"/>
    <id>http://www.qiuchengjia.cn/2016/08/21/JAVA/Java-Import/</id>
    <published>2016-08-21T14:16:38.000Z</published>
    <updated>2016-09-26T11:54:28.077Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>在 Java 中使用import关键字来导入任意类型到同一个编译单元中</p>
</li>
<li><p>在代码中，导入代码应放在包声明代码之后，类型声明代码之前</p>
</li>
</ul>
<p>Java 中有两种类型的导入声明：</p>
<ol>
<li><p>单类型导入（Single-type import declaration）</p>
</li>
<li><p>按需类型导入（Import-on-demand declaration）</p>
</li>
</ol>
<h2 id="单类型导入"><a href="#单类型导入" class="headerlink" title="单类型导入"></a>单类型导入</h2><ul>
<li>单类型导入用于导入指定包中的一个单独的类型（例如一个类）。语法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &lt;fully qualified name of a type&gt;;</div></pre></td></tr></table></figure>
<ul>
<li>下面的代码演示了如何从 org.aptusource 包中导入 Dog 类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aptusource.Dog;</div></pre></td></tr></table></figure>
<ul>
<li><p>单类型导入只能导入一个类型，如果要导入多个类型，那么可以使用多个单独的单类型导入语句</p>
</li>
<li><p>下面的代码导入了 pkg1 包中的 ClassOne，pkg2 包中的 ClassTwo 和 ClassThree，pkg3 包中的 ClassFour：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pkg1.ClassOne; </div><div class="line"><span class="keyword">import</span> pkg2.ClassTwo; </div><div class="line"><span class="keyword">import</span> pkg2.ClassThree; </div><div class="line"><span class="keyword">import</span> pkg3.ClassFour;</div></pre></td></tr></table></figure>
<ul>
<li>下面的代码使用了 Dog 类的全名称</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Main</span></span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[]  args)</span>  </span>&#123;</div><div class="line">      org.aptusource.Dog jack;  <span class="comment">// Uses  full qualified name for the   Dog  class</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>下面的代码演示了如何使用单类型导入，我们将导入 org.aptusource.Dog 类，这样就可以使用简单名称来引用 Dog 类</li>
</ul>
<a id="more"></a>
<p>更改后的 Main类如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aptusource.Dog; <span class="comment">// 导入 Dog 类</span></div><div class="line"></div><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Main</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[]  args)</span>  </span>&#123;</div><div class="line">      Dog  jack; <span class="comment">// 使用 Dog 类的简单名称</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>当编译器遇到简单名称 Dog 所在的代码段时，比如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Dog  jack;</div></pre></td></tr></table></figure>
<ul>
<li><p>编译器将会查找所有的导入声明来将简单名称转换为全名称</p>
</li>
<li><p>像上面的例子中，编译器会将代码段替换为：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.aptusource.Dog  jack;</div></pre></td></tr></table></figure>
<ul>
<li>导入声明可以让你在代码中使用简单名称，增加了代码的可读性</li>
</ul>
<h2 id="按需导入"><a href="#按需导入" class="headerlink" title="按需导入"></a>按需导入</h2><ul>
<li><p>按需导入可以使用一行导入代码来导入多个类型</p>
</li>
<li><p>按需导入的语法如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &lt;<span class="keyword">package</span> name&gt;.*;</div></pre></td></tr></table></figure>
<ul>
<li><p>上面的语句可以看到，包名后直接跟了一个点号和一个星号（*）</p>
</li>
<li><p>例如，下面的代码导入了 org.aptusource 包中的所有类型：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aptusource.*;</div></pre></td></tr></table></figure>
<p>上面的 Main 类可以使用按需导入来重写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aptusource.*;</div><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[]  args)</span>  </span>&#123;</div><div class="line">        Dog  jack; <span class="comment">// 使用 Dog 类的简单名称</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h2><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ul>
<li><p>静态导入是JDK5.0引入的新特性</p>
</li>
<li><p>要使用静态成员（方法和变量）我们必须给出提供这个静态成员的类,使用静态导入可以使被导入类的静态变量和静态方法在当前类直接可见，使用这些静态成员无需再给出他们的类名</p>
</li>
</ul>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><ul>
<li>比如先在一个包中定义一个这样的类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.learnjava;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Common</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AGE = <span class="number">10</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"Hello World!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用一般导入"><a href="#使用一般导入" class="headerlink" title="使用一般导入"></a><strong>使用一般导入</strong></h4><ul>
<li>在另一个包中使用时，如果不用静态导入，是这样用的：<br>前面加入了导入语句，将Common类导入，使用其中的静态成员变量和静态方法时需要加上类名</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.learnjava2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.learnjava.Common;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticImportTest</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> a = Common.AGE;</div><div class="line">        System.out.println(a);</div><div class="line"></div><div class="line">        Common.output();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用静态导入"><a href="#使用静态导入" class="headerlink" title="使用静态导入"></a><strong>使用静态导入</strong></h4><p>静态导入的语法是： </p>
<ul>
<li>import static 包名.类名.静态成员变量; </li>
<li>import static 包名.类名.静态成员函数; </li>
</ul>
<blockquote>
<p><strong>注意导入的是成员变量和方法名</strong></p>
</blockquote>
<ul>
<li>如前面的程序使用静态导入后：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.learnjava2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.learnjava.Common.AGE;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.learnjava.Common.output;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticImportTest</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> a = AGE;</div><div class="line">        System.out.println(a);</div><div class="line"></div><div class="line">        output();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li><p>减少字符输入量，提高代码的可阅读性，以便更好地理解程序</p>
</li>
<li><p>举一个例子来说：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathUtils</span></span>&#123;</div><div class="line">    <span class="comment">// 计算圆面积</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calCircleArea</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> PI * r * r;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 计算球面积</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calBallArea</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">4</span> * PI * r * r;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>滥用静态导入会使程序更难阅读，更难维护。静态导入后，代码中就不用再写类名了，但是我们知道类是“一类事物的描述”，缺少了类名的修饰，静态属性和静态方法的表象意义可以被无限放大，这会让阅读者很难弄清楚其属性或方法代表何意，甚至是哪一个类的属性（方法）都要思考一番，特别是在一个类中有多个静态导入语句时，若还使用了*通配符，把一个类的所有静态元素都导入进来了，那简直就是恶梦</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://blog.csdn.net/houhow/article/details/51567471" target="_blank" rel="external">Java静态导入</a></p>
</li>
<li><p><a href="http://codecloud.net/7299.html" target="_blank" rel="external">Java import</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 Java 中使用import关键字来导入任意类型到同一个编译单元中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在代码中，导入代码应放在包声明代码之后，类型声明代码之前&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java 中有两种类型的导入声明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;单类型导入（Single-type import declaration）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按需类型导入（Import-on-demand declaration）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;单类型导入&quot;&gt;&lt;a href=&quot;#单类型导入&quot; class=&quot;headerlink&quot; title=&quot;单类型导入&quot;&gt;&lt;/a&gt;单类型导入&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单类型导入用于导入指定包中的一个单独的类型（例如一个类）。语法如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;lt;fully qualified name of a type&amp;gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;下面的代码演示了如何从 org.aptusource 包中导入 Dog 类：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.aptusource.Dog;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单类型导入只能导入一个类型，如果要导入多个类型，那么可以使用多个单独的单类型导入语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下面的代码导入了 pkg1 包中的 ClassOne，pkg2 包中的 ClassTwo 和 ClassThree，pkg3 包中的 ClassFour：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pkg1.ClassOne; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pkg2.ClassTwo; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pkg2.ClassThree; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pkg3.ClassFour;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;下面的代码使用了 Dog 类的全名称&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;  &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[]  args)&lt;/span&gt;  &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      org.aptusource.Dog jack;  &lt;span class=&quot;comment&quot;&gt;// Uses  full qualified name for the   Dog  class&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;下面的代码演示了如何使用单类型导入，我们将导入 org.aptusource.Dog 类，这样就可以使用简单名称来引用 Dog 类&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java协变和逆变</title>
    <link href="http://www.qiuchengjia.cn/2016/08/17/JAVA/Java%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/"/>
    <id>http://www.qiuchengjia.cn/2016/08/17/JAVA/Java协变和逆变/</id>
    <published>2016-08-16T20:49:41.000Z</published>
    <updated>2016-09-26T11:54:28.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是协变和逆变"><a href="#什么是协变和逆变" class="headerlink" title="什么是协变和逆变"></a>什么是协变和逆变</h2><ul>
<li><p>我们将围绕如下三个核心名词：协变性（covariance）、逆变性(contravariance)和无关性（invariant）。他们都是用来描述类型转换的性质的术语</p>
</li>
<li><p>到底什么是协变和逆变？先看例子：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Java</span></div><div class="line">Object[] objects = <span class="keyword">new</span> String[<span class="number">2</span>];</div><div class="line"><span class="comment">//C# </span></div><div class="line">object[] objects = <span class="keyword">new</span> string[<span class="number">2</span>];</div></pre></td></tr></table></figure>
<ul>
<li>这就是协变，C#和Java都是支持数组协变的语言，好像说了等于没说，别急，慢慢来</li>
</ul>
<p>我们都知道C#和Java中String类型都是继承自Object的，姑且记做<strong>String ≦ Object</strong>，表示String是Object的子类型，String的对象可以赋给Object的对象</p>
<p>而Object的数组类型Object[]，我们可以理解成是由Object构造出来的一种新的类型,可以认为是一种<strong>构造类型</strong>，记f(Object)（可以类比下初中数学中函数的定义），那么我们可以这么来描述协变和逆变：</p>
<ul>
<li><p>当A ≦ B时,如果有f(A) ≦ f(B),那么f叫做协变(covariance)；</p>
</li>
<li><p>当A ≦ B时,如果有f(B) ≦ f(A),那么f叫做逆变(contravariance)；</p>
</li>
<li><p>如果上面两种关系都不成立则叫做不可变(invariant)</p>
</li>
</ul>
<h3 id="协变"><a href="#协变" class="headerlink" title="协变"></a><strong>协变</strong></h3><p>其实顾名思义，协变和逆变表示的一种类型转变的关系：“构造类型”之间相对“子类型”之间的一种关系。只不过平时我（可能也包括大家）被网上的一些文章搞糊涂了。“协”表示一种自然而然的转换关系，比如上面的String[] ≦ Object[]，这就是大家学习面向对象编程语言中经常说的：</p>
<blockquote>
<p>子类变量能赋给父类变量，父类变量不能赋值给子类变量</p>
</blockquote>
<h3 id="逆变"><a href="#逆变" class="headerlink" title="逆变"></a><strong>逆变</strong></h3><ul>
<li>而“逆”则不那么直观，平时用的也很少，后面讲<strong>Java泛型中的协变和逆变</strong>会看到例子</li>
</ul>
<a id="more"></a>
<h3 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a><strong>不可变</strong></h3><ul>
<li>不可变的例子就很多了，比如Java中List&lt; Object &gt;和List&lt; String &gt;之间就是不可变的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">List&lt;Object&gt; list2 = list1;</div></pre></td></tr></table></figure>
<ul>
<li>这两行代码在Java中肯定是编译不过的，反过来更不可能，C#中也是一样</li>
</ul>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>那么<strong>协变</strong>和<strong>逆变</strong>作用：主要是语言设计的一种考量，目的是为了增加语言的灵活性和能力</li>
</ul>
<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><ul>
<li>再说下面内容之前，提下这个大家都知道的原则：</li>
</ul>
<blockquote>
<p>有使用父类型对象的地方都可以换成子类型对象</p>
</blockquote>
<ul>
<li>假设有类Fruit和Apple,Apple ≦ Fruit，Fruit类有一个方法fun1，返回一个Object对象:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">fun1</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line">Fruit f = <span class="keyword">new</span> Fruit();</div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="comment">//某地方用到了f对象</span></div><div class="line">Object obj = f.fun1();</div></pre></td></tr></table></figure>
<ul>
<li>那么现在Aplle对象覆盖fun1，假设可以返回一个String对象：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fun1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">&#125;</div><div class="line">Fruit f = <span class="keyword">new</span> Apple();</div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="comment">//某地方用到了f对象</span></div><div class="line">Object obj = f.fun1();</div></pre></td></tr></table></figure>
<ul>
<li><p>那么任何使用Fruit对象的地方都能替换成Apple对象吗？显然是可以的</p>
</li>
<li><p>举得例子是返回值，如果是方法参数呢？调用父类方法fun2(String)的地方肯定可以被一个能够接受更宽类型的方法替代：fun2(Object)……</p>
</li>
</ul>
<h2 id="协变返回值"><a href="#协变返回值" class="headerlink" title="协变返回值"></a>协变返回值</h2><ul>
<li>在面向对象语言中，一个协变返回值方法是一个在子类覆盖该方法的时候，方法的返回值可以被一个“更窄”的类型所替代（C#并不支持这个技术，C++和Java JDK5.0后开始支持）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123; </div><div class="line">      <span class="function">Object <span class="title">getSomething</span><span class="params">()</span> </span>&#123; </div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>; </div><div class="line">   &#125; </div><div class="line">&#125; </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line">     <span class="function">String <span class="title">getSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>虽然Java是面向对象的语言，但某种程度上支持<strong>返回值协变</strong>，Java子类覆盖父类方法的时候能够返回一个“更窄”的子类型，所以说Java是一门可以支持<strong>返回值协变</strong>的语言</li>
</ul>
<h2 id="参数逆变"><a href="#参数逆变" class="headerlink" title="参数逆变"></a>参数逆变</h2><ul>
<li>类似<strong>参数逆变</strong>是指子类覆盖父类方法时接受一个“更宽”的父类型。在Java和C#中这都被当作了<strong>方法重载</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123; </div><div class="line">          <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String parameter)</span> </span>&#123; </div><div class="line">          &#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123; </div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Object parameter)</span> </span>&#123; </div><div class="line">         &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Java泛型中的协变和逆变"><a href="#Java泛型中的协变和逆变" class="headerlink" title="Java泛型中的协变和逆变"></a>Java泛型中的协变和逆变</h2><ul>
<li>一般我们看Java泛型好像是不支持协变或逆变的，<strong>List&lt; Object&gt;</strong>和<strong>List&lt; String&gt;</strong>之间是不可变的。但当我们在Java泛型中引入通配符这个概念的时候，Java 其实是支持协变和逆变的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不可变</span></div><div class="line">List&lt;Fruit&gt; fruits = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();<span class="comment">// 编译不通过</span></div><div class="line"><span class="comment">// 协变</span></div><div class="line">List&lt;? extends Fruit&gt; wildcardFruits = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();</div><div class="line"><span class="comment">// 协变-&gt;方法的返回值，对返回类型是协变的:Fruit-&gt;Apple</span></div><div class="line">Fruit fruit = wildcardFruits.get(<span class="number">0</span>);</div><div class="line"><span class="comment">// 不可变</span></div><div class="line">List&lt;Apple&gt; apples = <span class="keyword">new</span> ArrayList&lt;Fruit&gt;();<span class="comment">// 编译不通过</span></div><div class="line"><span class="comment">// 逆变</span></div><div class="line">List&lt;? <span class="keyword">super</span> Apple&gt; wildcardApples = <span class="keyword">new</span> ArrayList&lt;Fruit&gt;();</div><div class="line"><span class="comment">// 逆变-&gt;方法的参数，对输入类型是逆变的:Apple-&gt;Fruit</span></div><div class="line">wildcardApples.add(<span class="keyword">new</span> Apple());</div></pre></td></tr></table></figure>
<ul>
<li><p>可见在Java泛型中通过<strong>extends</strong>关键字可以提供协变的泛型类型转换，通过<strong>supper</strong>可以提供逆变的泛型类型转换</p>
</li>
<li><p>关于Java泛型中<strong>supper</strong>和<strong>extends</strong>关键字的作用网上有很多文章，这里不再赘述。只举一个《Java Core》里面<strong>supper</strong>使用的例子：下面的代码能够对实现<strong>Comparable</strong>接口的对象数组求最小值</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function">T <span class="title">min</span><span class="params">(T[] a)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span> || a.length == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    T t = a[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (t.compareTo(a[i]) &gt; <span class="number">0</span>) &#123;</div><div class="line">            t = a[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这段代码对<strong>Calendar</strong>类是运行正常的，但对<strong>GregorianCalendar</strong>类则无法编译通过：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Calendar[] calendars = <span class="keyword">new</span> Calendar[<span class="number">2</span>];</div><div class="line">Calendar ret3 = CovariantAndContravariant.&lt;Calendar&gt; min(calendars);</div><div class="line">GregorianCalendar[] calendars2 = <span class="keyword">new</span> GregorianCalendar[<span class="number">2</span>];</div><div class="line">GregorianCalendar ret2 = CovariantAndContravariant.&lt;GregorianCalendar&gt; min(calendars2);<span class="comment">//编译不通过</span></div></pre></td></tr></table></figure>
<ul>
<li>如果想工作正常需要将方法签名修改为： </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function">T <span class="title">min</span><span class="params">(T[] a)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>至于原因，大家看下源码和网上大量关于supper的作用应该就明白了，我这里希望能够给看了上面内容的同学提供另外一个思路……</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://www.zybuluo.com/zhanjindong/note/34147" target="_blank" rel="external">再谈对协变和逆变的理解</a></p>
</li>
<li><p><a href="http://www.2cto.com/kf/201304/205042.html" target="_blank" rel="external">Java 协变性 逆变性 学习笔记</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是协变和逆变&quot;&gt;&lt;a href=&quot;#什么是协变和逆变&quot; class=&quot;headerlink&quot; title=&quot;什么是协变和逆变&quot;&gt;&lt;/a&gt;什么是协变和逆变&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们将围绕如下三个核心名词：协变性（covariance）、逆变性(contravariance)和无关性（invariant）。他们都是用来描述类型转换的性质的术语&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;到底什么是协变和逆变？先看例子：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Java&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Object[] objects = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//C# &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;object[] objects = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; string[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;这就是协变，C#和Java都是支持数组协变的语言，好像说了等于没说，别急，慢慢来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们都知道C#和Java中String类型都是继承自Object的，姑且记做&lt;strong&gt;String ≦ Object&lt;/strong&gt;，表示String是Object的子类型，String的对象可以赋给Object的对象&lt;/p&gt;
&lt;p&gt;而Object的数组类型Object[]，我们可以理解成是由Object构造出来的一种新的类型,可以认为是一种&lt;strong&gt;构造类型&lt;/strong&gt;，记f(Object)（可以类比下初中数学中函数的定义），那么我们可以这么来描述协变和逆变：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当A ≦ B时,如果有f(A) ≦ f(B),那么f叫做协变(covariance)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当A ≦ B时,如果有f(B) ≦ f(A),那么f叫做逆变(contravariance)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果上面两种关系都不成立则叫做不可变(invariant)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;协变&quot;&gt;&lt;a href=&quot;#协变&quot; class=&quot;headerlink&quot; title=&quot;协变&quot;&gt;&lt;/a&gt;&lt;strong&gt;协变&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;其实顾名思义，协变和逆变表示的一种类型转变的关系：“构造类型”之间相对“子类型”之间的一种关系。只不过平时我（可能也包括大家）被网上的一些文章搞糊涂了。“协”表示一种自然而然的转换关系，比如上面的String[] ≦ Object[]，这就是大家学习面向对象编程语言中经常说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;子类变量能赋给父类变量，父类变量不能赋值给子类变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;逆变&quot;&gt;&lt;a href=&quot;#逆变&quot; class=&quot;headerlink&quot; title=&quot;逆变&quot;&gt;&lt;/a&gt;&lt;strong&gt;逆变&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;而“逆”则不那么直观，平时用的也很少，后面讲&lt;strong&gt;Java泛型中的协变和逆变&lt;/strong&gt;会看到例子&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java方法签名</title>
    <link href="http://www.qiuchengjia.cn/2016/08/14/JAVA/Java%E6%96%B9%E6%B3%95%E7%AD%BE%E5%90%8D/"/>
    <id>http://www.qiuchengjia.cn/2016/08/14/JAVA/Java方法签名/</id>
    <published>2016-08-14T14:50:34.000Z</published>
    <updated>2016-09-26T11:54:28.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法签名的意义"><a href="#方法签名的意义" class="headerlink" title="方法签名的意义"></a>方法签名的意义</h2><ul>
<li>对于同名不同类、同类不同名的方法，方法签名的意义并不是很大，但是对于重载方法来说，方法签名的意义就十分巨大了。由于重载方法之间的方法名是相同的，那么我们势必要从构成方法的其他几个要素中找到另一个要素与方法名组成能够唯一标示方法的签名，方法体当然不予考虑。那么就是形参列表和返回值了，但是由于对于调用方法的人来说，方法的形参数据类型列表的重要程度要远远高于返回值，所以方法签名就由方法名+形参列表构成，也就是说，<strong>方法名和形参数据类型列表可以唯一的确定一个方法，与方法的返回值一点关系都没有，这是判断重载重要依据，所以，以下的代码是不允许的</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">aaaa</span><span class="params">()</span></span>&#123;  </div><div class="line">      </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">aaaa</span><span class="params">()</span></span>&#123;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法签名的格式"><a href="#方法签名的格式" class="headerlink" title="方法签名的格式"></a>方法签名的格式</h2><ul>
<li>首先我们先看几个方法以及他们的方法签名：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;&#125;                   test1()<span class="function">V</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(String str)</span>     <span class="title">test2</span><span class="params">(Ljava/lang/String;)</span>V</div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test3</span><span class="params">()</span>&#123;&#125;                      test3()I</div></pre></td></tr></table></figure>
<ul>
<li>从以上三个例子，我们就可以很简单的看出一些小小的规律：<br>JVM为我们提供的方法签名实际上是由方法名(上文的例子为了简单没有写出全类名)、形参列表、返回值三部分构成的，基本形式就是：<br><strong>全类名.方法名(形参数据类型列表)返回值数据类型</strong></li>
</ul>
<ul>
<li><strong>Java方法签名中特殊字符/字母含义</strong></li>
</ul>
<table>
<thead>
<tr>
<th>特殊字符</th>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">特殊说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>V</td>
<td style="text-align:left">void</td>
<td style="text-align:left">一般用于表示方法的返回值</td>
</tr>
<tr>
<td>Z</td>
<td style="text-align:left">boolean     </td>
</tr>
<tr>
<td>B</td>
<td style="text-align:left">byte     </td>
</tr>
<tr>
<td>C</td>
<td style="text-align:left">char     </td>
</tr>
<tr>
<td>S</td>
<td style="text-align:left">short     </td>
</tr>
<tr>
<td>I</td>
<td style="text-align:left">int     </td>
</tr>
<tr>
<td>J</td>
<td style="text-align:left">long     </td>
</tr>
<tr>
<td>F</td>
<td style="text-align:left">float     </td>
</tr>
<tr>
<td>D</td>
<td style="text-align:left">double     </td>
</tr>
<tr>
<td>[</td>
<td style="text-align:left">数组</td>
<td style="text-align:left">以[开头，配合其他的特殊字符，表示对应数据类型的数组，几个[表示几维数组</td>
</tr>
<tr>
<td>L</td>
<td style="text-align:left">全类名;</td>
<td style="text-align:left">引用类型    以 L 开头 ; 结尾，中间是引用类型的全类名</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<blockquote>
<p>一定要注意的是方法重载时，方法返回值没有什么意义，是由方法名和参数列表决定的</p>
</blockquote>
<h2 id="利用javap生成方法签名"><a href="#利用javap生成方法签名" class="headerlink" title="利用javap生成方法签名"></a>利用javap生成方法签名</h2><h3 id="类库类"><a href="#类库类" class="headerlink" title="类库类"></a>类库类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">$ javap -s java.lang.String  </div><div class="line">Compiled from <span class="string">"String.java"</span>  </div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>,<span class="title">java</span>.<span class="title">lang</span>.<span class="title">Comparable</span>,<span class="title">java</span>.<span class="title">lang</span>.<span class="title">CharSequence</span></span>&#123;  </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> java.util.Comparator CASE_INSENSITIVE_ORDER;  </div><div class="line">  Signature: Ljava/util/Comparator;  </div><div class="line"><span class="keyword">public</span> java.lang.String();  </div><div class="line">  Signature: ()V  </div><div class="line"><span class="keyword">public</span> java.lang.String(java.lang.String);  </div><div class="line">  Signature: (Ljava/lang/String;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">char</span>[]);  </div><div class="line">  Signature: ([C)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">char</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>);  </div><div class="line">  Signature: ([CII)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">int</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>);  </div><div class="line">  Signature: ([III)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>);  </div><div class="line">  Signature: ([BIII)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>);  </div><div class="line">  Signature: ([BI)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>, java.lang.String)   <span class="keyword">throws</span> java.io.UnsupportedEncodingException;  </div><div class="line">  Signature: ([BIILjava/lang/String;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>, java.nio.charset.Charset);  </div><div class="line">  Signature: ([BIILjava/nio/charset/Charset;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], java.lang.String)   <span class="keyword">throws</span> java.io.UnsupportedEncodingException;  </div><div class="line">  Signature: ([BLjava/lang/String;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], java.nio.charset.Charset);  </div><div class="line">  Signature: ([BLjava/nio/charset/Charset;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>);  </div><div class="line">  Signature: ([BII)V  </div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.demo;  </div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SigTest</span> </span>&#123;  </div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String name = <span class="keyword">null</span>;  </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getName</span><span class="params">(<span class="keyword">int</span>[] data,<span class="keyword">long</span> index)</span> </span>&#123;  </div><div class="line">         <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">     &#125;  </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>输出</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ javac SigTest.java </div><div class="line">$ javap -s -p com.demo.SigTest</div><div class="line">Compiled from <span class="string">"SigTest.java"</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">demo</span>.<span class="title">SigTest</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String name;</div><div class="line">  Signature: Ljava/lang/String;</div><div class="line"><span class="keyword">public</span> com.demo.SigTest();</div><div class="line">  Signature: ()<span class="function">V</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getName</span><span class="params">(<span class="keyword">int</span>[], <span class="keyword">long</span>)</span>;</div><div class="line">  Signature: ([IJ)I</div><div class="line"><span class="keyword">static</span> &#123;&#125;;</div><div class="line">  Signature: ()V</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>-s 表示打印签名信息</p>
</li>
<li><p>-p 表示打印所有函数和成员的签名信息，默认只打印public的签名信息</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;方法签名的意义&quot;&gt;&lt;a href=&quot;#方法签名的意义&quot; class=&quot;headerlink&quot; title=&quot;方法签名的意义&quot;&gt;&lt;/a&gt;方法签名的意义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对于同名不同类、同类不同名的方法，方法签名的意义并不是很大，但是对于重载方法来说，方法签名的意义就十分巨大了。由于重载方法之间的方法名是相同的，那么我们势必要从构成方法的其他几个要素中找到另一个要素与方法名组成能够唯一标示方法的签名，方法体当然不予考虑。那么就是形参列表和返回值了，但是由于对于调用方法的人来说，方法的形参数据类型列表的重要程度要远远高于返回值，所以方法签名就由方法名+形参列表构成，也就是说，&lt;strong&gt;方法名和形参数据类型列表可以唯一的确定一个方法，与方法的返回值一点关系都没有，这是判断重载重要依据，所以，以下的代码是不允许的&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;aaaa&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;aaaa&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;方法签名的格式&quot;&gt;&lt;a href=&quot;#方法签名的格式&quot; class=&quot;headerlink&quot; title=&quot;方法签名的格式&quot;&gt;&lt;/a&gt;方法签名的格式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先我们先看几个方法以及他们的方法签名：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;                   test1()&lt;span class=&quot;function&quot;&gt;V&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String str)&lt;/span&gt;     &lt;span class=&quot;title&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Ljava/lang/String;)&lt;/span&gt;V&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;                      test3()I&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;从以上三个例子，我们就可以很简单的看出一些小小的规律：&lt;br&gt;JVM为我们提供的方法签名实际上是由方法名(上文的例子为了简单没有写出全类名)、形参列表、返回值三部分构成的，基本形式就是：&lt;br&gt;&lt;strong&gt;全类名.方法名(形参数据类型列表)返回值数据类型&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Java方法签名中特殊字符/字母含义&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特殊字符&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;数据类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;特殊说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;void&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;一般用于表示方法的返回值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;boolean     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;byte     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;char     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;short     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;int     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;J&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;long     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;float     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;double     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;数组&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;以[开头，配合其他的特殊字符，表示对应数据类型的数组，几个[表示几维数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;全类名;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;引用类型    以 L 开头 ; 结尾，中间是引用类型的全类名&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
</feed>
