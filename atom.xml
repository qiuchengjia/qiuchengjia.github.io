<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>戎码人生</title>
  <subtitle>世界上有10种人，一种懂二进制，一种不懂二进制 ！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.qiuchengjia.cn/"/>
  <updated>2016-09-27T07:59:30.419Z</updated>
  <id>http://www.qiuchengjia.cn/</id>
  
  <author>
    <name>戎码人生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android DiskLruCache和LruCache缓存完全解析</title>
    <link href="http://www.qiuchengjia.cn/2016/09/27/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/Android%20DiskLruCache%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%8C%E7%A1%AC%E7%9B%98%E7%BC%93%E5%AD%98%E7%9A%84%E6%9C%80%E4%BD%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://www.qiuchengjia.cn/2016/09/27/Android进阶之路/Android DiskLruCache完全解析，硬盘缓存的最佳方案/</id>
    <published>2016-09-27T15:44:34.000Z</published>
    <updated>2016-09-27T07:59:30.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LruCache缓存"><a href="#LruCache缓存" class="headerlink" title="LruCache缓存"></a>LruCache缓存</h2><ul>
<li><p>在你应用程序的UI界面加载一张图片是一件很简单的事情，但是当你需要在界面上加载一大堆图片的时候，情况就变得复杂起来。在很多情况下，（比如使用ListView, GridView 或者 ViewPager 这样的组件），屏幕上显示的图片可以通过滑动屏幕等事件不断地增加，最终导致OOM</p>
</li>
<li><p>为了保证内存的使用始终维持在一个合理的范围，通常会把被移除屏幕的图片进行回收处理。此时垃圾回收器也会认为你不再持有这些图片的引用，从而对这些图片进行GC操作。用这种思路来解决问题是非常好的，可是为了能让程序快速运行，在界面上迅速地加载图片，你又必须要考虑到某些图片被回收之后，用户又将它重新滑入屏幕这种情况。这时重新去加载一遍刚刚加载过的图片无疑是性能的瓶颈，你需要想办法去避免这个情况的发生</p>
</li>
<li><p>这个时候，使用内存缓存技术可以很好的解决这个问题，它可以让组件快速地重新加载和处理图片。下面我们就来看一看如何使用内存缓存技术来对图片进行缓存，从而让你的应用程序在加载很多图片的时候可以提高响应速度和流畅性</p>
</li>
<li><p>内存缓存技术对那些大量占用应用程序宝贵内存的图片提供了快速访问的方法。其中最核心的类是LruCache (此类在android-support-v4的包中提供) 。这个类非常适合用来缓存图片，它的主要算法原理是把最近使用的对象用强引用存储在 LinkedHashMap 中，并且把最近最少使用的对象在缓存值达到预设定值之前从内存中移除</p>
</li>
<li><p>在过去，我们经常会使用一种非常流行的内存缓存技术的实现，即软引用或弱引用 (SoftReference or WeakReference)。但是现在已经不再推荐使用这种方式了，因为从 Android 2.3 (API Level 9)开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。另外，Android 3.0 (API Level 11)中，图片的数据会存储在本地的内存当中，因而无法用一种可预见的方式将其释放，这就有潜在的风险造成应用程序的内存溢出并崩溃</p>
</li>
</ul>
<p>为了能够选择一个合适的缓存大小给LruCache, 有以下多个因素应该放入考虑范围内，例如：</p>
<ul>
<li><p>你的设备可以为每个应用程序分配多大的内存？</p>
</li>
<li><p>设备屏幕上一次最多能显示多少张图片？有多少图片需要进行预加载，因为有可能很快也会显示在屏幕上？</p>
</li>
<li><p>你的设备的屏幕大小和分辨率分别是多少？一个超高分辨率的设备（例如 Galaxy Nexus) 比起一个较低分辨率的设备（例如 Nexus S），在持有相同数量图片的时候，需要更大的缓存空间</p>
</li>
<li><p>图片的尺寸和大小，还有每张图片会占据多少内存空间</p>
</li>
<li><p>图片被访问的频率有多高？会不会有一些图片的访问频率比其它图片要高？如果有的话，你也许应该让一些图片常驻在内存当中，或者使用多个LruCache 对象来区分不同组的图片</p>
</li>
<li><p>你能维持好数量和质量之间的平衡吗？有些时候，存储多个低像素的图片，而在后台去开线程加载高像素的图片会更加的有效</p>
</li>
</ul>
<p>并没有一个指定的缓存大小可以满足所有的应用程序，这是由你决定的。你应该去分析程序内存的使用情况，然后制定出一个合适的解决方案。一个太小的缓存空间，有可能造成图片频繁地被释放和重新加载，这并没有好处。而一个太大的缓存空间，则有可能还是会引起 java.lang.OutOfMemory 的异常</p>
<a id="more"></a>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul>
<li>下面是一个使用 LruCache 来缓存图片的例子：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;  </div><div class="line">  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">    <span class="comment">// 获取到可用内存的最大值，使用内存超出这个值会引起OutOfMemory异常。  </span></div><div class="line">    <span class="comment">// LruCache通过构造函数传入缓存值，以KB为单位。  </span></div><div class="line">    <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);  </div><div class="line">    <span class="comment">// 使用最大可用内存值的1/8作为缓存的大小。  </span></div><div class="line">    <span class="keyword">int</span> cacheSize = maxMemory / <span class="number">8</span>;  </div><div class="line">    mMemoryCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;  </div><div class="line">            <span class="comment">// 重写此方法来衡量每张图片的大小，默认返回图片数量。  </span></div><div class="line">            <span class="keyword">return</span> bitmap.getByteCount() / <span class="number">1024</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBitmapToMemoryCache</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (getBitmapFromMemCache(key) == <span class="keyword">null</span>) &#123;  </div><div class="line">        mMemoryCache.put(key, bitmap);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapFromMemCache</span><span class="params">(String key)</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> mMemoryCache.get(key);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在这个例子当中，使用了系统分配给应用程序的八分之一内存来作为缓存大小。在中高配置的手机当中，这大概会有4兆(32/8)的缓存空间。一个全屏幕的 GridView 使用4张 800x480分辨率的图片来填充，则大概会占用1.5兆的空间(800<em>480</em>4)。因此，这个缓存大小可以存储2.5页的图片。<br>当向 ImageView 中加载一张图片时,首先会在 LruCache 的缓存中进行检查。如果找到了相应的键值，则会立刻更新ImageView ，否则开启一个后台线程来加载这张图片</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBitmap</span><span class="params">(<span class="keyword">int</span> resId, ImageView imageView)</span> </span>&#123;  </div><div class="line">    <span class="keyword">final</span> String imageKey = String.valueOf(resId);  </div><div class="line">    <span class="keyword">final</span> Bitmap bitmap = getBitmapFromMemCache(imageKey);  </div><div class="line">    <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;  </div><div class="line">        imageView.setImageBitmap(bitmap);  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        imageView.setImageResource(R.drawable.image_placeholder);  </div><div class="line">        BitmapWorkerTask task = <span class="keyword">new</span> BitmapWorkerTask(imageView);  </div><div class="line">        task.execute(resId);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>BitmapWorkerTask 还要把新加载的图片的键值对放到缓存中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BitmapWorkerTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Integer</span>, <span class="title">Void</span>, <span class="title">Bitmap</span>&gt; </span>&#123;  </div><div class="line">    <span class="comment">// 在后台加载图片。  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(Integer... params)</span> </span>&#123;  </div><div class="line">        <span class="keyword">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(  </div><div class="line">                getResources(), params[<span class="number">0</span>], <span class="number">100</span>, <span class="number">100</span>);  </div><div class="line">        addBitmapToMemoryCache(String.valueOf(params[<span class="number">0</span>]), bitmap);  </div><div class="line">        <span class="keyword">return</span> bitmap;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LruCache缓存&quot;&gt;&lt;a href=&quot;#LruCache缓存&quot; class=&quot;headerlink&quot; title=&quot;LruCache缓存&quot;&gt;&lt;/a&gt;LruCache缓存&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在你应用程序的UI界面加载一张图片是一件很简单的事情，但是当你需要在界面上加载一大堆图片的时候，情况就变得复杂起来。在很多情况下，（比如使用ListView, GridView 或者 ViewPager 这样的组件），屏幕上显示的图片可以通过滑动屏幕等事件不断地增加，最终导致OOM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了保证内存的使用始终维持在一个合理的范围，通常会把被移除屏幕的图片进行回收处理。此时垃圾回收器也会认为你不再持有这些图片的引用，从而对这些图片进行GC操作。用这种思路来解决问题是非常好的，可是为了能让程序快速运行，在界面上迅速地加载图片，你又必须要考虑到某些图片被回收之后，用户又将它重新滑入屏幕这种情况。这时重新去加载一遍刚刚加载过的图片无疑是性能的瓶颈，你需要想办法去避免这个情况的发生&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个时候，使用内存缓存技术可以很好的解决这个问题，它可以让组件快速地重新加载和处理图片。下面我们就来看一看如何使用内存缓存技术来对图片进行缓存，从而让你的应用程序在加载很多图片的时候可以提高响应速度和流畅性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内存缓存技术对那些大量占用应用程序宝贵内存的图片提供了快速访问的方法。其中最核心的类是LruCache (此类在android-support-v4的包中提供) 。这个类非常适合用来缓存图片，它的主要算法原理是把最近使用的对象用强引用存储在 LinkedHashMap 中，并且把最近最少使用的对象在缓存值达到预设定值之前从内存中移除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在过去，我们经常会使用一种非常流行的内存缓存技术的实现，即软引用或弱引用 (SoftReference or WeakReference)。但是现在已经不再推荐使用这种方式了，因为从 Android 2.3 (API Level 9)开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。另外，Android 3.0 (API Level 11)中，图片的数据会存储在本地的内存当中，因而无法用一种可预见的方式将其释放，这就有潜在的风险造成应用程序的内存溢出并崩溃&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了能够选择一个合适的缓存大小给LruCache, 有以下多个因素应该放入考虑范围内，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;你的设备可以为每个应用程序分配多大的内存？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设备屏幕上一次最多能显示多少张图片？有多少图片需要进行预加载，因为有可能很快也会显示在屏幕上？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你的设备的屏幕大小和分辨率分别是多少？一个超高分辨率的设备（例如 Galaxy Nexus) 比起一个较低分辨率的设备（例如 Nexus S），在持有相同数量图片的时候，需要更大的缓存空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片的尺寸和大小，还有每张图片会占据多少内存空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片被访问的频率有多高？会不会有一些图片的访问频率比其它图片要高？如果有的话，你也许应该让一些图片常驻在内存当中，或者使用多个LruCache 对象来区分不同组的图片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你能维持好数量和质量之间的平衡吗？有些时候，存储多个低像素的图片，而在后台去开线程加载高像素的图片会更加的有效&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并没有一个指定的缓存大小可以满足所有的应用程序，这是由你决定的。你应该去分析程序内存的使用情况，然后制定出一个合适的解决方案。一个太小的缓存空间，有可能造成图片频繁地被释放和重新加载，这并没有好处。而一个太大的缓存空间，则有可能还是会引起 java.lang.OutOfMemory 的异常&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶之路" scheme="http://www.qiuchengjia.cn/categories/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Android进阶之路" scheme="http://www.qiuchengjia.cn/tags/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android高效加载大图、多图和LruCache缓存</title>
    <link href="http://www.qiuchengjia.cn/2016/09/27/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/Android%E9%AB%98%E6%95%88%E5%8A%A0%E8%BD%BD%E5%A4%A7%E5%9B%BE%E3%80%81%E5%A4%9A%E5%9B%BE%E5%92%8CLruCache%E7%BC%93%E5%AD%98/"/>
    <id>http://www.qiuchengjia.cn/2016/09/27/Android进阶之路/Android高效加载大图、多图和LruCache缓存/</id>
    <published>2016-09-27T14:40:43.000Z</published>
    <updated>2016-09-27T11:52:09.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高效加载大图"><a href="#高效加载大图" class="headerlink" title="高效加载大图"></a>高效加载大图</h2><ul>
<li>我们在编写Android程序的时候经常要用到许多图片，不同图片总是会有不同的形状、不同的大小，但在大多数情况下，这些图片都会大于我们程序所需要的大小。比如说系统图片库里展示的图片大都是用手机摄像头拍出来的，这些图片的分辨率会比我们手机屏幕的分辨率高得多。大家应该知道，我们编写的应用程序都是有一定内存限制的，程序占用了过高的内存就容易出现OOM(OutOfMemory)异常。我们可以通过下面的代码看出每个应用程序最高可用内存是多少</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);  </div><div class="line">Log.d(<span class="string">"TAG"</span>, <span class="string">"Max memory is "</span> + maxMemory + <span class="string">"KB"</span>);</div></pre></td></tr></table></figure>
<ul>
<li><p>因此在展示高分辨率图片的时候，最好先将图片进行压缩。压缩后的图片大小应该和用来展示它的控件大小相近，在一个很小的ImageView上显示一张超大的图片不会带来任何视觉上的好处，但却会占用我们相当多宝贵的内存，而且在性能上还可能会带来负面影响。下面我们就来看一看，如何对一张大图片进行适当的压缩，让它能够以最佳大小显示的同时，还能防止OOM的出现</p>
</li>
<li><p>BitmapFactory这个类提供了多个解析方法(decodeByteArray, decodeFile, decodeResource等)用于创建Bitmap对象，我们应该根据图片的来源选择合适的方法。比如SD卡中的图片可以使用decodeFile方法，网络上的图片可以使用decodeStream方法，资源文件中的图片可以使用decodeResource方法。这些方法会尝试为已经构建的bitmap分配内存，这时就会很容易导致OOM出现。为此每一种解析方法都提供了一个可选的</p>
</li>
<li><p>BitmapFactory.Options参数，将这个参数的inJustDecodeBounds属性设置为true就可以让解析方法禁止为bitmap分配内存，返回值也不再是一个Bitmap对象，而是null。虽然Bitmap是null了，但是BitmapFactory.Options的outWidth、outHeight和outMimeType属性都会被赋值。这个技巧让我们可以在加载图片之前就获取到图片的长宽值和MIME类型，从而根据情况对图片进行压缩。如下代码所示：</p>
</li>
</ul>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();  </div><div class="line">options.inJustDecodeBounds = <span class="keyword">true</span>;  </div><div class="line">BitmapFactory.decodeResource(getResources(), R.id.myimage, options);  </div><div class="line"><span class="keyword">int</span> imageHeight = options.outHeight;  </div><div class="line"><span class="keyword">int</span> imageWidth = options.outWidth;  </div><div class="line">String imageType = options.outMimeType;</div></pre></td></tr></table></figure>
<ul>
<li>为了避免OOM异常，最好在解析每张图片的时候都先检查一下图片的大小，除非你非常信任图片的来源，保证这些图片都不会超出你程序的可用内存</li>
</ul>
<p>现在图片的大小已经知道了，我们就可以决定是把整张图片加载到内存中还是加载一个压缩版的图片到内存中。以下几个因素是我们需要考虑的：</p>
<ul>
<li><p>预估一下加载整张图片所需占用的内存</p>
</li>
<li><p>为了加载这一张图片你所愿意提供多少内存</p>
</li>
<li><p>用于展示这张图片的控件的实际大小</p>
</li>
<li><p>当前设备的屏幕尺寸和分辨率</p>
</li>
</ul>
<p>比如，你的ImageView只有128<em>96像素的大小，只是为了显示一张缩略图，这时候把一张1024</em>768像素的图片完全加载到内存中显然是不值得的</p>
<ul>
<li>那我们怎样才能对图片进行压缩呢？通过设置BitmapFactory.Options中inSampleSize的值就可以实现。比如我们有一张2048<em>1536像素的图片，将inSampleSize的值设置为4，就可以把这张图片压缩成512</em>384像素。原本加载这张图片需要占用13M的内存，压缩后就只需要占用0.75M了(假设图片是ARGB_8888类型，即每个像素点占用4个字节)。下面的方法可以根据传入的宽和高，计算出合适的inSampleSize值：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateInSampleSize</span><span class="params">(BitmapFactory.Options options,  </span></span></div><div class="line">        <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight) &#123;  </div><div class="line">    <span class="comment">// 源图片的高度和宽度  </span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;  </div><div class="line">    <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;  </div><div class="line">    <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;  </div><div class="line">        <span class="comment">// 计算出实际宽高和目标宽高的比率  </span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> heightRatio = Math.round((<span class="keyword">float</span>) height / (<span class="keyword">float</span>) reqHeight);  </div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> widthRatio = Math.round((<span class="keyword">float</span>) width / (<span class="keyword">float</span>) reqWidth);  </div><div class="line">        <span class="comment">// 选择宽和高中最小的比率作为inSampleSize的值，这样可以保证最终图片的宽和高  </span></div><div class="line">        <span class="comment">// 一定都会大于等于目标的宽和高。  </span></div><div class="line">        inSampleSize = heightRatio &lt; widthRatio ? heightRatio : widthRatio;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> inSampleSize;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用这个方法，首先你要将BitmapFactory.Options的inJustDecodeBounds属性设置为true，解析一次图片。然后将BitmapFactory.Options连同期望的宽度和高度一起传递到到calculateInSampleSize方法中，就可以得到合适的inSampleSize值了。之后再解析一次图片，使用新获取到的inSampleSize值，并把inJustDecodeBounds设置为false，就可以得到压缩后的图片了</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeSampledBitmapFromResource</span><span class="params">(Resources res, <span class="keyword">int</span> resId,  </span></span></div><div class="line">        <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight) &#123;  </div><div class="line">    <span class="comment">// 第一次解析将inJustDecodeBounds设置为true，来获取图片大小  </span></div><div class="line">    <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();  </div><div class="line">    options.inJustDecodeBounds = <span class="keyword">true</span>;  </div><div class="line">    BitmapFactory.decodeResource(res, resId, options);  </div><div class="line">    <span class="comment">// 调用上面定义的方法计算inSampleSize值  </span></div><div class="line">    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);  </div><div class="line">    <span class="comment">// 使用获取到的inSampleSize值再次解析图片  </span></div><div class="line">    options.inJustDecodeBounds = <span class="keyword">false</span>;  </div><div class="line">    <span class="keyword">return</span> BitmapFactory.decodeResource(res, resId, options);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>下面的代码非常简单地将任意一张图片压缩成100*100的缩略图，并在ImageView上展示</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mImageView.setImageBitmap(  </div><div class="line">    decodeSampledBitmapFromResource(getResources(), R.id.myimage, <span class="number">100</span>, <span class="number">100</span>));</div></pre></td></tr></table></figure>
<h2 id="LruCache缓存"><a href="#LruCache缓存" class="headerlink" title="LruCache缓存"></a>LruCache缓存</h2><ul>
<li><p>在你应用程序的UI界面加载一张图片是一件很简单的事情，但是当你需要在界面上加载一大堆图片的时候，情况就变得复杂起来。在很多情况下，（比如使用ListView, GridView 或者 ViewPager 这样的组件），屏幕上显示的图片可以通过滑动屏幕等事件不断地增加，最终导致OOM</p>
</li>
<li><p>为了保证内存的使用始终维持在一个合理的范围，通常会把被移除屏幕的图片进行回收处理。此时垃圾回收器也会认为你不再持有这些图片的引用，从而对这些图片进行GC操作。用这种思路来解决问题是非常好的，可是为了能让程序快速运行，在界面上迅速地加载图片，你又必须要考虑到某些图片被回收之后，用户又将它重新滑入屏幕这种情况。这时重新去加载一遍刚刚加载过的图片无疑是性能的瓶颈，你需要想办法去避免这个情况的发生</p>
</li>
<li><p>这个时候，使用内存缓存技术可以很好的解决这个问题，它可以让组件快速地重新加载和处理图片。下面我们就来看一看如何使用内存缓存技术来对图片进行缓存，从而让你的应用程序在加载很多图片的时候可以提高响应速度和流畅性</p>
</li>
<li><p>内存缓存技术对那些大量占用应用程序宝贵内存的图片提供了快速访问的方法。其中最核心的类是LruCache (此类在android-support-v4的包中提供) 。这个类非常适合用来缓存图片，它的主要算法原理是把最近使用的对象用强引用存储在 LinkedHashMap 中，并且把最近最少使用的对象在缓存值达到预设定值之前从内存中移除</p>
</li>
<li><p>在过去，我们经常会使用一种非常流行的内存缓存技术的实现，即软引用或弱引用 (SoftReference or WeakReference)。但是现在已经不再推荐使用这种方式了，因为从 Android 2.3 (API Level 9)开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。另外，Android 3.0 (API Level 11)中，图片的数据会存储在本地的内存当中，因而无法用一种可预见的方式将其释放，这就有潜在的风险造成应用程序的内存溢出并崩溃</p>
</li>
</ul>
<p>为了能够选择一个合适的缓存大小给LruCache, 有以下多个因素应该放入考虑范围内，例如：</p>
<ul>
<li><p>你的设备可以为每个应用程序分配多大的内存？</p>
</li>
<li><p>设备屏幕上一次最多能显示多少张图片？有多少图片需要进行预加载，因为有可能很快也会显示在屏幕上？</p>
</li>
<li><p>你的设备的屏幕大小和分辨率分别是多少？一个超高分辨率的设备（例如 Galaxy Nexus) 比起一个较低分辨率的设备（例如 Nexus S），在持有相同数量图片的时候，需要更大的缓存空间</p>
</li>
<li><p>图片的尺寸和大小，还有每张图片会占据多少内存空间</p>
</li>
<li><p>图片被访问的频率有多高？会不会有一些图片的访问频率比其它图片要高？如果有的话，你也许应该让一些图片常驻在内存当中，或者使用多个LruCache 对象来区分不同组的图片</p>
</li>
<li><p>你能维持好数量和质量之间的平衡吗？有些时候，存储多个低像素的图片，而在后台去开线程加载高像素的图片会更加的有效</p>
</li>
</ul>
<p>并没有一个指定的缓存大小可以满足所有的应用程序，这是由你决定的。你应该去分析程序内存的使用情况，然后制定出一个合适的解决方案。一个太小的缓存空间，有可能造成图片频繁地被释放和重新加载，这并没有好处。而一个太大的缓存空间，则有可能还是会引起 java.lang.OutOfMemory 的异常</p>
<!-- more -->
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul>
<li>下面是一个使用 LruCache 来缓存图片的例子：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;  </div><div class="line">  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">    <span class="comment">// 获取到可用内存的最大值，使用内存超出这个值会引起OutOfMemory异常。  </span></div><div class="line">    <span class="comment">// LruCache通过构造函数传入缓存值，以KB为单位。  </span></div><div class="line">    <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);  </div><div class="line">    <span class="comment">// 使用最大可用内存值的1/8作为缓存的大小。  </span></div><div class="line">    <span class="keyword">int</span> cacheSize = maxMemory / <span class="number">8</span>;  </div><div class="line">    mMemoryCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;  </div><div class="line">            <span class="comment">// 重写此方法来衡量每张图片的大小，默认返回图片数量。  </span></div><div class="line">            <span class="keyword">return</span> bitmap.getByteCount() / <span class="number">1024</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBitmapToMemoryCache</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (getBitmapFromMemCache(key) == <span class="keyword">null</span>) &#123;  </div><div class="line">        mMemoryCache.put(key, bitmap);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapFromMemCache</span><span class="params">(String key)</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> mMemoryCache.get(key);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在这个例子当中，使用了系统分配给应用程序的八分之一内存来作为缓存大小。在中高配置的手机当中，这大概会有4兆(32/8)的缓存空间。一个全屏幕的 GridView 使用4张 800x480分辨率的图片来填充，则大概会占用1.5兆的空间(800<em>480</em>4)。因此，这个缓存大小可以存储2.5页的图片。<br>当向 ImageView 中加载一张图片时,首先会在 LruCache 的缓存中进行检查。如果找到了相应的键值，则会立刻更新ImageView ，否则开启一个后台线程来加载这张图片</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBitmap</span><span class="params">(<span class="keyword">int</span> resId, ImageView imageView)</span> </span>&#123;  </div><div class="line">    <span class="keyword">final</span> String imageKey = String.valueOf(resId);  </div><div class="line">    <span class="keyword">final</span> Bitmap bitmap = getBitmapFromMemCache(imageKey);  </div><div class="line">    <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;  </div><div class="line">        imageView.setImageBitmap(bitmap);  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        imageView.setImageResource(R.drawable.image_placeholder);  </div><div class="line">        BitmapWorkerTask task = <span class="keyword">new</span> BitmapWorkerTask(imageView);  </div><div class="line">        task.execute(resId);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>BitmapWorkerTask 还要把新加载的图片的键值对放到缓存中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BitmapWorkerTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Integer</span>, <span class="title">Void</span>, <span class="title">Bitmap</span>&gt; </span>&#123;  </div><div class="line">    <span class="comment">// 在后台加载图片。  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(Integer... params)</span> </span>&#123;  </div><div class="line">        <span class="keyword">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(  </div><div class="line">                getResources(), params[<span class="number">0</span>], <span class="number">100</span>, <span class="number">100</span>);  </div><div class="line">        addBitmapToMemoryCache(String.valueOf(params[<span class="number">0</span>]), bitmap);  </div><div class="line">        <span class="keyword">return</span> bitmap;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="转载博客"><a href="#转载博客" class="headerlink" title="转载博客"></a>转载博客</h2><ul>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/9316683" target="_blank" rel="external">Android高效加载大图、多图解决方案，有效避免程序OOM</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;高效加载大图&quot;&gt;&lt;a href=&quot;#高效加载大图&quot; class=&quot;headerlink&quot; title=&quot;高效加载大图&quot;&gt;&lt;/a&gt;高效加载大图&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们在编写Android程序的时候经常要用到许多图片，不同图片总是会有不同的形状、不同的大小，但在大多数情况下，这些图片都会大于我们程序所需要的大小。比如说系统图片库里展示的图片大都是用手机摄像头拍出来的，这些图片的分辨率会比我们手机屏幕的分辨率高得多。大家应该知道，我们编写的应用程序都是有一定内存限制的，程序占用了过高的内存就容易出现OOM(OutOfMemory)异常。我们可以通过下面的代码看出每个应用程序最高可用内存是多少&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxMemory = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) (Runtime.getRuntime().maxMemory() / &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Log.d(&lt;span class=&quot;string&quot;&gt;&quot;TAG&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Max memory is &quot;&lt;/span&gt; + maxMemory + &lt;span class=&quot;string&quot;&gt;&quot;KB&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;因此在展示高分辨率图片的时候，最好先将图片进行压缩。压缩后的图片大小应该和用来展示它的控件大小相近，在一个很小的ImageView上显示一张超大的图片不会带来任何视觉上的好处，但却会占用我们相当多宝贵的内存，而且在性能上还可能会带来负面影响。下面我们就来看一看，如何对一张大图片进行适当的压缩，让它能够以最佳大小显示的同时，还能防止OOM的出现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BitmapFactory这个类提供了多个解析方法(decodeByteArray, decodeFile, decodeResource等)用于创建Bitmap对象，我们应该根据图片的来源选择合适的方法。比如SD卡中的图片可以使用decodeFile方法，网络上的图片可以使用decodeStream方法，资源文件中的图片可以使用decodeResource方法。这些方法会尝试为已经构建的bitmap分配内存，这时就会很容易导致OOM出现。为此每一种解析方法都提供了一个可选的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BitmapFactory.Options参数，将这个参数的inJustDecodeBounds属性设置为true就可以让解析方法禁止为bitmap分配内存，返回值也不再是一个Bitmap对象，而是null。虽然Bitmap是null了，但是BitmapFactory.Options的outWidth、outHeight和outMimeType属性都会被赋值。这个技巧让我们可以在加载图片之前就获取到图片的长宽值和MIME类型，从而根据情况对图片进行压缩。如下代码所示：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android进阶之路" scheme="http://www.qiuchengjia.cn/categories/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Android进阶之路" scheme="http://www.qiuchengjia.cn/tags/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title> Android ViewDragHelper完全解析 自定义ViewGroup神器</title>
    <link href="http://www.qiuchengjia.cn/2016/09/22/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/Android-ViewDragHelper%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90-%E8%87%AA%E5%AE%9A%E4%B9%89ViewGroup%E7%A5%9E%E5%99%A8/"/>
    <id>http://www.qiuchengjia.cn/2016/09/22/Android自定义控件/Android-ViewDragHelper完全解析-自定义ViewGroup神器/</id>
    <published>2016-09-21T16:57:22.000Z</published>
    <updated>2016-09-26T11:54:28.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><p>在自定义ViewGroup中，很多效果都包含用户手指去拖动其内部的某个View(eg:侧滑菜单等)，针对具体的需要去写好 <strong>onInterceptTouchEvent</strong> 和 <strong>onTouchEvent</strong> 这两个方法是一件很不容易的事，需要自己去处理：多手指的处理、加速度检测等等</p>
</li>
<li><p>好在官方在v4的支持包中提供了ViewDragHelper这样一个类来帮助我们方便的编写自定义ViewGroup。简单看一下它的注释：</p>
</li>
</ul>
<blockquote>
<p>ViewDragHelper is a utility class for writing custom ViewGroups. It offers a number<br>of useful operations and state tracking for allowing a user to drag and reposition<br>views within their parent ViewGroup.</p>
</blockquote>
<ul>
<li>本篇博客将重点介绍ViewDragHelper的使用，并且最终去实现一个类似DrawerLayout的一个自定义的ViewGroup。（ps:官方的DrawerLayout就是用此类实现）</li>
</ul>
<h2 id="入门小示例"><a href="#入门小示例" class="headerlink" title="入门小示例"></a>入门小示例</h2><p>首先我们通过一个简单的例子来看看其快捷的用法，分为以下几个步骤：</p>
<ol>
<li><p>创建实例</p>
</li>
<li><p>触摸相关的方法的调用</p>
</li>
<li><p>ViewDragHelper.Callback实例的编写</p>
</li>
</ol>
<a id="more"></a>
<h3 id="自定义ViewGroup"><a href="#自定义ViewGroup" class="headerlink" title="自定义ViewGroup"></a>自定义ViewGroup</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.support.v4.widget.ViewDragHelper;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.MotionEvent;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Description: 自定义ViewGroup</div><div class="line"> * Data：2016/9/21-12:20</div><div class="line"> * Blog：www.qiuchengjia.cn</div><div class="line"> * Author: qiu</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VDHLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> ViewDragHelper mDragger;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VDHLayout</span><span class="params">(Context context, AttributeSet attrs)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        mDragger = ViewDragHelper.create(<span class="keyword">this</span>, <span class="number">1.0f</span>, <span class="keyword">new</span> ViewDragHelper.Callback()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> left;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> top;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> mDragger.shouldInterceptTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span></span></div><div class="line">    &#123;</div><div class="line">        mDragger.processTouchEvent(event);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以看到，上面整个自定义ViewGroup的代码非常简洁，遵循上述3个步骤：</li>
</ul>
<h4 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a><strong>创建实例</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mDragger = ViewDragHelper.create(<span class="keyword">this</span>, <span class="number">1.0f</span>, <span class="keyword">new</span> ViewDragHelper.Callback()</div><div class="line">        &#123;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>创建实例需要3个参数，第一个就是当前的ViewGroup，第二个sensitivity，主要用于设置touchSlop:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">helper.mTouchSlop = (<span class="keyword">int</span>) (helper.mTouchSlop * (<span class="number">1</span> / sensitivity));</div></pre></td></tr></table></figure>
<ul>
<li>可见传入越大，mTouchSlop的值就会越小。第三个参数就是Callback，在用户的触摸过程中会回调相关方法，后面会细说</li>
</ul>
<h4 id="触摸相关方法"><a href="#触摸相关方法" class="headerlink" title="触摸相关方法"></a><strong>触摸相关方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> mDragger.shouldInterceptTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span></span></div><div class="line">    &#123;</div><div class="line">        mDragger.processTouchEvent(event);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>onInterceptTouchEvent中通过使用mDragger.shouldInterceptTouchEvent(event)来决定我们是否应该拦截当前的事件。onTouchEvent中通过mDragger.processTouchEvent(event)处理事件</li>
</ul>
<h4 id="实现ViewDragHelper-CallCack相关方法"><a href="#实现ViewDragHelper-CallCack相关方法" class="headerlink" title="实现ViewDragHelper.CallCack相关方法"></a><strong>实现ViewDragHelper.CallCack相关方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> ViewDragHelper.Callback()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> top;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>ViewDragHelper中拦截和处理事件时，需要会回调CallBack中的很多方法来决定一些事，比如：哪些子View可以移动、对个移动的View的边界的控制等等</li>
</ul>
<p><strong>上面复写的3个方法：</strong></p>
<ul>
<li><p>tryCaptureView如何返回ture则表示可以捕获该view，你可以根据传入的第一个view参数决定哪些可以捕获</p>
</li>
<li><p>clampViewPositionHorizontal,clampViewPositionVertical可以在该方法中对child移动的边界进行控制，left , top 分别为即将移动到的位置，比如横向的情况下，我希望只在ViewGroup的内部移动，即：最小&gt;=paddingleft，最大&lt;=ViewGroup.getWidth()-paddingright-child.getWidth。就可以按照如下代码编写：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span></span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> leftBound = getPaddingLeft();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> rightBound = getWidth() - child.getWidth() - leftBound;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> newLeft = Math.min(Math.max(left, leftBound), rightBound);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> newLeft;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>经过上述3个步骤，我们就完成了一个简单的自定义ViewGroup，可以自由的拖动子View</li>
</ul>
<h3 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">qiu.com.androidtest.VDHLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#44ff0000"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"I can be dragged !"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#7768F866"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"I can be dragged !"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#776D69FA"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"I can be dragged !"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">qiu.com.androidtest.VDHLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>我们的自定义ViewGroup中有三个TextView</p>
</li>
<li><p><strong>当前效果：</strong></p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android-ViewDragHelper%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90-%E8%87%AA%E5%AE%9A%E4%B9%89ViewGroup%E7%A5%9E%E5%99%A81.gif" alt=""></center>

<ul>
<li><p>可以看到短短数行代码就可以玩起来了</p>
</li>
<li><p>有了直观的认识以后，我们还需要对ViewDragHelper.CallBack里面的方法做下深入的理解。首先我们需要考虑的是：我们的ViewDragHelper不仅仅说只能够去让子View去跟随我们手指移动，我们继续往下学习其他的功能</p>
</li>
</ul>
<h2 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h2><p>ViewDragHelper还能做以下的一些操作：</p>
<ul>
<li><p>边界检测、加速度检测(eg：DrawerLayout边界触发拉出)</p>
</li>
<li><p>回调Drag Release（eg：DrawerLayout部分，手指抬起，自动展开/收缩）</p>
</li>
<li><p>移动到某个指定的位置(eg:点击Button，展开/关闭Drawerlayout)</p>
</li>
</ul>
<p>那么我们接下来对我们最基本的例子进行改造，包含上述的几个操作</p>
<ul>
<li>首先看一下我们修改后的效果：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android-ViewDragHelper%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90-%E8%87%AA%E5%AE%9A%E4%B9%89ViewGroup%E7%A5%9E%E5%99%A82.gif" alt=""></center>

<p>简单的为每个子View添加了不同的操作：</p>
<ul>
<li><p>第一个View，就是演示简单的移动 </p>
</li>
<li><p>第二个View，演示除了移动后，松手自动返回到原本的位置。（注意你拖动的越快，返回的越快） </p>
</li>
<li><p>第三个View，边界移动时对View进行捕获</p>
</li>
</ul>
<h3 id="修改后的代码"><a href="#修改后的代码" class="headerlink" title="修改后的代码"></a>修改后的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Point;</div><div class="line"><span class="keyword">import</span> android.support.v4.widget.ViewDragHelper;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.MotionEvent;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Description: 自定义ViewGroup</div><div class="line"> * Data：2016/9/21-12:20</div><div class="line"> * Blog：www.qiuchengjia.cn</div><div class="line"> * Author: qiu</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VDHLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> ViewDragHelper mDragger;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> View mDragView;</div><div class="line">    <span class="keyword">private</span> View mAutoBackView;</div><div class="line">    <span class="keyword">private</span> View mEdgeTrackerView;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Point mAutoBackOriginPos = <span class="keyword">new</span> Point();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VDHLayout</span><span class="params">(Context context, AttributeSet attrs)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        mDragger = ViewDragHelper.create(<span class="keyword">this</span>, <span class="number">1.0f</span>, <span class="keyword">new</span> ViewDragHelper.Callback()</div><div class="line">        &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">//mEdgeTrackerView禁止直接移动</span></div><div class="line">                <span class="keyword">return</span> child == mDragView || child == mAutoBackView;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> left;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> top;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="comment">//手指释放的时候回调</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewReleased</span><span class="params">(View releasedChild, <span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">//mAutoBackView手指释放时可以自动回去</span></div><div class="line">                <span class="keyword">if</span> (releasedChild == mAutoBackView)</div><div class="line">                &#123;</div><div class="line">                    mDragger.settleCapturedViewAt(mAutoBackOriginPos.x, mAutoBackOriginPos.y);</div><div class="line">                    invalidate();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//在边界拖动时回调</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEdgeDragStarted</span><span class="params">(<span class="keyword">int</span> edgeFlags, <span class="keyword">int</span> pointerId)</span></span></div><div class="line">            &#123;</div><div class="line">                mDragger.captureChildView(mEdgeTrackerView, pointerId);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        mDragger.setEdgeTrackingEnabled(ViewDragHelper.EDGE_LEFT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> mDragger.shouldInterceptTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span></span></div><div class="line">    &#123;</div><div class="line">        mDragger.processTouchEvent(event);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(mDragger.continueSettling(<span class="keyword">true</span>))</div><div class="line">        &#123;</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">super</span>.onLayout(changed, l, t, r, b);</div><div class="line"></div><div class="line">        mAutoBackOriginPos.x = mAutoBackView.getLeft();</div><div class="line">        mAutoBackOriginPos.y = mAutoBackView.getTop();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFinishInflate</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">super</span>.onFinishInflate();</div><div class="line"></div><div class="line">        mDragView = getChildAt(<span class="number">0</span>);</div><div class="line">        mAutoBackView = getChildAt(<span class="number">1</span>);</div><div class="line">        mEdgeTrackerView = getChildAt(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>布局文件我们仅仅是换了下文本和背景色就不重复贴了</li>
</ul>
<h3 id="修改代码注解"><a href="#修改代码注解" class="headerlink" title="修改代码注解"></a>修改代码注解</h3><ul>
<li><p>第一个View基本没做任何修改</p>
</li>
<li><p>第二个View，我们在onLayout之后保存了最开启的位置信息，最主要还是重写了Callback中的onViewReleased，我们在onViewReleased中判断如果是mAutoBackView则调用settleCapturedViewAt回到初始的位置。大家可以看到紧随其后的代码是invalidate();因为其内部使用的是mScroller.startScroll，所以别忘了需要invalidate()以及结合computeScroll方法一起</p>
</li>
<li><p>第三个View，我们在onEdgeDragStarted回调方法中，主动通过captureChildView对其进行捕获，该方法可以绕过tryCaptureView，所以我们的tryCaptureView虽然并为返回true，但却不影响。注意如果需要使用边界检测需要添加上mDragger.setEdgeTrackingEnabled(ViewDragHelper.EDGE_LEFT);</p>
</li>
</ul>
<h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><ul>
<li><p>到此，我们已经介绍了Callback中常用的回调方法了，当然还有一些方法没有介绍，接下来我们修改下我们的布局文件，我们把我们的TextView全部加上clickable=true，意思就是子View可以消耗事件。再次运行，你会发现本来可以拖动的View不动了，（如果有拿Button测试的兄弟应该已经发现这个问题了，我希望你看到这了，而不是已经提问了,哈）</p>
</li>
<li><p>原因是什么呢？主要是因为，如果子View不消耗事件，那么整个手势（DOWN-MOVE*-UP）都是直接进入onTouchEvent，在onTouchEvent的DOWN的时候就确定了captureView。如果消耗事件，那么就会先走onInterceptTouchEvent方法，判断是否可以捕获，而在判断的过程中会去判断另外两个回调的方法：getViewHorizontalDragRange和getViewVerticalDragRange，只有这两个方法返回大于0的值才能正常的捕获</p>
</li>
<li><p>所以，如果你用Button测试，或者给TextView添加了clickable = true ，都记得重写下面这两个方法：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewHorizontalDragRange</span><span class="params">(View child)</span></span></div><div class="line">&#123;</div><div class="line">     <span class="keyword">return</span> getMeasuredWidth()-child.getMeasuredWidth();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewVerticalDragRange</span><span class="params">(View child)</span></span></div><div class="line">&#123;</div><div class="line">     <span class="keyword">return</span> getMeasuredHeight()-child.getMeasuredHeight();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>方法的返回值应当是该childView横向或者纵向的移动的范围，当前如果只需要一个方向移动，可以只复写一个</li>
</ul>
<h3 id="所有的Callback方法"><a href="#所有的Callback方法" class="headerlink" title="所有的Callback方法"></a>所有的Callback方法</h3><p>到此，我们列一下所有的Callback方法，看看还有哪些没用过的：</p>
<ul>
<li><p>onViewDragStateChanged</p>
<blockquote>
<p>当ViewDragHelper状态发生变化时回调（IDLE,DRAGGING,SETTING[自动滚动时]）</p>
</blockquote>
</li>
<li><p>onViewPositionChanged</p>
<blockquote>
<p>当captureview的位置发生改变时回调</p>
</blockquote>
</li>
<li><p>onViewCaptured</p>
<blockquote>
<p>当captureview被捕获时回调</p>
</blockquote>
</li>
<li><p>onViewReleased 已用</p>
</li>
<li><p>onEdgeTouched</p>
<blockquote>
<p>当触摸到边界时回调</p>
</blockquote>
</li>
<li><p>onEdgeLock</p>
<blockquote>
<p>true的时候会锁住当前的边界，false则unLock</p>
</blockquote>
</li>
</ul>
<ul>
<li><p>onEdgeDragStarted 已用</p>
</li>
<li><p>getOrderedChildIndex</p>
<blockquote>
<p>改变同一个坐标（x,y）去寻找captureView位置的方法。（具体在：findTopChildUnder方法中）</p>
</blockquote>
</li>
<li><p>getViewHorizontalDragRange 已用</p>
</li>
<li><p>getViewVerticalDragRange 已用</p>
</li>
<li><p>tryCaptureView 已用</p>
</li>
<li><p>clampViewPositionHorizontal 已用</p>
</li>
<li><p>clampViewPositionVertical 已用</p>
</li>
<li><p>ok，至此所有的回调方法都有了一定的认识</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>总结下，方法的大致的回调顺序：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">shouldInterceptTouchEvent：</div><div class="line"></div><div class="line">DOWN:</div><div class="line">    getOrderedChildIndex(findTopChildUnder)</div><div class="line">    -&gt;onEdgeTouched</div><div class="line"></div><div class="line">MOVE:</div><div class="line">    getOrderedChildIndex(findTopChildUnder)</div><div class="line">    -&gt;getViewHorizontalDragRange &amp; </div><div class="line">      getViewVerticalDragRange(checkTouchSlop)(MOVE中可能不止一次)</div><div class="line">    -&gt;clampViewPositionHorizontal&amp;</div><div class="line">      clampViewPositionVertical</div><div class="line">    -&gt;onEdgeDragStarted</div><div class="line">    -&gt;tryCaptureView</div><div class="line">    -&gt;onViewCaptured</div><div class="line">    -&gt;onViewDragStateChanged</div><div class="line"></div><div class="line">processTouchEvent:</div><div class="line"></div><div class="line">DOWN:</div><div class="line">    getOrderedChildIndex(findTopChildUnder)</div><div class="line">    -&gt;tryCaptureView</div><div class="line">    -&gt;onViewCaptured</div><div class="line">    -&gt;onViewDragStateChanged</div><div class="line">    -&gt;onEdgeTouched</div><div class="line">MOVE:</div><div class="line">    -&gt;STATE==DRAGGING:dragTo</div><div class="line">    -&gt;STATE!=DRAGGING:</div><div class="line">        onEdgeDragStarted</div><div class="line">        -&gt;getOrderedChildIndex(findTopChildUnder)</div><div class="line">        -&gt;getViewHorizontalDragRange&amp;</div><div class="line">          getViewVerticalDragRange(checkTouchSlop)</div><div class="line">        -&gt;tryCaptureView</div><div class="line">        -&gt;onViewCaptured</div><div class="line">        -&gt;onViewDragStateChanged</div></pre></td></tr></table></figure>
<ul>
<li><p>ok，上述是正常情况下大致的流程，当然整个过程可能会存在很多判断不成立的情况</p>
</li>
<li><p>从上面也可以解释，我们在之前TextView(clickable=false)的情况下，没有编写getViewHorizontalDragRange方法时，是可以移动的。因为直接进入processTouchEvent的DOWN，然后就onViewCaptured、onViewDragStateChanged（进入DRAGGING状态），接下来MOVE就直接dragTo了</p>
</li>
<li><p>而当子View消耗事件的时候，就需要走shouldInterceptTouchEvent，MOVE的时候经过一系列的判断（getViewHorizontalDragRange，clampViewPositionVertical等），才能够去tryCaptureView</p>
</li>
</ul>
<h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><ul>
<li><a href="http://pan.baidu.com/s/1pLgvF2z" target="_blank" rel="external">源码下载</a></li>
</ul>
<h2 id="转载博客"><a href="#转载博客" class="headerlink" title="转载博客"></a>转载博客</h2><ul>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/46858663" target="_blank" rel="external">Android ViewDragHelper完全解析 自定义ViewGroup神器</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在自定义ViewGroup中，很多效果都包含用户手指去拖动其内部的某个View(eg:侧滑菜单等)，针对具体的需要去写好 &lt;strong&gt;onInterceptTouchEvent&lt;/strong&gt; 和 &lt;strong&gt;onTouchEvent&lt;/strong&gt; 这两个方法是一件很不容易的事，需要自己去处理：多手指的处理、加速度检测等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;好在官方在v4的支持包中提供了ViewDragHelper这样一个类来帮助我们方便的编写自定义ViewGroup。简单看一下它的注释：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ViewDragHelper is a utility class for writing custom ViewGroups. It offers a number&lt;br&gt;of useful operations and state tracking for allowing a user to drag and reposition&lt;br&gt;views within their parent ViewGroup.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本篇博客将重点介绍ViewDragHelper的使用，并且最终去实现一个类似DrawerLayout的一个自定义的ViewGroup。（ps:官方的DrawerLayout就是用此类实现）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;入门小示例&quot;&gt;&lt;a href=&quot;#入门小示例&quot; class=&quot;headerlink&quot; title=&quot;入门小示例&quot;&gt;&lt;/a&gt;入门小示例&lt;/h2&gt;&lt;p&gt;首先我们通过一个简单的例子来看看其快捷的用法，分为以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建实例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;触摸相关的方法的调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ViewDragHelper.Callback实例的编写&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android自定义控件" scheme="http://www.qiuchengjia.cn/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
    
      <category term="Android自定义控件" scheme="http://www.qiuchengjia.cn/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android美女拼图游戏</title>
    <link href="http://www.qiuchengjia.cn/2016/09/13/Android%E6%B8%B8%E6%88%8F/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8F/"/>
    <id>http://www.qiuchengjia.cn/2016/09/13/Android游戏/Android美女拼图游戏/</id>
    <published>2016-09-12T19:35:17.000Z</published>
    <updated>2016-09-26T11:54:28.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><p><a href="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE.apk" target="_blank" rel="external">游戏下载试玩</a></p>
</li>
<li><p><a href="https://github.com/qiuchengjia/Android-BeautyGame" target="_blank" rel="external">Github</a> 喜欢的同学可以Star一下，非常感谢</p>
</li>
<li><p>把图片切分很多份，点击交换拼成一张完整的；这样关卡也很容易设计，3<em>3；4</em>4；5<em>5；6</em>6；一直下去</p>
</li>
<li><p>效果</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE1.gif" alt=""></center>

<ul>
<li>加了个切换动画，效果还是不错的，其实游戏就是自定义了一个控件，下面我们开始自定义之旅</li>
</ul>
<a id="more"></a>
<h2 id="游戏的设计"><a href="#游戏的设计" class="headerlink" title="游戏的设计"></a>游戏的设计</h2><p>首先我们分析下如何设计这款游戏：</p>
<ol>
<li><p>我们需要一个容器，可以放这些图片的块块，为了方便，我们准备使用RelativeLayout配合addRule实现</p>
</li>
<li><p>每个图片的块块，我们准备使用ImageView</p>
</li>
<li><p>点击交换，我们准备使用传统的TranslationAnimation来实现</p>
</li>
</ol>
<p>有了初步的设计，感觉这游戏so easy~</p>
<h2 id="游戏布局的实现"><a href="#游戏布局的实现" class="headerlink" title="游戏布局的实现"></a>游戏布局的实现</h2><p>首先，我们准备实现能够把一张图片，切成n*n份，放在指定的位置；<br>我们只需要设置n这个数字，然后根据布局的宽或者高其中的小值，除以n，减去一些边距就可以得到我们ImageView的宽和高了~~</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line">     * 设置Item的数量n*n；默认为3 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColumn = <span class="number">3</span>;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 布局的宽度 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 布局的padding </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPadding;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 存放所有的Item </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> ImageView[] mGamePintuItems;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * Item的宽度 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mItemWidth;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * Item横向与纵向的边距 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMargin = <span class="number">3</span>;  </div><div class="line">      </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 拼图的图片 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> Bitmap mBitmap;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 存放切完以后的图片bean </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> List&lt;ImagePiece&gt; mItemBitmaps;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> once;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePintuLayout</span><span class="params">(Context context)</span>  </span>&#123;  </div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePintuLayout</span><span class="params">(Context context, AttributeSet attrs)</span>  </span>&#123;  </div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">     * 构造函数，用来初始化</div><div class="line">     * <span class="doctag">@param</span> context  the context</div><div class="line">     * <span class="doctag">@param</span> attrs    the attrs</div><div class="line">     * <span class="doctag">@param</span> defStyle the def style</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePintuLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span>  </span>&#123;  </div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);  </div><div class="line">  </div><div class="line">   <span class="comment">//把设置的margin值转换为dp</span></div><div class="line">        mMargin = (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,  </div><div class="line">                mMargin, getResources().getDisplayMetrics());  </div><div class="line">        <span class="comment">// 设置Layout的内边距，四边一致，设置为四内边距中的最小值  </span></div><div class="line">        mPadding = min(getPaddingLeft(), getPaddingTop(), getPaddingRight(),  </div><div class="line">                getPaddingBottom());  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>构造方法里面，我们得到把设置的margin值转化为dp；获得布局的padding值；整体是个正方形，所以我们取padding四个方向中的最小值；<br>至于margin，作为Item之间的横向与纵向的间距，你喜欢的话可以抽取为自定义属性~~</li>
</ul>
<h3 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 用来设置设置自定义的View的宽高，</div><div class="line">     * <span class="doctag">@param</span> widthMeasureSpec  the width measure spec</div><div class="line">     * <span class="doctag">@param</span> heightMeasureSpec the height measure spec</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">     */</div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span>  </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);  </div><div class="line">      </div><div class="line">        <span class="comment">// 获得游戏布局的边长  </span></div><div class="line">        mWidth = Math.min(getMeasuredHeight(), getMeasuredWidth());  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (!once)  &#123;  </div><div class="line">            initBitmap();  </div><div class="line">            initItem();  </div><div class="line">        &#125;  </div><div class="line">        once = <span class="keyword">true</span>;  </div><div class="line">        setMeasuredDimension(mWidth, mWidth);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>onMeasure里面主要就是获得到布局的宽度，然后进行图片的准备，以及初始化我们的Item，为Item设置宽度和高度</p>
</li>
<li><p>initBitmap自然就是准备图片了：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 初始化bitmap</div><div class="line">  * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initBitmap</span><span class="params">()</span>  </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (mBitmap == <span class="keyword">null</span>)  </div><div class="line">            mBitmap = BitmapFactory.decodeResource(getResources(),  </div><div class="line">                    R.drawable.aa);  </div><div class="line">  </div><div class="line">        mItemBitmaps = ImageSplitter.split(mBitmap, mColumn);  </div><div class="line">  </div><div class="line">   <span class="comment">//对图片进行排序</span></div><div class="line">        Collections.sort(mItemBitmaps, <span class="keyword">new</span> Comparator&lt;ImagePiece&gt;()&#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ImagePiece lhs, ImagePiece rhs)</span></span>&#123;  </div><div class="line">            <span class="comment">//我们使用random随机比较大小</span></div><div class="line">                <span class="keyword">return</span> Math.random() &gt; <span class="number">0.5</span> ? <span class="number">1</span> : -<span class="number">1</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>我们这里如果没有设置mBitmap就准备一张备用图片，然后调用ImageSplitter.split将图片切成n * n 返回一个List<imagepiece><br>切完以后，我们需要将顺序打乱，所以我们调用了sort方法，至于比较器，我们使用random随机比较大小，这样我们就完成了我们的乱序操作，赞不赞~~</imagepiece></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Description: 图片切片类</div><div class="line"> * Data：2016/9/11-19:53</div><div class="line"> * Blog：www.qiuchengjia.cn</div><div class="line"> * Author: qiu</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageSplitter</span>  </span>&#123;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 将图片切成 , piece *piece </div><div class="line">     * <span class="doctag">@param</span> bitmap </div><div class="line">     * <span class="doctag">@param</span> piece </div><div class="line">     * <span class="doctag">@return</span> </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;ImagePiece&gt; <span class="title">split</span><span class="params">(Bitmap bitmap, <span class="keyword">int</span> piece)</span></span>&#123;  </div><div class="line">  </div><div class="line">        List&lt;ImagePiece&gt; pieces = <span class="keyword">new</span> ArrayList&lt;ImagePiece&gt;(piece * piece);  </div><div class="line">  </div><div class="line">        <span class="keyword">int</span> width = bitmap.getWidth();  </div><div class="line">        <span class="keyword">int</span> height = bitmap.getHeight();  </div><div class="line">  </div><div class="line">        Log.e(<span class="string">"TAG"</span>, <span class="string">"bitmap Width = "</span> + width + <span class="string">" , height = "</span> + height);  </div><div class="line">        <span class="keyword">int</span> pieceWidth = Math.min(width, height) / piece;  </div><div class="line">  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; piece; i++)&#123;  </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; piece; j++)&#123;  </div><div class="line">                ImagePiece imagePiece = <span class="keyword">new</span> ImagePiece();  </div><div class="line">                imagePiece.index = j + i * piece;  </div><div class="line">                <span class="keyword">int</span> xValue = j * pieceWidth;  </div><div class="line">                <span class="keyword">int</span> yValue = i * pieceWidth;  </div><div class="line">                  </div><div class="line">                imagePiece.bitmap = Bitmap.createBitmap(bitmap, xValue, yValue,  </div><div class="line">                        pieceWidth, pieceWidth);  </div><div class="line">                pieces.add(imagePiece);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> pieces;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Description: 图片bean</div><div class="line"> * Data：2016/9/11-19:54</div><div class="line"> * Blog：www.qiuchengjia.cn</div><div class="line"> * Author: qiu</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImagePiece</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> index = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">public</span> Bitmap bitmap = <span class="keyword">null</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>没撒说的就是一个根据宽度高度，和n，来切图保存的过程~~<br>ImagePiece保存的图片以及索引，话说这两个类还是我无意中在网上发现的~~<br>图片到此就准备好了，现在看Item的生成已经设置宽高，即initItems</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line">   * 初始化每一个item</div><div class="line">   * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">   */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initItem</span><span class="params">()</span>  </span>&#123;  </div><div class="line">        <span class="comment">// 获得Item的宽度  </span></div><div class="line">        <span class="keyword">int</span> childWidth = (mWidth - mPadding * <span class="number">2</span> - mMargin * </div><div class="line">        (mColumn - <span class="number">1</span>)) / mColumn;  </div><div class="line">        mItemWidth = childWidth;  </div><div class="line">  </div><div class="line">        mGamePintuItems = <span class="keyword">new</span> ImageView[mColumn * mColumn];  </div><div class="line">        <span class="comment">// 放置Item  </span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mGamePintuItems.length; i++) &#123;  </div><div class="line">            ImageView item = <span class="keyword">new</span> ImageView(getContext());  </div><div class="line">  </div><div class="line">            item.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">  </div><div class="line">            item.setImageBitmap(mItemBitmaps.get(i).bitmap);  </div><div class="line">            mGamePintuItems[i] = item;  </div><div class="line">            item.setId(i + <span class="number">1</span>);  </div><div class="line">            item.setTag(i + <span class="string">"_"</span> + mItemBitmaps.get(i).index);  </div><div class="line">  </div><div class="line">            RelativeLayout.LayoutParams lp =</div><div class="line">                <span class="keyword">new</span> LayoutParams(mItemWidth,  </div><div class="line">                    mItemWidth);  </div><div class="line">            <span class="comment">// 设置横向边距,不是最后一列  </span></div><div class="line">            <span class="keyword">if</span> ((i + <span class="number">1</span>) % mColumn != <span class="number">0</span>)  &#123;  </div><div class="line">                lp.rightMargin = mMargin;  </div><div class="line">            &#125;  </div><div class="line">            <span class="comment">// 如果不是第一列  </span></div><div class="line">            <span class="keyword">if</span> (i % mColumn != <span class="number">0</span>)  &#123;  </div><div class="line">                lp.addRule(RelativeLayout.RIGHT_OF,<span class="comment">//  </span></div><div class="line">                        mGamePintuItems[i - <span class="number">1</span>].getId());  </div><div class="line">            &#125;  </div><div class="line">            <span class="comment">// 如果不是第一行，//设置纵向边距，非最后一行  </span></div><div class="line">            <span class="keyword">if</span> ((i + <span class="number">1</span>) &gt; mColumn)  &#123;  </div><div class="line">                lp.topMargin = mMargin;  </div><div class="line">                lp.addRule(RelativeLayout.BELOW,<span class="comment">//  </span></div><div class="line">                        mGamePintuItems[i - mColumn].getId());  </div><div class="line">            &#125;  </div><div class="line">            addView(item, lp);  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以看到我们的Item宽的计算：childWidth = (mWidth - mPadding <em> 2 - mMargin </em> (mColumn - 1) ) / mColumn;<br>容器的宽度，除去自己的内边距，除去Item间的间距，然后除以Item一行的个数就得到了Item的宽~~<br>接下来，就是遍历生成Item，根据他们的位置设置Rule，自己仔细看下注释~~</li>
</ul>
<p><strong>注意两点：</strong></p>
<ul>
<li><p>我们为Item设置了setOnClickListener，这个当然，因为我们的游戏就是点Item么~</p>
</li>
<li><p>还有我们为Item设置了Tag：item.setTag(i + “_” + mItemBitmaps.get(i).index);<br>tag里面存放了index，也就是正确的位置；还有i，i 可以帮助我们在mItemBitmaps找到当前的Item的图片：（mItemBitmaps.get(i).bitmap）</p>
</li>
<li><p>到此，我们游戏的布局的代码就结束了~~~</p>
</li>
<li><p>然后我们在布局文件里面声明下：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">game.qiu.com.beautygame.GamePintuLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_gameview"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:padding</span>=<span class="string">"5dp"</span> &gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">game.qiu.com.beautygame.GamePintuLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>Activity里面记得设置这个布局~~</p>
</li>
<li><p>现在的效果是：</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE5.png" alt=""></center>


<h2 id="游戏的切换效果"><a href="#游戏的切换效果" class="headerlink" title="游戏的切换效果"></a>游戏的切换效果</h2><h3 id="初步的切换"><a href="#初步的切换" class="headerlink" title="初步的切换"></a>初步的切换</h3><ul>
<li>还记得我们都给Item添加了onClick的监听么~~<br>现在我们需要实现，点击两个Item，他们的图片能够发生交换~<br>那么，我们需要两个成员变量来存储这两个Item，然后再去交换</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 记录第一次点击的ImageView</div><div class="line">  */</div><div class="line"><span class="keyword">private</span> ImageView mFirst;  </div><div class="line"><span class="comment">/**</span></div><div class="line">  * 记录第二次点击的ImageView</div><div class="line">  */</div><div class="line"><span class="keyword">private</span> ImageView mSecond;  </div><div class="line"><span class="comment">/**</span></div><div class="line">  * 点击事件</div><div class="line">  * <span class="doctag">@param</span> view the view</div><div class="line">  * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">  */  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span>  </span>&#123;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 如果两次点击是同一个 </div><div class="line">     */  </div><div class="line">    <span class="keyword">if</span> (mFirst == v)  &#123;  </div><div class="line">        mFirst.setColorFilter(<span class="keyword">null</span>);  </div><div class="line">        mFirst = <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">return</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//点击第一个Item  </span></div><div class="line">    <span class="keyword">if</span> (mFirst == <span class="keyword">null</span>)  &#123;  </div><div class="line">        mFirst = (ImageView) v;  </div><div class="line">        mFirst.setColorFilter(Color.parseColor(<span class="string">"#55FF0000"</span>));  </div><div class="line">    &#125; <span class="keyword">else</span><span class="comment">//点击第二个Item  </span></div><div class="line">    &#123;  </div><div class="line">        mSecond = (ImageView) v;  </div><div class="line">        exchangeView();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>点击第一个，通过setColorFilter设置下选中效果，再次点击另一个，那我们就准备调用exchangeView进行交换图片了，当然这个方法我们还没写，先放着~<br>如果两次点击同一个，去除选中效果，我们就当什么都没发生</p>
</li>
<li><p>接下来，我们来实现exchangeView：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 交换两个Item图片 </div><div class="line">  * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exchangeView</span><span class="params">()</span>  </span>&#123;  </div><div class="line">                </div><div class="line">        mFirst.setColorFilter(<span class="keyword">null</span>);  </div><div class="line">        String firstTag = (String) mFirst.getTag();  </div><div class="line">        String secondTag = (String) mSecond.getTag();  </div><div class="line">          </div><div class="line">        <span class="comment">//得到在list中索引位置  </span></div><div class="line">        String[] firstImageIndex = firstTag.split(<span class="string">"_"</span>);  </div><div class="line">        String[] secondImageIndex = secondTag.split(<span class="string">"_"</span>);  </div><div class="line">          </div><div class="line">        mFirst.setImageBitmap(mItemBitmaps.get(Integer  </div><div class="line">                .parseInt(secondImageIndex[<span class="number">0</span>])).bitmap);  </div><div class="line">        mSecond.setImageBitmap(mItemBitmaps.get(Integer  </div><div class="line">                .parseInt(firstImageIndex[<span class="number">0</span>])).bitmap);  </div><div class="line">  </div><div class="line">        mFirst.setTag(secondTag);  </div><div class="line">        mSecond.setTag(firstTag);  </div><div class="line">          </div><div class="line">        mFirst = mSecond = <span class="keyword">null</span>;  </div><div class="line">  </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>应该还记得我们之前的setTag吧，忘了，返回去看看，我们还说注意来着~<br>通过getTag，拿到在List中是索引，然后得到bitmap进行交换设置，最后交换tag；<br>到此我们的交换效果写完了，我们的游戏可以完了~~效果是这样的：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE3.gif" alt=""></center>

<ul>
<li>可以看到我们已经可以玩了，至于为什么不用清爽的风景图，是因为，实在是看不出来那块对那块，还是妹子直观~<br>大家肯定会吐槽，我擦，动画切换呢，明明不是两个飞过去交换位置么，尼玛这算什么<br>也是，对与程序我们要有追求，下面我们来添加动画切换效果~~</li>
</ul>
<h3 id="无缝的动画切换"><a href="#无缝的动画切换" class="headerlink" title="无缝的动画切换"></a>无缝的动画切换</h3><ul>
<li>我们先聊聊怎么添加，我准备使用TranslationAnimation，然后两个Item的top，left也很容器获取；<br>但是，要明白，我们实际上，Item只是setImage发生了变化，Item的位置没有变；<br>我们现在需要动画移动效果，比如A移动到B，没问题，移动完成以后，Item得回去吧，但是图片并没有发生变化，我们还是需要手动setImage<br>这样造成了一个现象，动画切换效果有了，但是最后还是会有一闪，是我们切换图片造成的；<br>为了避免上述现象，能够完美的做到切换效果，这里我们引入一个动画图层，专门做动画效果，有点类似ps的图层，下面看我们怎么做；</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line">  * 动画运行的标志位 </div><div class="line">  */  </div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isAniming;  </div><div class="line"><span class="comment">/** </span></div><div class="line">  * 动画层 </div><div class="line">  */  </div><div class="line"><span class="keyword">private</span> RelativeLayout mAnimLayout;  </div><div class="line">      </div><div class="line"><span class="comment">/**</span></div><div class="line">  * 交换两个Item图片</div><div class="line">  * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exchangeView</span><span class="params">()</span></span>&#123;  </div><div class="line">        mFirst.setColorFilter(<span class="keyword">null</span>);  </div><div class="line">        setUpAnimLayout();  </div><div class="line">        <span class="comment">// 添加FirstView  </span></div><div class="line">        ImageView first = <span class="keyword">new</span> ImageView(getContext());  </div><div class="line">        first.setImageBitmap(mItemBitmaps  </div><div class="line">                .get(getImageIndexByTag((String) mFirst.getTag())).bitmap);  </div><div class="line">        LayoutParams lp = <span class="keyword">new</span> LayoutParams(mItemWidth, mItemWidth);  </div><div class="line">        lp.leftMargin = mFirst.getLeft() - mPadding;  </div><div class="line">        lp.topMargin = mFirst.getTop() - mPadding;  </div><div class="line">        first.setLayoutParams(lp);  </div><div class="line">        mAnimLayout.addView(first);  </div><div class="line">        <span class="comment">// 添加SecondView  </span></div><div class="line">        ImageView second = <span class="keyword">new</span> ImageView(getContext());  </div><div class="line">        second.setImageBitmap(mItemBitmaps  </div><div class="line">                .get(getImageIndexByTag((String) mSecond.getTag())).bitmap);  </div><div class="line">        LayoutParams lp2 = <span class="keyword">new</span> LayoutParams(mItemWidth, mItemWidth);  </div><div class="line">        lp2.leftMargin = mSecond.getLeft() - mPadding;  </div><div class="line">        lp2.topMargin = mSecond.getTop() - mPadding;  </div><div class="line">        second.setLayoutParams(lp2);  </div><div class="line">        mAnimLayout.addView(second);  </div><div class="line">  </div><div class="line">        <span class="comment">// 设置动画  </span></div><div class="line">        TranslateAnimation anim = <span class="keyword">new</span> TranslateAnimation(<span class="number">0</span>, mSecond.getLeft()  </div><div class="line">                - mFirst.getLeft(), <span class="number">0</span>, mSecond.getTop() - mFirst.getTop());  </div><div class="line">        anim.setDuration(<span class="number">300</span>);  </div><div class="line">        anim.setFillAfter(<span class="keyword">true</span>);  </div><div class="line">        first.startAnimation(anim);  </div><div class="line">  </div><div class="line">        TranslateAnimation animSecond = <span class="keyword">new</span> TranslateAnimation(<span class="number">0</span>,  </div><div class="line">                mFirst.getLeft() - mSecond.getLeft(), <span class="number">0</span>, mFirst.getTop()  </div><div class="line">                        - mSecond.getTop());  </div><div class="line">        animSecond.setDuration(<span class="number">300</span>);  </div><div class="line">        animSecond.setFillAfter(<span class="keyword">true</span>);  </div><div class="line">        second.startAnimation(animSecond);  </div><div class="line">        <span class="comment">// 添加动画监听  </span></div><div class="line">        anim.setAnimationListener(<span class="keyword">new</span> AnimationListener()&#123;  </div><div class="line">  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animation animation)</span></span>&#123;  </div><div class="line">                isAniming = <span class="keyword">true</span>;  </div><div class="line">                mFirst.setVisibility(INVISIBLE);  </div><div class="line">                mSecond.setVisibility(INVISIBLE);  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animation animation)</span></span>&#123;  </div><div class="line">  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animation animation)</span></span>&#123;  </div><div class="line">                String firstTag = (String) mFirst.getTag();  </div><div class="line">                String secondTag = (String) mSecond.getTag();  </div><div class="line">  </div><div class="line">                String[] firstParams = firstTag.split(<span class="string">"_"</span>);  </div><div class="line">                String[] secondParams = secondTag.split(<span class="string">"_"</span>);  </div><div class="line">  </div><div class="line">                mFirst.setImageBitmap(mItemBitmaps.get(Integer  </div><div class="line">                        .parseInt(secondParams[<span class="number">0</span>])).bitmap);  </div><div class="line">                mSecond.setImageBitmap(mItemBitmaps.get(Integer  </div><div class="line">                        .parseInt(firstParams[<span class="number">0</span>])).bitmap);  </div><div class="line">  </div><div class="line">                mFirst.setTag(secondTag);  </div><div class="line">                mSecond.setTag(firstTag);  </div><div class="line">                mFirst.setVisibility(VISIBLE);  </div><div class="line">                mSecond.setVisibility(VISIBLE);  </div><div class="line">                mFirst = mSecond = <span class="keyword">null</span>;  </div><div class="line">                mAnimLayout.removeAllViews();  </div><div class="line">                                <span class="comment">//checkSuccess();  </span></div><div class="line">                isAniming = <span class="keyword">false</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 创建动画层 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setUpAnimLayout</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">if</span> (mAnimLayout == <span class="keyword">null</span>)&#123;  </div><div class="line">            mAnimLayout = <span class="keyword">new</span> RelativeLayout(getContext());  </div><div class="line">            addView(mAnimLayout);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getImageIndexByTag</span><span class="params">(String tag)</span></span>&#123;  </div><div class="line">        String[] split = tag.split(<span class="string">"_"</span>);  </div><div class="line">        <span class="keyword">return</span> Integer.parseInt(split[<span class="number">0</span>]);  </div><div class="line">  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>开始交换时，我们创建一个动画层，然后在这一层上添加上两个一模一样的Item，把原来的Item隐藏了，然后尽情的进行动画切换，setFillAfter为true~<br>动画完毕，我们已经悄悄的把Item的图片交换了，直接显示出来。这样就完美的切换了：</li>
</ul>
<p><strong>大致过程：</strong></p>
<ol>
<li><p>A ，B隐藏 </p>
</li>
<li><p>A副本动画移动到B的位置；B副本移动到A的位置</p>
</li>
<li><p>A把图片设置为B，把B副本移除，A显示，这样就完美切合了，用户感觉是B移动过去的</p>
</li>
<li><p>B同上</p>
</li>
</ol>
<ul>
<li>现在我们的效果：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE6.gif" alt=""></center>

<ul>
<li>现在效果满意了把~~为了防止用户狂点，在onClick里面添加一句：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="comment">// 如果正在执行动画，则屏蔽  </span></div><div class="line">        <span class="keyword">if</span> (isAniming)  </div><div class="line">            <span class="keyword">return</span>;</div></pre></td></tr></table></figure>
<ul>
<li>到此我们的动画的切换，已经完美结束了~~<br>切换时，我们是不是应该判断是否成功了~~</li>
</ul>
<h2 id="游戏胜利的判断"><a href="#游戏胜利的判断" class="headerlink" title="游戏胜利的判断"></a>游戏胜利的判断</h2><ul>
<li>我们在切换完成，进行checkSuccess();的判断；好在我们把图片的正确的顺序存在tag里面~~</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 用来判断游戏是否成功</div><div class="line">  * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-12</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkSuccess</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">boolean</span> isSuccess = <span class="keyword">true</span>;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mGamePintuItems.length; i++)&#123;  </div><div class="line">            ImageView first = mGamePintuItems[i];  </div><div class="line">            Log.e(<span class="string">"TAG"</span>, getIndexByTag((String) first.getTag()) + <span class="string">""</span>);  </div><div class="line">            <span class="keyword">if</span> (getIndexByTag((String) first.getTag()) != i)&#123;  </div><div class="line">                isSuccess = <span class="keyword">false</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (isSuccess)&#123;  </div><div class="line">            Toast.makeText(getContext(), <span class="string">"Success , Level Up !"</span>,  </div><div class="line">                    Toast.LENGTH_LONG).show();  </div><div class="line">            <span class="comment">// nextLevel();  </span></div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 获得图片的真正索引 </div><div class="line">     * <span class="doctag">@param</span> tag </div><div class="line">     * <span class="doctag">@return</span> </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getIndexByTag</span><span class="params">(String tag)</span></span>&#123;  </div><div class="line">        String[] split = tag.split(<span class="string">"_"</span>);  </div><div class="line">        <span class="keyword">return</span> Integer.parseInt(split[<span class="number">1</span>]);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>很简单，遍历所有的Item，根据Tag拿到真正的索引和当然顺序比较，完全一致则胜利~~胜利以后进入下一关</p>
</li>
<li><p>至于下一关的代码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextLevel</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.removeAllViews();  </div><div class="line">        mAnimLayout = <span class="keyword">null</span>;  </div><div class="line">        mColumn++;  </div><div class="line">        initBitmap();  </div><div class="line">        initItem();  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>ok，到此我们的游戏结束了，我来带大家闯个关：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE7.gif" alt=""></center>

<h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><ul>
<li><a href="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%B8%B8%E6%88%8F-BeautyGame.zip" target="_blank" rel="external">传送门</a></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/40595385" target="_blank" rel="external">Android 实战美女拼图游戏 你能坚持到第几关</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE.apk&quot;&gt;游戏下载试玩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/qiuchengjia/Android-BeautyGame&quot;&gt;Github&lt;/a&gt; 喜欢的同学可以Star一下，非常感谢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把图片切分很多份，点击交换拼成一张完整的；这样关卡也很容易设计，3&lt;em&gt;3；4&lt;/em&gt;4；5&lt;em&gt;5；6&lt;/em&gt;6；一直下去&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;效果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE1.gif&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;加了个切换动画，效果还是不错的，其实游戏就是自定义了一个控件，下面我们开始自定义之旅&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android游戏" scheme="http://www.qiuchengjia.cn/categories/Android%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="Android游戏" scheme="http://www.qiuchengjia.cn/tags/Android%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android Broadcast广播机制分析</title>
    <link href="http://www.qiuchengjia.cn/2016/09/12/Android/Android-Broadcast%E5%B9%BF%E6%92%AD%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/"/>
    <id>http://www.qiuchengjia.cn/2016/09/12/Android/Android-Broadcast广播机制分析/</id>
    <published>2016-09-11T19:06:46.000Z</published>
    <updated>2016-09-26T11:54:28.089Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>基于Android 6.0的源码剖析， 分析android广播的发送与接收流程</p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>广播(Broadcast)机制用于进程/线程间通信，广播分为广播发送和广播接收两个过程，其中广播接收者BroadcastReceiver便是Android四大组件之一</p>
<p><strong>BroadcastReceiver分为两类：</strong></p>
<ul>
<li><p>静态广播接收者：通过AndroidManifest.xml的标签来申明的BroadcastReceiver</p>
</li>
<li><p>动态广播接收者：通过AMS.registerReceiver()方式注册的BroadcastReceiver，动态注册更为灵活，可在不需要时通过unregisterReceiver()取消注册</p>
</li>
</ul>
<p><strong>从广播发送方式可分为三类：</strong></p>
<ul>
<li><p>普通广播：通过Context.sendBroadcast()发送，可并行处理</p>
</li>
<li><p>有序广播：通过Context.sendOrderedBroadcast()发送，串行处理</p>
</li>
<li><p>Sticky广播：通过Context.sendStickyBroadcast()发送</p>
</li>
</ul>
<h2 id="注册广播"><a href="#注册广播" class="headerlink" title="注册广播"></a>注册广播</h2><h3 id="registerReceiver"><a href="#registerReceiver" class="headerlink" title="registerReceiver"></a>registerReceiver</h3><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;基于Android 6.0的源码剖析， 分析android广播的发送与接收流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;广播(Broadcast)机制用于进程/线程间通信，广播分为广播发送和广播接收两个过程，其中广播接收者BroadcastReceiver便是Android四大组件之一&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BroadcastReceiver分为两类：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态广播接收者：通过AndroidManifest.xml的标签来申明的BroadcastReceiver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态广播接收者：通过AMS.registerReceiver()方式注册的BroadcastReceiver，动态注册更为灵活，可在不需要时通过unregisterReceiver()取消注册&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;从广播发送方式可分为三类：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;普通广播：通过Context.sendBroadcast()发送，可并行处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有序广播：通过Context.sendOrderedBroadcast()发送，串行处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sticky广播：通过Context.sendStickyBroadcast()发送&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;注册广播&quot;&gt;&lt;a href=&quot;#注册广播&quot; class=&quot;headerlink&quot; title=&quot;注册广播&quot;&gt;&lt;/a&gt;注册广播&lt;/h2&gt;&lt;h3 id=&quot;registerReceiver&quot;&gt;&lt;a href=&quot;#registerReceiver&quot; class=&quot;headerlink&quot; title=&quot;registerReceiver&quot;&gt;&lt;/a&gt;registerReceiver&lt;/h3&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Service完全解析</title>
    <link href="http://www.qiuchengjia.cn/2016/09/12/Android/Android-Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.qiuchengjia.cn/2016/09/12/Android/Android-Service完全解析/</id>
    <published>2016-09-11T17:18:03.000Z</published>
    <updated>2016-09-26T11:54:28.093Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Service 是一个可以在后台执行长时间运行操作而不使用用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行</li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul>
<li>官方图解 </li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%901.png" alt=""></center>


<a id="more"></a>
<h3 id="onStartCommand"><a href="#onStartCommand" class="headerlink" title="onStartCommand()"></a>onStartCommand()</h3><ul>
<li>当另一个组件（如 Activity）通过调用 startService() 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 stopSelf() 或 stopService() 来停止服务。（如果您只想提供绑定，则无需实现此方法。）</li>
</ul>
<h3 id="onBind"><a href="#onBind" class="headerlink" title="onBind()"></a>onBind()</h3><ul>
<li>当另一个组件想通过调用 bindService() 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 IBinder 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 null</li>
</ul>
<h3 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate()"></a>onCreate()</h3><ul>
<li>首次创建服务时，系统将调用此方法来执行一次性设置程序（在调用 onStartCommand() 或 onBind() 之前）。如果服务已在运行，则不会调用此方法</li>
</ul>
<h3 id="onDestroy"><a href="#onDestroy" class="headerlink" title="onDestroy()"></a>onDestroy()</h3><ul>
<li>当服务不再使用且将被销毁时，系统将调用此方法。服务应该实现此方法来清理所有资源，如线程、注册的侦听器、接收器等。 这是服务接收的最后一个调用</li>
</ul>
<h2 id="Service的基本用法"><a href="#Service的基本用法" class="headerlink" title="Service的基本用法"></a>Service的基本用法</h2><ul>
<li><p>关于Service最基本的用法自然就是如何启动一个Service了，启动Service的方法和启动Activity很类似，都需要借助Intent来实现，下面我们就通过一个具体的例子来看一下</p>
</li>
<li><p>新建一个Android项目，项目名就叫ServiceTest，这里我选择使用4.0的API</p>
</li>
<li><p>然后新建一个MyService继承自Service，并重写父类的onCreate()、onStartCommand()和onDestroy()方法，如下所示：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyService"</span>;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate();  </div><div class="line">        Log.d(TAG, <span class="string">"onCreate() executed"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;  </div><div class="line">        Log.d(TAG, <span class="string">"onStartCommand() executed"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        Log.d(TAG, <span class="string">"onDestroy() executed"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以看到，我们只是在onCreate()、onStartCommand()和onDestroy()方法中分别打印了一句话，并没有进行其它任何的操作。<br>然后打开或新建activity_main.xml作为程序的主布局文件，代码如下所示：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"  </div><div class="line">    android:layout_width="match_parent"  </div><div class="line">    android:layout_height="match_parent"  </div><div class="line">    android:orientation="vertical" &gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/start_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Start Service" /&gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/stop_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Stop Service" /&gt;  </div><div class="line">  </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>我们在布局文件中加入了两个按钮，一个用于启动Service，一个用于停止Service</p>
</li>
<li><p>然后打开或新建MainActivity作为程序的主Activity，在里面加入启动Service和停止Service的逻辑，代码如下所示：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button startService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button stopService;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        startService = (Button) findViewById(R.id.start_service);  </div><div class="line">        stopService = (Button) findViewById(R.id.stop_service);  </div><div class="line">        startService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        stopService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;  </div><div class="line">        <span class="keyword">case</span> R.id.start_service:  </div><div class="line">            Intent startIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            startService(startIntent);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> R.id.stop_service:  </div><div class="line">            Intent stopIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            stopService(stopIntent);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">default</span>:  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>可以看到，在Start Service按钮的点击事件里，我们构建出了一个Intent对象，并调用startService()方法来启动MyService。然后在Stop Serivce按钮的点击事件里，我们同样构建出了一个Intent对象，并调用stopService()方法来停止MyService。代码的逻辑非常简单，相信不需要我再多做解释了吧</p>
</li>
<li><p>另外需要注意，项目中的每一个Service都必须在AndroidManifest.xml中注册才行，所以还需要编辑AndroidManifest.xml文件，代码如下所示：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">package</span>=<span class="string">"com.example.servicetest"</span>  </div><div class="line">    <span class="attr">android:versionCode</span>=<span class="string">"1"</span>  </div><div class="line">    <span class="attr">android:versionName</span>=<span class="string">"1.0"</span> &gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span>  </span></div><div class="line">        <span class="attr">android:minSdkVersion</span>=<span class="string">"14"</span>  </div><div class="line">        <span class="attr">android:targetSdkVersion</span>=<span class="string">"17"</span> /&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">application</span>  </span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span>  </div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span>  </div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>  </div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> &gt;  </div><div class="line">          </div><div class="line">    ……  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">"com.example.servicetest.MyService"</span> &gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>这样的话，一个简单的带有Service功能的程序就写好了，现在我们将程序运行起来，并点击一下Start Service按钮，可以看到LogCat的打印日志如下：</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService onStartCommand() executed</p>
</blockquote>
<ul>
<li><p>也就是说，当启动一个Service的时候，会调用该Service中的onCreate()和onStartCommand()方法</p>
</li>
<li><p>那么如果我再点击一次Start Service按钮呢？这个时候的打印日志如下：</p>
</li>
</ul>
<blockquote>
<p>MyService onStartCommand() executed</p>
</blockquote>
<ul>
<li>可以看到，这次只有onStartCommand()方法执行了，onCreate()方法并没有执行，为什么会这样呢？这是由于onCreate()方法只会在Service第一次被创建的时候调用，如果当前Service已经被创建过了，不管怎样调用startService()方法，onCreate()方法都不会再执行。因此你可以再多点击几次Start Service按钮试一次，每次都只会有onStartCommand()方法中的打印日志。<br>我们还可以到手机的应用程序管理界面来检查一下MyService是不是正在运行，如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%902.png" alt=""></center>

<ul>
<li>恩，MyService确实是正在运行的，即使它的内部并没有执行任何的逻辑。<br>回到ServiceTest程序，然后点击一下Stop Service按钮就可以将MyService停止掉了</li>
</ul>
<h2 id="Service和Activity通信"><a href="#Service和Activity通信" class="headerlink" title="Service和Activity通信"></a>Service和Activity通信</h2><ul>
<li><p>上面我们学习了Service的基本用法，启动Service之后，就可以在onCreate()或onStartCommand()方法里去执行一些具体的逻辑了。不过这样的话Service和Activity的关系并不大，只是Activity通知了Service一下：“你可以启动了。”然后Service就去忙自己的事情了。那么有没有什么办法能让它们俩的关联更多一些呢？比如说在Activity中可以指定让Service去执行什么任务。当然可以，只需要让Activity和Service建立关联就好了</p>
</li>
<li><p>观察MyService中的代码，你会发现一直有一个onBind()方法我们都没有使用到，这个方法其实就是用于和Activity建立关联的，修改MyService中的代码，如下所示：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyService"</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> MyBinder mBinder = <span class="keyword">new</span> MyBinder();  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate();  </div><div class="line">        Log.d(TAG, <span class="string">"onCreate() executed"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;  </div><div class="line">        Log.d(TAG, <span class="string">"onStartCommand() executed"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        Log.d(TAG, <span class="string">"onDestroy() executed"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mBinder;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">()</span> </span>&#123;  </div><div class="line">            Log.d(<span class="string">"TAG"</span>, <span class="string">"startDownload() executed"</span>);  </div><div class="line">            <span class="comment">// 执行具体的下载任务  </span></div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里我们新增了一个MyBinder类继承自Binder类，然后在MyBinder中添加了一个startDownload()方法用于在后台执行下载任务，当然这里并不是真正地去下载某个东西，只是做个测试，所以startDownload()方法只是打印了一行日志。<br>然后修改activity_main.xml中的代码，在布局文件中添加用于绑定Service和取消绑定Service的按钮：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"  </div><div class="line">    android:layout_width="match_parent"  </div><div class="line">    android:layout_height="match_parent"  </div><div class="line">    android:orientation="vertical" &gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/start_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Start Service" /&gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/stop_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Stop Service" /&gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/bind_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Bind Service" /&gt;  </div><div class="line">      </div><div class="line">    &lt;Button   </div><div class="line">        android:id="@+id/unbind_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Unbind Service"  </div><div class="line">        /&gt;  </div><div class="line">      </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<ul>
<li>接下来再修改MainActivity中的代码，让MainActivity和MyService之间建立关联，代码如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button startService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button stopService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button bindService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button unbindService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> MyService.MyBinder myBinder;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;  </div><div class="line">            myBinder = (MyService.MyBinder) service;  </div><div class="line">            myBinder.startDownload();  </div><div class="line">        &#125;  </div><div class="line">    &#125;;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        startService = (Button) findViewById(R.id.start_service);  </div><div class="line">        stopService = (Button) findViewById(R.id.stop_service);  </div><div class="line">        bindService = (Button) findViewById(R.id.bind_service);  </div><div class="line">        unbindService = (Button) findViewById(R.id.unbind_service);  </div><div class="line">        startService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        stopService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        bindService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        unbindService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;  </div><div class="line">        <span class="keyword">case</span> R.id.start_service:  </div><div class="line">            Intent startIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            startService(startIntent);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> R.id.stop_service:  </div><div class="line">            Intent stopIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            stopService(stopIntent);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> R.id.bind_service:  </div><div class="line">            Intent bindIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            bindService(bindIntent, connection, BIND_AUTO_CREATE);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> R.id.unbind_service:  </div><div class="line">            unbindService(connection);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">default</span>:  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>可以看到，这里我们首先创建了一个ServiceConnection的匿名类，在里面重写了onServiceConnected()方法和onServiceDisconnected()方法，这两个方法分别会在Activity与Service建立关联和解除关联的时候调用。在onServiceConnected()方法中，我们又通过向下转型得到了MyBinder的实例，有了这个实例，Activity和Service之间的关系就变得非常紧密了。现在我们可以在Activity中根据具体的场景来调用MyBinder中的任何public方法，即实现了Activity指挥Service干什么Service就去干什么的功能。<br>当然，现在Activity和Service其实还没关联起来了呢，这个功能是在Bind Service按钮的点击事件里完成的。可以看到，这里我们仍然是构建出了一个Intent对象，然后调用bindService()方法将Activity和Service进行绑定。bindService()方法接收三个参数，第一个参数就是刚刚构建出的Intent对象，第二个参数是前面创建出的ServiceConnection的实例，第三个参数是一个标志位，这里传入BIND_AUTO_CREATE表示在Activity和Service建立关联后自动创建Service，这会使得MyService中的onCreate()方法得到执行，但onStartCommand()方法不会执行.<br>然后如何我们想解除Activity和Service之间的关联怎么办呢？调用一下unbindService()方法就可以了，这也是Unbind Service按钮的点击事件里实现的逻辑.</p>
</li>
<li><p>现在让我们重新运行一下程序吧，在MainActivity中点击一下Bind Service按钮，LogCat里的打印日志如下所示：</p>
</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService startDownload() executed</p>
</blockquote>
<ul>
<li>另外需要注意，任何一个Service在整个应用程序范围内都是通用的，即MyService不仅可以和MainActivity建立关联，还可以和任何一个Activity建立关联，而且在建立关联时它们都可以获取到相同的MyBinder实例</li>
</ul>
<h2 id="如何销毁Service"><a href="#如何销毁Service" class="headerlink" title="如何销毁Service"></a>如何销毁Service</h2><ul>
<li>在Service的基本用法这一部分，我们介绍了销毁Service最简单的一种情况，点击Start Service按钮启动Service，再点击Stop Service按钮停止Service，这样MyService就被销毁了，可以看到打印日志如下所示：</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService onStartCommand() executed<br>MyService onDestroy() executed</p>
</blockquote>
<ul>
<li><p>那么如果我们是点击的Bind Service按钮呢？由于在绑定Service的时候指定的标志位是BIND_AUTO_CREATE，说明点击Bind Service按钮的时候Service也会被创建，这时应该怎么销毁Service呢？其实也很简单，点击一下Unbind Service按钮，将Activity和Service的关联解除就可以了</p>
</li>
<li><p>先点击一下Bind Service按钮，再点击一下Unbind Service按钮，打印日志如下所示：</p>
</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService startDownload() executed<br>MyService onDestroy() executed</p>
</blockquote>
<ul>
<li><p>以上这两种销毁的方式都很好理解。那么如果我们既点击了Start Service按钮，又点击了Bind Service按钮会怎么样呢？这个时候你会发现，不管你是单独点击Stop Service按钮还是Unbind Service按钮，Service都不会被销毁，必要将两个按钮都点击一下，Service才会被销毁。也就是说，点击Stop Service按钮只会让Service停止，点击Unbind Service按钮只会让Service和Activity解除关联，一个Service必须要在既没有和任何Activity关联又处理停止状态的时候才会被销毁</p>
</li>
<li><p>为了证实一下，我们在Stop Service和Unbind Service按钮的点击事件里面加入一行打印日志：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">    <span class="keyword">switch</span> (v.getId()) &#123;  </div><div class="line">    <span class="keyword">case</span> R.id.start_service:  </div><div class="line">        Intent startIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">        startService(startIntent);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> R.id.stop_service:  </div><div class="line">        Log.d(<span class="string">"MyService"</span>, <span class="string">"click Stop Service button"</span>);  </div><div class="line">        Intent stopIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">        stopService(stopIntent);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> R.id.bind_service:  </div><div class="line">        Intent bindIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">        bindService(bindIntent, connection, BIND_AUTO_CREATE);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> R.id.unbind_service:  </div><div class="line">        Log.d(<span class="string">"MyService"</span>, <span class="string">"click Unbind Service button"</span>);  </div><div class="line">        unbindService(connection);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">default</span>:  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后重新运行程序，先点击一下Start Service按钮，再点击一下Bind Service按钮，这样就将Service启动起来，并和Activity建立了关联。然后点击Stop Service按钮后Service并不会销毁，再点击一下Unbind Service按钮，Service就会销毁了，打印日志如下所示：</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService onStartCommand() executed<br>MyService startDownload() executed<br>MyService click Stop Service button<br>MyService click Unbind Service button<br>MyService onDestroy() executed</p>
</blockquote>
<ul>
<li>我们应该始终记得在Service的onDestroy()方法里去清理掉那些不再使用的资源，防止在Service被销毁后还会有一些不再使用的对象仍占用着内存</li>
</ul>
<h2 id="Service和Thread的关系"><a href="#Service和Thread的关系" class="headerlink" title="Service和Thread的关系"></a>Service和Thread的关系</h2><ul>
<li><p>不少Android初学者都可能会有这样的疑惑，Service和Thread到底有什么关系呢？什么时候应该用Service，什么时候又应该用Thread？答案可能会有点让你吃惊，因为Service和Thread之间没有任何关系！<br>之所以有不少人会把它们联系起来，主要就是因为Service的后台概念。Thread我们大家都知道，是用于开启一个子线程，在这里去执行一些耗时操作就不会阻塞主线程的运行。而Service我们最初理解的时候，总会觉得它是用来处理一些后台任务的，一些比较耗时的操作也可以放在这里运行，这就会让人产生混淆了。但是，如果我告诉你Service其实是运行在主线程里的，你还会觉得它和Thread有什么关系吗？让我们看一下这个残酷的事实吧</p>
</li>
<li><p>在MainActivity的onCreate()方法里加入一行打印当前线程id的语句：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.d(<span class="string">"MyService"</span>, <span class="string">"MainActivity thread id is "</span> + Thread.currentThread().getId());</div></pre></td></tr></table></figure>
<ul>
<li>然后在MyService的onCreate()方法里也加入一行打印当前线程id的语句：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.d(<span class="string">"MyService"</span>, <span class="string">"MyService thread id is "</span> + Thread.currentThread().getId());</div></pre></td></tr></table></figure>
<ul>
<li>现在重新运行一下程序，并点击Start Service按钮，会看到如下打印日志：</li>
</ul>
<blockquote>
<p>MyService MainActivity thread id is 1<br>MyService MyService thread id is 1</p>
</blockquote>
<ul>
<li><p>可以看到，它们的线程id完全是一样的，由此证实了Service确实是运行在主线程里的，也就是说如果你在Service里编写了非常耗时的代码，程序必定会出现ANR的。<br>你可能会惊呼，这不是坑爹么！？那我要Service又有何用呢？其实大家不要把后台和子线程联系在一起就行了，这是两个完全不同的概念。Android的后台就是指，它的运行是完全不依赖UI的。即使Activity被销毁，或者程序被关闭，只要进程还在，Service就可以继续运行。比如说一些应用程序，始终需要与服务器之间始终保持着心跳连接，就可以使用Service来实现。你可能又会问，前面不是刚刚验证过Service是运行在主线程里的么？在这里一直执行着心跳连接，难道就不会阻塞主线程的运行吗？当然会，但是我们可以在Service中再创建一个子线程，然后在这里去处理耗时逻辑就没问题了。<br>额，既然在Service里也要创建一个子线程，那为什么不直接在Activity里创建呢？这是因为Activity很难对Thread进行控制，当Activity被销毁之后，就没有任何其它的办法可以再重新获取到之前创建的子线程的实例。而且在一个Activity中创建的子线程，另一个Activity无法对其进行操作。但是Service就不同了，所有的Activity都可以与Service进行关联，然后可以很方便地操作其中的方法，即使Activity被销毁了，之后只要重新与Service建立关联，就又能够获取到原有的Service中Binder的实例。因此，使用Service来处理后台任务，Activity就可以放心地finish，完全不需要担心无法对后台任务进行控制的情况。</p>
</li>
<li><p>一个比较标准的Service就可以写成：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;  </div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">            <span class="comment">// 开始执行后台任务  </span></div><div class="line">        &#125;  </div><div class="line">    &#125;).start();  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                <span class="comment">// 执行具体的下载任务  </span></div><div class="line">            &#125;  </div><div class="line">        &#125;).start();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建前台Service"><a href="#创建前台Service" class="headerlink" title="创建前台Service"></a>创建前台Service</h2><ul>
<li>Service几乎都是在后台运行的，一直以来它都是默默地做着辛苦的工作。但是Service的系统优先级还是比较低的，当系统出现内存不足情况时，就有可能会回收掉正在后台运行的Service。如果你希望Service可以一直保持运行状态，而不会由于系统内存不足的原因导致被回收，就可以考虑使用前台Service。前台Service和普通Service最大的区别就在于，它会一直有一个正在运行的图标在系统的状态栏显示，下拉状态栏后可以看到更加详细的信息，非常类似于通知的效果。当然有时候你也可能不仅仅是为了防止Service被回收才使用前台Service，有些项目由于特殊的需求会要求必须使用前台Service，比如说墨迹天气，它的Service在后台更新天气数据的同时，还会在系统状态栏一直显示当前天气的信息，如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%903.png" alt=""></center>

<ul>
<li>那么我们就来看一下如何才能创建一个前台Service吧，其实并不复杂，修改MyService中的代码，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyService"</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> MyBinder mBinder = <span class="keyword">new</span> MyBinder();  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        Log.d(TAG, <span class="string">"onCreate() executed"</span>);</div><div class="line">        Log.d(<span class="string">"MyService"</span>, <span class="string">"MyService thread id is "</span> +</div><div class="line">        Thread.currentThread().getId());</div><div class="line">        Notification.Builder builder = <span class="keyword">new</span> Notification.Builder(<span class="keyword">this</span>);</div><div class="line">        PendingIntent contentIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>,</div><div class="line">                <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class), <span class="number">0</span>);</div><div class="line">        builder.setContentIntent(contentIntent);</div><div class="line">        builder.setSmallIcon(R.mipmap.ic_launcher);</div><div class="line">        builder.setTicker(<span class="string">"Foreground Service Start"</span>);</div><div class="line">        builder.setContentTitle(<span class="string">"Foreground Service"</span>);</div><div class="line">        builder.setContentText(<span class="string">"Make this service run in the foreground."</span>);</div><div class="line">        Notification notification = builder.build();</div><div class="line">        startForeground(BIND_AUTO_CREATE,notification);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    .........  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里只是修改了MyService中onCreate()方法的代码。可以看到，我们首先创建了一个Notification对象，然后调用了它的setLatestEventInfo()方法来为通知初始化布局和数据，并在这里设置了点击通知后就打开MainActivity。然后调用startForeground()方法就可以让MyService变成一个前台Service，并会将通知的图片显示出来。<br>现在重新运行一下程序，并点击Start Service或Bind Service按钮，MyService就会以前台Service的模式启动了，并且在系统状态栏会弹出一个通栏图标，下拉状态栏后可以看到通知的详细内容，如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%907.png" alt=""></center>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://developer.android.com/guide/components/services.html#Basics" target="_blank" rel="external">Android官方文档之Service</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/2fb6eb14fdec" target="_blank" rel="external">Android 服务两种启动方式的区别</a></p>
</li>
<li><p><a href="http://blog.csdn.net/guolin_blog/article/details/11952435" target="_blank" rel="external"> Android Service完全解析，关于服务你所需知道的一切(上)</a></p>
</li>
<li><p><a href="http://blog.csdn.net/guolin_blog/article/details/9797169" target="_blank" rel="external"> Android Service完全解析，关于服务你所需知道的一切(下)</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Service 是一个可以在后台执行长时间运行操作而不使用用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官方图解 &lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%901.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Activity生命周期详解</title>
    <link href="http://www.qiuchengjia.cn/2016/09/11/Android/Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.qiuchengjia.cn/2016/09/11/Android/Activity生命周期详解/</id>
    <published>2016-09-10T20:17:13.000Z</published>
    <updated>2016-09-26T11:54:28.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul>
<li>官方图解</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/activity_lifecycle.png" alt=""></center>

<a id="more"></a>
<h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><p>这张图列出了Activity生命周期最主要的一些方法，启动后依次执行：</p>
<p>onCreate –&gt; onStart –&gt; onResume –&gt; onPause –&gt; onStop –&gt; onDestroy</p>
<p>信很多人也都已经知道以上方法与执行顺序，但是Activity还有其他方法，如onContentChanged， onPostCreate， onPostResume， onConfigurationChanged， onSaveInstanceState， onRestoreInstanceState</p>
<h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String TAG=<span class="string">"MainActivity"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 首次创建Activity的时调用</div><div class="line">     * <span class="doctag">@param</span> savedInstanceState the saved instance state</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Log.d(<span class="string">"TAG"</span>,<span class="string">"onCreate"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当Activity的布局改动时，即setContentView()或者addContentView()</div><div class="line">     * 方法执行完毕时就会调用该方法</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContentChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onContentChanged();</div><div class="line">        Log.d(TAG, <span class="string">"onContentChanged: "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在Activity即将对用户可见时调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStart();</div><div class="line">        Log.d(<span class="string">"TAG"</span>,<span class="string">"onStart"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在 Activity 已停止并即将再次启动前调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.onRestart();</div><div class="line">        Log.d(TAG, <span class="string">"onRestart: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指onCreate方法彻底执行完毕的回调</div><div class="line">     * <span class="doctag">@param</span> savedInstanceState the saved instance state</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPostCreate(savedInstanceState);</div><div class="line">        Log.d(TAG, <span class="string">"onPostCreate: "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在Activity即将开始与用户交互时调用，此时，Activity 处于</div><div class="line">     * Activity 堆栈的顶层，并具有用户输入焦点</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        Log.d(TAG, <span class="string">"onResume"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPostResume();</div><div class="line">        Log.d(TAG, <span class="string">"onPostResume: "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当系统即将开始继续另一个 Activity 时调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        Log.d(TAG, <span class="string">"onPause"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Activity 对用户不再可见时调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">        Log.d(TAG, <span class="string">"onStop: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在 Activity 被销毁前调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        Log.d(TAG, <span class="string">"onDestroy: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onConfigurationChanged(newConfig);</div><div class="line">        Log.d(TAG, <span class="string">"onConfigurationChanged: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line">        Log.d(TAG, <span class="string">"onSaveInstanceState: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span></span></div><div class="line">    <span class="params">(Bundle savedInstanceState)</span>&#123;</div><div class="line">        <span class="keyword">super</span>.onRestoreInstanceState(savedInstanceState);</div><div class="line">        Log.d(TAG, <span class="string">"onRestoreInstanceState: "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>程序启动运行并结束上述生命周期的方法执行顺序是这样的：</p>
<p>  onCreate –&gt; onContentChanged –&gt; onStart –&gt; onPostCreate –&gt; onResume –&gt; onPostResume –&gt; onPause –&gt; onStop –&gt; onDestroy</p>
</li>
<li><p>具体参考 <a href="https://developer.android.com/guide/components/activities.html?hl=zh-cn#Creating" target="_blank" rel="external">Activity</a> 和 <a href="http://stormzhang.com/android/2014/09/14/activity-lifecycle1/" target="_blank" rel="external">ACTIVITY生命周期详解一</a></p>
</li>
</ul>
<h2 id="生命周期具体场景"><a href="#生命周期具体场景" class="headerlink" title="生命周期具体场景"></a>生命周期具体场景</h2><h3 id="首次启动"><a href="#首次启动" class="headerlink" title="首次启动"></a>首次启动</h3><ul>
<li>onCreate –&gt; onStart –&gt; onResume</li>
</ul>
<h3 id="按下返回按键"><a href="#按下返回按键" class="headerlink" title="按下返回按键"></a>按下返回按键</h3><ul>
<li>onPause –&gt; onStop –&gt; onDestroy</li>
</ul>
<h3 id="按Home键"><a href="#按Home键" class="headerlink" title="按Home键"></a>按Home键</h3><ul>
<li>onPause –&gt; onSaveInstanceState –&gt; onStop</li>
</ul>
<h3 id="再次打开"><a href="#再次打开" class="headerlink" title="再次打开"></a>再次打开</h3><ul>
<li>onRestart –&gt; onStart –&gt; onResume</li>
</ul>
<h3 id="屏幕旋转"><a href="#屏幕旋转" class="headerlink" title="屏幕旋转"></a>屏幕旋转</h3><ul>
<li><p>如果你不做任何配置</p>
<p>  启动Activity会执行如下方法：</p>
<p>  onCreate –&gt; onStart –&gt; onResume</p>
<p>  之后旋转屏幕，则Activity会被销毁并重新创建，之后便会执行如下方法：</p>
<p>  onPause –&gt; onSaveInstanceState –&gt; onStop –&gt; onDestroy –&gt; onCreate –&gt; onStart –&gt; onRestoreInstanceState –&gt; onResume</p>
</li>
<li><p>在AndroidManifest配置文件里声明android:configChanges属性<br>默认屏幕旋转会重新创建，当然可以通过在配置文件里加上如下代码：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">android:configChanges="keyboardHidden|orientation|screenSize"</div><div class="line">（sdk&gt;13时需加上screenSize）</div></pre></td></tr></table></figure>
<p>这个时候再旋转屏幕便不会销毁Activity，这时候再旋转屏幕可以看到只会执行onConfigurationChanged方法，有什么在屏幕旋转的逻辑可以重写这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (newConfig.orientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) &#123;</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span></span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">super</span>.onConfigurationChanged(newConfig);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="FirstActivity打开SecondActivity"><a href="#FirstActivity打开SecondActivity" class="headerlink" title="FirstActivity打开SecondActivity"></a>FirstActivity打开SecondActivity</h3><ul>
<li><p>FirstActivity打开SecondActivity，这时候FirstActivity生命周期的方法是这样的： onPause –&gt; onSaveInstanceState –&gt; onStop, 这个时候在SecondActivity按返回键，FirstActivity会有以下几种情况：</p>
</li>
<li><p>正常情况下会执行： onRestart -&gt; onStart -&gt; onResume</p>
</li>
<li><p>当系统由于要回收内存而把 activity 销毁时</p>
<p>  Activity在onPause或者onStop状态下都有可能遇到由于突发事件系统需要回收内存，之后的onDestroy方法便不会再执行，这时候会执行： onCreate –&gt; onStart –&gt; onRestoreInstanceState –&gt; onResume</p>
</li>
</ul>
<h2 id="保存-Activity-状态"><a href="#保存-Activity-状态" class="headerlink" title="保存 Activity 状态"></a>保存 Activity 状态</h2><ul>
<li><p>当系统为了恢复内存而销毁某项 Activity 时，Activity 对象也会被销毁，因此系统在继续 Activity 时根本无法让其状态保持完好，而是必须在用户返回Activity时重建 Activity 对象。但用户并不知道系统销毁 Activity 后又对其进行了重建，因此他们很可能认为 Activity 状态毫无变化。 在这种情况下，您可以实现另一个回调方法对有关 Activity 状态的信息进行保存，以确保有关 Activity 状态的重要信息得到保留：onSaveInstanceState()</p>
</li>
<li><p>系统会先调用 onSaveInstanceState()，然后再使 Activity 变得易于销毁。系统会向该方法传递一个 Bundle，您可以在其中使用 putString() 和 putInt() 等方法以名称-值对形式保存有关 Activity 状态的信息。然后，如果系统终止您的应用进程，并且用户返回您的 Activity，则系统会重建该 Activity，并将 Bundle 同时传递给 onCreate() 和 onRestoreInstanceState()。您可以使用上述任一方法从 Bundle 提取您保存的状态并恢复该 Activity 状态。如果没有状态信息需要恢复，则传递给您的 Bundle 是空值（如果是首次创建该 Activity，就会出现这种情况）</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3.png" alt=""></center>

<ul>
<li>您只需旋转设备，让屏幕方向发生变化，就能有效地测试您的应用的状态恢复能力。 当屏幕方向变化时，系统会销毁并重建 Activity，以便应用可供新屏幕配置使用的备用资源。 单凭这一理由，您的 Activity 在重建时能否完全恢复其状态就显得非常重要，因为用户在使用应用时经常需要旋转屏幕</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://stormzhang.com/android/2014/09/14/activity-lifecycle1/" target="_blank" rel="external">ACTIVITY生命周期详解一</a></p>
</li>
<li><p><a href="http://stormzhang.com/android/2014/09/17/android-lifecycle2/" target="_blank" rel="external">ACTIVITY生命周期详解二</a></p>
</li>
<li><p><a href="https://developer.android.com/guide/components/activities.html?hl=zh-cn#Creating" target="_blank" rel="external">Android官方文档之Activity</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官方图解&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/activity_lifecycle.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android学习之路</title>
    <link href="http://www.qiuchengjia.cn/2016/09/11/Android/Android%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>http://www.qiuchengjia.cn/2016/09/11/Android/Android学习之路/</id>
    <published>2016-09-10T19:58:11.000Z</published>
    <updated>2016-09-26T11:54:28.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习路线图"><a href="#学习路线图" class="headerlink" title="学习路线图"></a>学习路线图</h2><ul>
<li>一张图搞定，非常全面</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF.png" alt=""></center>


<h2 id="扩展资料"><a href="#扩展资料" class="headerlink" title="扩展资料"></a>扩展资料</h2><ul>
<li><a href="http://gold.xitu.io/entry/57566aca530fd30068150da3" target="_blank" rel="external">Android 开发书籍推荐 &amp; 学习路线图 &amp; 资料汇整</a></li>
</ul>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习路线图&quot;&gt;&lt;a href=&quot;#学习路线图&quot; class=&quot;headerlink&quot; title=&quot;学习路线图&quot;&gt;&lt;/a&gt;学习路线图&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一张图搞定，非常全面&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Android%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;


&lt;h2 id=&quot;扩展资料&quot;&gt;&lt;a href=&quot;#扩展资料&quot; class=&quot;headerlink&quot; title=&quot;扩展资料&quot;&gt;&lt;/a&gt;扩展资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gold.xitu.io/entry/57566aca530fd30068150da3&quot;&gt;Android 开发书籍推荐 &amp;amp; 学习路线图 &amp;amp; 资料汇整&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio自定义注释</title>
    <link href="http://www.qiuchengjia.cn/2016/08/22/AndroidStudio/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A/"/>
    <id>http://www.qiuchengjia.cn/2016/08/22/AndroidStudio/AndroidStudio自定义注释/</id>
    <published>2016-08-22T14:02:01.000Z</published>
    <updated>2016-09-26T11:54:28.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置类创建时自动生成头部注释"><a href="#设置类创建时自动生成头部注释" class="headerlink" title="设置类创建时自动生成头部注释"></a>设置类创建时自动生成头部注释</h2><ul>
<li>比如每次创建一个类自动在头部生成一个这样的头部,作为一个类的说明信息</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A1.png" alt=""></center>

<ul>
<li>设置方法</li>
</ul>
<p>点击设置—&gt;Editor–&gt;File and code Templates –&gt;Includes—&gt;File Header<br>代码：其中时间是自动获取的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Description: </div><div class="line"> * Data：$&#123;DATE&#125;-$&#123;TIME&#125;</div><div class="line"> * Blog：www.qiuchengjia.cn</div><div class="line"> * Author: qiu</div><div class="line"> */</div></pre></td></tr></table></figure>
<ul>
<li>效果和步骤</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A3.gif" alt=""></center>

<a id="more"></a>
<h2 id="设置快速生成方法注释的两种方式"><a href="#设置快速生成方法注释的两种方式" class="headerlink" title="设置快速生成方法注释的两种方式"></a>设置快速生成方法注释的两种方式</h2><h3 id="在studio-中自定义模板"><a href="#在studio-中自定义模板" class="headerlink" title="在studio 中自定义模板"></a>在studio 中自定义模板</h3><ul>
<li>在studio中自定义注释模板有一定的局限性，目前已知的studio的模板只能获取的时间，并不能获取返回值以及参数等信息，那是因为获取方法名的方法运行在方法内部才会生效,运行在方法外部是不能生效.<br>所以在方法外部用studio自定义模板的方式有一定的局限性</li>
</ul>
<ul>
<li>模板</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Description:$Method$</div><div class="line"> * Blog: www.qiuchengjia.cn</div><div class="line"> * Data: $Date$ $Time$</div><div class="line"> * <span class="doctag">@author</span>: qiu</div><div class="line"> */</div></pre></td></tr></table></figure>
<ul>
<li>点击设置—&gt;Editor–&gt;live Templates –&gt;点击+号 先创建1个组 再创建一个模板<br>编辑注释内容–&gt;声明作用域</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A2.gif" alt=""></center>

<h3 id="javaDoc自动生成注释"><a href="#javaDoc自动生成注释" class="headerlink" title="javaDoc自动生成注释"></a>javaDoc自动生成注释</h3><ul>
<li>如果我们想获取到方法名，参数返回值的信息，想让这些信息全部自动生成的注释里面的话，我们可以借助插件JavaDoc实现，安装插件javaDoc 安装完之后重启studio</li>
</ul>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A4.png" alt=""></center>

<h4 id="方法配置"><a href="#方法配置" class="headerlink" title="方法配置"></a>方法配置</h4><ul>
<li>我这儿拿method的来举例。我给每个方法的注解加 一个 作者以及时间</li>
</ul>
<ul>
<li><p><strong>@author qiu 博客：www.qiuchengjia.cn 时间：${.now?string[“yyyy-MM-dd”]}\n</strong></p>
</li>
<li><p><strong>原始配置</strong></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**\n</div><div class="line"> * $&#123;name&#125;<span class="tag">&lt;<span class="name">#if</span> <span class="attr">isNotVoid</span>&gt;</span> $&#123;return&#125;<span class="tag">&lt;/<span class="name">#if</span>&gt;</span>.\n</div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.typeParameters</span>?<span class="attr">has_content</span>&gt;</span>         * \n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.typeParameters</span> <span class="attr">as</span> <span class="attr">typeParameter</span>&gt;</span></div><div class="line">         * @param <span class="tag">&lt;<span class="name">$&#123;typeParameter.name&#125;</span>&gt;</span> the type parameter\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.parameterList.parameters</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.parameterList.parameters</span> <span class="attr">as</span> <span class="attr">parameter</span>&gt;</span></div><div class="line">         * @param $&#123;parameter.name&#125; the $&#123;paramNames[parameter.name]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">isNotVoid</span>&gt;</span></div><div class="line">         *\n</div><div class="line">         * @return the $&#123;return&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.throwsList.referenceElements</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.throwsList.referenceElements</span> <span class="attr">as</span> <span class="attr">exception</span>&gt;</span></div><div class="line">         * @throws $&#123;exception.referenceName&#125; the $&#123;exceptionNames[exception.referenceName]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"> */</div></pre></td></tr></table></figure>
<ul>
<li><strong>修改之后的配置</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/**\n</div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.typeParameters</span>?<span class="attr">has_content</span>&gt;</span>         * \n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.typeParameters</span> <span class="attr">as</span> <span class="attr">typeParameter</span>&gt;</span></div><div class="line">         * @param <span class="tag">&lt;<span class="name">$&#123;typeParameter.name&#125;</span>&gt;</span> the type parameter\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.parameterList.parameters</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.parameterList.parameters</span> <span class="attr">as</span> <span class="attr">parameter</span>&gt;</span></div><div class="line">         * @param $&#123;parameter.name&#125; the $&#123;paramNames[parameter.name]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">isNotVoid</span>&gt;</span></div><div class="line">         *\n</div><div class="line">         * @return the $&#123;return&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.throwsList.referenceElements</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.throwsList.referenceElements</span> <span class="attr">as</span> <span class="attr">exception</span>&gt;</span></div><div class="line">         * @throws $&#123;exception.referenceName&#125; the $&#123;exceptionNames[exception.referenceName]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line">         </div><div class="line">	\n * @author qiu\n</div><div class="line">\n *  博客：www.qiuchengjia.cn   时间：$&#123;.now?string["yyyy-MM-dd"]&#125;\n</div><div class="line">    </div><div class="line"> */</div></pre></td></tr></table></figure>
<h4 id="构造函数配置"><a href="#构造函数配置" class="headerlink" title="构造函数配置"></a>构造函数配置</h4><ul>
<li>原始配置</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**\n</div><div class="line"> * Instantiates a new $&#123;name&#125;.\n</div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.parameterList.parameters</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.parameterList.parameters</span> <span class="attr">as</span> <span class="attr">parameter</span>&gt;</span></div><div class="line">         * @param $&#123;parameter.name&#125; the $&#123;paramNames[parameter.name]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.throwsList.referenceElements</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.throwsList.referenceElements</span> <span class="attr">as</span> <span class="attr">exception</span>&gt;</span></div><div class="line">         * @throws $&#123;exception.referenceName&#125; the $&#123;exceptionNames[exception.referenceName]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"> */</div></pre></td></tr></table></figure>
<ul>
<li>修改后的配置</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**\n</div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.parameterList.parameters</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.parameterList.parameters</span> <span class="attr">as</span> <span class="attr">parameter</span>&gt;</span></div><div class="line">         * @param $&#123;parameter.name&#125; the $&#123;paramNames[parameter.name]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.throwsList.referenceElements</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.throwsList.referenceElements</span> <span class="attr">as</span> <span class="attr">exception</span>&gt;</span></div><div class="line">         * @throws $&#123;exception.referenceName&#125; the $&#123;exceptionNames[exception.referenceName]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line">\n * @author qiu\n</div><div class="line">\n *  博客：www.qiuchengjia.cn   时间：$&#123;.now?string["yyyy-MM-dd"]&#125;\n</div><div class="line"> */</div></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul>
<li><p>把鼠标移动到方法中，然后shift + alt + G</p>
</li>
<li><p>如果是对这个类所有的方法都进行注释，就是shift + ctrl + alt + G</p>
</li>
<li><p>也可以通过alt+insert来进行选择</p>
</li>
<li><p>shift + alt + Z是撤销当前/选择</p>
</li>
<li><p>shift + ctrl + alt + Z是撤销所有注释</p>
</li>
</ul>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ul>
<li><p>如果你对JavaDoc生成的模板如果还不满意，你还可以修改JavaDoc的模板，具体修改位置是 设置–&gt;other—&gt;javadoc<br>里面有对应的模板，模板语言使用的是一种 freemarker的标记语言，如果有感兴趣的同学可自己开发扩展；</p>
</li>
<li><p><a href="https://github.com/setial/intellij-javadocs/wiki" target="_blank" rel="external">javadoc网址</a></p>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://blog.csdn.net/dreamlivemeng/article/details/51499675" target="_blank" rel="external"> Android studio JavaDoc的使用</a></p>
</li>
<li><p><a href="http://www.codingnote.net/2016/05/12/Android-Studio-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A-%E5%BF%AB%E9%80%9F%E8%BE%93%E5%85%A5%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/" target="_blank" rel="external">(原创) Android Studio 自定义注释&amp;快速输入代码片段</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设置类创建时自动生成头部注释&quot;&gt;&lt;a href=&quot;#设置类创建时自动生成头部注释&quot; class=&quot;headerlink&quot; title=&quot;设置类创建时自动生成头部注释&quot;&gt;&lt;/a&gt;设置类创建时自动生成头部注释&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;比如每次创建一个类自动在头部生成一个这样的头部,作为一个类的说明信息&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A1.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;设置方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击设置—&amp;gt;Editor–&amp;gt;File and code Templates –&amp;gt;Includes—&amp;gt;File Header&lt;br&gt;代码：其中时间是自动获取的&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Description: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Data：$&amp;#123;DATE&amp;#125;-$&amp;#123;TIME&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Blog：www.qiuchengjia.cn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Author: qiu&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;效果和步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A3.gif&quot; alt=&quot;&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="AndroidStudio" scheme="http://www.qiuchengjia.cn/categories/AndroidStudio/"/>
    
    
      <category term="AndroidStudio" scheme="http://www.qiuchengjia.cn/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title>密码</title>
    <link href="http://www.qiuchengjia.cn/2016/08/22/%E9%80%9A%E7%94%A8/%E5%AF%86%E7%A0%81/"/>
    <id>http://www.qiuchengjia.cn/2016/08/22/通用/密码/</id>
    <published>2016-08-21T20:22:26.000Z</published>
    <updated>2016-09-26T11:54:28.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="合购VIP论坛"><a href="#合购VIP论坛" class="headerlink" title="合购VIP论坛"></a>合购VIP论坛</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">默认的密码是：www.hegouvip.com</div><div class="line"></div><div class="line">第一期解压密码 ：【http:<span class="comment">//www.hegouvip.com12yuemima】</span></div><div class="line">第二期解压密码 ：【hegouvipmima12yue】</div><div class="line">第三期解压密码 ：【<span class="number">52</span>hegouvipmima】</div><div class="line">第四期解压密码 ：【<span class="number">54</span>hegouvipdisiqimima】</div><div class="line">第五期解压密码 ：【http:<span class="comment">//www.hegouvip.comwoshidiwuqimima】</span></div><div class="line">第六期解压密码 ：【上合购VIP资源论坛下载就可以观看了】</div><div class="line">第七期解压密码 ：【http:<span class="comment">//www.hegouvip.com2014mashangchenggong】</span></div><div class="line">第八期解压密码 ：【<span class="number">2014</span>hegouvipdibaqijieyamima】</div><div class="line">第九期解压密码 ：【hegouvip2014dijiuqijieyamima】</div><div class="line">第十期解压密码 ：【dishiqimimahegouvip】</div><div class="line">第十一期解压密码：【dishiyiqihegoumima】</div></pre></td></tr></table></figure>
<h2 id="HK共享吧"><a href="#HK共享吧" class="headerlink" title="HK共享吧"></a>HK共享吧</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">默认的密码是：www.mfhk8.com</div><div class="line"></div><div class="line">编号一的解压密码：kIioOK9*</div><div class="line">编号二的解压密码：www.mfhk8.com_!h0jn3G+t@</div><div class="line">编号三的解压密码：www.mfhk8.com_rz~NWjU)cZ</div><div class="line">编号四的解压密码：www.mfhk8.com_$dCb11$d2t</div><div class="line">编号五的解压密码：www.mfhk8.com_$dF71@$d4rd2t</div><div class="line">编号六的解压密码：www.mfhk8.com_HdFD1@$^&amp;4dd1t</div><div class="line">编号七的解压密码：www.mfhk8.com_DF32D~@$^&amp;3Qd1*</div><div class="line">编号八的解压密码：www.mfhk8.com_SF5*^2K~@$^f3e1##</div><div class="line">编号九的解压密码：www.mfhk8.com_S123aaaA*^jgjkf2f@!!~~</div><div class="line">编号十的解压密码：www.mfhk8.com_S123f3*#(fA*^fgj32f@!!~~!hfu@**!!h847</div><div class="line">编号十一的解压密码：www.mfhk8.com_8#!k53[]]r[E$DS</div></pre></td></tr></table></figure>
<h2 id="龙天论坛"><a href="#龙天论坛" class="headerlink" title="龙天论坛"></a>龙天论坛</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">默认的密码是：www.lthack.com</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.mianfeib.com/three-resource-bbs-password.html" target="_blank" rel="external">三个VIP资源论坛解压密码汇总</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;合购VIP论坛&quot;&gt;&lt;a href=&quot;#合购VIP论坛&quot; class=&quot;headerlink&quot; title=&quot;合购VIP论坛&quot;&gt;&lt;/a&gt;合购VIP论坛&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;默认的密码是：www.hegouvip.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第一期解压密码 ：【http:&lt;span class=&quot;comment&quot;&gt;//www.hegouvip.com12yuemima】&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第二期解压密码 ：【hegouvipmima12yue】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第三期解压密码 ：【&lt;span class=&quot;number&quot;&gt;52&lt;/span&gt;hegouvipmima】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第四期解压密码 ：【&lt;span class=&quot;number&quot;&gt;54&lt;/span&gt;hegouvipdisiqimima】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第五期解压密码 ：【http:&lt;span class=&quot;comment&quot;&gt;//www.hegouvip.comwoshidiwuqimima】&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第六期解压密码 ：【上合购VIP资源论坛下载就可以观看了】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第七期解压密码 ：【http:&lt;span class=&quot;comment&quot;&gt;//www.hegouvip.com2014mashangchenggong】&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第八期解压密码 ：【&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;hegouvipdibaqijieyamima】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第九期解压密码 ：【hegouvip2014dijiuqijieyamima】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第十期解压密码 ：【dishiqimimahegouvip】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第十一期解压密码：【dishiyiqihegoumima】&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;HK共享吧&quot;&gt;&lt;a href=&quot;#HK共享吧&quot; class=&quot;headerlink&quot; title=&quot;HK共享吧&quot;&gt;&lt;/a&gt;HK共享吧&lt;/h2&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;默认的密码是：www.mfhk8.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号一的解压密码：kIioOK9*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号二的解压密码：www.mfhk8.com_!h0jn3G+t@&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号三的解压密码：www.mfhk8.com_rz~NWjU)cZ&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号四的解压密码：www.mfhk8.com_$dCb11$d2t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号五的解压密码：www.mfhk8.com_$dF71@$d4rd2t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号六的解压密码：www.mfhk8.com_HdFD1@$^&amp;amp;4dd1t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号七的解压密码：www.mfhk8.com_DF32D~@$^&amp;amp;3Qd1*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号八的解压密码：www.mfhk8.com_SF5*^2K~@$^f3e1##&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号九的解压密码：www.mfhk8.com_S123aaaA*^jgjkf2f@!!~~&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号十的解压密码：www.mfhk8.com_S123f3*#(fA*^fgj32f@!!~~!hfu@**!!h847&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号十一的解压密码：www.mfhk8.com_8#!k53[]]r[E$DS&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;龙天论坛&quot;&gt;&lt;a href=&quot;#龙天论坛&quot; class=&quot;headerlink&quot; title=&quot;龙天论坛&quot;&gt;&lt;/a&gt;龙天论坛&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;默认的密码是：www.lthack.com&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="通用" scheme="http://www.qiuchengjia.cn/categories/%E9%80%9A%E7%94%A8/"/>
    
    
      <category term="通用" scheme="http://www.qiuchengjia.cn/tags/%E9%80%9A%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>K歌之王</title>
    <link href="http://www.qiuchengjia.cn/2016/08/21/%E9%80%9A%E7%94%A8/K%E6%AD%8C%E4%B9%8B%E7%8E%8B/"/>
    <id>http://www.qiuchengjia.cn/2016/08/21/通用/K歌之王/</id>
    <published>2016-08-21T15:16:18.000Z</published>
    <updated>2016-09-26T11:54:28.057Z</updated>
    
    <content type="html"><![CDATA[<center><img src="http://o99dg8ap9.bkt.clouddn.com/K%E6%AD%8C%E4%B9%8B%E7%8E%8B.jpg" alt=""></center>

<h2 id="陈奕迅"><a href="#陈奕迅" class="headerlink" title="陈奕迅"></a>陈奕迅</h2><ul>
<li><p>《遥远的她》</p>
</li>
<li><p>《一生中最爱》</p>
</li>
<li><p>《明年今日》</p>
</li>
<li><p>《爱情转移》</p>
</li>
<li><p>《富士山下》</p>
</li>
<li><p>《葡萄成熟时》</p>
</li>
<li><p>《苦瓜》</p>
</li>
<li><p>《今天只做一件事》</p>
</li>
<li><p>《与我常在》</p>
</li>
<li><p>《单车》</p>
</li>
<li><p>《好歌献给你》</p>
</li>
<li><p>《阴天快乐》</p>
</li>
<li><p>《今天只做一件事》</p>
</li>
<li><p>《最后今晚》</p>
</li>
<li><p>《可以了》</p>
</li>
<li><p>《喜帖街》</p>
</li>
<li><p>《我什么都没有》</p>
</li>
<li><p>《时光倒流二十年》</p>
</li>
<li><p>《痛爱》</p>
</li>
<li><p>《歌颂》</p>
</li>
<li><p>《最佳损友》</p>
</li>
<li><p>《信心花舍》</p>
</li>
<li><p>《与我常在》</p>
</li>
<li><p>《阿牛》</p>
</li>
<li><p>《沙龙》</p>
</li>
<li><p>《圣诞节》</p>
</li>
<li><p>《兄妹》</p>
</li>
<li><p>《岁月如歌》</p>
</li>
</ul>
<h2 id="张国荣"><a href="#张国荣" class="headerlink" title="张国荣"></a>张国荣</h2><ul>
<li><p>《风继续吹》</p>
</li>
<li><p>《怪你过分美丽》</p>
</li>
<li><p>《有谁共鸣》</p>
</li>
<li><p>《当年情》</p>
</li>
<li><p>《为你钟情》 </p>
</li>
<li><p>《我》</p>
</li>
<li><p>《Monica》</p>
</li>
<li><p>《倩女幽魂》</p>
</li>
<li><p>《明星》</p>
</li>
<li><p>《共同渡过》</p>
</li>
<li><p>《春夏秋冬》</p>
</li>
<li><p>《风再起时》</p>
</li>
<li><p>《玻璃之情》</p>
</li>
<li><p>《左右手》</p>
</li>
<li><p>《追》</p>
</li>
<li><p>《寂寞夜晚》</p>
</li>
</ul>
<a id="more"></a>
<h2 id="谭咏麟"><a href="#谭咏麟" class="headerlink" title="谭咏麟"></a>谭咏麟</h2><ul>
<li><p>《朋友》</p>
</li>
<li><p>《讲不出再见》</p>
</li>
<li><p>《爱多一次痛多一次》</p>
</li>
<li><p>《无言感激》</p>
</li>
</ul>
<h2 id="刘德华"><a href="#刘德华" class="headerlink" title="刘德华"></a>刘德华</h2><ul>
<li><p>《暗里着迷》</p>
</li>
<li><p>《情感的禁区》</p>
</li>
<li><p>《今天》</p>
</li>
<li><p>《世界第一等》</p>
</li>
<li><p>《一起走过的日子》</p>
</li>
<li><p>《17岁》</p>
</li>
</ul>
<h2 id="张学友"><a href="#张学友" class="headerlink" title="张学友"></a>张学友</h2><ul>
<li><p>《祝福》</p>
</li>
<li><p>《眼泪》</p>
</li>
<li><p>《等》</p>
</li>
<li><p>《爱很简单》</p>
</li>
</ul>
<h2 id="李宗盛"><a href="#李宗盛" class="headerlink" title="李宗盛"></a>李宗盛</h2><ul>
<li><p>《爱的代价》</p>
</li>
<li><p>《山丘》</p>
</li>
<li><p>《明明白白我的心》</p>
</li>
<li><p>《阴天》</p>
</li>
<li><p>《我终于失去了你》</p>
</li>
</ul>
<h2 id="周杰伦"><a href="#周杰伦" class="headerlink" title="周杰伦"></a>周杰伦</h2><ul>
<li><p>《告白气球》</p>
</li>
<li><p>《稻香》</p>
</li>
<li><p>《开不了口》</p>
</li>
<li><p>《龙卷风》</p>
</li>
<li><p>《阳光宅男》</p>
</li>
<li><p>《晴天》</p>
</li>
<li><p>《七里香》</p>
</li>
<li><p>《彩虹》</p>
</li>
<li><p>《安静》</p>
</li>
<li><p>《简单爱》</p>
</li>
<li><p>《轨迹》</p>
</li>
<li><p>《回到过去》</p>
</li>
<li><p>《乌克丽丽》</p>
</li>
<li><p>《退后》</p>
</li>
<li><p>《蜗牛》</p>
</li>
<li><p>《暗号》</p>
</li>
</ul>
<h2 id="粤语"><a href="#粤语" class="headerlink" title="粤语"></a>粤语</h2><ul>
<li><p>《偏偏喜欢你》-陈百强</p>
</li>
<li><p>《我不是伟人》</p>
</li>
<li><p>《友情岁月》</p>
</li>
<li><p>《献世》</p>
</li>
<li><p>《眼睛不能没眼泪》</p>
</li>
</ul>
<h2 id="国语"><a href="#国语" class="headerlink" title="国语"></a>国语</h2><ul>
<li><p>《小手拉大手》</p>
</li>
<li><p>《会呼吸的痛》</p>
</li>
<li><p>《夜空中最亮的星》</p>
</li>
<li><p>《越长大越孤单》</p>
</li>
<li><p>《明天，你好》</p>
</li>
<li><p>《小幸运》</p>
</li>
<li><p>《忘了时间的钟》</p>
</li>
<li><p>《拥抱》</p>
</li>
<li><p>《好想你》</p>
</li>
<li><p>《他不爱我》</p>
</li>
<li><p>《绅士》</p>
</li>
<li><p>《丑八怪》</p>
</li>
<li><p>《认真的雪》</p>
</li>
<li><p>《演员》</p>
</li>
<li><p>《当你》</p>
</li>
<li><p>《她说》</p>
</li>
<li><p>《我很想爱他》</p>
</li>
<li><p>《其实都没有》</p>
</li>
<li><p>《原来你什么都不想要》</p>
</li>
<li><p>《hey Jude》</p>
</li>
<li><p>《我也很想他》</p>
</li>
<li><p>《天黑黑》</p>
</li>
<li><p>《我怀恋的》</p>
</li>
<li><p>《开始懂了》</p>
</li>
<li><p>《遇见》</p>
</li>
<li><p>《董小姐》</p>
</li>
<li><p>《斑马，斑马》</p>
</li>
<li><p>《野子》</p>
</li>
<li><p>《神啊，救救我》</p>
</li>
<li><p>《离不开你》</p>
</li>
<li><p>《独家记忆》</p>
</li>
<li><p>《把悲伤留给自己》</p>
</li>
<li><p>《会痛的石头》</p>
</li>
<li><p>《好想好想》</p>
</li>
<li><p>《断点》</p>
</li>
</ul>
<h2 id="民谣"><a href="#民谣" class="headerlink" title="民谣"></a>民谣</h2><ul>
<li><p>《米店》</p>
</li>
<li><p>《南山南》</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/K%E6%AD%8C%E4%B9%8B%E7%8E%8B.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;陈奕迅&quot;&gt;&lt;a href=&quot;#陈奕迅&quot; class=&quot;headerlink&quot; title=&quot;陈奕迅&quot;&gt;&lt;/a&gt;陈奕迅&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《遥远的她》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《一生中最爱》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《明年今日》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《爱情转移》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《富士山下》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《葡萄成熟时》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《苦瓜》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《今天只做一件事》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《与我常在》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《单车》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《好歌献给你》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《阴天快乐》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《今天只做一件事》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《最后今晚》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《可以了》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《喜帖街》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《我什么都没有》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《时光倒流二十年》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《痛爱》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《歌颂》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《最佳损友》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《信心花舍》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《与我常在》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《阿牛》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《沙龙》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《圣诞节》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《兄妹》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《岁月如歌》&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;张国荣&quot;&gt;&lt;a href=&quot;#张国荣&quot; class=&quot;headerlink&quot; title=&quot;张国荣&quot;&gt;&lt;/a&gt;张国荣&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《风继续吹》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《怪你过分美丽》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《有谁共鸣》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《当年情》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《为你钟情》 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《我》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《Monica》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《倩女幽魂》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《明星》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《共同渡过》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《春夏秋冬》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《风再起时》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《玻璃之情》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《左右手》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《追》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《寂寞夜晚》&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java Import</title>
    <link href="http://www.qiuchengjia.cn/2016/08/21/JAVA/Java-Import/"/>
    <id>http://www.qiuchengjia.cn/2016/08/21/JAVA/Java-Import/</id>
    <published>2016-08-21T14:16:38.000Z</published>
    <updated>2016-09-26T11:54:28.077Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>在 Java 中使用import关键字来导入任意类型到同一个编译单元中</p>
</li>
<li><p>在代码中，导入代码应放在包声明代码之后，类型声明代码之前</p>
</li>
</ul>
<p>Java 中有两种类型的导入声明：</p>
<ol>
<li><p>单类型导入（Single-type import declaration）</p>
</li>
<li><p>按需类型导入（Import-on-demand declaration）</p>
</li>
</ol>
<h2 id="单类型导入"><a href="#单类型导入" class="headerlink" title="单类型导入"></a>单类型导入</h2><ul>
<li>单类型导入用于导入指定包中的一个单独的类型（例如一个类）。语法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &lt;fully qualified name of a type&gt;;</div></pre></td></tr></table></figure>
<ul>
<li>下面的代码演示了如何从 org.aptusource 包中导入 Dog 类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aptusource.Dog;</div></pre></td></tr></table></figure>
<ul>
<li><p>单类型导入只能导入一个类型，如果要导入多个类型，那么可以使用多个单独的单类型导入语句</p>
</li>
<li><p>下面的代码导入了 pkg1 包中的 ClassOne，pkg2 包中的 ClassTwo 和 ClassThree，pkg3 包中的 ClassFour：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pkg1.ClassOne; </div><div class="line"><span class="keyword">import</span> pkg2.ClassTwo; </div><div class="line"><span class="keyword">import</span> pkg2.ClassThree; </div><div class="line"><span class="keyword">import</span> pkg3.ClassFour;</div></pre></td></tr></table></figure>
<ul>
<li>下面的代码使用了 Dog 类的全名称</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Main</span></span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[]  args)</span>  </span>&#123;</div><div class="line">      org.aptusource.Dog jack;  <span class="comment">// Uses  full qualified name for the   Dog  class</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>下面的代码演示了如何使用单类型导入，我们将导入 org.aptusource.Dog 类，这样就可以使用简单名称来引用 Dog 类</li>
</ul>
<a id="more"></a>
<p>更改后的 Main类如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aptusource.Dog; <span class="comment">// 导入 Dog 类</span></div><div class="line"></div><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Main</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[]  args)</span>  </span>&#123;</div><div class="line">      Dog  jack; <span class="comment">// 使用 Dog 类的简单名称</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>当编译器遇到简单名称 Dog 所在的代码段时，比如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Dog  jack;</div></pre></td></tr></table></figure>
<ul>
<li><p>编译器将会查找所有的导入声明来将简单名称转换为全名称</p>
</li>
<li><p>像上面的例子中，编译器会将代码段替换为：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.aptusource.Dog  jack;</div></pre></td></tr></table></figure>
<ul>
<li>导入声明可以让你在代码中使用简单名称，增加了代码的可读性</li>
</ul>
<h2 id="按需导入"><a href="#按需导入" class="headerlink" title="按需导入"></a>按需导入</h2><ul>
<li><p>按需导入可以使用一行导入代码来导入多个类型</p>
</li>
<li><p>按需导入的语法如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &lt;<span class="keyword">package</span> name&gt;.*;</div></pre></td></tr></table></figure>
<ul>
<li><p>上面的语句可以看到，包名后直接跟了一个点号和一个星号（*）</p>
</li>
<li><p>例如，下面的代码导入了 org.aptusource 包中的所有类型：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aptusource.*;</div></pre></td></tr></table></figure>
<p>上面的 Main 类可以使用按需导入来重写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aptusource.*;</div><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[]  args)</span>  </span>&#123;</div><div class="line">        Dog  jack; <span class="comment">// 使用 Dog 类的简单名称</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h2><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ul>
<li><p>静态导入是JDK5.0引入的新特性</p>
</li>
<li><p>要使用静态成员（方法和变量）我们必须给出提供这个静态成员的类,使用静态导入可以使被导入类的静态变量和静态方法在当前类直接可见，使用这些静态成员无需再给出他们的类名</p>
</li>
</ul>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><ul>
<li>比如先在一个包中定义一个这样的类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.learnjava;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Common</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AGE = <span class="number">10</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"Hello World!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用一般导入"><a href="#使用一般导入" class="headerlink" title="使用一般导入"></a><strong>使用一般导入</strong></h4><ul>
<li>在另一个包中使用时，如果不用静态导入，是这样用的：<br>前面加入了导入语句，将Common类导入，使用其中的静态成员变量和静态方法时需要加上类名</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.learnjava2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.learnjava.Common;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticImportTest</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> a = Common.AGE;</div><div class="line">        System.out.println(a);</div><div class="line"></div><div class="line">        Common.output();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用静态导入"><a href="#使用静态导入" class="headerlink" title="使用静态导入"></a><strong>使用静态导入</strong></h4><p>静态导入的语法是： </p>
<ul>
<li>import static 包名.类名.静态成员变量; </li>
<li>import static 包名.类名.静态成员函数; </li>
</ul>
<blockquote>
<p><strong>注意导入的是成员变量和方法名</strong></p>
</blockquote>
<ul>
<li>如前面的程序使用静态导入后：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.learnjava2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.learnjava.Common.AGE;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.learnjava.Common.output;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticImportTest</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> a = AGE;</div><div class="line">        System.out.println(a);</div><div class="line"></div><div class="line">        output();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li><p>减少字符输入量，提高代码的可阅读性，以便更好地理解程序</p>
</li>
<li><p>举一个例子来说：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathUtils</span></span>&#123;</div><div class="line">    <span class="comment">// 计算圆面积</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calCircleArea</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> PI * r * r;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 计算球面积</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calBallArea</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">4</span> * PI * r * r;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>滥用静态导入会使程序更难阅读，更难维护。静态导入后，代码中就不用再写类名了，但是我们知道类是“一类事物的描述”，缺少了类名的修饰，静态属性和静态方法的表象意义可以被无限放大，这会让阅读者很难弄清楚其属性或方法代表何意，甚至是哪一个类的属性（方法）都要思考一番，特别是在一个类中有多个静态导入语句时，若还使用了*通配符，把一个类的所有静态元素都导入进来了，那简直就是恶梦</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://blog.csdn.net/houhow/article/details/51567471" target="_blank" rel="external">Java静态导入</a></p>
</li>
<li><p><a href="http://codecloud.net/7299.html" target="_blank" rel="external">Java import</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 Java 中使用import关键字来导入任意类型到同一个编译单元中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在代码中，导入代码应放在包声明代码之后，类型声明代码之前&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java 中有两种类型的导入声明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;单类型导入（Single-type import declaration）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按需类型导入（Import-on-demand declaration）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;单类型导入&quot;&gt;&lt;a href=&quot;#单类型导入&quot; class=&quot;headerlink&quot; title=&quot;单类型导入&quot;&gt;&lt;/a&gt;单类型导入&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单类型导入用于导入指定包中的一个单独的类型（例如一个类）。语法如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;lt;fully qualified name of a type&amp;gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;下面的代码演示了如何从 org.aptusource 包中导入 Dog 类：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.aptusource.Dog;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单类型导入只能导入一个类型，如果要导入多个类型，那么可以使用多个单独的单类型导入语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下面的代码导入了 pkg1 包中的 ClassOne，pkg2 包中的 ClassTwo 和 ClassThree，pkg3 包中的 ClassFour：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pkg1.ClassOne; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pkg2.ClassTwo; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pkg2.ClassThree; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pkg3.ClassFour;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;下面的代码使用了 Dog 类的全名称&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;  &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[]  args)&lt;/span&gt;  &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      org.aptusource.Dog jack;  &lt;span class=&quot;comment&quot;&gt;// Uses  full qualified name for the   Dog  class&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;下面的代码演示了如何使用单类型导入，我们将导入 org.aptusource.Dog 类，这样就可以使用简单名称来引用 Dog 类&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java协变和逆变</title>
    <link href="http://www.qiuchengjia.cn/2016/08/17/JAVA/Java%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/"/>
    <id>http://www.qiuchengjia.cn/2016/08/17/JAVA/Java协变和逆变/</id>
    <published>2016-08-16T20:49:41.000Z</published>
    <updated>2016-09-26T11:54:28.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是协变和逆变"><a href="#什么是协变和逆变" class="headerlink" title="什么是协变和逆变"></a>什么是协变和逆变</h2><ul>
<li><p>我们将围绕如下三个核心名词：协变性（covariance）、逆变性(contravariance)和无关性（invariant）。他们都是用来描述类型转换的性质的术语</p>
</li>
<li><p>到底什么是协变和逆变？先看例子：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Java</span></div><div class="line">Object[] objects = <span class="keyword">new</span> String[<span class="number">2</span>];</div><div class="line"><span class="comment">//C# </span></div><div class="line">object[] objects = <span class="keyword">new</span> string[<span class="number">2</span>];</div></pre></td></tr></table></figure>
<ul>
<li>这就是协变，C#和Java都是支持数组协变的语言，好像说了等于没说，别急，慢慢来</li>
</ul>
<p>我们都知道C#和Java中String类型都是继承自Object的，姑且记做<strong>String ≦ Object</strong>，表示String是Object的子类型，String的对象可以赋给Object的对象</p>
<p>而Object的数组类型Object[]，我们可以理解成是由Object构造出来的一种新的类型,可以认为是一种<strong>构造类型</strong>，记f(Object)（可以类比下初中数学中函数的定义），那么我们可以这么来描述协变和逆变：</p>
<ul>
<li><p>当A ≦ B时,如果有f(A) ≦ f(B),那么f叫做协变(covariance)；</p>
</li>
<li><p>当A ≦ B时,如果有f(B) ≦ f(A),那么f叫做逆变(contravariance)；</p>
</li>
<li><p>如果上面两种关系都不成立则叫做不可变(invariant)</p>
</li>
</ul>
<h3 id="协变"><a href="#协变" class="headerlink" title="协变"></a><strong>协变</strong></h3><p>其实顾名思义，协变和逆变表示的一种类型转变的关系：“构造类型”之间相对“子类型”之间的一种关系。只不过平时我（可能也包括大家）被网上的一些文章搞糊涂了。“协”表示一种自然而然的转换关系，比如上面的String[] ≦ Object[]，这就是大家学习面向对象编程语言中经常说的：</p>
<blockquote>
<p>子类变量能赋给父类变量，父类变量不能赋值给子类变量</p>
</blockquote>
<h3 id="逆变"><a href="#逆变" class="headerlink" title="逆变"></a><strong>逆变</strong></h3><ul>
<li>而“逆”则不那么直观，平时用的也很少，后面讲<strong>Java泛型中的协变和逆变</strong>会看到例子</li>
</ul>
<a id="more"></a>
<h3 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a><strong>不可变</strong></h3><ul>
<li>不可变的例子就很多了，比如Java中List&lt; Object &gt;和List&lt; String &gt;之间就是不可变的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">List&lt;Object&gt; list2 = list1;</div></pre></td></tr></table></figure>
<ul>
<li>这两行代码在Java中肯定是编译不过的，反过来更不可能，C#中也是一样</li>
</ul>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>那么<strong>协变</strong>和<strong>逆变</strong>作用：主要是语言设计的一种考量，目的是为了增加语言的灵活性和能力</li>
</ul>
<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><ul>
<li>再说下面内容之前，提下这个大家都知道的原则：</li>
</ul>
<blockquote>
<p>有使用父类型对象的地方都可以换成子类型对象</p>
</blockquote>
<ul>
<li>假设有类Fruit和Apple,Apple ≦ Fruit，Fruit类有一个方法fun1，返回一个Object对象:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">fun1</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line">Fruit f = <span class="keyword">new</span> Fruit();</div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="comment">//某地方用到了f对象</span></div><div class="line">Object obj = f.fun1();</div></pre></td></tr></table></figure>
<ul>
<li>那么现在Aplle对象覆盖fun1，假设可以返回一个String对象：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fun1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">&#125;</div><div class="line">Fruit f = <span class="keyword">new</span> Apple();</div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="comment">//某地方用到了f对象</span></div><div class="line">Object obj = f.fun1();</div></pre></td></tr></table></figure>
<ul>
<li><p>那么任何使用Fruit对象的地方都能替换成Apple对象吗？显然是可以的</p>
</li>
<li><p>举得例子是返回值，如果是方法参数呢？调用父类方法fun2(String)的地方肯定可以被一个能够接受更宽类型的方法替代：fun2(Object)……</p>
</li>
</ul>
<h2 id="协变返回值"><a href="#协变返回值" class="headerlink" title="协变返回值"></a>协变返回值</h2><ul>
<li>在面向对象语言中，一个协变返回值方法是一个在子类覆盖该方法的时候，方法的返回值可以被一个“更窄”的类型所替代（C#并不支持这个技术，C++和Java JDK5.0后开始支持）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123; </div><div class="line">      <span class="function">Object <span class="title">getSomething</span><span class="params">()</span> </span>&#123; </div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>; </div><div class="line">   &#125; </div><div class="line">&#125; </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line">     <span class="function">String <span class="title">getSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>虽然Java是面向对象的语言，但某种程度上支持<strong>返回值协变</strong>，Java子类覆盖父类方法的时候能够返回一个“更窄”的子类型，所以说Java是一门可以支持<strong>返回值协变</strong>的语言</li>
</ul>
<h2 id="参数逆变"><a href="#参数逆变" class="headerlink" title="参数逆变"></a>参数逆变</h2><ul>
<li>类似<strong>参数逆变</strong>是指子类覆盖父类方法时接受一个“更宽”的父类型。在Java和C#中这都被当作了<strong>方法重载</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123; </div><div class="line">          <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String parameter)</span> </span>&#123; </div><div class="line">          &#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123; </div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Object parameter)</span> </span>&#123; </div><div class="line">         &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Java泛型中的协变和逆变"><a href="#Java泛型中的协变和逆变" class="headerlink" title="Java泛型中的协变和逆变"></a>Java泛型中的协变和逆变</h2><ul>
<li>一般我们看Java泛型好像是不支持协变或逆变的，<strong>List&lt; Object&gt;</strong>和<strong>List&lt; String&gt;</strong>之间是不可变的。但当我们在Java泛型中引入通配符这个概念的时候，Java 其实是支持协变和逆变的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不可变</span></div><div class="line">List&lt;Fruit&gt; fruits = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();<span class="comment">// 编译不通过</span></div><div class="line"><span class="comment">// 协变</span></div><div class="line">List&lt;? extends Fruit&gt; wildcardFruits = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();</div><div class="line"><span class="comment">// 协变-&gt;方法的返回值，对返回类型是协变的:Fruit-&gt;Apple</span></div><div class="line">Fruit fruit = wildcardFruits.get(<span class="number">0</span>);</div><div class="line"><span class="comment">// 不可变</span></div><div class="line">List&lt;Apple&gt; apples = <span class="keyword">new</span> ArrayList&lt;Fruit&gt;();<span class="comment">// 编译不通过</span></div><div class="line"><span class="comment">// 逆变</span></div><div class="line">List&lt;? <span class="keyword">super</span> Apple&gt; wildcardApples = <span class="keyword">new</span> ArrayList&lt;Fruit&gt;();</div><div class="line"><span class="comment">// 逆变-&gt;方法的参数，对输入类型是逆变的:Apple-&gt;Fruit</span></div><div class="line">wildcardApples.add(<span class="keyword">new</span> Apple());</div></pre></td></tr></table></figure>
<ul>
<li><p>可见在Java泛型中通过<strong>extends</strong>关键字可以提供协变的泛型类型转换，通过<strong>supper</strong>可以提供逆变的泛型类型转换</p>
</li>
<li><p>关于Java泛型中<strong>supper</strong>和<strong>extends</strong>关键字的作用网上有很多文章，这里不再赘述。只举一个《Java Core》里面<strong>supper</strong>使用的例子：下面的代码能够对实现<strong>Comparable</strong>接口的对象数组求最小值</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function">T <span class="title">min</span><span class="params">(T[] a)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span> || a.length == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    T t = a[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (t.compareTo(a[i]) &gt; <span class="number">0</span>) &#123;</div><div class="line">            t = a[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这段代码对<strong>Calendar</strong>类是运行正常的，但对<strong>GregorianCalendar</strong>类则无法编译通过：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Calendar[] calendars = <span class="keyword">new</span> Calendar[<span class="number">2</span>];</div><div class="line">Calendar ret3 = CovariantAndContravariant.&lt;Calendar&gt; min(calendars);</div><div class="line">GregorianCalendar[] calendars2 = <span class="keyword">new</span> GregorianCalendar[<span class="number">2</span>];</div><div class="line">GregorianCalendar ret2 = CovariantAndContravariant.&lt;GregorianCalendar&gt; min(calendars2);<span class="comment">//编译不通过</span></div></pre></td></tr></table></figure>
<ul>
<li>如果想工作正常需要将方法签名修改为： </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function">T <span class="title">min</span><span class="params">(T[] a)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>至于原因，大家看下源码和网上大量关于supper的作用应该就明白了，我这里希望能够给看了上面内容的同学提供另外一个思路……</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://www.zybuluo.com/zhanjindong/note/34147" target="_blank" rel="external">再谈对协变和逆变的理解</a></p>
</li>
<li><p><a href="http://www.2cto.com/kf/201304/205042.html" target="_blank" rel="external">Java 协变性 逆变性 学习笔记</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是协变和逆变&quot;&gt;&lt;a href=&quot;#什么是协变和逆变&quot; class=&quot;headerlink&quot; title=&quot;什么是协变和逆变&quot;&gt;&lt;/a&gt;什么是协变和逆变&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们将围绕如下三个核心名词：协变性（covariance）、逆变性(contravariance)和无关性（invariant）。他们都是用来描述类型转换的性质的术语&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;到底什么是协变和逆变？先看例子：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Java&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Object[] objects = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//C# &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;object[] objects = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; string[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;这就是协变，C#和Java都是支持数组协变的语言，好像说了等于没说，别急，慢慢来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们都知道C#和Java中String类型都是继承自Object的，姑且记做&lt;strong&gt;String ≦ Object&lt;/strong&gt;，表示String是Object的子类型，String的对象可以赋给Object的对象&lt;/p&gt;
&lt;p&gt;而Object的数组类型Object[]，我们可以理解成是由Object构造出来的一种新的类型,可以认为是一种&lt;strong&gt;构造类型&lt;/strong&gt;，记f(Object)（可以类比下初中数学中函数的定义），那么我们可以这么来描述协变和逆变：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当A ≦ B时,如果有f(A) ≦ f(B),那么f叫做协变(covariance)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当A ≦ B时,如果有f(B) ≦ f(A),那么f叫做逆变(contravariance)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果上面两种关系都不成立则叫做不可变(invariant)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;协变&quot;&gt;&lt;a href=&quot;#协变&quot; class=&quot;headerlink&quot; title=&quot;协变&quot;&gt;&lt;/a&gt;&lt;strong&gt;协变&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;其实顾名思义，协变和逆变表示的一种类型转变的关系：“构造类型”之间相对“子类型”之间的一种关系。只不过平时我（可能也包括大家）被网上的一些文章搞糊涂了。“协”表示一种自然而然的转换关系，比如上面的String[] ≦ Object[]，这就是大家学习面向对象编程语言中经常说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;子类变量能赋给父类变量，父类变量不能赋值给子类变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;逆变&quot;&gt;&lt;a href=&quot;#逆变&quot; class=&quot;headerlink&quot; title=&quot;逆变&quot;&gt;&lt;/a&gt;&lt;strong&gt;逆变&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;而“逆”则不那么直观，平时用的也很少，后面讲&lt;strong&gt;Java泛型中的协变和逆变&lt;/strong&gt;会看到例子&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java方法签名</title>
    <link href="http://www.qiuchengjia.cn/2016/08/14/JAVA/Java%E6%96%B9%E6%B3%95%E7%AD%BE%E5%90%8D/"/>
    <id>http://www.qiuchengjia.cn/2016/08/14/JAVA/Java方法签名/</id>
    <published>2016-08-14T14:50:34.000Z</published>
    <updated>2016-09-26T11:54:28.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法签名的意义"><a href="#方法签名的意义" class="headerlink" title="方法签名的意义"></a>方法签名的意义</h2><ul>
<li>对于同名不同类、同类不同名的方法，方法签名的意义并不是很大，但是对于重载方法来说，方法签名的意义就十分巨大了。由于重载方法之间的方法名是相同的，那么我们势必要从构成方法的其他几个要素中找到另一个要素与方法名组成能够唯一标示方法的签名，方法体当然不予考虑。那么就是形参列表和返回值了，但是由于对于调用方法的人来说，方法的形参数据类型列表的重要程度要远远高于返回值，所以方法签名就由方法名+形参列表构成，也就是说，<strong>方法名和形参数据类型列表可以唯一的确定一个方法，与方法的返回值一点关系都没有，这是判断重载重要依据，所以，以下的代码是不允许的</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">aaaa</span><span class="params">()</span></span>&#123;  </div><div class="line">      </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">aaaa</span><span class="params">()</span></span>&#123;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法签名的格式"><a href="#方法签名的格式" class="headerlink" title="方法签名的格式"></a>方法签名的格式</h2><ul>
<li>首先我们先看几个方法以及他们的方法签名：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;&#125;                   test1()<span class="function">V</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(String str)</span>     <span class="title">test2</span><span class="params">(Ljava/lang/String;)</span>V</div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test3</span><span class="params">()</span>&#123;&#125;                      test3()I</div></pre></td></tr></table></figure>
<ul>
<li>从以上三个例子，我们就可以很简单的看出一些小小的规律：<br>JVM为我们提供的方法签名实际上是由方法名(上文的例子为了简单没有写出全类名)、形参列表、返回值三部分构成的，基本形式就是：<br><strong>全类名.方法名(形参数据类型列表)返回值数据类型</strong></li>
</ul>
<ul>
<li><strong>Java方法签名中特殊字符/字母含义</strong></li>
</ul>
<table>
<thead>
<tr>
<th>特殊字符</th>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">特殊说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>V</td>
<td style="text-align:left">void</td>
<td style="text-align:left">一般用于表示方法的返回值</td>
</tr>
<tr>
<td>Z</td>
<td style="text-align:left">boolean     </td>
</tr>
<tr>
<td>B</td>
<td style="text-align:left">byte     </td>
</tr>
<tr>
<td>C</td>
<td style="text-align:left">char     </td>
</tr>
<tr>
<td>S</td>
<td style="text-align:left">short     </td>
</tr>
<tr>
<td>I</td>
<td style="text-align:left">int     </td>
</tr>
<tr>
<td>J</td>
<td style="text-align:left">long     </td>
</tr>
<tr>
<td>F</td>
<td style="text-align:left">float     </td>
</tr>
<tr>
<td>D</td>
<td style="text-align:left">double     </td>
</tr>
<tr>
<td>[</td>
<td style="text-align:left">数组</td>
<td style="text-align:left">以[开头，配合其他的特殊字符，表示对应数据类型的数组，几个[表示几维数组</td>
</tr>
<tr>
<td>L</td>
<td style="text-align:left">全类名;</td>
<td style="text-align:left">引用类型    以 L 开头 ; 结尾，中间是引用类型的全类名</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<blockquote>
<p>一定要注意的是方法重载时，方法返回值没有什么意义，是由方法名和参数列表决定的</p>
</blockquote>
<h2 id="利用javap生成方法签名"><a href="#利用javap生成方法签名" class="headerlink" title="利用javap生成方法签名"></a>利用javap生成方法签名</h2><h3 id="类库类"><a href="#类库类" class="headerlink" title="类库类"></a>类库类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">$ javap -s java.lang.String  </div><div class="line">Compiled from <span class="string">"String.java"</span>  </div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>,<span class="title">java</span>.<span class="title">lang</span>.<span class="title">Comparable</span>,<span class="title">java</span>.<span class="title">lang</span>.<span class="title">CharSequence</span></span>&#123;  </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> java.util.Comparator CASE_INSENSITIVE_ORDER;  </div><div class="line">  Signature: Ljava/util/Comparator;  </div><div class="line"><span class="keyword">public</span> java.lang.String();  </div><div class="line">  Signature: ()V  </div><div class="line"><span class="keyword">public</span> java.lang.String(java.lang.String);  </div><div class="line">  Signature: (Ljava/lang/String;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">char</span>[]);  </div><div class="line">  Signature: ([C)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">char</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>);  </div><div class="line">  Signature: ([CII)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">int</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>);  </div><div class="line">  Signature: ([III)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>);  </div><div class="line">  Signature: ([BIII)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>);  </div><div class="line">  Signature: ([BI)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>, java.lang.String)   <span class="keyword">throws</span> java.io.UnsupportedEncodingException;  </div><div class="line">  Signature: ([BIILjava/lang/String;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>, java.nio.charset.Charset);  </div><div class="line">  Signature: ([BIILjava/nio/charset/Charset;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], java.lang.String)   <span class="keyword">throws</span> java.io.UnsupportedEncodingException;  </div><div class="line">  Signature: ([BLjava/lang/String;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], java.nio.charset.Charset);  </div><div class="line">  Signature: ([BLjava/nio/charset/Charset;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>);  </div><div class="line">  Signature: ([BII)V  </div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.demo;  </div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SigTest</span> </span>&#123;  </div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String name = <span class="keyword">null</span>;  </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getName</span><span class="params">(<span class="keyword">int</span>[] data,<span class="keyword">long</span> index)</span> </span>&#123;  </div><div class="line">         <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">     &#125;  </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>输出</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ javac SigTest.java </div><div class="line">$ javap -s -p com.demo.SigTest</div><div class="line">Compiled from <span class="string">"SigTest.java"</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">demo</span>.<span class="title">SigTest</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String name;</div><div class="line">  Signature: Ljava/lang/String;</div><div class="line"><span class="keyword">public</span> com.demo.SigTest();</div><div class="line">  Signature: ()<span class="function">V</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getName</span><span class="params">(<span class="keyword">int</span>[], <span class="keyword">long</span>)</span>;</div><div class="line">  Signature: ([IJ)I</div><div class="line"><span class="keyword">static</span> &#123;&#125;;</div><div class="line">  Signature: ()V</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>-s 表示打印签名信息</p>
</li>
<li><p>-p 表示打印所有函数和成员的签名信息，默认只打印public的签名信息</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;方法签名的意义&quot;&gt;&lt;a href=&quot;#方法签名的意义&quot; class=&quot;headerlink&quot; title=&quot;方法签名的意义&quot;&gt;&lt;/a&gt;方法签名的意义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对于同名不同类、同类不同名的方法，方法签名的意义并不是很大，但是对于重载方法来说，方法签名的意义就十分巨大了。由于重载方法之间的方法名是相同的，那么我们势必要从构成方法的其他几个要素中找到另一个要素与方法名组成能够唯一标示方法的签名，方法体当然不予考虑。那么就是形参列表和返回值了，但是由于对于调用方法的人来说，方法的形参数据类型列表的重要程度要远远高于返回值，所以方法签名就由方法名+形参列表构成，也就是说，&lt;strong&gt;方法名和形参数据类型列表可以唯一的确定一个方法，与方法的返回值一点关系都没有，这是判断重载重要依据，所以，以下的代码是不允许的&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;aaaa&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;aaaa&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;方法签名的格式&quot;&gt;&lt;a href=&quot;#方法签名的格式&quot; class=&quot;headerlink&quot; title=&quot;方法签名的格式&quot;&gt;&lt;/a&gt;方法签名的格式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先我们先看几个方法以及他们的方法签名：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;                   test1()&lt;span class=&quot;function&quot;&gt;V&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String str)&lt;/span&gt;     &lt;span class=&quot;title&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Ljava/lang/String;)&lt;/span&gt;V&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;                      test3()I&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;从以上三个例子，我们就可以很简单的看出一些小小的规律：&lt;br&gt;JVM为我们提供的方法签名实际上是由方法名(上文的例子为了简单没有写出全类名)、形参列表、返回值三部分构成的，基本形式就是：&lt;br&gt;&lt;strong&gt;全类名.方法名(形参数据类型列表)返回值数据类型&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Java方法签名中特殊字符/字母含义&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特殊字符&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;数据类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;特殊说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;void&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;一般用于表示方法的返回值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;boolean     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;byte     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;char     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;short     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;int     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;J&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;long     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;float     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;double     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;数组&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;以[开头，配合其他的特殊字符，表示对应数据类型的数组，几个[表示几维数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;全类名;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;引用类型    以 L 开头 ; 结尾，中间是引用类型的全类名&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java可变参数</title>
    <link href="http://www.qiuchengjia.cn/2016/08/14/JAVA/Java%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    <id>http://www.qiuchengjia.cn/2016/08/14/JAVA/Java可变参数/</id>
    <published>2016-08-13T21:55:32.000Z</published>
    <updated>2016-09-26T11:54:28.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是可变参数"><a href="#什么是可变参数" class="headerlink" title="什么是可变参数"></a>什么是可变参数</h2><ul>
<li>在 Java 5 中提供了变长参数，允许在调用方法时传入不定长度的参数。变长参数是Java的一个语法糖，本质上还是基于数组的实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(String... args)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(String[] args)</span></span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>//方法签名<br>([Ljava/lang/String;)V // public void foo(String[] args)</p>
</blockquote>
<h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><p>在定义方法时，在最后一个形参后加上三点“…“，就表示该形参可以接受多个参数值，多个参数值被当成数组传入。上述定义有几个要点需要注意：</p>
<ul>
<li><p>可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数</p>
</li>
<li><p>由于可变参数必须是最后一个参数，所以一个函数最多只能有一个可变参数</p>
</li>
<li><p>Java的可变参数，会被编译器转型为一个数组</p>
</li>
<li><p>变长参数在编译为字节码后，在方法签名中就是以数组形态出现的。这两个方法的签名是一致的，不能作为方法的重载。如果同时出现，是不能编译通过的。可变参数可以兼容数组，反之则不成立</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(String...varargs)</span></span>&#123;&#125;</div><div class="line"></div><div class="line">foo(<span class="string">"arg1"</span>, <span class="string">"arg2"</span>, <span class="string">"arg3"</span>);</div><div class="line"></div><div class="line"><span class="comment">//上述过程和下面的调用是等价的</span></div><div class="line">foo(<span class="keyword">new</span> String[]&#123;<span class="string">"arg1"</span>, <span class="string">"arg2"</span>, <span class="string">"arg3"</span>&#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>J2SE 1.5中新增了“泛型”的机制，可以在一定条件下把一个类型参数化。例如，可以在编写一个类的时候，把一个方法的形参的类型用一个标识符（如T）来代表， 至于这个标识符到底表示什么类型，则在生成这个类的实例的时候再行指定。这一机制可以用来提供更充分的代码重用和更严格的编译时类型检查。不过泛型机制却不能和个数可变的形参配合使用。如果把一个能和不确定个实参相匹配的形参的类型，用一个标识符来代表，那么编译器会给出一个“generic array creation”的错误</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Varargs</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(String arg : args) &#123;<span class="comment">//当作数组用foreach遍历</span></div><div class="line">            System.out.println(arg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//Compile error</span></div><div class="line">    <span class="comment">//The variable argument type Object of the method must be the last parameter</span></div><div class="line">    <span class="comment">//public void error1(String... args, Object o) &#123;&#125;</span></div><div class="line">    <span class="comment">//public void error2(String... args, Integer... i) &#123;&#125;</span></div><div class="line"></div><div class="line">        <span class="comment">//Compile error</span></div><div class="line">        <span class="comment">//Duplicate method test(String...) in type Varargs</span></div><div class="line">        <span class="comment">//public void test(String[] args)&#123;&#125;</span></div></pre></td></tr></table></figure>
<h2 id="可变参数方法的调用"><a href="#可变参数方法的调用" class="headerlink" title="可变参数方法的调用"></a>可变参数方法的调用</h2><ul>
<li>调用可变参数方法，可以给出零到任意多个参数，编译器会将可变参数转化为一个数组。也可以直接传递一个数组，示例如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Varargs</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(String arg : args) &#123;</div><div class="line">            System.out.println(arg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        test();<span class="comment">//0个参数</span></div><div class="line">        test(<span class="string">"a"</span>);<span class="comment">//1个参数</span></div><div class="line">        test(<span class="string">"a"</span>,<span class="string">"b"</span>);<span class="comment">//多个参数</span></div><div class="line">        test(<span class="keyword">new</span> String[] &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;);<span class="comment">//直接传递数组</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><h3 id="优先匹配固定参数"><a href="#优先匹配固定参数" class="headerlink" title="优先匹配固定参数"></a>优先匹配固定参数</h3><ul>
<li>调用一个被重载的方法时，如果此调用既能够和固定参数的重载方法匹配，也能够与可变长参数的重载方法匹配，则选择固定参数的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Varargs</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"version 1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String arg1, String arg2)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"version 2"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        test(<span class="string">"a"</span>,<span class="string">"b"</span>);<span class="comment">//version 2 优先匹配固定参数的重载方法</span></div><div class="line">                test();<span class="comment">//version 1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="匹配多个可变参数"><a href="#匹配多个可变参数" class="headerlink" title="匹配多个可变参数"></a>匹配多个可变参数</h3><ul>
<li>调用一个被重载的方法时，如果此调用既能够和两个可变长参数的重载方法匹配，则编译出错</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Varargs</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"version 1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String arg1, String... arg2)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"version 2"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        test(<span class="string">"a"</span>,<span class="string">"b"</span>);<span class="comment">//Compile error</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><h3 id="避免带有变长参数的方法重载"><a href="#避免带有变长参数的方法重载" class="headerlink" title="避免带有变长参数的方法重载"></a>避免带有变长参数的方法重载</h3><ul>
<li>即便编译器可以按照优先匹配固定参数的方式确定具体的调用方法，但在阅读代码的依然容易掉入陷阱。要慎重考虑变长参数的方法重载</li>
</ul>
<h3 id="别让null值和空值威胁到变长方法"><a href="#别让null值和空值威胁到变长方法" class="headerlink" title="别让null值和空值威胁到变长方法"></a>别让null值和空值威胁到变长方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;  </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">(String str,Integer... is)</span></span>&#123;       </div><div class="line">     &#125;  </div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">(String str,String... strs)</span></span>&#123;          </div><div class="line">     &#125;  </div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">           Client client = <span class="keyword">new</span> Client();  </div><div class="line">           client.methodA(<span class="string">"China"</span>, <span class="number">0</span>);  </div><div class="line">           client.methodA(<span class="string">"China"</span>, <span class="string">"People"</span>);  </div><div class="line">           client.methodA(<span class="string">"China"</span>);  <span class="comment">//compile error</span></div><div class="line">           client.methodA(<span class="string">"China"</span>,<span class="keyword">null</span>);  <span class="comment">//compile error</span></div><div class="line">     &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">     Client client = <span class="keyword">new</span> Client();  </div><div class="line">     String[] strs = <span class="keyword">null</span>;  </div><div class="line">     client.methodA(<span class="string">"China"</span>,strs);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>让编译器知道这个null值是String类型的，编译即可顺利通过，也就减少了错误的发生</li>
</ul>
<h3 id="覆写变长方法也要循规蹈矩"><a href="#覆写变长方法也要循规蹈矩" class="headerlink" title="覆写变长方法也要循规蹈矩"></a>覆写变长方法也要循规蹈矩</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarArgsTest2</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="comment">// 向上转型</span></div><div class="line">        Base base = <span class="keyword">new</span> Sub();</div><div class="line">        base.print(<span class="string">"hello"</span>);</div><div class="line">        <span class="comment">// 不转型</span></div><div class="line">        Sub sub = <span class="keyword">new</span> Sub();</div><div class="line">        sub.print(<span class="string">"hello"</span>);<span class="comment">//compile error</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 基类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Base......test"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 子类，覆写父类方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sub......test"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>第一个能编译通过，这是为什么呢？事实上，base对象把子类对象sub做了向上转型，形参列表是由父类决定的，当然能通过。而看看子类直接调用的情况，这时编译器看到子类覆写了父类的print方法，因此肯定使用子类重新定义的print方法，尽管参数列表不匹配也不会跑到父类再去匹配下，因为找到了就不再找了，因此有了类型不匹配的错误</p>
</li>
<li><p>这是个特例，覆写的方法参数列表竟然可以与父类不相同，这违背了覆写的定义，并且会引发莫名其妙的错误</p>
</li>
</ul>
<hr>
<p>这里，总结下覆写必须满足的条件：</p>
<ul>
<li><p>覆写方法不能缩小访问权限</p>
</li>
<li><p>参数列表必须与被覆写方法相同（包括显示形式）</p>
</li>
<li><p>返回类型必须与被覆写方法的相同或是其子类</p>
</li>
<li><p>覆写方法不能抛出新的异常，或者超出父类范围的异常，但是可以抛出更少、更有限的异常，或者不抛出异常</p>
</li>
</ul>
<h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><h3 id="使用-Object…-作为变长参数"><a href="#使用-Object…-作为变长参数" class="headerlink" title="使用 Object… 作为变长参数"></a>使用 Object… 作为变长参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(Object... args)</span> </span>&#123;</div><div class="line">    System.out.println(args.length);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="keyword">new</span> String[]&#123;<span class="string">"arg1"</span>, <span class="string">"arg2"</span>, <span class="string">"arg3"</span>&#125;); <span class="comment">//3</span></div><div class="line">foo(<span class="number">100</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"arg1"</span>, <span class="string">"arg1"</span>&#125;); <span class="comment">//2</span></div><div class="line"></div><div class="line">foo(<span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;); <span class="comment">//3</span></div><div class="line">foo(<span class="number">100</span>, <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;); <span class="comment">//2</span></div><div class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">//3</span></div><div class="line">foo(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;); <span class="comment">//1</span></div></pre></td></tr></table></figure>
<ul>
<li>int[] 无法转型为 Object[], 因而被当作一个单纯的<strong>数组对象</strong> ; Integer[] 可以转型为 Object[], 可以作为一个<strong>对象数组</strong></li>
</ul>
<h3 id="反射方法调用时的注意事项"><a href="#反射方法调用时的注意事项" class="headerlink" title="反射方法调用时的注意事项"></a>反射方法调用时的注意事项</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(String... varargs)</span></span>&#123;</div><div class="line">        System.out.println(args.length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        String[] varArgs = <span class="keyword">new</span> String[]&#123;<span class="string">"arg1"</span>, <span class="string">"arg2"</span>&#125;;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            Method method = Test.class.getMethod(<span class="string">"foo"</span>, String[].class);</div><div class="line">            method.invoke(<span class="keyword">null</span>, varArgs);</div><div class="line">            method.invoke(<span class="keyword">null</span>, (Object[])varArgs);</div><div class="line">            method.invoke(<span class="keyword">null</span>, (Object)varArgs);</div><div class="line">            method.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;varArgs&#125;);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>上面的四个调用中，前两个都会在运行时抛出java.lang.IllegalArgumentException: wrong number of arguments异常，后两个则正常调用</p>
</li>
<li><p>反射是运行时获取的，在运行时看来，可变长参数和数组是一致的，因而方法签名为：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法签名</span></div><div class="line">([Ljava/lang/String;)V <span class="comment">// public void foo(String[] varargs)</span></div></pre></td></tr></table></figure>
<ul>
<li>再来看一下 Method 对象的方法声明：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>args 虽然是一个可变长度的参数，但是 args 的长度是受限于该方法对象代表的真实方法的参数列表长度的，而从运行时签名来看，([Ljava/lang/String;)V 实际上只有一个形参，即 String[] varargs，因而 invoke(Object obj, Object… args) 中可变参数 args 的<strong>实参长度只能为1</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Object invoke(Object obj, Object... args)</span></div><div class="line"><span class="comment">//String[] varArgs = new String[]&#123;"arg1", "arg2"&#125;;</span></div><div class="line">method.invoke(<span class="keyword">null</span>, varArgs); <span class="comment">//varArgs长度为2，错误</span></div><div class="line">method.invoke(<span class="keyword">null</span>, (Object[])varArgs); <span class="comment">//将String[]转换为Object[],长度为2的，错误</span></div><div class="line">method.invoke(<span class="keyword">null</span>, (Object)varArgs);<span class="comment">//将整个String[] 转为Object，长度为1，符合</span></div><div class="line">method.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;varArgs&#125;);<span class="comment">//Object[]长度为1，正确。上一个和这个是等价的</span></div></pre></td></tr></table></figure>
<h2 id="什么时候使用可变长参数？"><a href="#什么时候使用可变长参数？" class="headerlink" title="什么时候使用可变长参数？"></a>什么时候使用可变长参数？</h2><ul>
<li><a href="http://stackoverflow.com/questions/766559/when-do-you-use-varargs-in-java" target="_blank" rel="external">Stack Overflow</a> 上有个关于变长参数使用的问题。简单地说，<br>在不确定方法需要处理的对象的数量时可以使用可变长参数，会使得方法调用更简单，无需手动创建数组 new T[]{…} </li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://blog.jrwang.me/2015/java-varargs/" target="_blank" rel="external">Java 中的变长参数</a></p>
</li>
<li><p><a href="http://dylangao.com/2014/01/06/java-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8/" target="_blank" rel="external">Java 可变参数列表</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/lanxuezaipiao/p/3190673.html" target="_blank" rel="external">Java中可变长参数的使用及注意事项</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是可变参数&quot;&gt;&lt;a href=&quot;#什么是可变参数&quot; class=&quot;headerlink&quot; title=&quot;什么是可变参数&quot;&gt;&lt;/a&gt;什么是可变参数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在 Java 5 中提供了变长参数，允许在调用方法时传入不定长度的参数。变长参数是Java的一个语法糖，本质上还是基于数组的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String... args)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;//方法签名&lt;br&gt;([Ljava/lang/String;)V // public void foo(String[] args)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;定义方法&quot;&gt;&lt;a href=&quot;#定义方法&quot; class=&quot;headerlink&quot; title=&quot;定义方法&quot;&gt;&lt;/a&gt;定义方法&lt;/h3&gt;&lt;p&gt;在定义方法时，在最后一个形参后加上三点“…“，就表示该形参可以接受多个参数值，多个参数值被当成数组传入。上述定义有几个要点需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于可变参数必须是最后一个参数，所以一个函数最多只能有一个可变参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java的可变参数，会被编译器转型为一个数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;变长参数在编译为字节码后，在方法签名中就是以数组形态出现的。这两个方法的签名是一致的，不能作为方法的重载。如果同时出现，是不能编译通过的。可变参数可以兼容数组，反之则不成立&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String...varargs)&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo(&lt;span class=&quot;string&quot;&gt;&quot;arg1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;arg2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;arg3&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//上述过程和下面的调用是等价的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[]&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;arg1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;arg2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;arg3&quot;&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>https方式向github提交代码总是输入用户名和密码</title>
    <link href="http://www.qiuchengjia.cn/2016/08/14/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/https%E6%96%B9%E5%BC%8F%E5%90%91github%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E6%80%BB%E6%98%AF%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81/"/>
    <id>http://www.qiuchengjia.cn/2016/08/14/项目管理/https方式向github提交代码总是输入用户名和密码/</id>
    <published>2016-08-13T19:24:27.000Z</published>
    <updated>2016-09-26T11:54:28.053Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>采用HTTPS方式提交代码到github和coding很方便，但是总是需要输入用户名和密码，以下这种方式可以解决</li>
</ul>
<h2 id="新建-git-credentials文件"><a href="#新建-git-credentials文件" class="headerlink" title="新建.git-credentials文件"></a>新建.git-credentials文件</h2><p>在你的用户目录下新建一个文本文件, 名曰 <strong>.git-credentials</strong></p>
<p><strong>用户目录:</strong></p>
<ul>
<li><p>windows: C:/Users/username</p>
</li>
<li><p>mac os x: /Users/username</p>
</li>
<li><p>linux:  /home/username</p>
</li>
</ul>
<h2 id="输入用户名和密码"><a href="#输入用户名和密码" class="headerlink" title="输入用户名和密码"></a>输入用户名和密码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https:<span class="comment">//username:password@github.com</span></div><div class="line">https:<span class="comment">//username:password@git.coding.net</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如何用hexo的话可以不用输入用户名和密码，执行hexo语句会弹出对话框提示输入</p>
</blockquote>
<h2 id="修改git配置"><a href="#修改git配置" class="headerlink" title="修改git配置"></a>修改git配置</h2><ul>
<li>执行命令</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global credential.helper store</div></pre></td></tr></table></figure>
<ul>
<li>上述命令会在~/.gitconfig文件末尾添加如下配置:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[credential]</div><div class="line">     helper = store</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.jianshu.com/p/81ae6e77ff47" target="_blank" rel="external">解决向github提交代码是老要输入用户名密码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;采用HTTPS方式提交代码到github和coding很方便，但是总是需要输入用户名和密码，以下这种方式可以解决&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;新建-git-credentials文件&quot;&gt;&lt;a href=&quot;#新建-git-credentials文件&quot; class=&quot;headerlink&quot; title=&quot;新建.git-credentials文件&quot;&gt;&lt;/a&gt;新建.git-credentials文件&lt;/h2&gt;&lt;p&gt;在你的用户目录下新建一个文本文件, 名曰 &lt;strong&gt;.git-credentials&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户目录:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;windows: C:/Users/username&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mac os x: /Users/username&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;linux:  /home/username&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;输入用户名和密码&quot;&gt;&lt;a href=&quot;#输入用户名和密码&quot; class=&quot;headerlink&quot; title=&quot;输入用户名和密码&quot;&gt;&lt;/a&gt;输入用户名和密码&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;https:&lt;span class=&quot;comment&quot;&gt;//username:password@github.com&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;https:&lt;span class=&quot;comment&quot;&gt;//username:password@git.coding.net&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;如何用hexo的话可以不用输入用户名和密码，执行hexo语句会弹出对话框提示输入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;修改git配置&quot;&gt;&lt;a href=&quot;#修改git配置&quot; class=&quot;headerlink&quot; title=&quot;修改git配置&quot;&gt;&lt;/a&gt;修改git配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;执行命令&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git config --global credential.helper store&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;上述命令会在~/.gitconfig文件末尾添加如下配置:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[credential]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     helper = store&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="项目管理" scheme="http://www.qiuchengjia.cn/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="项目管理" scheme="http://www.qiuchengjia.cn/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java源码分析--Enum</title>
    <link href="http://www.qiuchengjia.cn/2016/08/12/JAVA%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Java%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-Enum/"/>
    <id>http://www.qiuchengjia.cn/2016/08/12/JAVA源码分析/Java源码分析-Enum/</id>
    <published>2016-08-12T12:39:07.000Z</published>
    <updated>2016-09-26T11:54:28.077Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Enum类是java.lang包中一个类，他是Java语言中所有枚举类型的公共基类</p>
</blockquote>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Enum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;, <span class="title">Serializable</span></span></div></pre></td></tr></table></figure>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul>
<li>首先，<strong>抽象类不能被实例化</strong>，所以我们在<strong>java程序中不能使用new关键字来声明一个Enum</strong>，如果想要定义可以使用这样的语法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> enumName&#123;</div><div class="line">    value1,<span class="function">value2</span></div><div class="line">    <span class="title">method1</span><span class="params">()</span>&#123;&#125;</div><div class="line">    method2()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>其次，看到抽象类，第一印象是肯定有类继承他。至少我们应该是可以继承他的，所以：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testEnum</span> <span class="keyword">extends</span> <span class="title">Enum</span></span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testEnum</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt;</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testEnum</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt;</span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>尝试了以上三种方式之后，得出以下结论：<strong>Enum类无法被继承</strong></p>
</li>
<li><p>为什么一个抽象类不让继承？enum定义的枚举是怎么来的？难道不是对Enum的一种继承吗？带着这些疑问我们来反编译以下代码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Color &#123;RED, BLUE, GREEN&#125;</div></pre></td></tr></table></figure>
<ul>
<li>编译器将会把他转成如下内容：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">Color</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color[] values() &#123; <span class="keyword">return</span> (Color[])$VALUES.clone(); &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Color <span class="title">valueOf</span><span class="params">(String name)</span> </span>&#123; ... &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String s, <span class="keyword">int</span> i)</span> </span>&#123; <span class="keyword">super</span>(s, i); &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color RED;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color BLUE;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color GREEN;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color $VALUES[];</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    RED = <span class="keyword">new</span> Color(<span class="string">"RED"</span>, <span class="number">0</span>);</div><div class="line">    BLUE = <span class="keyword">new</span> Color(<span class="string">"BLUE"</span>, <span class="number">1</span>);</div><div class="line">    GREEN = <span class="keyword">new</span> Color(<span class="string">"GREEN"</span>, <span class="number">2</span>);</div><div class="line">    $VALUES = (<span class="keyword">new</span> Color[] &#123; RED, BLUE, GREEN &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>短短的一行代码，被编译器处理过之后竟然变得这么多，看来，enmu关键字是java提供给我们的一个语法糖啊。。。从反编译之后的代码中，我们发现，编译器不让我们继承Enum，但是当我们使用enum关键字定义一个枚举的时候，他会帮我们在编译后默认继承java.lang.Enum类，而不像其他的类一样默认继承Object类。且采用enum声明后，该类会被编译器加上final声明，故该类是无法继承的。 PS：由于JVM类初始化是线程安全的，所以可以采用枚举类实现一个线程安全的单例模式</li>
</ul>
<h3 id="实现Comparable和Serializable接口"><a href="#实现Comparable和Serializable接口" class="headerlink" title="实现Comparable和Serializable接口"></a>实现Comparable和Serializable接口</h3><ul>
<li>Enum实现了Serializable接口，可以序列化。 Enum实现了Comparable接口，可以进行比较，默认情况下，只有同类型的enum才进行比较（原因见后文），要实现不同类型的enum之间的比较，只能复写compareTo方法</li>
</ul>
<h3 id="泛型-“-lt-”E-extends-Enum”-lt-”E-gt-gt"><a href="#泛型-“-lt-”E-extends-Enum”-lt-”E-gt-gt" class="headerlink" title="泛型 “&lt;”E extends Enum”&lt;”E&gt;&gt;"></a>泛型 “&lt;”E extends Enum”&lt;”E&gt;&gt;</h3><ul>
<li>怎么理解 “&lt;”E extends Enum”&lt;”E&gt;&gt;</li>
</ul>
<p>首先，这样写只是为了让Java的API更有弹性，他主要是限定形态参数实例化的对象，故要求只能是Enum，这样才能对 compareTo 之类的方法所传入的参数进行形态检查。所以，<strong>我们完全可以不必去关心他为什么这么设计</strong></p>
<ul>
<li><p>首先我们先来“翻译”一下这个Enum<e extends="" enum<e="">&gt;到底什么意思，然后再来解释为什么Java要这么用。 我们先看一个比较常见的泛型：List<string>。这个泛型的意思是，List中存的都是String类型，告诉编译器要接受String类型，并且从List中取出内容的时候也自动帮我们转成String类型。 所以Enum<e extends="" enum<e="">&gt;可以暂时理解为Enum里面的内容都是E extends Enum<e>类型。 这里的E我们就理解为枚举，extends表示上界，比如： List&lt;? extends Object&gt;，List中的内容可以是Object或者扩展自Object的类。这就是extends的含义。 所以，E extends Enum<e>表示为一个继承了Enum<e>类型的枚举类型。 那么，Enum<e extends="" enum<e="">&gt;就不难理解了，就是一个Enum只接受一个Enum或者他的子类作为参数。相当于把一个子类或者自己当成参数，传入到自身，引起一些特别的语法效果  </e></e></e></e></e></string></e></p>
</li>
<li><p><strong>为什么Java要这样定义Enum</strong></p>
</li>
</ul>
<p>首先我们来科普一下enum</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">enum</span> Color&#123;</div><div class="line">    RED,GREEN,YELLOW</div><div class="line">&#125;</div><div class="line"><span class="keyword">enum</span> Season&#123;</div><div class="line">    SPRING,SUMMER,WINTER</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(Color.RED.ordinal());</div><div class="line">        System.out.println(Season.SPRING.ordinal());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>代码中两处输出内容都是 0 ，因为枚举类型的默认的序号都是从零开始的</p>
</li>
<li><p>要理解这个问题，首先我们来看一个Enum类中的方法（暂时忽略其他成员变量和方法）：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Enum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;, <span class="title">Serializable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> ordinal;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(E o)</span> </span>&#123;</div><div class="line">        Enum other = (Enum)o;</div><div class="line">        Enum self = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span> (self.getClass() != other.getClass() &amp;&amp; <span class="comment">// optimization</span></div><div class="line">            self.getDeclaringClass() != other.getDeclaringClass())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException();</div><div class="line">        <span class="keyword">return</span> self.ordinal - other.ordinal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>首先我们认为Enum的定义中没有使用Enum<e extends="" enum<e="">&gt;，那么compareTo方法就要这样定义（因为没有使用泛型，所以就要使用Object，这也是Java中很多方法常用的方式）：</e></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>当我们调用compareTo方法的时候依然传入两个枚举类型，在compareTo方法的实现中，比较两个枚举的过程是先将参数转化成Enum类型，然后再比较他们的序号是否相等。那么我们这样比较：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Color.RED.compareTo(Color.RED);</div><div class="line">Color.RED.compareTo(Season.SPRING);</div></pre></td></tr></table></figure>
<ul>
<li><p>如果在compareTo方法中不做任何处理的话，那么以上这段代码返回内容将都是true（因为Season.SPRING的序号和Color.RED的序号都是 0 ）。但是，很明显， Color.RED和Season.SPRING并不相等</p>
</li>
<li><p>但是Java使用Enum<e extends="" enum<e="">&gt;声明Enum，并且在compareTo的中使用E作为参数来避免了这种问题。 以上两个条件限制Color.RED只能和Color定义出来的枚举进行比较，当我们试图使用Color.RED.compareTo(Season.SPRING);这样的代码是，会报出这样的错误：</e></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">The method <span class="title">compareTo</span><span class="params">(Color)</span> in the type Enum&lt;Color&gt; is not applicable <span class="keyword">for</span> the <span class="title">arguments</span> <span class="params">(Season)</span></span></div></pre></td></tr></table></figure>
<ul>
<li><p>他说明，compareTo方法只接受Enum<color>类型</color></p>
</li>
<li><p>Java为了限定形态参数实例化的对象，故要求只能是Enum，这样才能对 compareTo之类的方法所传入的参数进行形态检查。 因为“红色”只有和“绿色”比较才有意义，用“红色”和“春天”比较毫无意义，所以，Java用这种方式一劳永逸的保证像compareTo这样的方法可以正常的使用而不用考虑类型</p>
</li>
</ul>
<blockquote>
<p>PS：在Java中，其实也可以实现“红色”和“春天”比较，因为Enum实现了Comparable接口，可以重写compareTo方法来实现不同的enum之间的比较</p>
</blockquote>
<h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><ul>
<li>在Enum中，有两个成员变量，一个是名字(name)，一个是序号(ordinal)。 序号是一个枚举常量，表示在枚举中的位置，从0开始，依次递增</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name；</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> ordinal;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">ordinal</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> ordinal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul>
<li>前面我们说过，Enum是一个抽象类，不能被实例化，但是他也有构造函数，从前面我们反编译出来的代码中，我们也发现了Enum的构造函数，在Enum中只有一个保护类型的构造函数：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Enum</span><span class="params">(String name, <span class="keyword">int</span> ordinal)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.ordinal = ordinal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>文章开头反编译的代码中private Color(String s, int i) { super(s, i); }中的super(s, i);就是调用Enum中的这个保护类型的构造函数来初始化name和ordinal</li>
</ul>
<h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><ul>
<li>Enum当中有以下这么几个常用方法，调用方式就是使用Color.RED.methodName（params…）的方式调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>==other;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.hashCode();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(E o)</span> </span>&#123;</div><div class="line">    Enum other = (Enum)o;</div><div class="line">    Enum self = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (self.getClass() != other.getClass() &amp;&amp; <span class="comment">// optimization</span></div><div class="line">        self.getDeclaringClass() != other.getDeclaringClass())</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException();</div><div class="line">    <span class="keyword">return</span> self.ordinal - other.ordinal;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class&lt;E&gt; <span class="title">getDeclaringClass</span><span class="params">()</span> </span>&#123;</div><div class="line">    Class clazz = getClass();</div><div class="line">    Class zuper = clazz.getSuperclass();</div><div class="line">    <span class="keyword">return</span> (zuper == Enum.class) ? clazz : zuper;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Enum&lt;T&gt;&gt; <span class="function">T <span class="title">valueOf</span><span class="params">(Class&lt;T&gt; enumType,String name)</span> </span>&#123;</div><div class="line">    T result = enumType.enumConstantDirectory().get(name);</div><div class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Name is null"</span>);</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">        <span class="string">"No enum constant "</span> + enumType.getCanonicalName() + <span class="string">"."</span> + name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.hollischuang.com/archives/92" target="_blank" rel="external">Java 7 源码学习系列（二）——Enum</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Enum类是java.lang包中一个类，他是Java语言中所有枚举类型的公共基类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Enum&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Enum&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Comparable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt;, &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;抽象类&quot;&gt;&lt;a href=&quot;#抽象类&quot; class=&quot;headerlink&quot; title=&quot;抽象类&quot;&gt;&lt;/a&gt;抽象类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先，&lt;strong&gt;抽象类不能被实例化&lt;/strong&gt;，所以我们在&lt;strong&gt;java程序中不能使用new关键字来声明一个Enum&lt;/strong&gt;，如果想要定义可以使用这样的语法：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; enumName&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    value1,&lt;span class=&quot;function&quot;&gt;value2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    method2()&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JAVA源码分析" scheme="http://www.qiuchengjia.cn/categories/JAVA%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="JAVA源码分析" scheme="http://www.qiuchengjia.cn/tags/JAVA%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Java命令--javap</title>
    <link href="http://www.qiuchengjia.cn/2016/08/12/JAVA%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/Java%E5%91%BD%E4%BB%A4-javap/"/>
    <id>http://www.qiuchengjia.cn/2016/08/12/JAVA命令学习/Java命令-javap/</id>
    <published>2016-08-12T12:34:38.000Z</published>
    <updated>2016-09-26T11:54:28.077Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>javap是jdk自带的一个工具，可以对代码 <a href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E5%8F%8D%E7%BC%96%E8%AF%91/">反编译</a>，也可以查看java编译器生成的字节码</p>
</blockquote>
<p>一般情况下，很少有人使用javap对class文件进行反编译，因为有很多成熟的反编译工具可以使用，比如jad。但是，javap还可以查看java编译器为我们生成的字节码。通过它，可以对照源代码和字节码，从而了解很多编译器内部的工作</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li>javap命令分解一个class文件，它根据options来决定到底输出什么。如果没有使用options,那么javap将会输出包，类里的protected和public域以及类里的所有方法。javap将会把它们输出在标准输出上。来看这个例子，先编译(javac)下面这个类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.applet.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocFooter</span> <span class="keyword">extends</span> <span class="title">Applet</span> </span>&#123;</div><div class="line">        String date;</div><div class="line">        String email;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">                resize(<span class="number">500</span>,<span class="number">100</span>);</div><div class="line">                date = getParameter(<span class="string">"LAST_UPDATED"</span>);</div><div class="line">                email = getParameter(<span class="string">"EMAIL"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</div><div class="line">                g.drawString(date + <span class="string">" by "</span>,<span class="number">100</span>, <span class="number">15</span>);</div><div class="line">                g.drawString(email,<span class="number">290</span>,<span class="number">15</span>);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>在命令行上键入javap DocFooter后，输出结果如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Compiled from <span class="string">"DocFooter.java"</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocFooter</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">applet</span>.<span class="title">Applet</span> </span>&#123;</div><div class="line">  java.lang.String date;</div><div class="line">  java.lang.String email;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DocFooter</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(java.awt.Graphics)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果加入了-c，即javap -c DocFooter，那么输出结果如下</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">Compiled from "DocFooter.java"</div><div class="line">public class DocFooter extends java.applet.Applet &#123;</div><div class="line">  java.lang.String date;</div><div class="line"></div><div class="line">  java.lang.String email;</div><div class="line"></div><div class="line">  public DocFooter();</div><div class="line">    Code:</div><div class="line">       0: aload_0       </div><div class="line">       1: invokespecial #1                  // Method java/applet/Applet."&lt;init&gt;":()V</div><div class="line">       4: return        </div><div class="line"></div><div class="line">  public void init();</div><div class="line">    Code:</div><div class="line">       0: aload_0       </div><div class="line">       1: sipush        500</div><div class="line">       4: bipush        100</div><div class="line">       6: invokevirtual #2                  // Method resize:(II)V</div><div class="line">       9: aload_0       </div><div class="line">      10: aload_0       </div><div class="line">      11: ldc           #3                  // String LAST_UPDATED</div><div class="line">      13: invokevirtual #4                  // Method getParameter:(Ljava/lang/String;)Ljava/lang/String;</div><div class="line">      16: putfield      #5                  // Field date:Ljava/lang/String;</div><div class="line">      19: aload_0       </div><div class="line">      20: aload_0       </div><div class="line">      21: ldc           #6                  // String EMAIL</div><div class="line">      23: invokevirtual #4                  // Method getParameter:(Ljava/lang/String;)Ljava/lang/String;</div><div class="line">      26: putfield      #7                  // Field email:Ljava/lang/String;</div><div class="line">      29: return        </div><div class="line"></div><div class="line">  public void paint(java.awt.Graphics);</div><div class="line">    Code:</div><div class="line">       0: aload_1       </div><div class="line">       1: new           #8                  // class java/lang/StringBuilder</div><div class="line">       4: dup           </div><div class="line">       5: invokespecial #9                  // Method java/lang/StringBuilder."&lt;init&gt;":()V</div><div class="line">       8: aload_0       </div><div class="line">       9: getfield      #5                  // Field date:Ljava/lang/String;</div><div class="line">      12: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">      15: ldc           #11                 // String  by </div><div class="line">      17: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">      20: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div><div class="line">      23: bipush        100</div><div class="line">      25: bipush        15</div><div class="line">      27: invokevirtual #13                 // Method java/awt/Graphics.drawString:(Ljava/lang/String;II)V</div><div class="line">      30: aload_1       </div><div class="line">      31: aload_0       </div><div class="line">      32: getfield      #7                  // Field email:Ljava/lang/String;</div><div class="line">      35: sipush        290</div><div class="line">      38: bipush        15</div><div class="line">      40: invokevirtual #13                 // Method java/awt/Graphics.drawString:(Ljava/lang/String;II)V</div><div class="line">      43: return        </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>上面输出的内容就是<strong>字节码</strong></li>
</ul>
<h2 id="用法摘要"><a href="#用法摘要" class="headerlink" title="用法摘要"></a>用法摘要</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-help 帮助</div><div class="line">-l 输出行和变量的表</div><div class="line">-<span class="keyword">public</span> 只输出<span class="keyword">public</span>方法和域</div><div class="line">-<span class="keyword">protected</span> 只输出<span class="keyword">public</span>和<span class="keyword">protected</span>类和成员</div><div class="line">-<span class="keyword">package</span> 只输出包，<span class="keyword">public</span>和<span class="keyword">protected</span>类和成员，这是默认的</div><div class="line">-p -<span class="keyword">private</span> 输出所有类和成员</div><div class="line">-s 输出内部类型签名</div><div class="line">-c 输出分解后的代码，例如，类中每一个方法内，包含java字节码的指令，</div><div class="line">-verbose 输出栈大小，方法参数的个数</div><div class="line">-constants 输出静态<span class="keyword">final</span>常量</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>javap可以用于反编译和查看编译器编译后的字节码。平时一般用javap -c比较多，该命令用于列出每个方法所执行的JVM指令，并显示每个方法的字节码的实际作用。可以通过字节码和源代码的对比，深入分析java的编译原理，了解和解决各种Java原理级别的问题</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://www.hollischuang.com/archives/1107" target="_blank" rel="external">Java命令学习系列（七）——javap</a></p>
</li>
<li><p><a href="http://www.colabug.com/thread-1450948-1-1.html" target="_blank" rel="external">Java命令学习系列（七）——javap</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;javap是jdk自带的一个工具，可以对代码 &lt;a href=&quot;http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E5%8F%8D%E7%BC%96%E8%AF%91/&quot;&gt;反编译&lt;/a&gt;，也可以查看java编译器生成的字节码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般情况下，很少有人使用javap对class文件进行反编译，因为有很多成熟的反编译工具可以使用，比如jad。但是，javap还可以查看java编译器为我们生成的字节码。通过它，可以对照源代码和字节码，从而了解很多编译器内部的工作&lt;/p&gt;
&lt;h2 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;javap命令分解一个class文件，它根据options来决定到底输出什么。如果没有使用options,那么javap将会输出包，类里的protected和public域以及类里的所有方法。javap将会把它们输出在标准输出上。来看这个例子，先编译(javac)下面这个类&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.awt.*;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.applet.*;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DocFooter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Applet&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String date;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String email;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                resize(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                date = getParameter(&lt;span class=&quot;string&quot;&gt;&quot;LAST_UPDATED&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                email = getParameter(&lt;span class=&quot;string&quot;&gt;&quot;EMAIL&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;paint&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Graphics g)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                g.drawString(date + &lt;span class=&quot;string&quot;&gt;&quot; by &quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                g.drawString(email,&lt;span class=&quot;number&quot;&gt;290&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JAVA命令学习" scheme="http://www.qiuchengjia.cn/categories/JAVA%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JAVA命令学习" scheme="http://www.qiuchengjia.cn/tags/JAVA%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java单例模式的七种写法</title>
    <link href="http://www.qiuchengjia.cn/2016/08/12/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%83%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <id>http://www.qiuchengjia.cn/2016/08/12/JAVA设计模式/Java单例模式的七种写法/</id>
    <published>2016-08-11T23:37:17.000Z</published>
    <updated>2016-09-26T11:54:28.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一种（懒汉，线程不安全）："><a href="#第一种（懒汉，线程不安全）：" class="headerlink" title="第一种（懒汉，线程不安全）："></a>第一种（懒汉，线程不安全）：</h2><ul>
<li>类初始化的时候并不创建，想用的时候创建</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">        instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第二种（懒汉，线程安全）："><a href="#第二种（懒汉，线程安全）：" class="headerlink" title="第二种（懒汉，线程安全）："></a>第二种（懒汉，线程安全）：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">        instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这种写法能够在多线程中很好的工作，而且看起来它也具备很好的lazy loading(只在需要的时候加载必要的数据，这样可以避免即时加载所带来的不必要的系统开销)，但是，遗憾的是，效率很低，99%情况下不需要同步</li>
</ul>
<a id="more"></a>
<h2 id="第三种（饿汉）："><a href="#第三种（饿汉）：" class="headerlink" title="第三种（饿汉）："></a>第三种（饿汉）：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这种方式基于classloder机制，避免了多线程的同步(classloder在加载类的时候是同步的)问题，不过，instance在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用getInstance方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance显然没有达到lazy loading(只在需要的时候加载必要的数据，这样可以避免即时加载所带来的不必要的系统开销)的效果</li>
</ul>
<h2 id="第四种（饿汉，变种）："><a href="#第四种（饿汉，变种）：" class="headerlink" title="第四种（饿汉，变种）："></a>第四种（饿汉，变种）：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> Singleton instance = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">static</span> &#123;  </div><div class="line">    instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>表面上看起来差别挺大，其实更第三种方式差不多，都是在类初始化即实例化instance</li>
</ul>
<h2 id="第五种（静态内部类）："><a href="#第五种（静态内部类）：" class="headerlink" title="第五种（静态内部类）："></a>第五种（静态内部类）：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这种方式同样利用了classloder的机制来保证初始化instance时只有一个线程，它跟第三种和第四种方式不同的是（很细微的差别）：第三种和第四种方式是只要Singleton类被装载了，那么instance就会被实例化（没有达到lazy loading效果），而这种方式是Singleton类被装载了，instance不一定被初始化。因为SingletonHolder类没有被主动使用，只有显示通过调用getInstance方法时，才会显示装载SingletonHolder类，从而实例化instance。想象一下，如果实例化instance很消耗资源，我想让他延迟加载，另外一方面，我不希望在Singleton类加载时就实例化，因为我不能确保Singleton类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化instance显然是不合适的。这个时候，这种方式相比第三和第四种方式就显得很合理</li>
</ul>
<h2 id="第六种（枚举）："><a href="#第六种（枚举）：" class="headerlink" title="第六种（枚举）："></a>第六种（枚举）：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;  </div><div class="line">    INSTANCE;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这种方式是Effective Java作者Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象，可谓是很坚强的壁垒啊，在<a href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB/">Java枚举类</a>中有详细介绍枚举的线程安全问题和序列化问题，不过，个人认为由于1.5中才加入enum特性，用这种方式写不免让人感觉生疏，在实际工作中，我也很少看见有人这么写过</li>
</ul>
<h2 id="第七种（双重校验锁）："><a href="#第七种（双重校验锁）：" class="headerlink" title="第七种（双重校验锁）："></a>第七种（双重校验锁）：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </div><div class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </div><div class="line">            singleton = <span class="keyword">new</span> Singleton();  </div><div class="line">        &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> singleton;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有两个问题需要注意：</p>
<ol>
<li><p>如果单例由不同的类装载器装入，那便有可能存在多个单例类的实例。假定不是远端存取，例如一些servlet容器对每个servlet使用完全不同的类装载器，这样的话如果有两个servlet访问一个单例类，它们就都会有各自的实例</p>
</li>
<li><p>如果Singleton实现了java.io.Serializable接口，那么这个类的实例就可能被序列化和复原。不管怎样，如果你序列化一个单例类的对象，接下来复原多个那个对象，那你就会有多个单例类的实例</p>
</li>
</ol>
<ul>
<li>对第一个问题修复的办法是：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Class <span class="title">getClass</span><span class="params">(String classname)</span>  </span></div><div class="line"><span class="keyword">throws</span> ClassNotFoundException &#123;  </div><div class="line">    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</div><div class="line">    <span class="keyword">if</span>(classLoader == <span class="keyword">null</span>)     </div><div class="line">          classLoader = Singleton.class.getClassLoader();     </div><div class="line">          <span class="keyword">return</span> (classLoader.loadClass(classname));     </div><div class="line">       &#125;     </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>对第二个问题修复的办法是：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;     </div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();     </div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;     </div><div class="line"></div><div class="line">   &#125;     </div><div class="line">   <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;     </div><div class="line">            <span class="keyword">return</span> INSTANCE;     </div><div class="line">      &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>对我来说，我比较喜欢第三种和第五种方式，简单易懂，而且在JVM层实现了线程安全（如果不是多个类加载器环境），一般的情况下，我会使用第三种方式，只有在要明确实现lazy loading效果时才会使用第五种方式，另外，如果涉及到反序列化创建对象时我会试着使用枚举的方式来实现单例，不过，我一直会保证我的程序是线程安全的，而且我永远不会使用第一种和第二种方式，如果有其他特殊的需求，我可能会使用第七种方式，毕竟，JDK1.5已经没有双重检查锁定的问题了</p>
</li>
<li><p>不过一般来说，第一种不算单例，第四种和第三种就是一种，如果算的话，第五种也可以分开写了。所以说，一般单例都是五种写法。懒汉，恶汉，双重校验锁，枚举和静态内部类</p>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://www.hollischuang.com/archives/205" target="_blank" rel="external">[转+注]单例模式的七种写法</a></p>
</li>
<li><p><a href="http://cantellow.iteye.com/blog/838473" target="_blank" rel="external">单例模式的七种写法</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一种（懒汉，线程不安全）：&quot;&gt;&lt;a href=&quot;#第一种（懒汉，线程不安全）：&quot; class=&quot;headerlink&quot; title=&quot;第一种（懒汉，线程不安全）：&quot;&gt;&lt;/a&gt;第一种（懒汉，线程不安全）：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类初始化的时候并不创建，想用的时候创建&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton instance;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (instance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;第二种（懒汉，线程安全）：&quot;&gt;&lt;a href=&quot;#第二种（懒汉，线程安全）：&quot; class=&quot;headerlink&quot; title=&quot;第二种（懒汉，线程安全）：&quot;&gt;&lt;/a&gt;第二种（懒汉，线程安全）：&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton instance;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (instance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;这种写法能够在多线程中很好的工作，而且看起来它也具备很好的lazy loading(只在需要的时候加载必要的数据，这样可以避免即时加载所带来的不必要的系统开销)，但是，遗憾的是，效率很低，99%情况下不需要同步&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA设计模式" scheme="http://www.qiuchengjia.cn/categories/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JAVA设计模式" scheme="http://www.qiuchengjia.cn/tags/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java反编译</title>
    <link href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <id>http://www.qiuchengjia.cn/2016/08/12/JAVA/Java反编译/</id>
    <published>2016-08-11T23:03:35.000Z</published>
    <updated>2016-09-26T11:54:28.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是编译"><a href="#什么是编译" class="headerlink" title="什么是编译"></a>什么是编译</h2><ol>
<li><p>利用编译程序从源语言编写的源程序产生目标程序的过程</p>
</li>
<li><p>用编译程序产生目标程序的动作。 编译就是把高级语言变成计算机可以识别的2进制语言，计算机只认识1和0，编译程序把人们熟悉的语言换成2进制的。 编译程序把一个源程序翻译成目标程序的工作过程分为五个阶段：词法分析；语法分析；语义检查和中间代码生成；代码优化；目标代码生成。主要是进行词法分析和语法分析，又称为源程序分析，分析过程中发现有语法错误，给出提示信息，具体参考 <a href="http://www.qiuchengjia.cn/2016/07/24/JVM/Javac%E7%BC%96%E8%AF%91%E4%B8%8EJIT%E7%BC%96%E8%AF%91/">Javac编译与JIT编译</a></p>
</li>
</ol>
<h2 id="什么是反编译"><a href="#什么是反编译" class="headerlink" title="什么是反编译"></a>什么是反编译</h2><ul>
<li>计算机软件反向工程（Reverse engineering）也称为计算机软件还原工程，是指通过对他人软件的目标程序（可执行程序）进行“逆向分析、研究”工作，以推导出他人的软件产品所使用的思路、原理、结构、算法、处理过程、运行方法等设计要素，某些特定情况下可能推导出源代码。反编译作为自己开发软件时的参考，或者直接用于自己的软件产品中</li>
</ul>
<a id="more"></a>
<h2 id="反编译的原理"><a href="#反编译的原理" class="headerlink" title="反编译的原理"></a>反编译的原理</h2><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><ul>
<li><strong>JVM是什么？</strong>我的理解简单来说是：一个能把Class字节码翻译成本机cpu能够识别的指令的程序</li>
</ul>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><blockquote>
<p>Java源码(.java文件) =&gt; 编译器  =&gt;  Class文件 =&gt; JVM =&gt; 可执行的指令</p>
</blockquote>
<ul>
<li>不一定只有Java，例如Scala，Groovy等基于JVM的语言，只要能编译成标准Class的都可以</li>
</ul>
<h3 id="Class文件"><a href="#Class文件" class="headerlink" title="Class文件"></a>Class文件</h3><ul>
<li><p>详情参见 <a href="http://www.qiuchengjia.cn/2016/07/18/JVM/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/">Class类文件结构</a></p>
</li>
<li><p><strong>class文件结构介绍：</strong> 根据java虚拟机规范的规定，class文件格式采用一种类似c语言结构体的伪结构来存储，这种伪结构中只有两种数据类型：无符号数和表。 无符号数：无符号数属于基本的数据类型，以u1,u2,u4,u8来分别代表1个字节，2个字节，4个字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值，或者按照utf-8编码构成字符串值。 表：表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性地以“_info“结尾。表用于描述有层次关系的复合结构的数据，整个class文件本质上就是一张表，它由下列数据项构成：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">ClassFile &#123; </div><div class="line">    <span class="comment">//魔数(0xCAFEBABE)，每个class文件的前4个字节称为魔数,</span></div><div class="line">    <span class="comment">//值为0xCAFEBABE。作用在于轻松的辨别class文件与非class文件。</span></div><div class="line">    u4 magic;</div><div class="line">    <span class="comment">//下面两个是版本号，随着Java技术的发展，class文件的格式会发生变化。</span></div><div class="line">    <span class="comment">//版本号的作用在于使得虚拟机能够认识当前加载class的文件格式。从而准确的提取class文件信息</span></div><div class="line">    u2 minor_version;<span class="comment">//次版本号</span></div><div class="line">    u2 major_version;<span class="comment">//主版本号  </span></div><div class="line">    u2 constant_pool_count;<span class="comment">//常量池容量计数值  </span></div><div class="line">    cp_info constant_pool[constant_pool_count-<span class="number">1</span>];<span class="comment">//常量池，具体见对照表  </span></div><div class="line">    <span class="comment">//访问标志，用来表明该class文件中定义的是类还是接口，访问</span></div><div class="line">    <span class="comment">//修饰符是public还是缺省。类或接口是否是抽象的。类是否是final的。  </span></div><div class="line">    u2 access_flags;</div><div class="line">    u2 this_class;<span class="comment">//类索引  </span></div><div class="line">    u2 super_class;<span class="comment">//父类索引  </span></div><div class="line">    u2 interfaces_count;<span class="comment">//接口计数器  </span></div><div class="line">    u2 interfaces[interfaces_count];<span class="comment">//接口索引集合  </span></div><div class="line">    u2 fields_count;<span class="comment">//字段计数器  </span></div><div class="line">    field_info fields[fields_count];<span class="comment">//字段表  </span></div><div class="line">    u2 methods_count;<span class="comment">//方法计数器  </span></div><div class="line">    method_info methods[methods_count];<span class="comment">//方法表  </span></div><div class="line">    u2 attributes_count;<span class="comment">//属性表计数器  </span></div><div class="line">    attribute_info attributes[attributes_count];<span class="comment">//属性表集合  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="常量对照表"><a href="#常量对照表" class="headerlink" title="常量对照表"></a>常量对照表</h3><table>
<thead>
<tr>
<th>常量表类型</th>
<th style="text-align:left">标志值(占1 byte)</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONSTANT_Utf8</td>
<td style="text-align:left">1</td>
<td style="text-align:left">UTF-8编码的Unicode字符串</td>
</tr>
<tr>
<td>CONSTANT_Integer</td>
<td style="text-align:left">3</td>
<td style="text-align:left">int类型的字面值</td>
</tr>
<tr>
<td>CONSTANT_Float</td>
<td style="text-align:left">4</td>
<td style="text-align:left">float类型的字面值</td>
</tr>
<tr>
<td>CONSTANT_Long</td>
<td style="text-align:left">5</td>
<td style="text-align:left">long类型的字面值</td>
</tr>
<tr>
<td>CONSTANT_Double</td>
<td style="text-align:left">6</td>
<td style="text-align:left">double类型的字面值</td>
</tr>
<tr>
<td>CONSTANT_Class</td>
<td style="text-align:left">7</td>
<td style="text-align:left">对一个类或接口的符号引用</td>
</tr>
<tr>
<td>CONSTANT_String</td>
<td style="text-align:left">8</td>
<td style="text-align:left">String类型字面值的引用</td>
</tr>
<tr>
<td>CONSTANT_Fieldref</td>
<td style="text-align:left">9</td>
<td style="text-align:left">对一个字段的符号引用</td>
</tr>
<tr>
<td>CONSTANT_Methodref</td>
<td style="text-align:left">10</td>
<td style="text-align:left">对一个类中方法的符号引用</td>
</tr>
<tr>
<td>CONSTANT_InterfaceMethodref</td>
<td style="text-align:left">11</td>
<td style="text-align:left">对一个接口中方法的符号引用</td>
</tr>
<tr>
<td>CONSTANT_NameAndType</td>
<td style="text-align:left">12</td>
<td style="text-align:left">对一个字段或方法的部分符号引用</td>
</tr>
</tbody>
</table>
<p>如上面表格所示，每个类型都会有对应的tag值，还有方法权限标志表，描述符表之类的。根据这些tag值来表示，例如常量为01 00 12 4C 6A 61 76 61 2F 6C 61 6E 67 2F 53 74 72 69 6E 67 3B，是int类型呢还是float呢，是public还是private？根据这些对照表来查出对应tag所表示的意义可以看出：</p>
<ul>
<li><p>01——tag值为1，类型为CONSTANT_Utf8_info；</p>
</li>
<li><p>00 12——这个UTF-8编码的常量字符串长度为18；</p>
</li>
<li><p>4C 6A 61 76 61 2F 6C 61 6E 67 2F 53 74 72 69 6E 67 3B——18个字节的字符串，对应：Ljava/lang/String(描述符,L 代表是引用类型);</p>
</li>
</ul>
<h3 id="反编译原理"><a href="#反编译原理" class="headerlink" title="反编译原理"></a>反编译原理</h3><ul>
<li>Class按照上面说的tag值和表对照，就能分析出Class对应的Java文件结构，那么即遵循这样的规范反编译成Java文件，当然反编译出来的并非是原本一模一样的Java源码，而是根据分析重新生成的Java代码</li>
</ul>
<h2 id="Java类的编译与反编译"><a href="#Java类的编译与反编译" class="headerlink" title="Java类的编译与反编译"></a>Java类的编译与反编译</h2><ul>
<li>我们在最初学习Java的时候，会接触到两个命令：javac和java,那个时候我们就知道，javac是用来编译Java类的，就是将我们写好的helloworld.java文件编译成helloworld.class文件</li>
</ul>
<blockquote>
<p>class文件打破了C或者C++等语言所遵循的传统，使用这些传统语言写的程序通常首先被编译，然后被连接成单独的、专门支持特定硬件平台和操作系统的二进制文件。通常情况下，一个平台上的二进制可执行文件不能在其他平台上工作。而Java class文件是可以运行在任何支持Java虚拟机的硬件平台和操作系统上的二进制文件</p>
</blockquote>
<ul>
<li>那么<strong>反编译</strong>呢，就是通过helloworld.class文件得到java文件（或者说是程序员能看懂的Java文件）</li>
</ul>
<h2 id="什么时候会用到反编译"><a href="#什么时候会用到反编译" class="headerlink" title="什么时候会用到反编译"></a>什么时候会用到反编译</h2><ol>
<li><p>我们只有一个类的class文件，但是我们又看不懂Java的class文件，那么我们可以把它反编译成我们可以看得懂的文件</p>
</li>
<li><p>学习Java过程中，JDK的每个版本都会加入越来越多的语法糖，有些时候我们想知道Java一些实现细节，我们可以借助反编译。</p>
</li>
</ol>
<h2 id="反编译工具"><a href="#反编译工具" class="headerlink" title="反编译工具"></a>反编译工具</h2><ol>
<li><p><a href="http://www.qiuchengjia.cn/2016/08/12/JAVA%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/Java%E5%91%BD%E4%BB%A4-javap/">javap</a></p>
</li>
<li><p>Jad: <a href="http://varaneckas.com/jad/" target="_blank" rel="external">官网</a></p>
</li>
</ol>
<blockquote>
<p>这个工具下载好之后会有一个执行文件，只要在执行文件所在目录执行./jad helloworld.class 就会在当前目录下生成helloworld.jad文件，该文件里就是我们很熟悉的Java代码</p>
</blockquote>
<ul>
<li><strong>Eclipse插件：</strong></li>
</ul>
<p><a href="http://jadclipse.sourceforge.net/wiki/index.php/Main_Page" target="_blank" rel="external">传送门</a> 在官网下载插件的jar包，然后将jar包放到eclipse的plugins目录下‘ 在打开Eclipse，<strong>Eclipse-&gt;Window-&gt;Preferences-&gt;Java</strong>，此时你会发现会比原来多了一个JadClipse的选项，单击，在Path to decompiler中输入你刚才放置jad.exe的位置，也可以制定临时文件的目录。当然在JadClipse下还有一些子选项，如Debug，Directives等，按照默认配置即可。 基本配置完毕后，我们可以查看一下class文件的默认打开方式，<strong>Eclipse-&gt;Window-&gt;Preferences-&gt;General-&gt;Editors-&gt;File Associations</strong> 我们可以看到class文件的打开方式有两个，JadClipse和Eclipse自带的Class File Viewer，而JadClipse是默认的。 全部配置完成，下面我们可以查看源码了，选择需要查看的类，按F3即可查看源码</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://www.hollischuang.com/archives/58" target="_blank" rel="external">Java的反编译</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/9e38f648aacd" target="_blank" rel="external">反编译原理浅析</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是编译&quot;&gt;&lt;a href=&quot;#什么是编译&quot; class=&quot;headerlink&quot; title=&quot;什么是编译&quot;&gt;&lt;/a&gt;什么是编译&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;利用编译程序从源语言编写的源程序产生目标程序的过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用编译程序产生目标程序的动作。 编译就是把高级语言变成计算机可以识别的2进制语言，计算机只认识1和0，编译程序把人们熟悉的语言换成2进制的。 编译程序把一个源程序翻译成目标程序的工作过程分为五个阶段：词法分析；语法分析；语义检查和中间代码生成；代码优化；目标代码生成。主要是进行词法分析和语法分析，又称为源程序分析，分析过程中发现有语法错误，给出提示信息，具体参考 &lt;a href=&quot;http://www.qiuchengjia.cn/2016/07/24/JVM/Javac%E7%BC%96%E8%AF%91%E4%B8%8EJIT%E7%BC%96%E8%AF%91/&quot;&gt;Javac编译与JIT编译&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;什么是反编译&quot;&gt;&lt;a href=&quot;#什么是反编译&quot; class=&quot;headerlink&quot; title=&quot;什么是反编译&quot;&gt;&lt;/a&gt;什么是反编译&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;计算机软件反向工程（Reverse engineering）也称为计算机软件还原工程，是指通过对他人软件的目标程序（可执行程序）进行“逆向分析、研究”工作，以推导出他人的软件产品所使用的思路、原理、结构、算法、处理过程、运行方法等设计要素，某些特定情况下可能推导出源代码。反编译作为自己开发软件时的参考，或者直接用于自己的软件产品中&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
</feed>
