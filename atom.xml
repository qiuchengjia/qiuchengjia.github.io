<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>戎码人生</title>
  <subtitle>世界上有10种人，一种懂二进制，一种不懂二进制 ！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.qiuchengjia.cn/"/>
  <updated>2016-09-12T12:56:48.977Z</updated>
  <id>http://www.qiuchengjia.cn/</id>
  
  <author>
    <name>戎码人生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android美女拼图游戏</title>
    <link href="http://www.qiuchengjia.cn/2016/09/13/Android%E6%B8%B8%E6%88%8F/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8F/"/>
    <id>http://www.qiuchengjia.cn/2016/09/13/Android游戏/Android美女拼图游戏/</id>
    <published>2016-09-12T19:35:17.000Z</published>
    <updated>2016-09-12T12:56:48.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><p><a href="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE.apk" target="_blank" rel="external">游戏下载试玩</a></p>
</li>
<li><p><a href="https://github.com/qiuchengjia/Android-BeautyGame" target="_blank" rel="external">Github</a> 喜欢的同学可以Star一下，非常感谢</p>
</li>
<li><p>把图片切分很多份，点击交换拼成一张完整的；这样关卡也很容易设计，3<em>3；4</em>4；5<em>5；6</em>6；一直下去</p>
</li>
<li><p>效果</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE1.gif" alt=""></center>

<ul>
<li>加了个切换动画，效果还是不错的，其实游戏就是自定义了一个控件，下面我们开始自定义之旅</li>
</ul>
<a id="more"></a>
<h2 id="游戏的设计"><a href="#游戏的设计" class="headerlink" title="游戏的设计"></a>游戏的设计</h2><p>首先我们分析下如何设计这款游戏：</p>
<ol>
<li><p>我们需要一个容器，可以放这些图片的块块，为了方便，我们准备使用RelativeLayout配合addRule实现</p>
</li>
<li><p>每个图片的块块，我们准备使用ImageView</p>
</li>
<li><p>点击交换，我们准备使用传统的TranslationAnimation来实现</p>
</li>
</ol>
<p>有了初步的设计，感觉这游戏so easy~</p>
<h2 id="游戏布局的实现"><a href="#游戏布局的实现" class="headerlink" title="游戏布局的实现"></a>游戏布局的实现</h2><p>首先，我们准备实现能够把一张图片，切成n*n份，放在指定的位置；<br>我们只需要设置n这个数字，然后根据布局的宽或者高其中的小值，除以n，减去一些边距就可以得到我们ImageView的宽和高了~~</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE.apk&quot;&gt;游戏下载试玩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/qiuchengjia/Android-BeautyGame&quot;&gt;Github&lt;/a&gt; 喜欢的同学可以Star一下，非常感谢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把图片切分很多份，点击交换拼成一张完整的；这样关卡也很容易设计，3&lt;em&gt;3；4&lt;/em&gt;4；5&lt;em&gt;5；6&lt;/em&gt;6；一直下去&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;效果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Android%E7%BE%8E%E5%A5%B3%E6%8B%BC%E5%9B%BE1.gif&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;加了个切换动画，效果还是不错的，其实游戏就是自定义了一个控件，下面我们开始自定义之旅&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android游戏" scheme="http://www.qiuchengjia.cn/categories/Android%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="Android游戏" scheme="http://www.qiuchengjia.cn/tags/Android%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android Broadcast广播机制分析</title>
    <link href="http://www.qiuchengjia.cn/2016/09/12/Android/Android-Broadcast%E5%B9%BF%E6%92%AD%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/"/>
    <id>http://www.qiuchengjia.cn/2016/09/12/Android/Android-Broadcast广播机制分析/</id>
    <published>2016-09-11T19:06:46.000Z</published>
    <updated>2016-09-11T11:22:08.932Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>基于Android 6.0的源码剖析， 分析android广播的发送与接收流程</p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>广播(Broadcast)机制用于进程/线程间通信，广播分为广播发送和广播接收两个过程，其中广播接收者BroadcastReceiver便是Android四大组件之一</p>
<p><strong>BroadcastReceiver分为两类：</strong></p>
<ul>
<li><p>静态广播接收者：通过AndroidManifest.xml的标签来申明的BroadcastReceiver</p>
</li>
<li><p>动态广播接收者：通过AMS.registerReceiver()方式注册的BroadcastReceiver，动态注册更为灵活，可在不需要时通过unregisterReceiver()取消注册</p>
</li>
</ul>
<p><strong>从广播发送方式可分为三类：</strong></p>
<ul>
<li><p>普通广播：通过Context.sendBroadcast()发送，可并行处理</p>
</li>
<li><p>有序广播：通过Context.sendOrderedBroadcast()发送，串行处理</p>
</li>
<li><p>Sticky广播：通过Context.sendStickyBroadcast()发送</p>
</li>
</ul>
<h2 id="注册广播"><a href="#注册广播" class="headerlink" title="注册广播"></a>注册广播</h2><h3 id="registerReceiver"><a href="#registerReceiver" class="headerlink" title="registerReceiver"></a>registerReceiver</h3><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;基于Android 6.0的源码剖析， 分析android广播的发送与接收流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;广播(Broadcast)机制用于进程/线程间通信，广播分为广播发送和广播接收两个过程，其中广播接收者BroadcastReceiver便是Android四大组件之一&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BroadcastReceiver分为两类：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态广播接收者：通过AndroidManifest.xml的标签来申明的BroadcastReceiver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态广播接收者：通过AMS.registerReceiver()方式注册的BroadcastReceiver，动态注册更为灵活，可在不需要时通过unregisterReceiver()取消注册&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;从广播发送方式可分为三类：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;普通广播：通过Context.sendBroadcast()发送，可并行处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有序广播：通过Context.sendOrderedBroadcast()发送，串行处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sticky广播：通过Context.sendStickyBroadcast()发送&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;注册广播&quot;&gt;&lt;a href=&quot;#注册广播&quot; class=&quot;headerlink&quot; title=&quot;注册广播&quot;&gt;&lt;/a&gt;注册广播&lt;/h2&gt;&lt;h3 id=&quot;registerReceiver&quot;&gt;&lt;a href=&quot;#registerReceiver&quot; class=&quot;headerlink&quot; title=&quot;registerReceiver&quot;&gt;&lt;/a&gt;registerReceiver&lt;/h3&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Service完全解析</title>
    <link href="http://www.qiuchengjia.cn/2016/09/12/Android/Android-Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.qiuchengjia.cn/2016/09/12/Android/Android-Service完全解析/</id>
    <published>2016-09-11T17:18:03.000Z</published>
    <updated>2016-09-11T10:41:58.028Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Service 是一个可以在后台执行长时间运行操作而不使用用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行</li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul>
<li>官方图解 </li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%901.png" alt=""></center>


<a id="more"></a>
<h3 id="onStartCommand"><a href="#onStartCommand" class="headerlink" title="onStartCommand()"></a>onStartCommand()</h3><ul>
<li>当另一个组件（如 Activity）通过调用 startService() 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 stopSelf() 或 stopService() 来停止服务。（如果您只想提供绑定，则无需实现此方法。）</li>
</ul>
<h3 id="onBind"><a href="#onBind" class="headerlink" title="onBind()"></a>onBind()</h3><ul>
<li>当另一个组件想通过调用 bindService() 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 IBinder 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 null</li>
</ul>
<h3 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate()"></a>onCreate()</h3><ul>
<li>首次创建服务时，系统将调用此方法来执行一次性设置程序（在调用 onStartCommand() 或 onBind() 之前）。如果服务已在运行，则不会调用此方法</li>
</ul>
<h3 id="onDestroy"><a href="#onDestroy" class="headerlink" title="onDestroy()"></a>onDestroy()</h3><ul>
<li>当服务不再使用且将被销毁时，系统将调用此方法。服务应该实现此方法来清理所有资源，如线程、注册的侦听器、接收器等。 这是服务接收的最后一个调用</li>
</ul>
<h2 id="Service的基本用法"><a href="#Service的基本用法" class="headerlink" title="Service的基本用法"></a>Service的基本用法</h2><ul>
<li><p>关于Service最基本的用法自然就是如何启动一个Service了，启动Service的方法和启动Activity很类似，都需要借助Intent来实现，下面我们就通过一个具体的例子来看一下</p>
</li>
<li><p>新建一个Android项目，项目名就叫ServiceTest，这里我选择使用4.0的API</p>
</li>
<li><p>然后新建一个MyService继承自Service，并重写父类的onCreate()、onStartCommand()和onDestroy()方法，如下所示：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyService"</span>;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate();  </div><div class="line">        Log.d(TAG, <span class="string">"onCreate() executed"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;  </div><div class="line">        Log.d(TAG, <span class="string">"onStartCommand() executed"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        Log.d(TAG, <span class="string">"onDestroy() executed"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以看到，我们只是在onCreate()、onStartCommand()和onDestroy()方法中分别打印了一句话，并没有进行其它任何的操作。<br>然后打开或新建activity_main.xml作为程序的主布局文件，代码如下所示：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"  </div><div class="line">    android:layout_width="match_parent"  </div><div class="line">    android:layout_height="match_parent"  </div><div class="line">    android:orientation="vertical" &gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/start_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Start Service" /&gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/stop_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Stop Service" /&gt;  </div><div class="line">  </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>我们在布局文件中加入了两个按钮，一个用于启动Service，一个用于停止Service</p>
</li>
<li><p>然后打开或新建MainActivity作为程序的主Activity，在里面加入启动Service和停止Service的逻辑，代码如下所示：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button startService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button stopService;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        startService = (Button) findViewById(R.id.start_service);  </div><div class="line">        stopService = (Button) findViewById(R.id.stop_service);  </div><div class="line">        startService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        stopService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;  </div><div class="line">        <span class="keyword">case</span> R.id.start_service:  </div><div class="line">            Intent startIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            startService(startIntent);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> R.id.stop_service:  </div><div class="line">            Intent stopIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            stopService(stopIntent);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">default</span>:  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>可以看到，在Start Service按钮的点击事件里，我们构建出了一个Intent对象，并调用startService()方法来启动MyService。然后在Stop Serivce按钮的点击事件里，我们同样构建出了一个Intent对象，并调用stopService()方法来停止MyService。代码的逻辑非常简单，相信不需要我再多做解释了吧</p>
</li>
<li><p>另外需要注意，项目中的每一个Service都必须在AndroidManifest.xml中注册才行，所以还需要编辑AndroidManifest.xml文件，代码如下所示：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">package</span>=<span class="string">"com.example.servicetest"</span>  </div><div class="line">    <span class="attr">android:versionCode</span>=<span class="string">"1"</span>  </div><div class="line">    <span class="attr">android:versionName</span>=<span class="string">"1.0"</span> &gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span>  </span></div><div class="line">        <span class="attr">android:minSdkVersion</span>=<span class="string">"14"</span>  </div><div class="line">        <span class="attr">android:targetSdkVersion</span>=<span class="string">"17"</span> /&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">application</span>  </span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span>  </div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span>  </div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>  </div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> &gt;  </div><div class="line">          </div><div class="line">    ……  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">"com.example.servicetest.MyService"</span> &gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>这样的话，一个简单的带有Service功能的程序就写好了，现在我们将程序运行起来，并点击一下Start Service按钮，可以看到LogCat的打印日志如下：</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService onStartCommand() executed</p>
</blockquote>
<ul>
<li><p>也就是说，当启动一个Service的时候，会调用该Service中的onCreate()和onStartCommand()方法</p>
</li>
<li><p>那么如果我再点击一次Start Service按钮呢？这个时候的打印日志如下：</p>
</li>
</ul>
<blockquote>
<p>MyService onStartCommand() executed</p>
</blockquote>
<ul>
<li>可以看到，这次只有onStartCommand()方法执行了，onCreate()方法并没有执行，为什么会这样呢？这是由于onCreate()方法只会在Service第一次被创建的时候调用，如果当前Service已经被创建过了，不管怎样调用startService()方法，onCreate()方法都不会再执行。因此你可以再多点击几次Start Service按钮试一次，每次都只会有onStartCommand()方法中的打印日志。<br>我们还可以到手机的应用程序管理界面来检查一下MyService是不是正在运行，如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%902.png" alt=""></center>

<ul>
<li>恩，MyService确实是正在运行的，即使它的内部并没有执行任何的逻辑。<br>回到ServiceTest程序，然后点击一下Stop Service按钮就可以将MyService停止掉了</li>
</ul>
<h2 id="Service和Activity通信"><a href="#Service和Activity通信" class="headerlink" title="Service和Activity通信"></a>Service和Activity通信</h2><ul>
<li><p>上面我们学习了Service的基本用法，启动Service之后，就可以在onCreate()或onStartCommand()方法里去执行一些具体的逻辑了。不过这样的话Service和Activity的关系并不大，只是Activity通知了Service一下：“你可以启动了。”然后Service就去忙自己的事情了。那么有没有什么办法能让它们俩的关联更多一些呢？比如说在Activity中可以指定让Service去执行什么任务。当然可以，只需要让Activity和Service建立关联就好了</p>
</li>
<li><p>观察MyService中的代码，你会发现一直有一个onBind()方法我们都没有使用到，这个方法其实就是用于和Activity建立关联的，修改MyService中的代码，如下所示：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyService"</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> MyBinder mBinder = <span class="keyword">new</span> MyBinder();  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate();  </div><div class="line">        Log.d(TAG, <span class="string">"onCreate() executed"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;  </div><div class="line">        Log.d(TAG, <span class="string">"onStartCommand() executed"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        Log.d(TAG, <span class="string">"onDestroy() executed"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mBinder;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">()</span> </span>&#123;  </div><div class="line">            Log.d(<span class="string">"TAG"</span>, <span class="string">"startDownload() executed"</span>);  </div><div class="line">            <span class="comment">// 执行具体的下载任务  </span></div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里我们新增了一个MyBinder类继承自Binder类，然后在MyBinder中添加了一个startDownload()方法用于在后台执行下载任务，当然这里并不是真正地去下载某个东西，只是做个测试，所以startDownload()方法只是打印了一行日志。<br>然后修改activity_main.xml中的代码，在布局文件中添加用于绑定Service和取消绑定Service的按钮：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"  </div><div class="line">    android:layout_width="match_parent"  </div><div class="line">    android:layout_height="match_parent"  </div><div class="line">    android:orientation="vertical" &gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/start_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Start Service" /&gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/stop_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Stop Service" /&gt;  </div><div class="line">  </div><div class="line">    &lt;Button  </div><div class="line">        android:id="@+id/bind_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Bind Service" /&gt;  </div><div class="line">      </div><div class="line">    &lt;Button   </div><div class="line">        android:id="@+id/unbind_service"  </div><div class="line">        android:layout_width="match_parent"  </div><div class="line">        android:layout_height="wrap_content"  </div><div class="line">        android:text="Unbind Service"  </div><div class="line">        /&gt;  </div><div class="line">      </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<ul>
<li>接下来再修改MainActivity中的代码，让MainActivity和MyService之间建立关联，代码如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button startService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button stopService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button bindService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Button unbindService;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> MyService.MyBinder myBinder;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;  </div><div class="line">            myBinder = (MyService.MyBinder) service;  </div><div class="line">            myBinder.startDownload();  </div><div class="line">        &#125;  </div><div class="line">    &#125;;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        startService = (Button) findViewById(R.id.start_service);  </div><div class="line">        stopService = (Button) findViewById(R.id.stop_service);  </div><div class="line">        bindService = (Button) findViewById(R.id.bind_service);  </div><div class="line">        unbindService = (Button) findViewById(R.id.unbind_service);  </div><div class="line">        startService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        stopService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        bindService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        unbindService.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;  </div><div class="line">        <span class="keyword">case</span> R.id.start_service:  </div><div class="line">            Intent startIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            startService(startIntent);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> R.id.stop_service:  </div><div class="line">            Intent stopIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            stopService(stopIntent);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> R.id.bind_service:  </div><div class="line">            Intent bindIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">            bindService(bindIntent, connection, BIND_AUTO_CREATE);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> R.id.unbind_service:  </div><div class="line">            unbindService(connection);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">default</span>:  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>可以看到，这里我们首先创建了一个ServiceConnection的匿名类，在里面重写了onServiceConnected()方法和onServiceDisconnected()方法，这两个方法分别会在Activity与Service建立关联和解除关联的时候调用。在onServiceConnected()方法中，我们又通过向下转型得到了MyBinder的实例，有了这个实例，Activity和Service之间的关系就变得非常紧密了。现在我们可以在Activity中根据具体的场景来调用MyBinder中的任何public方法，即实现了Activity指挥Service干什么Service就去干什么的功能。<br>当然，现在Activity和Service其实还没关联起来了呢，这个功能是在Bind Service按钮的点击事件里完成的。可以看到，这里我们仍然是构建出了一个Intent对象，然后调用bindService()方法将Activity和Service进行绑定。bindService()方法接收三个参数，第一个参数就是刚刚构建出的Intent对象，第二个参数是前面创建出的ServiceConnection的实例，第三个参数是一个标志位，这里传入BIND_AUTO_CREATE表示在Activity和Service建立关联后自动创建Service，这会使得MyService中的onCreate()方法得到执行，但onStartCommand()方法不会执行.<br>然后如何我们想解除Activity和Service之间的关联怎么办呢？调用一下unbindService()方法就可以了，这也是Unbind Service按钮的点击事件里实现的逻辑.</p>
</li>
<li><p>现在让我们重新运行一下程序吧，在MainActivity中点击一下Bind Service按钮，LogCat里的打印日志如下所示：</p>
</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService startDownload() executed</p>
</blockquote>
<ul>
<li>另外需要注意，任何一个Service在整个应用程序范围内都是通用的，即MyService不仅可以和MainActivity建立关联，还可以和任何一个Activity建立关联，而且在建立关联时它们都可以获取到相同的MyBinder实例</li>
</ul>
<h2 id="如何销毁Service"><a href="#如何销毁Service" class="headerlink" title="如何销毁Service"></a>如何销毁Service</h2><ul>
<li>在Service的基本用法这一部分，我们介绍了销毁Service最简单的一种情况，点击Start Service按钮启动Service，再点击Stop Service按钮停止Service，这样MyService就被销毁了，可以看到打印日志如下所示：</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService onStartCommand() executed<br>MyService onDestroy() executed</p>
</blockquote>
<ul>
<li><p>那么如果我们是点击的Bind Service按钮呢？由于在绑定Service的时候指定的标志位是BIND_AUTO_CREATE，说明点击Bind Service按钮的时候Service也会被创建，这时应该怎么销毁Service呢？其实也很简单，点击一下Unbind Service按钮，将Activity和Service的关联解除就可以了</p>
</li>
<li><p>先点击一下Bind Service按钮，再点击一下Unbind Service按钮，打印日志如下所示：</p>
</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService startDownload() executed<br>MyService onDestroy() executed</p>
</blockquote>
<ul>
<li><p>以上这两种销毁的方式都很好理解。那么如果我们既点击了Start Service按钮，又点击了Bind Service按钮会怎么样呢？这个时候你会发现，不管你是单独点击Stop Service按钮还是Unbind Service按钮，Service都不会被销毁，必要将两个按钮都点击一下，Service才会被销毁。也就是说，点击Stop Service按钮只会让Service停止，点击Unbind Service按钮只会让Service和Activity解除关联，一个Service必须要在既没有和任何Activity关联又处理停止状态的时候才会被销毁</p>
</li>
<li><p>为了证实一下，我们在Stop Service和Unbind Service按钮的点击事件里面加入一行打印日志：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">    <span class="keyword">switch</span> (v.getId()) &#123;  </div><div class="line">    <span class="keyword">case</span> R.id.start_service:  </div><div class="line">        Intent startIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">        startService(startIntent);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> R.id.stop_service:  </div><div class="line">        Log.d(<span class="string">"MyService"</span>, <span class="string">"click Stop Service button"</span>);  </div><div class="line">        Intent stopIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">        stopService(stopIntent);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> R.id.bind_service:  </div><div class="line">        Intent bindIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </div><div class="line">        bindService(bindIntent, connection, BIND_AUTO_CREATE);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">case</span> R.id.unbind_service:  </div><div class="line">        Log.d(<span class="string">"MyService"</span>, <span class="string">"click Unbind Service button"</span>);  </div><div class="line">        unbindService(connection);  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    <span class="keyword">default</span>:  </div><div class="line">        <span class="keyword">break</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后重新运行程序，先点击一下Start Service按钮，再点击一下Bind Service按钮，这样就将Service启动起来，并和Activity建立了关联。然后点击Stop Service按钮后Service并不会销毁，再点击一下Unbind Service按钮，Service就会销毁了，打印日志如下所示：</li>
</ul>
<blockquote>
<p>MyService onCreate() executed<br>MyService onStartCommand() executed<br>MyService startDownload() executed<br>MyService click Stop Service button<br>MyService click Unbind Service button<br>MyService onDestroy() executed</p>
</blockquote>
<ul>
<li>我们应该始终记得在Service的onDestroy()方法里去清理掉那些不再使用的资源，防止在Service被销毁后还会有一些不再使用的对象仍占用着内存</li>
</ul>
<h2 id="Service和Thread的关系"><a href="#Service和Thread的关系" class="headerlink" title="Service和Thread的关系"></a>Service和Thread的关系</h2><ul>
<li><p>不少Android初学者都可能会有这样的疑惑，Service和Thread到底有什么关系呢？什么时候应该用Service，什么时候又应该用Thread？答案可能会有点让你吃惊，因为Service和Thread之间没有任何关系！<br>之所以有不少人会把它们联系起来，主要就是因为Service的后台概念。Thread我们大家都知道，是用于开启一个子线程，在这里去执行一些耗时操作就不会阻塞主线程的运行。而Service我们最初理解的时候，总会觉得它是用来处理一些后台任务的，一些比较耗时的操作也可以放在这里运行，这就会让人产生混淆了。但是，如果我告诉你Service其实是运行在主线程里的，你还会觉得它和Thread有什么关系吗？让我们看一下这个残酷的事实吧</p>
</li>
<li><p>在MainActivity的onCreate()方法里加入一行打印当前线程id的语句：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.d(<span class="string">"MyService"</span>, <span class="string">"MainActivity thread id is "</span> + Thread.currentThread().getId());</div></pre></td></tr></table></figure>
<ul>
<li>然后在MyService的onCreate()方法里也加入一行打印当前线程id的语句：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.d(<span class="string">"MyService"</span>, <span class="string">"MyService thread id is "</span> + Thread.currentThread().getId());</div></pre></td></tr></table></figure>
<ul>
<li>现在重新运行一下程序，并点击Start Service按钮，会看到如下打印日志：</li>
</ul>
<blockquote>
<p>MyService MainActivity thread id is 1<br>MyService MyService thread id is 1</p>
</blockquote>
<ul>
<li><p>可以看到，它们的线程id完全是一样的，由此证实了Service确实是运行在主线程里的，也就是说如果你在Service里编写了非常耗时的代码，程序必定会出现ANR的。<br>你可能会惊呼，这不是坑爹么！？那我要Service又有何用呢？其实大家不要把后台和子线程联系在一起就行了，这是两个完全不同的概念。Android的后台就是指，它的运行是完全不依赖UI的。即使Activity被销毁，或者程序被关闭，只要进程还在，Service就可以继续运行。比如说一些应用程序，始终需要与服务器之间始终保持着心跳连接，就可以使用Service来实现。你可能又会问，前面不是刚刚验证过Service是运行在主线程里的么？在这里一直执行着心跳连接，难道就不会阻塞主线程的运行吗？当然会，但是我们可以在Service中再创建一个子线程，然后在这里去处理耗时逻辑就没问题了。<br>额，既然在Service里也要创建一个子线程，那为什么不直接在Activity里创建呢？这是因为Activity很难对Thread进行控制，当Activity被销毁之后，就没有任何其它的办法可以再重新获取到之前创建的子线程的实例。而且在一个Activity中创建的子线程，另一个Activity无法对其进行操作。但是Service就不同了，所有的Activity都可以与Service进行关联，然后可以很方便地操作其中的方法，即使Activity被销毁了，之后只要重新与Service建立关联，就又能够获取到原有的Service中Binder的实例。因此，使用Service来处理后台任务，Activity就可以放心地finish，完全不需要担心无法对后台任务进行控制的情况。</p>
</li>
<li><p>一个比较标准的Service就可以写成：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;  </div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">            <span class="comment">// 开始执行后台任务  </span></div><div class="line">        &#125;  </div><div class="line">    &#125;).start();  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                <span class="comment">// 执行具体的下载任务  </span></div><div class="line">            &#125;  </div><div class="line">        &#125;).start();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建前台Service"><a href="#创建前台Service" class="headerlink" title="创建前台Service"></a>创建前台Service</h2><ul>
<li>Service几乎都是在后台运行的，一直以来它都是默默地做着辛苦的工作。但是Service的系统优先级还是比较低的，当系统出现内存不足情况时，就有可能会回收掉正在后台运行的Service。如果你希望Service可以一直保持运行状态，而不会由于系统内存不足的原因导致被回收，就可以考虑使用前台Service。前台Service和普通Service最大的区别就在于，它会一直有一个正在运行的图标在系统的状态栏显示，下拉状态栏后可以看到更加详细的信息，非常类似于通知的效果。当然有时候你也可能不仅仅是为了防止Service被回收才使用前台Service，有些项目由于特殊的需求会要求必须使用前台Service，比如说墨迹天气，它的Service在后台更新天气数据的同时，还会在系统状态栏一直显示当前天气的信息，如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%903.png" alt=""></center>

<ul>
<li>那么我们就来看一下如何才能创建一个前台Service吧，其实并不复杂，修改MyService中的代码，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyService"</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> MyBinder mBinder = <span class="keyword">new</span> MyBinder();  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        Log.d(TAG, <span class="string">"onCreate() executed"</span>);</div><div class="line">        Log.d(<span class="string">"MyService"</span>, <span class="string">"MyService thread id is "</span> +</div><div class="line">        Thread.currentThread().getId());</div><div class="line">        Notification.Builder builder = <span class="keyword">new</span> Notification.Builder(<span class="keyword">this</span>);</div><div class="line">        PendingIntent contentIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>,</div><div class="line">                <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class), <span class="number">0</span>);</div><div class="line">        builder.setContentIntent(contentIntent);</div><div class="line">        builder.setSmallIcon(R.mipmap.ic_launcher);</div><div class="line">        builder.setTicker(<span class="string">"Foreground Service Start"</span>);</div><div class="line">        builder.setContentTitle(<span class="string">"Foreground Service"</span>);</div><div class="line">        builder.setContentText(<span class="string">"Make this service run in the foreground."</span>);</div><div class="line">        Notification notification = builder.build();</div><div class="line">        startForeground(BIND_AUTO_CREATE,notification);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    .........  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里只是修改了MyService中onCreate()方法的代码。可以看到，我们首先创建了一个Notification对象，然后调用了它的setLatestEventInfo()方法来为通知初始化布局和数据，并在这里设置了点击通知后就打开MainActivity。然后调用startForeground()方法就可以让MyService变成一个前台Service，并会将通知的图片显示出来。<br>现在重新运行一下程序，并点击Start Service或Bind Service按钮，MyService就会以前台Service的模式启动了，并且在系统状态栏会弹出一个通栏图标，下拉状态栏后可以看到通知的详细内容，如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%907.png" alt=""></center>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://developer.android.com/guide/components/services.html#Basics" target="_blank" rel="external">Android官方文档之Service</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/2fb6eb14fdec" target="_blank" rel="external">Android 服务两种启动方式的区别</a></p>
</li>
<li><p><a href="http://blog.csdn.net/guolin_blog/article/details/11952435" target="_blank" rel="external"> Android Service完全解析，关于服务你所需知道的一切(上)</a></p>
</li>
<li><p><a href="http://blog.csdn.net/guolin_blog/article/details/9797169" target="_blank" rel="external"> Android Service完全解析，关于服务你所需知道的一切(下)</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Service 是一个可以在后台执行长时间运行操作而不使用用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官方图解 &lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Android%20Service%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%901.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Activity生命周期详解</title>
    <link href="http://www.qiuchengjia.cn/2016/09/11/Android/Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.qiuchengjia.cn/2016/09/11/Android/Activity生命周期详解/</id>
    <published>2016-09-10T20:17:13.000Z</published>
    <updated>2016-09-10T13:37:52.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul>
<li>官方图解</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/activity_lifecycle.png" alt=""></center>

<a id="more"></a>
<h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><p>这张图列出了Activity生命周期最主要的一些方法，启动后依次执行：</p>
<p>onCreate –&gt; onStart –&gt; onResume –&gt; onPause –&gt; onStop –&gt; onDestroy</p>
<p>信很多人也都已经知道以上方法与执行顺序，但是Activity还有其他方法，如onContentChanged， onPostCreate， onPostResume， onConfigurationChanged， onSaveInstanceState， onRestoreInstanceState</p>
<h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String TAG=<span class="string">"MainActivity"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 首次创建Activity的时调用</div><div class="line">     * <span class="doctag">@param</span> savedInstanceState the saved instance state</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Log.d(<span class="string">"TAG"</span>,<span class="string">"onCreate"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当Activity的布局改动时，即setContentView()或者addContentView()</div><div class="line">     * 方法执行完毕时就会调用该方法</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContentChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onContentChanged();</div><div class="line">        Log.d(TAG, <span class="string">"onContentChanged: "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在Activity即将对用户可见时调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStart();</div><div class="line">        Log.d(<span class="string">"TAG"</span>,<span class="string">"onStart"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在 Activity 已停止并即将再次启动前调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.onRestart();</div><div class="line">        Log.d(TAG, <span class="string">"onRestart: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指onCreate方法彻底执行完毕的回调</div><div class="line">     * <span class="doctag">@param</span> savedInstanceState the saved instance state</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPostCreate(savedInstanceState);</div><div class="line">        Log.d(TAG, <span class="string">"onPostCreate: "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在Activity即将开始与用户交互时调用，此时，Activity 处于</div><div class="line">     * Activity 堆栈的顶层，并具有用户输入焦点</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        Log.d(TAG, <span class="string">"onResume"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPostResume();</div><div class="line">        Log.d(TAG, <span class="string">"onPostResume: "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当系统即将开始继续另一个 Activity 时调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        Log.d(TAG, <span class="string">"onPause"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Activity 对用户不再可见时调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">        Log.d(TAG, <span class="string">"onStop: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在 Activity 被销毁前调用</div><div class="line">     * <span class="doctag">@author</span> qiu  博客：www.qiuchengjia.cn 时间：2016-09-10</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        Log.d(TAG, <span class="string">"onDestroy: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onConfigurationChanged(newConfig);</div><div class="line">        Log.d(TAG, <span class="string">"onConfigurationChanged: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line">        Log.d(TAG, <span class="string">"onSaveInstanceState: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span></span></div><div class="line">    <span class="params">(Bundle savedInstanceState)</span>&#123;</div><div class="line">        <span class="keyword">super</span>.onRestoreInstanceState(savedInstanceState);</div><div class="line">        Log.d(TAG, <span class="string">"onRestoreInstanceState: "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>程序启动运行并结束上述生命周期的方法执行顺序是这样的：</p>
<p>  onCreate –&gt; onContentChanged –&gt; onStart –&gt; onPostCreate –&gt; onResume –&gt; onPostResume –&gt; onPause –&gt; onStop –&gt; onDestroy</p>
</li>
<li><p>具体参考 <a href="https://developer.android.com/guide/components/activities.html?hl=zh-cn#Creating" target="_blank" rel="external">Activity</a> 和 <a href="http://stormzhang.com/android/2014/09/14/activity-lifecycle1/" target="_blank" rel="external">ACTIVITY生命周期详解一</a></p>
</li>
</ul>
<h2 id="生命周期具体场景"><a href="#生命周期具体场景" class="headerlink" title="生命周期具体场景"></a>生命周期具体场景</h2><h3 id="首次启动"><a href="#首次启动" class="headerlink" title="首次启动"></a>首次启动</h3><ul>
<li>onCreate –&gt; onStart –&gt; onResume</li>
</ul>
<h3 id="按下返回按键"><a href="#按下返回按键" class="headerlink" title="按下返回按键"></a>按下返回按键</h3><ul>
<li>onPause –&gt; onStop –&gt; onDestroy</li>
</ul>
<h3 id="按Home键"><a href="#按Home键" class="headerlink" title="按Home键"></a>按Home键</h3><ul>
<li>onPause –&gt; onSaveInstanceState –&gt; onStop</li>
</ul>
<h3 id="再次打开"><a href="#再次打开" class="headerlink" title="再次打开"></a>再次打开</h3><ul>
<li>onRestart –&gt; onStart –&gt; onResume</li>
</ul>
<h3 id="屏幕旋转"><a href="#屏幕旋转" class="headerlink" title="屏幕旋转"></a>屏幕旋转</h3><ul>
<li><p>如果你不做任何配置</p>
<p>  启动Activity会执行如下方法：</p>
<p>  onCreate –&gt; onStart –&gt; onResume</p>
<p>  之后旋转屏幕，则Activity会被销毁并重新创建，之后便会执行如下方法：</p>
<p>  onPause –&gt; onSaveInstanceState –&gt; onStop –&gt; onDestroy –&gt; onCreate –&gt; onStart –&gt; onRestoreInstanceState –&gt; onResume</p>
</li>
<li><p>在AndroidManifest配置文件里声明android:configChanges属性<br>默认屏幕旋转会重新创建，当然可以通过在配置文件里加上如下代码：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">android:configChanges="keyboardHidden|orientation|screenSize"</div><div class="line">（sdk&gt;13时需加上screenSize）</div></pre></td></tr></table></figure>
<p>这个时候再旋转屏幕便不会销毁Activity，这时候再旋转屏幕可以看到只会执行onConfigurationChanged方法，有什么在屏幕旋转的逻辑可以重写这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (newConfig.orientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) &#123;</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span></span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">super</span>.onConfigurationChanged(newConfig);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="FirstActivity打开SecondActivity"><a href="#FirstActivity打开SecondActivity" class="headerlink" title="FirstActivity打开SecondActivity"></a>FirstActivity打开SecondActivity</h3><ul>
<li><p>FirstActivity打开SecondActivity，这时候FirstActivity生命周期的方法是这样的： onPause –&gt; onSaveInstanceState –&gt; onStop, 这个时候在SecondActivity按返回键，FirstActivity会有以下几种情况：</p>
</li>
<li><p>正常情况下会执行： onRestart -&gt; onStart -&gt; onResume</p>
</li>
<li><p>当系统由于要回收内存而把 activity 销毁时</p>
<p>  Activity在onPause或者onStop状态下都有可能遇到由于突发事件系统需要回收内存，之后的onDestroy方法便不会再执行，这时候会执行： onCreate –&gt; onStart –&gt; onRestoreInstanceState –&gt; onResume</p>
</li>
</ul>
<h2 id="保存-Activity-状态"><a href="#保存-Activity-状态" class="headerlink" title="保存 Activity 状态"></a>保存 Activity 状态</h2><ul>
<li><p>当系统为了恢复内存而销毁某项 Activity 时，Activity 对象也会被销毁，因此系统在继续 Activity 时根本无法让其状态保持完好，而是必须在用户返回Activity时重建 Activity 对象。但用户并不知道系统销毁 Activity 后又对其进行了重建，因此他们很可能认为 Activity 状态毫无变化。 在这种情况下，您可以实现另一个回调方法对有关 Activity 状态的信息进行保存，以确保有关 Activity 状态的重要信息得到保留：onSaveInstanceState()</p>
</li>
<li><p>系统会先调用 onSaveInstanceState()，然后再使 Activity 变得易于销毁。系统会向该方法传递一个 Bundle，您可以在其中使用 putString() 和 putInt() 等方法以名称-值对形式保存有关 Activity 状态的信息。然后，如果系统终止您的应用进程，并且用户返回您的 Activity，则系统会重建该 Activity，并将 Bundle 同时传递给 onCreate() 和 onRestoreInstanceState()。您可以使用上述任一方法从 Bundle 提取您保存的状态并恢复该 Activity 状态。如果没有状态信息需要恢复，则传递给您的 Bundle 是空值（如果是首次创建该 Activity，就会出现这种情况）</p>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3.png" alt=""></center>

<ul>
<li>您只需旋转设备，让屏幕方向发生变化，就能有效地测试您的应用的状态恢复能力。 当屏幕方向变化时，系统会销毁并重建 Activity，以便应用可供新屏幕配置使用的备用资源。 单凭这一理由，您的 Activity 在重建时能否完全恢复其状态就显得非常重要，因为用户在使用应用时经常需要旋转屏幕</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://stormzhang.com/android/2014/09/14/activity-lifecycle1/" target="_blank" rel="external">ACTIVITY生命周期详解一</a></p>
</li>
<li><p><a href="http://stormzhang.com/android/2014/09/17/android-lifecycle2/" target="_blank" rel="external">ACTIVITY生命周期详解二</a></p>
</li>
<li><p><a href="https://developer.android.com/guide/components/activities.html?hl=zh-cn#Creating" target="_blank" rel="external">Android官方文档之Activity</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官方图解&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/activity_lifecycle.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android学习之路</title>
    <link href="http://www.qiuchengjia.cn/2016/09/11/Android/Android%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>http://www.qiuchengjia.cn/2016/09/11/Android/Android学习之路/</id>
    <published>2016-09-10T19:58:11.000Z</published>
    <updated>2016-09-10T12:08:27.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习路线图"><a href="#学习路线图" class="headerlink" title="学习路线图"></a>学习路线图</h2><ul>
<li>一张图搞定，非常全面</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Android%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF.png" alt=""></center>


<h2 id="扩展资料"><a href="#扩展资料" class="headerlink" title="扩展资料"></a>扩展资料</h2><ul>
<li><a href="http://gold.xitu.io/entry/57566aca530fd30068150da3" target="_blank" rel="external">Android 开发书籍推荐 &amp; 学习路线图 &amp; 资料汇整</a></li>
</ul>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习路线图&quot;&gt;&lt;a href=&quot;#学习路线图&quot; class=&quot;headerlink&quot; title=&quot;学习路线图&quot;&gt;&lt;/a&gt;学习路线图&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一张图搞定，非常全面&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Android%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;


&lt;h2 id=&quot;扩展资料&quot;&gt;&lt;a href=&quot;#扩展资料&quot; class=&quot;headerlink&quot; title=&quot;扩展资料&quot;&gt;&lt;/a&gt;扩展资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gold.xitu.io/entry/57566aca530fd30068150da3&quot;&gt;Android 开发书籍推荐 &amp;amp; 学习路线图 &amp;amp; 资料汇整&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.qiuchengjia.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio自定义注释</title>
    <link href="http://www.qiuchengjia.cn/2016/08/22/AndroidStudio/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A/"/>
    <id>http://www.qiuchengjia.cn/2016/08/22/AndroidStudio/AndroidStudio自定义注释/</id>
    <published>2016-08-22T14:02:01.000Z</published>
    <updated>2016-08-23T08:19:24.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置类创建时自动生成头部注释"><a href="#设置类创建时自动生成头部注释" class="headerlink" title="设置类创建时自动生成头部注释"></a>设置类创建时自动生成头部注释</h2><ul>
<li>比如每次创建一个类自动在头部生成一个这样的头部,作为一个类的说明信息</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A1.png" alt=""></center>

<ul>
<li>设置方法</li>
</ul>
<p>点击设置—&gt;Editor–&gt;File and code Templates –&gt;Includes—&gt;File Header<br>代码：其中时间是自动获取的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Description: </div><div class="line"> * Data：$&#123;DATE&#125;-$&#123;TIME&#125;</div><div class="line"> * Blog：www.qiuchengjia.cn</div><div class="line"> * Author: qiu</div><div class="line"> */</div></pre></td></tr></table></figure>
<ul>
<li>效果和步骤</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A3.gif" alt=""></center>

<a id="more"></a>
<h2 id="设置快速生成方法注释的两种方式"><a href="#设置快速生成方法注释的两种方式" class="headerlink" title="设置快速生成方法注释的两种方式"></a>设置快速生成方法注释的两种方式</h2><h3 id="在studio-中自定义模板"><a href="#在studio-中自定义模板" class="headerlink" title="在studio 中自定义模板"></a>在studio 中自定义模板</h3><ul>
<li>在studio中自定义注释模板有一定的局限性，目前已知的studio的模板只能获取的时间，并不能获取返回值以及参数等信息，那是因为获取方法名的方法运行在方法内部才会生效,运行在方法外部是不能生效.<br>所以在方法外部用studio自定义模板的方式有一定的局限性</li>
</ul>
<ul>
<li>模板</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Description:$Method$</div><div class="line"> * Blog: www.qiuchengjia.cn</div><div class="line"> * Data: $Date$ $Time$</div><div class="line"> * <span class="doctag">@author</span>: qiu</div><div class="line"> */</div></pre></td></tr></table></figure>
<ul>
<li>点击设置—&gt;Editor–&gt;live Templates –&gt;点击+号 先创建1个组 再创建一个模板<br>编辑注释内容–&gt;声明作用域</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A2.gif" alt=""></center>

<h3 id="javaDoc自动生成注释"><a href="#javaDoc自动生成注释" class="headerlink" title="javaDoc自动生成注释"></a>javaDoc自动生成注释</h3><ul>
<li>如果我们想获取到方法名，参数返回值的信息，想让这些信息全部自动生成的注释里面的话，我们可以借助插件JavaDoc实现，安装插件javaDoc 安装完之后重启studio</li>
</ul>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><center><img src="http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A4.png" alt=""></center>

<h4 id="方法配置"><a href="#方法配置" class="headerlink" title="方法配置"></a>方法配置</h4><ul>
<li>我这儿拿method的来举例。我给每个方法的注解加 一个 作者以及时间</li>
</ul>
<ul>
<li><p><strong>@author qiu 博客：www.qiuchengjia.cn 时间：${.now?string[“yyyy-MM-dd”]}\n</strong></p>
</li>
<li><p><strong>原始配置</strong></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**\n</div><div class="line"> * $&#123;name&#125;<span class="tag">&lt;<span class="name">#if</span> <span class="attr">isNotVoid</span>&gt;</span> $&#123;return&#125;<span class="tag">&lt;/<span class="name">#if</span>&gt;</span>.\n</div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.typeParameters</span>?<span class="attr">has_content</span>&gt;</span>         * \n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.typeParameters</span> <span class="attr">as</span> <span class="attr">typeParameter</span>&gt;</span></div><div class="line">         * @param <span class="tag">&lt;<span class="name">$&#123;typeParameter.name&#125;</span>&gt;</span> the type parameter\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.parameterList.parameters</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.parameterList.parameters</span> <span class="attr">as</span> <span class="attr">parameter</span>&gt;</span></div><div class="line">         * @param $&#123;parameter.name&#125; the $&#123;paramNames[parameter.name]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">isNotVoid</span>&gt;</span></div><div class="line">         *\n</div><div class="line">         * @return the $&#123;return&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.throwsList.referenceElements</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.throwsList.referenceElements</span> <span class="attr">as</span> <span class="attr">exception</span>&gt;</span></div><div class="line">         * @throws $&#123;exception.referenceName&#125; the $&#123;exceptionNames[exception.referenceName]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"> */</div></pre></td></tr></table></figure>
<ul>
<li><strong>修改之后的配置</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/**\n</div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.typeParameters</span>?<span class="attr">has_content</span>&gt;</span>         * \n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.typeParameters</span> <span class="attr">as</span> <span class="attr">typeParameter</span>&gt;</span></div><div class="line">         * @param <span class="tag">&lt;<span class="name">$&#123;typeParameter.name&#125;</span>&gt;</span> the type parameter\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.parameterList.parameters</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.parameterList.parameters</span> <span class="attr">as</span> <span class="attr">parameter</span>&gt;</span></div><div class="line">         * @param $&#123;parameter.name&#125; the $&#123;paramNames[parameter.name]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">isNotVoid</span>&gt;</span></div><div class="line">         *\n</div><div class="line">         * @return the $&#123;return&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.throwsList.referenceElements</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.throwsList.referenceElements</span> <span class="attr">as</span> <span class="attr">exception</span>&gt;</span></div><div class="line">         * @throws $&#123;exception.referenceName&#125; the $&#123;exceptionNames[exception.referenceName]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line">         </div><div class="line">	\n * @author qiu\n</div><div class="line">\n *  博客：www.qiuchengjia.cn   时间：$&#123;.now?string["yyyy-MM-dd"]&#125;\n</div><div class="line">    </div><div class="line"> */</div></pre></td></tr></table></figure>
<h4 id="构造函数配置"><a href="#构造函数配置" class="headerlink" title="构造函数配置"></a>构造函数配置</h4><ul>
<li>原始配置</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**\n</div><div class="line"> * Instantiates a new $&#123;name&#125;.\n</div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.parameterList.parameters</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.parameterList.parameters</span> <span class="attr">as</span> <span class="attr">parameter</span>&gt;</span></div><div class="line">         * @param $&#123;parameter.name&#125; the $&#123;paramNames[parameter.name]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.throwsList.referenceElements</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.throwsList.referenceElements</span> <span class="attr">as</span> <span class="attr">exception</span>&gt;</span></div><div class="line">         * @throws $&#123;exception.referenceName&#125; the $&#123;exceptionNames[exception.referenceName]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"> */</div></pre></td></tr></table></figure>
<ul>
<li>修改后的配置</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**\n</div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.parameterList.parameters</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.parameterList.parameters</span> <span class="attr">as</span> <span class="attr">parameter</span>&gt;</span></div><div class="line">         * @param $&#123;parameter.name&#125; the $&#123;paramNames[parameter.name]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">element.throwsList.referenceElements</span>?<span class="attr">has_content</span>&gt;</span></div><div class="line">         *\n</div><div class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">element.throwsList.referenceElements</span> <span class="attr">as</span> <span class="attr">exception</span>&gt;</span></div><div class="line">         * @throws $&#123;exception.referenceName&#125; the $&#123;exceptionNames[exception.referenceName]&#125;\n</div><div class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></div><div class="line">\n * @author qiu\n</div><div class="line">\n *  博客：www.qiuchengjia.cn   时间：$&#123;.now?string["yyyy-MM-dd"]&#125;\n</div><div class="line"> */</div></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul>
<li><p>把鼠标移动到方法中，然后shift + alt + G</p>
</li>
<li><p>如果是对这个类所有的方法都进行注释，就是shift + ctrl + alt + G</p>
</li>
<li><p>也可以通过alt+insert来进行选择</p>
</li>
<li><p>shift + alt + Z是撤销当前/选择</p>
</li>
<li><p>shift + ctrl + alt + Z是撤销所有注释</p>
</li>
</ul>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ul>
<li><p>如果你对JavaDoc生成的模板如果还不满意，你还可以修改JavaDoc的模板，具体修改位置是 设置–&gt;other—&gt;javadoc<br>里面有对应的模板，模板语言使用的是一种 freemarker的标记语言，如果有感兴趣的同学可自己开发扩展；</p>
</li>
<li><p><a href="https://github.com/setial/intellij-javadocs/wiki" target="_blank" rel="external">javadoc网址</a></p>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://blog.csdn.net/dreamlivemeng/article/details/51499675" target="_blank" rel="external"> Android studio JavaDoc的使用</a></p>
</li>
<li><p><a href="http://www.codingnote.net/2016/05/12/Android-Studio-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A-%E5%BF%AB%E9%80%9F%E8%BE%93%E5%85%A5%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/" target="_blank" rel="external">(原创) Android Studio 自定义注释&amp;快速输入代码片段</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设置类创建时自动生成头部注释&quot;&gt;&lt;a href=&quot;#设置类创建时自动生成头部注释&quot; class=&quot;headerlink&quot; title=&quot;设置类创建时自动生成头部注释&quot;&gt;&lt;/a&gt;设置类创建时自动生成头部注释&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;比如每次创建一个类自动在头部生成一个这样的头部,作为一个类的说明信息&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A1.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;设置方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击设置—&amp;gt;Editor–&amp;gt;File and code Templates –&amp;gt;Includes—&amp;gt;File Header&lt;br&gt;代码：其中时间是自动获取的&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Description: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Data：$&amp;#123;DATE&amp;#125;-$&amp;#123;TIME&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Blog：www.qiuchengjia.cn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Author: qiu&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;效果和步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A3.gif&quot; alt=&quot;&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="AndroidStudio" scheme="http://www.qiuchengjia.cn/categories/AndroidStudio/"/>
    
    
      <category term="AndroidStudio" scheme="http://www.qiuchengjia.cn/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title>密码</title>
    <link href="http://www.qiuchengjia.cn/2016/08/22/%E9%80%9A%E7%94%A8/%E5%AF%86%E7%A0%81/"/>
    <id>http://www.qiuchengjia.cn/2016/08/22/通用/密码/</id>
    <published>2016-08-21T20:22:26.000Z</published>
    <updated>2016-08-21T12:26:31.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="合购VIP论坛"><a href="#合购VIP论坛" class="headerlink" title="合购VIP论坛"></a>合购VIP论坛</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">默认的密码是：www.hegouvip.com</div><div class="line"></div><div class="line">第一期解压密码 ：【http:<span class="comment">//www.hegouvip.com12yuemima】</span></div><div class="line">第二期解压密码 ：【hegouvipmima12yue】</div><div class="line">第三期解压密码 ：【<span class="number">52</span>hegouvipmima】</div><div class="line">第四期解压密码 ：【<span class="number">54</span>hegouvipdisiqimima】</div><div class="line">第五期解压密码 ：【http:<span class="comment">//www.hegouvip.comwoshidiwuqimima】</span></div><div class="line">第六期解压密码 ：【上合购VIP资源论坛下载就可以观看了】</div><div class="line">第七期解压密码 ：【http:<span class="comment">//www.hegouvip.com2014mashangchenggong】</span></div><div class="line">第八期解压密码 ：【<span class="number">2014</span>hegouvipdibaqijieyamima】</div><div class="line">第九期解压密码 ：【hegouvip2014dijiuqijieyamima】</div><div class="line">第十期解压密码 ：【dishiqimimahegouvip】</div><div class="line">第十一期解压密码：【dishiyiqihegoumima】</div></pre></td></tr></table></figure>
<h2 id="HK共享吧"><a href="#HK共享吧" class="headerlink" title="HK共享吧"></a>HK共享吧</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">默认的密码是：www.mfhk8.com</div><div class="line"></div><div class="line">编号一的解压密码：kIioOK9*</div><div class="line">编号二的解压密码：www.mfhk8.com_!h0jn3G+t@</div><div class="line">编号三的解压密码：www.mfhk8.com_rz~NWjU)cZ</div><div class="line">编号四的解压密码：www.mfhk8.com_$dCb11$d2t</div><div class="line">编号五的解压密码：www.mfhk8.com_$dF71@$d4rd2t</div><div class="line">编号六的解压密码：www.mfhk8.com_HdFD1@$^&amp;4dd1t</div><div class="line">编号七的解压密码：www.mfhk8.com_DF32D~@$^&amp;3Qd1*</div><div class="line">编号八的解压密码：www.mfhk8.com_SF5*^2K~@$^f3e1##</div><div class="line">编号九的解压密码：www.mfhk8.com_S123aaaA*^jgjkf2f@!!~~</div><div class="line">编号十的解压密码：www.mfhk8.com_S123f3*#(fA*^fgj32f@!!~~!hfu@**!!h847</div><div class="line">编号十一的解压密码：www.mfhk8.com_8#!k53[]]r[E$DS</div></pre></td></tr></table></figure>
<h2 id="龙天论坛"><a href="#龙天论坛" class="headerlink" title="龙天论坛"></a>龙天论坛</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">默认的密码是：www.lthack.com</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.mianfeib.com/three-resource-bbs-password.html" target="_blank" rel="external">三个VIP资源论坛解压密码汇总</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;合购VIP论坛&quot;&gt;&lt;a href=&quot;#合购VIP论坛&quot; class=&quot;headerlink&quot; title=&quot;合购VIP论坛&quot;&gt;&lt;/a&gt;合购VIP论坛&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;默认的密码是：www.hegouvip.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第一期解压密码 ：【http:&lt;span class=&quot;comment&quot;&gt;//www.hegouvip.com12yuemima】&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第二期解压密码 ：【hegouvipmima12yue】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第三期解压密码 ：【&lt;span class=&quot;number&quot;&gt;52&lt;/span&gt;hegouvipmima】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第四期解压密码 ：【&lt;span class=&quot;number&quot;&gt;54&lt;/span&gt;hegouvipdisiqimima】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第五期解压密码 ：【http:&lt;span class=&quot;comment&quot;&gt;//www.hegouvip.comwoshidiwuqimima】&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第六期解压密码 ：【上合购VIP资源论坛下载就可以观看了】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第七期解压密码 ：【http:&lt;span class=&quot;comment&quot;&gt;//www.hegouvip.com2014mashangchenggong】&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第八期解压密码 ：【&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;hegouvipdibaqijieyamima】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第九期解压密码 ：【hegouvip2014dijiuqijieyamima】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第十期解压密码 ：【dishiqimimahegouvip】&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第十一期解压密码：【dishiyiqihegoumima】&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;HK共享吧&quot;&gt;&lt;a href=&quot;#HK共享吧&quot; class=&quot;headerlink&quot; title=&quot;HK共享吧&quot;&gt;&lt;/a&gt;HK共享吧&lt;/h2&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;默认的密码是：www.mfhk8.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号一的解压密码：kIioOK9*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号二的解压密码：www.mfhk8.com_!h0jn3G+t@&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号三的解压密码：www.mfhk8.com_rz~NWjU)cZ&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号四的解压密码：www.mfhk8.com_$dCb11$d2t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号五的解压密码：www.mfhk8.com_$dF71@$d4rd2t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号六的解压密码：www.mfhk8.com_HdFD1@$^&amp;amp;4dd1t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号七的解压密码：www.mfhk8.com_DF32D~@$^&amp;amp;3Qd1*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号八的解压密码：www.mfhk8.com_SF5*^2K~@$^f3e1##&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号九的解压密码：www.mfhk8.com_S123aaaA*^jgjkf2f@!!~~&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号十的解压密码：www.mfhk8.com_S123f3*#(fA*^fgj32f@!!~~!hfu@**!!h847&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编号十一的解压密码：www.mfhk8.com_8#!k53[]]r[E$DS&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;龙天论坛&quot;&gt;&lt;a href=&quot;#龙天论坛&quot; class=&quot;headerlink&quot; title=&quot;龙天论坛&quot;&gt;&lt;/a&gt;龙天论坛&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;默认的密码是：www.lthack.com&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="通用" scheme="http://www.qiuchengjia.cn/categories/%E9%80%9A%E7%94%A8/"/>
    
    
      <category term="通用" scheme="http://www.qiuchengjia.cn/tags/%E9%80%9A%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>K歌之王</title>
    <link href="http://www.qiuchengjia.cn/2016/08/21/%E9%80%9A%E7%94%A8/K%E6%AD%8C%E4%B9%8B%E7%8E%8B/"/>
    <id>http://www.qiuchengjia.cn/2016/08/21/通用/K歌之王/</id>
    <published>2016-08-21T15:16:18.000Z</published>
    <updated>2016-08-21T09:04:52.437Z</updated>
    
    <content type="html"><![CDATA[<center><img src="http://o99dg8ap9.bkt.clouddn.com/K%E6%AD%8C%E4%B9%8B%E7%8E%8B.jpg" alt=""></center>

<h2 id="陈奕迅"><a href="#陈奕迅" class="headerlink" title="陈奕迅"></a>陈奕迅</h2><ul>
<li><p>《遥远的她》</p>
</li>
<li><p>《一生中最爱》</p>
</li>
<li><p>《明年今日》</p>
</li>
<li><p>《爱情转移》</p>
</li>
<li><p>《富士山下》</p>
</li>
<li><p>《葡萄成熟时》</p>
</li>
<li><p>《苦瓜》</p>
</li>
<li><p>《今天只做一件事》</p>
</li>
<li><p>《与我常在》</p>
</li>
<li><p>《单车》</p>
</li>
<li><p>《好歌献给你》</p>
</li>
<li><p>《阴天快乐》</p>
</li>
<li><p>《今天只做一件事》</p>
</li>
<li><p>《最后今晚》</p>
</li>
<li><p>《可以了》</p>
</li>
<li><p>《喜帖街》</p>
</li>
<li><p>《我什么都没有》</p>
</li>
<li><p>《时光倒流二十年》</p>
</li>
<li><p>《痛爱》</p>
</li>
<li><p>《歌颂》</p>
</li>
<li><p>《最佳损友》</p>
</li>
<li><p>《信心花舍》</p>
</li>
<li><p>《与我常在》</p>
</li>
<li><p>《阿牛》</p>
</li>
<li><p>《沙龙》</p>
</li>
<li><p>《圣诞节》</p>
</li>
<li><p>《兄妹》</p>
</li>
<li><p>《岁月如歌》</p>
</li>
</ul>
<h2 id="张国荣"><a href="#张国荣" class="headerlink" title="张国荣"></a>张国荣</h2><ul>
<li><p>《风继续吹》</p>
</li>
<li><p>《怪你过分美丽》</p>
</li>
<li><p>《有谁共鸣》</p>
</li>
<li><p>《当年情》</p>
</li>
<li><p>《为你钟情》 </p>
</li>
<li><p>《我》</p>
</li>
<li><p>《Monica》</p>
</li>
<li><p>《倩女幽魂》</p>
</li>
<li><p>《明星》</p>
</li>
<li><p>《共同渡过》</p>
</li>
<li><p>《春夏秋冬》</p>
</li>
<li><p>《风再起时》</p>
</li>
<li><p>《玻璃之情》</p>
</li>
<li><p>《左右手》</p>
</li>
<li><p>《追》</p>
</li>
<li><p>《寂寞夜晚》</p>
</li>
</ul>
<a id="more"></a>
<h2 id="谭咏麟"><a href="#谭咏麟" class="headerlink" title="谭咏麟"></a>谭咏麟</h2><ul>
<li><p>《朋友》</p>
</li>
<li><p>《讲不出再见》</p>
</li>
<li><p>《爱多一次痛多一次》</p>
</li>
<li><p>《无言感激》</p>
</li>
</ul>
<h2 id="刘德华"><a href="#刘德华" class="headerlink" title="刘德华"></a>刘德华</h2><ul>
<li><p>《暗里着迷》</p>
</li>
<li><p>《情感的禁区》</p>
</li>
<li><p>《今天》</p>
</li>
<li><p>《世界第一等》</p>
</li>
<li><p>《一起走过的日子》</p>
</li>
<li><p>《17岁》</p>
</li>
</ul>
<h2 id="张学友"><a href="#张学友" class="headerlink" title="张学友"></a>张学友</h2><ul>
<li><p>《祝福》</p>
</li>
<li><p>《眼泪》</p>
</li>
<li><p>《等》</p>
</li>
<li><p>《爱很简单》</p>
</li>
</ul>
<h2 id="李宗盛"><a href="#李宗盛" class="headerlink" title="李宗盛"></a>李宗盛</h2><ul>
<li><p>《爱的代价》</p>
</li>
<li><p>《山丘》</p>
</li>
<li><p>《明明白白我的心》</p>
</li>
<li><p>《阴天》</p>
</li>
<li><p>《我终于失去了你》</p>
</li>
</ul>
<h2 id="周杰伦"><a href="#周杰伦" class="headerlink" title="周杰伦"></a>周杰伦</h2><ul>
<li><p>《告白气球》</p>
</li>
<li><p>《稻香》</p>
</li>
<li><p>《开不了口》</p>
</li>
<li><p>《龙卷风》</p>
</li>
<li><p>《阳光宅男》</p>
</li>
<li><p>《晴天》</p>
</li>
<li><p>《七里香》</p>
</li>
<li><p>《彩虹》</p>
</li>
<li><p>《安静》</p>
</li>
<li><p>《简单爱》</p>
</li>
<li><p>《轨迹》</p>
</li>
<li><p>《回到过去》</p>
</li>
<li><p>《乌克丽丽》</p>
</li>
<li><p>《退后》</p>
</li>
<li><p>《蜗牛》</p>
</li>
<li><p>《暗号》</p>
</li>
</ul>
<h2 id="粤语"><a href="#粤语" class="headerlink" title="粤语"></a>粤语</h2><ul>
<li><p>《偏偏喜欢你》-陈百强</p>
</li>
<li><p>《我不是伟人》</p>
</li>
<li><p>《友情岁月》</p>
</li>
<li><p>《献世》</p>
</li>
<li><p>《眼睛不能没眼泪》</p>
</li>
</ul>
<h2 id="国语"><a href="#国语" class="headerlink" title="国语"></a>国语</h2><ul>
<li><p>《小手拉大手》</p>
</li>
<li><p>《会呼吸的痛》</p>
</li>
<li><p>《夜空中最亮的星》</p>
</li>
<li><p>《越长大越孤单》</p>
</li>
<li><p>《明天，你好》</p>
</li>
<li><p>《小幸运》</p>
</li>
<li><p>《忘了时间的钟》</p>
</li>
<li><p>《拥抱》</p>
</li>
<li><p>《好想你》</p>
</li>
<li><p>《他不爱我》</p>
</li>
<li><p>《绅士》</p>
</li>
<li><p>《丑八怪》</p>
</li>
<li><p>《认真的雪》</p>
</li>
<li><p>《演员》</p>
</li>
<li><p>《当你》</p>
</li>
<li><p>《她说》</p>
</li>
<li><p>《我很想爱他》</p>
</li>
<li><p>《其实都没有》</p>
</li>
<li><p>《原来你什么都不想要》</p>
</li>
<li><p>《hey Jude》</p>
</li>
<li><p>《我也很想他》</p>
</li>
<li><p>《天黑黑》</p>
</li>
<li><p>《我怀恋的》</p>
</li>
<li><p>《开始懂了》</p>
</li>
<li><p>《遇见》</p>
</li>
<li><p>《董小姐》</p>
</li>
<li><p>《斑马，斑马》</p>
</li>
<li><p>《野子》</p>
</li>
<li><p>《神啊，救救我》</p>
</li>
<li><p>《离不开你》</p>
</li>
<li><p>《独家记忆》</p>
</li>
<li><p>《把悲伤留给自己》</p>
</li>
<li><p>《会痛的石头》</p>
</li>
<li><p>《好想好想》</p>
</li>
<li><p>《断点》</p>
</li>
</ul>
<h2 id="民谣"><a href="#民谣" class="headerlink" title="民谣"></a>民谣</h2><ul>
<li><p>《米店》</p>
</li>
<li><p>《南山南》</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/K%E6%AD%8C%E4%B9%8B%E7%8E%8B.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;陈奕迅&quot;&gt;&lt;a href=&quot;#陈奕迅&quot; class=&quot;headerlink&quot; title=&quot;陈奕迅&quot;&gt;&lt;/a&gt;陈奕迅&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《遥远的她》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《一生中最爱》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《明年今日》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《爱情转移》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《富士山下》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《葡萄成熟时》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《苦瓜》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《今天只做一件事》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《与我常在》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《单车》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《好歌献给你》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《阴天快乐》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《今天只做一件事》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《最后今晚》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《可以了》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《喜帖街》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《我什么都没有》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《时光倒流二十年》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《痛爱》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《歌颂》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《最佳损友》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《信心花舍》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《与我常在》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《阿牛》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《沙龙》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《圣诞节》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《兄妹》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《岁月如歌》&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;张国荣&quot;&gt;&lt;a href=&quot;#张国荣&quot; class=&quot;headerlink&quot; title=&quot;张国荣&quot;&gt;&lt;/a&gt;张国荣&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《风继续吹》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《怪你过分美丽》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《有谁共鸣》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《当年情》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《为你钟情》 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《我》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《Monica》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《倩女幽魂》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《明星》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《共同渡过》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《春夏秋冬》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《风再起时》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《玻璃之情》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《左右手》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《追》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《寂寞夜晚》&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java Import</title>
    <link href="http://www.qiuchengjia.cn/2016/08/21/JAVA/Java-Import/"/>
    <id>http://www.qiuchengjia.cn/2016/08/21/JAVA/Java-Import/</id>
    <published>2016-08-21T14:16:38.000Z</published>
    <updated>2016-08-21T06:39:01.830Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>在 Java 中使用import关键字来导入任意类型到同一个编译单元中</p>
</li>
<li><p>在代码中，导入代码应放在包声明代码之后，类型声明代码之前</p>
</li>
</ul>
<p>Java 中有两种类型的导入声明：</p>
<ol>
<li><p>单类型导入（Single-type import declaration）</p>
</li>
<li><p>按需类型导入（Import-on-demand declaration）</p>
</li>
</ol>
<h2 id="单类型导入"><a href="#单类型导入" class="headerlink" title="单类型导入"></a>单类型导入</h2><ul>
<li>单类型导入用于导入指定包中的一个单独的类型（例如一个类）。语法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &lt;fully qualified name of a type&gt;;</div></pre></td></tr></table></figure>
<ul>
<li>下面的代码演示了如何从 org.aptusource 包中导入 Dog 类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aptusource.Dog;</div></pre></td></tr></table></figure>
<ul>
<li><p>单类型导入只能导入一个类型，如果要导入多个类型，那么可以使用多个单独的单类型导入语句</p>
</li>
<li><p>下面的代码导入了 pkg1 包中的 ClassOne，pkg2 包中的 ClassTwo 和 ClassThree，pkg3 包中的 ClassFour：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pkg1.ClassOne; </div><div class="line"><span class="keyword">import</span> pkg2.ClassTwo; </div><div class="line"><span class="keyword">import</span> pkg2.ClassThree; </div><div class="line"><span class="keyword">import</span> pkg3.ClassFour;</div></pre></td></tr></table></figure>
<ul>
<li>下面的代码使用了 Dog 类的全名称</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Main</span></span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[]  args)</span>  </span>&#123;</div><div class="line">      org.aptusource.Dog jack;  <span class="comment">// Uses  full qualified name for the   Dog  class</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>下面的代码演示了如何使用单类型导入，我们将导入 org.aptusource.Dog 类，这样就可以使用简单名称来引用 Dog 类</li>
</ul>
<a id="more"></a>
<p>更改后的 Main类如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aptusource.Dog; <span class="comment">// 导入 Dog 类</span></div><div class="line"></div><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Main</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[]  args)</span>  </span>&#123;</div><div class="line">      Dog  jack; <span class="comment">// 使用 Dog 类的简单名称</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>当编译器遇到简单名称 Dog 所在的代码段时，比如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Dog  jack;</div></pre></td></tr></table></figure>
<ul>
<li><p>编译器将会查找所有的导入声明来将简单名称转换为全名称</p>
</li>
<li><p>像上面的例子中，编译器会将代码段替换为：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.aptusource.Dog  jack;</div></pre></td></tr></table></figure>
<ul>
<li>导入声明可以让你在代码中使用简单名称，增加了代码的可读性</li>
</ul>
<h2 id="按需导入"><a href="#按需导入" class="headerlink" title="按需导入"></a>按需导入</h2><ul>
<li><p>按需导入可以使用一行导入代码来导入多个类型</p>
</li>
<li><p>按需导入的语法如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &lt;<span class="keyword">package</span> name&gt;.*;</div></pre></td></tr></table></figure>
<ul>
<li><p>上面的语句可以看到，包名后直接跟了一个点号和一个星号（*）</p>
</li>
<li><p>例如，下面的代码导入了 org.aptusource 包中的所有类型：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aptusource.*;</div></pre></td></tr></table></figure>
<p>上面的 Main 类可以使用按需导入来重写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aptusource.*;</div><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[]  args)</span>  </span>&#123;</div><div class="line">        Dog  jack; <span class="comment">// 使用 Dog 类的简单名称</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h2><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ul>
<li><p>静态导入是JDK5.0引入的新特性</p>
</li>
<li><p>要使用静态成员（方法和变量）我们必须给出提供这个静态成员的类,使用静态导入可以使被导入类的静态变量和静态方法在当前类直接可见，使用这些静态成员无需再给出他们的类名</p>
</li>
</ul>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><ul>
<li>比如先在一个包中定义一个这样的类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.learnjava;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Common</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AGE = <span class="number">10</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"Hello World!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用一般导入"><a href="#使用一般导入" class="headerlink" title="使用一般导入"></a><strong>使用一般导入</strong></h4><ul>
<li>在另一个包中使用时，如果不用静态导入，是这样用的：<br>前面加入了导入语句，将Common类导入，使用其中的静态成员变量和静态方法时需要加上类名</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.learnjava2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.learnjava.Common;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticImportTest</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> a = Common.AGE;</div><div class="line">        System.out.println(a);</div><div class="line"></div><div class="line">        Common.output();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用静态导入"><a href="#使用静态导入" class="headerlink" title="使用静态导入"></a><strong>使用静态导入</strong></h4><p>静态导入的语法是： </p>
<ul>
<li>import static 包名.类名.静态成员变量; </li>
<li>import static 包名.类名.静态成员函数; </li>
</ul>
<blockquote>
<p><strong>注意导入的是成员变量和方法名</strong></p>
</blockquote>
<ul>
<li>如前面的程序使用静态导入后：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.learnjava2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.learnjava.Common.AGE;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.learnjava.Common.output;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticImportTest</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> a = AGE;</div><div class="line">        System.out.println(a);</div><div class="line"></div><div class="line">        output();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li><p>减少字符输入量，提高代码的可阅读性，以便更好地理解程序</p>
</li>
<li><p>举一个例子来说：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathUtils</span></span>&#123;</div><div class="line">    <span class="comment">// 计算圆面积</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calCircleArea</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> PI * r * r;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 计算球面积</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calBallArea</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">4</span> * PI * r * r;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>滥用静态导入会使程序更难阅读，更难维护。静态导入后，代码中就不用再写类名了，但是我们知道类是“一类事物的描述”，缺少了类名的修饰，静态属性和静态方法的表象意义可以被无限放大，这会让阅读者很难弄清楚其属性或方法代表何意，甚至是哪一个类的属性（方法）都要思考一番，特别是在一个类中有多个静态导入语句时，若还使用了*通配符，把一个类的所有静态元素都导入进来了，那简直就是恶梦</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://blog.csdn.net/houhow/article/details/51567471" target="_blank" rel="external">Java静态导入</a></p>
</li>
<li><p><a href="http://codecloud.net/7299.html" target="_blank" rel="external">Java import</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 Java 中使用import关键字来导入任意类型到同一个编译单元中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在代码中，导入代码应放在包声明代码之后，类型声明代码之前&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java 中有两种类型的导入声明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;单类型导入（Single-type import declaration）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按需类型导入（Import-on-demand declaration）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;单类型导入&quot;&gt;&lt;a href=&quot;#单类型导入&quot; class=&quot;headerlink&quot; title=&quot;单类型导入&quot;&gt;&lt;/a&gt;单类型导入&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单类型导入用于导入指定包中的一个单独的类型（例如一个类）。语法如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;lt;fully qualified name of a type&amp;gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;下面的代码演示了如何从 org.aptusource 包中导入 Dog 类：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.aptusource.Dog;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单类型导入只能导入一个类型，如果要导入多个类型，那么可以使用多个单独的单类型导入语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下面的代码导入了 pkg1 包中的 ClassOne，pkg2 包中的 ClassTwo 和 ClassThree，pkg3 包中的 ClassFour：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pkg1.ClassOne; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pkg2.ClassTwo; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pkg2.ClassThree; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pkg3.ClassFour;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;下面的代码使用了 Dog 类的全名称&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;  &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[]  args)&lt;/span&gt;  &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      org.aptusource.Dog jack;  &lt;span class=&quot;comment&quot;&gt;// Uses  full qualified name for the   Dog  class&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;下面的代码演示了如何使用单类型导入，我们将导入 org.aptusource.Dog 类，这样就可以使用简单名称来引用 Dog 类&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java协变和逆变</title>
    <link href="http://www.qiuchengjia.cn/2016/08/17/JAVA/Java%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/"/>
    <id>http://www.qiuchengjia.cn/2016/08/17/JAVA/Java协变和逆变/</id>
    <published>2016-08-16T20:49:41.000Z</published>
    <updated>2016-08-16T14:06:04.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是协变和逆变"><a href="#什么是协变和逆变" class="headerlink" title="什么是协变和逆变"></a>什么是协变和逆变</h2><ul>
<li><p>我们将围绕如下三个核心名词：协变性（covariance）、逆变性(contravariance)和无关性（invariant）。他们都是用来描述类型转换的性质的术语</p>
</li>
<li><p>到底什么是协变和逆变？先看例子：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Java</span></div><div class="line">Object[] objects = <span class="keyword">new</span> String[<span class="number">2</span>];</div><div class="line"><span class="comment">//C# </span></div><div class="line">object[] objects = <span class="keyword">new</span> string[<span class="number">2</span>];</div></pre></td></tr></table></figure>
<ul>
<li>这就是协变，C#和Java都是支持数组协变的语言，好像说了等于没说，别急，慢慢来</li>
</ul>
<p>我们都知道C#和Java中String类型都是继承自Object的，姑且记做<strong>String ≦ Object</strong>，表示String是Object的子类型，String的对象可以赋给Object的对象</p>
<p>而Object的数组类型Object[]，我们可以理解成是由Object构造出来的一种新的类型,可以认为是一种<strong>构造类型</strong>，记f(Object)（可以类比下初中数学中函数的定义），那么我们可以这么来描述协变和逆变：</p>
<ul>
<li><p>当A ≦ B时,如果有f(A) ≦ f(B),那么f叫做协变(covariance)；</p>
</li>
<li><p>当A ≦ B时,如果有f(B) ≦ f(A),那么f叫做逆变(contravariance)；</p>
</li>
<li><p>如果上面两种关系都不成立则叫做不可变(invariant)</p>
</li>
</ul>
<h3 id="协变"><a href="#协变" class="headerlink" title="协变"></a><strong>协变</strong></h3><p>其实顾名思义，协变和逆变表示的一种类型转变的关系：“构造类型”之间相对“子类型”之间的一种关系。只不过平时我（可能也包括大家）被网上的一些文章搞糊涂了。“协”表示一种自然而然的转换关系，比如上面的String[] ≦ Object[]，这就是大家学习面向对象编程语言中经常说的：</p>
<blockquote>
<p>子类变量能赋给父类变量，父类变量不能赋值给子类变量</p>
</blockquote>
<h3 id="逆变"><a href="#逆变" class="headerlink" title="逆变"></a><strong>逆变</strong></h3><ul>
<li>而“逆”则不那么直观，平时用的也很少，后面讲<strong>Java泛型中的协变和逆变</strong>会看到例子</li>
</ul>
<a id="more"></a>
<h3 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a><strong>不可变</strong></h3><ul>
<li>不可变的例子就很多了，比如Java中List&lt; Object &gt;和List&lt; String &gt;之间就是不可变的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">List&lt;Object&gt; list2 = list1;</div></pre></td></tr></table></figure>
<ul>
<li>这两行代码在Java中肯定是编译不过的，反过来更不可能，C#中也是一样</li>
</ul>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>那么<strong>协变</strong>和<strong>逆变</strong>作用：主要是语言设计的一种考量，目的是为了增加语言的灵活性和能力</li>
</ul>
<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><ul>
<li>再说下面内容之前，提下这个大家都知道的原则：</li>
</ul>
<blockquote>
<p>有使用父类型对象的地方都可以换成子类型对象</p>
</blockquote>
<ul>
<li>假设有类Fruit和Apple,Apple ≦ Fruit，Fruit类有一个方法fun1，返回一个Object对象:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">fun1</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line">Fruit f = <span class="keyword">new</span> Fruit();</div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="comment">//某地方用到了f对象</span></div><div class="line">Object obj = f.fun1();</div></pre></td></tr></table></figure>
<ul>
<li>那么现在Aplle对象覆盖fun1，假设可以返回一个String对象：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fun1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">&#125;</div><div class="line">Fruit f = <span class="keyword">new</span> Apple();</div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="comment">//某地方用到了f对象</span></div><div class="line">Object obj = f.fun1();</div></pre></td></tr></table></figure>
<ul>
<li><p>那么任何使用Fruit对象的地方都能替换成Apple对象吗？显然是可以的</p>
</li>
<li><p>举得例子是返回值，如果是方法参数呢？调用父类方法fun2(String)的地方肯定可以被一个能够接受更宽类型的方法替代：fun2(Object)……</p>
</li>
</ul>
<h2 id="协变返回值"><a href="#协变返回值" class="headerlink" title="协变返回值"></a>协变返回值</h2><ul>
<li>在面向对象语言中，一个协变返回值方法是一个在子类覆盖该方法的时候，方法的返回值可以被一个“更窄”的类型所替代（C#并不支持这个技术，C++和Java JDK5.0后开始支持）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123; </div><div class="line">      <span class="function">Object <span class="title">getSomething</span><span class="params">()</span> </span>&#123; </div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>; </div><div class="line">   &#125; </div><div class="line">&#125; </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line">     <span class="function">String <span class="title">getSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>虽然Java是面向对象的语言，但某种程度上支持<strong>返回值协变</strong>，Java子类覆盖父类方法的时候能够返回一个“更窄”的子类型，所以说Java是一门可以支持<strong>返回值协变</strong>的语言</li>
</ul>
<h2 id="参数逆变"><a href="#参数逆变" class="headerlink" title="参数逆变"></a>参数逆变</h2><ul>
<li>类似<strong>参数逆变</strong>是指子类覆盖父类方法时接受一个“更宽”的父类型。在Java和C#中这都被当作了<strong>方法重载</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123; </div><div class="line">          <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String parameter)</span> </span>&#123; </div><div class="line">          &#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123; </div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Object parameter)</span> </span>&#123; </div><div class="line">         &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Java泛型中的协变和逆变"><a href="#Java泛型中的协变和逆变" class="headerlink" title="Java泛型中的协变和逆变"></a>Java泛型中的协变和逆变</h2><ul>
<li>一般我们看Java泛型好像是不支持协变或逆变的，<strong>List&lt; Object&gt;</strong>和<strong>List&lt; String&gt;</strong>之间是不可变的。但当我们在Java泛型中引入通配符这个概念的时候，Java 其实是支持协变和逆变的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不可变</span></div><div class="line">List&lt;Fruit&gt; fruits = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();<span class="comment">// 编译不通过</span></div><div class="line"><span class="comment">// 协变</span></div><div class="line">List&lt;? extends Fruit&gt; wildcardFruits = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();</div><div class="line"><span class="comment">// 协变-&gt;方法的返回值，对返回类型是协变的:Fruit-&gt;Apple</span></div><div class="line">Fruit fruit = wildcardFruits.get(<span class="number">0</span>);</div><div class="line"><span class="comment">// 不可变</span></div><div class="line">List&lt;Apple&gt; apples = <span class="keyword">new</span> ArrayList&lt;Fruit&gt;();<span class="comment">// 编译不通过</span></div><div class="line"><span class="comment">// 逆变</span></div><div class="line">List&lt;? <span class="keyword">super</span> Apple&gt; wildcardApples = <span class="keyword">new</span> ArrayList&lt;Fruit&gt;();</div><div class="line"><span class="comment">// 逆变-&gt;方法的参数，对输入类型是逆变的:Apple-&gt;Fruit</span></div><div class="line">wildcardApples.add(<span class="keyword">new</span> Apple());</div></pre></td></tr></table></figure>
<ul>
<li><p>可见在Java泛型中通过<strong>extends</strong>关键字可以提供协变的泛型类型转换，通过<strong>supper</strong>可以提供逆变的泛型类型转换</p>
</li>
<li><p>关于Java泛型中<strong>supper</strong>和<strong>extends</strong>关键字的作用网上有很多文章，这里不再赘述。只举一个《Java Core》里面<strong>supper</strong>使用的例子：下面的代码能够对实现<strong>Comparable</strong>接口的对象数组求最小值</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function">T <span class="title">min</span><span class="params">(T[] a)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span> || a.length == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    T t = a[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (t.compareTo(a[i]) &gt; <span class="number">0</span>) &#123;</div><div class="line">            t = a[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这段代码对<strong>Calendar</strong>类是运行正常的，但对<strong>GregorianCalendar</strong>类则无法编译通过：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Calendar[] calendars = <span class="keyword">new</span> Calendar[<span class="number">2</span>];</div><div class="line">Calendar ret3 = CovariantAndContravariant.&lt;Calendar&gt; min(calendars);</div><div class="line">GregorianCalendar[] calendars2 = <span class="keyword">new</span> GregorianCalendar[<span class="number">2</span>];</div><div class="line">GregorianCalendar ret2 = CovariantAndContravariant.&lt;GregorianCalendar&gt; min(calendars2);<span class="comment">//编译不通过</span></div></pre></td></tr></table></figure>
<ul>
<li>如果想工作正常需要将方法签名修改为： </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function">T <span class="title">min</span><span class="params">(T[] a)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>至于原因，大家看下源码和网上大量关于supper的作用应该就明白了，我这里希望能够给看了上面内容的同学提供另外一个思路……</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://www.zybuluo.com/zhanjindong/note/34147" target="_blank" rel="external">再谈对协变和逆变的理解</a></p>
</li>
<li><p><a href="http://www.2cto.com/kf/201304/205042.html" target="_blank" rel="external">Java 协变性 逆变性 学习笔记</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是协变和逆变&quot;&gt;&lt;a href=&quot;#什么是协变和逆变&quot; class=&quot;headerlink&quot; title=&quot;什么是协变和逆变&quot;&gt;&lt;/a&gt;什么是协变和逆变&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们将围绕如下三个核心名词：协变性（covariance）、逆变性(contravariance)和无关性（invariant）。他们都是用来描述类型转换的性质的术语&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;到底什么是协变和逆变？先看例子：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Java&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Object[] objects = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//C# &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;object[] objects = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; string[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;这就是协变，C#和Java都是支持数组协变的语言，好像说了等于没说，别急，慢慢来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们都知道C#和Java中String类型都是继承自Object的，姑且记做&lt;strong&gt;String ≦ Object&lt;/strong&gt;，表示String是Object的子类型，String的对象可以赋给Object的对象&lt;/p&gt;
&lt;p&gt;而Object的数组类型Object[]，我们可以理解成是由Object构造出来的一种新的类型,可以认为是一种&lt;strong&gt;构造类型&lt;/strong&gt;，记f(Object)（可以类比下初中数学中函数的定义），那么我们可以这么来描述协变和逆变：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当A ≦ B时,如果有f(A) ≦ f(B),那么f叫做协变(covariance)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当A ≦ B时,如果有f(B) ≦ f(A),那么f叫做逆变(contravariance)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果上面两种关系都不成立则叫做不可变(invariant)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;协变&quot;&gt;&lt;a href=&quot;#协变&quot; class=&quot;headerlink&quot; title=&quot;协变&quot;&gt;&lt;/a&gt;&lt;strong&gt;协变&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;其实顾名思义，协变和逆变表示的一种类型转变的关系：“构造类型”之间相对“子类型”之间的一种关系。只不过平时我（可能也包括大家）被网上的一些文章搞糊涂了。“协”表示一种自然而然的转换关系，比如上面的String[] ≦ Object[]，这就是大家学习面向对象编程语言中经常说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;子类变量能赋给父类变量，父类变量不能赋值给子类变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;逆变&quot;&gt;&lt;a href=&quot;#逆变&quot; class=&quot;headerlink&quot; title=&quot;逆变&quot;&gt;&lt;/a&gt;&lt;strong&gt;逆变&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;而“逆”则不那么直观，平时用的也很少，后面讲&lt;strong&gt;Java泛型中的协变和逆变&lt;/strong&gt;会看到例子&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java方法签名</title>
    <link href="http://www.qiuchengjia.cn/2016/08/14/JAVA/Java%E6%96%B9%E6%B3%95%E7%AD%BE%E5%90%8D/"/>
    <id>http://www.qiuchengjia.cn/2016/08/14/JAVA/Java方法签名/</id>
    <published>2016-08-14T14:50:34.000Z</published>
    <updated>2016-08-14T07:23:44.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法签名的意义"><a href="#方法签名的意义" class="headerlink" title="方法签名的意义"></a>方法签名的意义</h2><ul>
<li>对于同名不同类、同类不同名的方法，方法签名的意义并不是很大，但是对于重载方法来说，方法签名的意义就十分巨大了。由于重载方法之间的方法名是相同的，那么我们势必要从构成方法的其他几个要素中找到另一个要素与方法名组成能够唯一标示方法的签名，方法体当然不予考虑。那么就是形参列表和返回值了，但是由于对于调用方法的人来说，方法的形参数据类型列表的重要程度要远远高于返回值，所以方法签名就由方法名+形参列表构成，也就是说，<strong>方法名和形参数据类型列表可以唯一的确定一个方法，与方法的返回值一点关系都没有，这是判断重载重要依据，所以，以下的代码是不允许的</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">aaaa</span><span class="params">()</span></span>&#123;  </div><div class="line">      </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">aaaa</span><span class="params">()</span></span>&#123;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法签名的格式"><a href="#方法签名的格式" class="headerlink" title="方法签名的格式"></a>方法签名的格式</h2><ul>
<li>首先我们先看几个方法以及他们的方法签名：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;&#125;                   test1()<span class="function">V</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(String str)</span>     <span class="title">test2</span><span class="params">(Ljava/lang/String;)</span>V</div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test3</span><span class="params">()</span>&#123;&#125;                      test3()I</div></pre></td></tr></table></figure>
<ul>
<li>从以上三个例子，我们就可以很简单的看出一些小小的规律：<br>JVM为我们提供的方法签名实际上是由方法名(上文的例子为了简单没有写出全类名)、形参列表、返回值三部分构成的，基本形式就是：<br><strong>全类名.方法名(形参数据类型列表)返回值数据类型</strong></li>
</ul>
<ul>
<li><strong>Java方法签名中特殊字符/字母含义</strong></li>
</ul>
<table>
<thead>
<tr>
<th>特殊字符</th>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">特殊说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>V</td>
<td style="text-align:left">void</td>
<td style="text-align:left">一般用于表示方法的返回值</td>
</tr>
<tr>
<td>Z</td>
<td style="text-align:left">boolean     </td>
</tr>
<tr>
<td>B</td>
<td style="text-align:left">byte     </td>
</tr>
<tr>
<td>C</td>
<td style="text-align:left">char     </td>
</tr>
<tr>
<td>S</td>
<td style="text-align:left">short     </td>
</tr>
<tr>
<td>I</td>
<td style="text-align:left">int     </td>
</tr>
<tr>
<td>J</td>
<td style="text-align:left">long     </td>
</tr>
<tr>
<td>F</td>
<td style="text-align:left">float     </td>
</tr>
<tr>
<td>D</td>
<td style="text-align:left">double     </td>
</tr>
<tr>
<td>[</td>
<td style="text-align:left">数组</td>
<td style="text-align:left">以[开头，配合其他的特殊字符，表示对应数据类型的数组，几个[表示几维数组</td>
</tr>
<tr>
<td>L</td>
<td style="text-align:left">全类名;</td>
<td style="text-align:left">引用类型    以 L 开头 ; 结尾，中间是引用类型的全类名</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<blockquote>
<p>一定要注意的是方法重载时，方法返回值没有什么意义，是由方法名和参数列表决定的</p>
</blockquote>
<h2 id="利用javap生成方法签名"><a href="#利用javap生成方法签名" class="headerlink" title="利用javap生成方法签名"></a>利用javap生成方法签名</h2><h3 id="类库类"><a href="#类库类" class="headerlink" title="类库类"></a>类库类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">$ javap -s java.lang.String  </div><div class="line">Compiled from <span class="string">"String.java"</span>  </div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>,<span class="title">java</span>.<span class="title">lang</span>.<span class="title">Comparable</span>,<span class="title">java</span>.<span class="title">lang</span>.<span class="title">CharSequence</span></span>&#123;  </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> java.util.Comparator CASE_INSENSITIVE_ORDER;  </div><div class="line">  Signature: Ljava/util/Comparator;  </div><div class="line"><span class="keyword">public</span> java.lang.String();  </div><div class="line">  Signature: ()V  </div><div class="line"><span class="keyword">public</span> java.lang.String(java.lang.String);  </div><div class="line">  Signature: (Ljava/lang/String;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">char</span>[]);  </div><div class="line">  Signature: ([C)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">char</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>);  </div><div class="line">  Signature: ([CII)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">int</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>);  </div><div class="line">  Signature: ([III)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>);  </div><div class="line">  Signature: ([BIII)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>);  </div><div class="line">  Signature: ([BI)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>, java.lang.String)   <span class="keyword">throws</span> java.io.UnsupportedEncodingException;  </div><div class="line">  Signature: ([BIILjava/lang/String;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>, java.nio.charset.Charset);  </div><div class="line">  Signature: ([BIILjava/nio/charset/Charset;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], java.lang.String)   <span class="keyword">throws</span> java.io.UnsupportedEncodingException;  </div><div class="line">  Signature: ([BLjava/lang/String;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], java.nio.charset.Charset);  </div><div class="line">  Signature: ([BLjava/nio/charset/Charset;)V  </div><div class="line"><span class="keyword">public</span> java.lang.String(<span class="keyword">byte</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>);  </div><div class="line">  Signature: ([BII)V  </div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.demo;  </div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SigTest</span> </span>&#123;  </div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String name = <span class="keyword">null</span>;  </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getName</span><span class="params">(<span class="keyword">int</span>[] data,<span class="keyword">long</span> index)</span> </span>&#123;  </div><div class="line">         <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">     &#125;  </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>输出</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ javac SigTest.java </div><div class="line">$ javap -s -p com.demo.SigTest</div><div class="line">Compiled from <span class="string">"SigTest.java"</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">demo</span>.<span class="title">SigTest</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String name;</div><div class="line">  Signature: Ljava/lang/String;</div><div class="line"><span class="keyword">public</span> com.demo.SigTest();</div><div class="line">  Signature: ()<span class="function">V</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getName</span><span class="params">(<span class="keyword">int</span>[], <span class="keyword">long</span>)</span>;</div><div class="line">  Signature: ([IJ)I</div><div class="line"><span class="keyword">static</span> &#123;&#125;;</div><div class="line">  Signature: ()V</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>-s 表示打印签名信息</p>
</li>
<li><p>-p 表示打印所有函数和成员的签名信息，默认只打印public的签名信息</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;方法签名的意义&quot;&gt;&lt;a href=&quot;#方法签名的意义&quot; class=&quot;headerlink&quot; title=&quot;方法签名的意义&quot;&gt;&lt;/a&gt;方法签名的意义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对于同名不同类、同类不同名的方法，方法签名的意义并不是很大，但是对于重载方法来说，方法签名的意义就十分巨大了。由于重载方法之间的方法名是相同的，那么我们势必要从构成方法的其他几个要素中找到另一个要素与方法名组成能够唯一标示方法的签名，方法体当然不予考虑。那么就是形参列表和返回值了，但是由于对于调用方法的人来说，方法的形参数据类型列表的重要程度要远远高于返回值，所以方法签名就由方法名+形参列表构成，也就是说，&lt;strong&gt;方法名和形参数据类型列表可以唯一的确定一个方法，与方法的返回值一点关系都没有，这是判断重载重要依据，所以，以下的代码是不允许的&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;aaaa&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;aaaa&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;方法签名的格式&quot;&gt;&lt;a href=&quot;#方法签名的格式&quot; class=&quot;headerlink&quot; title=&quot;方法签名的格式&quot;&gt;&lt;/a&gt;方法签名的格式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先我们先看几个方法以及他们的方法签名：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;                   test1()&lt;span class=&quot;function&quot;&gt;V&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String str)&lt;/span&gt;     &lt;span class=&quot;title&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Ljava/lang/String;)&lt;/span&gt;V&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;                      test3()I&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;从以上三个例子，我们就可以很简单的看出一些小小的规律：&lt;br&gt;JVM为我们提供的方法签名实际上是由方法名(上文的例子为了简单没有写出全类名)、形参列表、返回值三部分构成的，基本形式就是：&lt;br&gt;&lt;strong&gt;全类名.方法名(形参数据类型列表)返回值数据类型&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Java方法签名中特殊字符/字母含义&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特殊字符&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;数据类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;特殊说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;void&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;一般用于表示方法的返回值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;boolean     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;byte     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;char     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;short     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;int     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;J&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;long     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;float     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;double     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;数组&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;以[开头，配合其他的特殊字符，表示对应数据类型的数组，几个[表示几维数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;全类名;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;引用类型    以 L 开头 ; 结尾，中间是引用类型的全类名&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java可变参数</title>
    <link href="http://www.qiuchengjia.cn/2016/08/14/JAVA/Java%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    <id>http://www.qiuchengjia.cn/2016/08/14/JAVA/Java可变参数/</id>
    <published>2016-08-13T21:55:32.000Z</published>
    <updated>2016-08-14T06:19:21.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是可变参数"><a href="#什么是可变参数" class="headerlink" title="什么是可变参数"></a>什么是可变参数</h2><ul>
<li>在 Java 5 中提供了变长参数，允许在调用方法时传入不定长度的参数。变长参数是Java的一个语法糖，本质上还是基于数组的实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(String... args)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(String[] args)</span></span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>//方法签名<br>([Ljava/lang/String;)V // public void foo(String[] args)</p>
</blockquote>
<h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><p>在定义方法时，在最后一个形参后加上三点“…“，就表示该形参可以接受多个参数值，多个参数值被当成数组传入。上述定义有几个要点需要注意：</p>
<ul>
<li><p>可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数</p>
</li>
<li><p>由于可变参数必须是最后一个参数，所以一个函数最多只能有一个可变参数</p>
</li>
<li><p>Java的可变参数，会被编译器转型为一个数组</p>
</li>
<li><p>变长参数在编译为字节码后，在方法签名中就是以数组形态出现的。这两个方法的签名是一致的，不能作为方法的重载。如果同时出现，是不能编译通过的。可变参数可以兼容数组，反之则不成立</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(String...varargs)</span></span>&#123;&#125;</div><div class="line"></div><div class="line">foo(<span class="string">"arg1"</span>, <span class="string">"arg2"</span>, <span class="string">"arg3"</span>);</div><div class="line"></div><div class="line"><span class="comment">//上述过程和下面的调用是等价的</span></div><div class="line">foo(<span class="keyword">new</span> String[]&#123;<span class="string">"arg1"</span>, <span class="string">"arg2"</span>, <span class="string">"arg3"</span>&#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>J2SE 1.5中新增了“泛型”的机制，可以在一定条件下把一个类型参数化。例如，可以在编写一个类的时候，把一个方法的形参的类型用一个标识符（如T）来代表， 至于这个标识符到底表示什么类型，则在生成这个类的实例的时候再行指定。这一机制可以用来提供更充分的代码重用和更严格的编译时类型检查。不过泛型机制却不能和个数可变的形参配合使用。如果把一个能和不确定个实参相匹配的形参的类型，用一个标识符来代表，那么编译器会给出一个“generic array creation”的错误</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Varargs</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(String arg : args) &#123;<span class="comment">//当作数组用foreach遍历</span></div><div class="line">            System.out.println(arg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//Compile error</span></div><div class="line">    <span class="comment">//The variable argument type Object of the method must be the last parameter</span></div><div class="line">    <span class="comment">//public void error1(String... args, Object o) &#123;&#125;</span></div><div class="line">    <span class="comment">//public void error2(String... args, Integer... i) &#123;&#125;</span></div><div class="line"></div><div class="line">        <span class="comment">//Compile error</span></div><div class="line">        <span class="comment">//Duplicate method test(String...) in type Varargs</span></div><div class="line">        <span class="comment">//public void test(String[] args)&#123;&#125;</span></div></pre></td></tr></table></figure>
<h2 id="可变参数方法的调用"><a href="#可变参数方法的调用" class="headerlink" title="可变参数方法的调用"></a>可变参数方法的调用</h2><ul>
<li>调用可变参数方法，可以给出零到任意多个参数，编译器会将可变参数转化为一个数组。也可以直接传递一个数组，示例如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Varargs</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(String arg : args) &#123;</div><div class="line">            System.out.println(arg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        test();<span class="comment">//0个参数</span></div><div class="line">        test(<span class="string">"a"</span>);<span class="comment">//1个参数</span></div><div class="line">        test(<span class="string">"a"</span>,<span class="string">"b"</span>);<span class="comment">//多个参数</span></div><div class="line">        test(<span class="keyword">new</span> String[] &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;);<span class="comment">//直接传递数组</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><h3 id="优先匹配固定参数"><a href="#优先匹配固定参数" class="headerlink" title="优先匹配固定参数"></a>优先匹配固定参数</h3><ul>
<li>调用一个被重载的方法时，如果此调用既能够和固定参数的重载方法匹配，也能够与可变长参数的重载方法匹配，则选择固定参数的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Varargs</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"version 1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String arg1, String arg2)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"version 2"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        test(<span class="string">"a"</span>,<span class="string">"b"</span>);<span class="comment">//version 2 优先匹配固定参数的重载方法</span></div><div class="line">                test();<span class="comment">//version 1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="匹配多个可变参数"><a href="#匹配多个可变参数" class="headerlink" title="匹配多个可变参数"></a>匹配多个可变参数</h3><ul>
<li>调用一个被重载的方法时，如果此调用既能够和两个可变长参数的重载方法匹配，则编译出错</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Varargs</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"version 1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String arg1, String... arg2)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"version 2"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        test(<span class="string">"a"</span>,<span class="string">"b"</span>);<span class="comment">//Compile error</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><h3 id="避免带有变长参数的方法重载"><a href="#避免带有变长参数的方法重载" class="headerlink" title="避免带有变长参数的方法重载"></a>避免带有变长参数的方法重载</h3><ul>
<li>即便编译器可以按照优先匹配固定参数的方式确定具体的调用方法，但在阅读代码的依然容易掉入陷阱。要慎重考虑变长参数的方法重载</li>
</ul>
<h3 id="别让null值和空值威胁到变长方法"><a href="#别让null值和空值威胁到变长方法" class="headerlink" title="别让null值和空值威胁到变长方法"></a>别让null值和空值威胁到变长方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;  </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">(String str,Integer... is)</span></span>&#123;       </div><div class="line">     &#125;  </div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">(String str,String... strs)</span></span>&#123;          </div><div class="line">     &#125;  </div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">           Client client = <span class="keyword">new</span> Client();  </div><div class="line">           client.methodA(<span class="string">"China"</span>, <span class="number">0</span>);  </div><div class="line">           client.methodA(<span class="string">"China"</span>, <span class="string">"People"</span>);  </div><div class="line">           client.methodA(<span class="string">"China"</span>);  <span class="comment">//compile error</span></div><div class="line">           client.methodA(<span class="string">"China"</span>,<span class="keyword">null</span>);  <span class="comment">//compile error</span></div><div class="line">     &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">     Client client = <span class="keyword">new</span> Client();  </div><div class="line">     String[] strs = <span class="keyword">null</span>;  </div><div class="line">     client.methodA(<span class="string">"China"</span>,strs);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>让编译器知道这个null值是String类型的，编译即可顺利通过，也就减少了错误的发生</li>
</ul>
<h3 id="覆写变长方法也要循规蹈矩"><a href="#覆写变长方法也要循规蹈矩" class="headerlink" title="覆写变长方法也要循规蹈矩"></a>覆写变长方法也要循规蹈矩</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarArgsTest2</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="comment">// 向上转型</span></div><div class="line">        Base base = <span class="keyword">new</span> Sub();</div><div class="line">        base.print(<span class="string">"hello"</span>);</div><div class="line">        <span class="comment">// 不转型</span></div><div class="line">        Sub sub = <span class="keyword">new</span> Sub();</div><div class="line">        sub.print(<span class="string">"hello"</span>);<span class="comment">//compile error</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 基类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Base......test"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 子类，覆写父类方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sub......test"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>第一个能编译通过，这是为什么呢？事实上，base对象把子类对象sub做了向上转型，形参列表是由父类决定的，当然能通过。而看看子类直接调用的情况，这时编译器看到子类覆写了父类的print方法，因此肯定使用子类重新定义的print方法，尽管参数列表不匹配也不会跑到父类再去匹配下，因为找到了就不再找了，因此有了类型不匹配的错误</p>
</li>
<li><p>这是个特例，覆写的方法参数列表竟然可以与父类不相同，这违背了覆写的定义，并且会引发莫名其妙的错误</p>
</li>
</ul>
<hr>
<p>这里，总结下覆写必须满足的条件：</p>
<ul>
<li><p>覆写方法不能缩小访问权限</p>
</li>
<li><p>参数列表必须与被覆写方法相同（包括显示形式）</p>
</li>
<li><p>返回类型必须与被覆写方法的相同或是其子类</p>
</li>
<li><p>覆写方法不能抛出新的异常，或者超出父类范围的异常，但是可以抛出更少、更有限的异常，或者不抛出异常</p>
</li>
</ul>
<h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><h3 id="使用-Object…-作为变长参数"><a href="#使用-Object…-作为变长参数" class="headerlink" title="使用 Object… 作为变长参数"></a>使用 Object… 作为变长参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(Object... args)</span> </span>&#123;</div><div class="line">    System.out.println(args.length);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="keyword">new</span> String[]&#123;<span class="string">"arg1"</span>, <span class="string">"arg2"</span>, <span class="string">"arg3"</span>&#125;); <span class="comment">//3</span></div><div class="line">foo(<span class="number">100</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"arg1"</span>, <span class="string">"arg1"</span>&#125;); <span class="comment">//2</span></div><div class="line"></div><div class="line">foo(<span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;); <span class="comment">//3</span></div><div class="line">foo(<span class="number">100</span>, <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;); <span class="comment">//2</span></div><div class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">//3</span></div><div class="line">foo(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;); <span class="comment">//1</span></div></pre></td></tr></table></figure>
<ul>
<li>int[] 无法转型为 Object[], 因而被当作一个单纯的<strong>数组对象</strong> ; Integer[] 可以转型为 Object[], 可以作为一个<strong>对象数组</strong></li>
</ul>
<h3 id="反射方法调用时的注意事项"><a href="#反射方法调用时的注意事项" class="headerlink" title="反射方法调用时的注意事项"></a>反射方法调用时的注意事项</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(String... varargs)</span></span>&#123;</div><div class="line">        System.out.println(args.length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        String[] varArgs = <span class="keyword">new</span> String[]&#123;<span class="string">"arg1"</span>, <span class="string">"arg2"</span>&#125;;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            Method method = Test.class.getMethod(<span class="string">"foo"</span>, String[].class);</div><div class="line">            method.invoke(<span class="keyword">null</span>, varArgs);</div><div class="line">            method.invoke(<span class="keyword">null</span>, (Object[])varArgs);</div><div class="line">            method.invoke(<span class="keyword">null</span>, (Object)varArgs);</div><div class="line">            method.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;varArgs&#125;);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>上面的四个调用中，前两个都会在运行时抛出java.lang.IllegalArgumentException: wrong number of arguments异常，后两个则正常调用</p>
</li>
<li><p>反射是运行时获取的，在运行时看来，可变长参数和数组是一致的，因而方法签名为：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法签名</span></div><div class="line">([Ljava/lang/String;)V <span class="comment">// public void foo(String[] varargs)</span></div></pre></td></tr></table></figure>
<ul>
<li>再来看一下 Method 对象的方法声明：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>args 虽然是一个可变长度的参数，但是 args 的长度是受限于该方法对象代表的真实方法的参数列表长度的，而从运行时签名来看，([Ljava/lang/String;)V 实际上只有一个形参，即 String[] varargs，因而 invoke(Object obj, Object… args) 中可变参数 args 的<strong>实参长度只能为1</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Object invoke(Object obj, Object... args)</span></div><div class="line"><span class="comment">//String[] varArgs = new String[]&#123;"arg1", "arg2"&#125;;</span></div><div class="line">method.invoke(<span class="keyword">null</span>, varArgs); <span class="comment">//varArgs长度为2，错误</span></div><div class="line">method.invoke(<span class="keyword">null</span>, (Object[])varArgs); <span class="comment">//将String[]转换为Object[],长度为2的，错误</span></div><div class="line">method.invoke(<span class="keyword">null</span>, (Object)varArgs);<span class="comment">//将整个String[] 转为Object，长度为1，符合</span></div><div class="line">method.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;varArgs&#125;);<span class="comment">//Object[]长度为1，正确。上一个和这个是等价的</span></div></pre></td></tr></table></figure>
<h2 id="什么时候使用可变长参数？"><a href="#什么时候使用可变长参数？" class="headerlink" title="什么时候使用可变长参数？"></a>什么时候使用可变长参数？</h2><ul>
<li><a href="http://stackoverflow.com/questions/766559/when-do-you-use-varargs-in-java" target="_blank" rel="external">Stack Overflow</a> 上有个关于变长参数使用的问题。简单地说，<br>在不确定方法需要处理的对象的数量时可以使用可变长参数，会使得方法调用更简单，无需手动创建数组 new T[]{…} </li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://blog.jrwang.me/2015/java-varargs/" target="_blank" rel="external">Java 中的变长参数</a></p>
</li>
<li><p><a href="http://dylangao.com/2014/01/06/java-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8/" target="_blank" rel="external">Java 可变参数列表</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/lanxuezaipiao/p/3190673.html" target="_blank" rel="external">Java中可变长参数的使用及注意事项</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是可变参数&quot;&gt;&lt;a href=&quot;#什么是可变参数&quot; class=&quot;headerlink&quot; title=&quot;什么是可变参数&quot;&gt;&lt;/a&gt;什么是可变参数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在 Java 5 中提供了变长参数，允许在调用方法时传入不定长度的参数。变长参数是Java的一个语法糖，本质上还是基于数组的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String... args)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;//方法签名&lt;br&gt;([Ljava/lang/String;)V // public void foo(String[] args)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;定义方法&quot;&gt;&lt;a href=&quot;#定义方法&quot; class=&quot;headerlink&quot; title=&quot;定义方法&quot;&gt;&lt;/a&gt;定义方法&lt;/h3&gt;&lt;p&gt;在定义方法时，在最后一个形参后加上三点“…“，就表示该形参可以接受多个参数值，多个参数值被当成数组传入。上述定义有几个要点需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于可变参数必须是最后一个参数，所以一个函数最多只能有一个可变参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java的可变参数，会被编译器转型为一个数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;变长参数在编译为字节码后，在方法签名中就是以数组形态出现的。这两个方法的签名是一致的，不能作为方法的重载。如果同时出现，是不能编译通过的。可变参数可以兼容数组，反之则不成立&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String...varargs)&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo(&lt;span class=&quot;string&quot;&gt;&quot;arg1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;arg2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;arg3&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//上述过程和下面的调用是等价的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[]&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;arg1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;arg2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;arg3&quot;&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>https方式向github提交代码总是输入用户名和密码</title>
    <link href="http://www.qiuchengjia.cn/2016/08/14/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/https%E6%96%B9%E5%BC%8F%E5%90%91github%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E6%80%BB%E6%98%AF%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81/"/>
    <id>http://www.qiuchengjia.cn/2016/08/14/项目管理/https方式向github提交代码总是输入用户名和密码/</id>
    <published>2016-08-13T19:24:27.000Z</published>
    <updated>2016-08-13T14:57:13.757Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>采用HTTPS方式提交代码到github和coding很方便，但是总是需要输入用户名和密码，以下这种方式可以解决</li>
</ul>
<h2 id="新建-git-credentials文件"><a href="#新建-git-credentials文件" class="headerlink" title="新建.git-credentials文件"></a>新建.git-credentials文件</h2><p>在你的用户目录下新建一个文本文件, 名曰 <strong>.git-credentials</strong></p>
<p><strong>用户目录:</strong></p>
<ul>
<li><p>windows: C:/Users/username</p>
</li>
<li><p>mac os x: /Users/username</p>
</li>
<li><p>linux:  /home/username</p>
</li>
</ul>
<h2 id="输入用户名和密码"><a href="#输入用户名和密码" class="headerlink" title="输入用户名和密码"></a>输入用户名和密码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https:<span class="comment">//username:password@github.com</span></div><div class="line">https:<span class="comment">//username:password@git.coding.net</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如何用hexo的话可以不用输入用户名和密码，执行hexo语句会弹出对话框提示输入</p>
</blockquote>
<h2 id="修改git配置"><a href="#修改git配置" class="headerlink" title="修改git配置"></a>修改git配置</h2><ul>
<li>执行命令</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global credential.helper store</div></pre></td></tr></table></figure>
<ul>
<li>上述命令会在~/.gitconfig文件末尾添加如下配置:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[credential]</div><div class="line">     helper = store</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.jianshu.com/p/81ae6e77ff47" target="_blank" rel="external">解决向github提交代码是老要输入用户名密码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;采用HTTPS方式提交代码到github和coding很方便，但是总是需要输入用户名和密码，以下这种方式可以解决&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;新建-git-credentials文件&quot;&gt;&lt;a href=&quot;#新建-git-credentials文件&quot; class=&quot;headerlink&quot; title=&quot;新建.git-credentials文件&quot;&gt;&lt;/a&gt;新建.git-credentials文件&lt;/h2&gt;&lt;p&gt;在你的用户目录下新建一个文本文件, 名曰 &lt;strong&gt;.git-credentials&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户目录:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;windows: C:/Users/username&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mac os x: /Users/username&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;linux:  /home/username&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;输入用户名和密码&quot;&gt;&lt;a href=&quot;#输入用户名和密码&quot; class=&quot;headerlink&quot; title=&quot;输入用户名和密码&quot;&gt;&lt;/a&gt;输入用户名和密码&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;https:&lt;span class=&quot;comment&quot;&gt;//username:password@github.com&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;https:&lt;span class=&quot;comment&quot;&gt;//username:password@git.coding.net&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;如何用hexo的话可以不用输入用户名和密码，执行hexo语句会弹出对话框提示输入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;修改git配置&quot;&gt;&lt;a href=&quot;#修改git配置&quot; class=&quot;headerlink&quot; title=&quot;修改git配置&quot;&gt;&lt;/a&gt;修改git配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;执行命令&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git config --global credential.helper store&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;上述命令会在~/.gitconfig文件末尾添加如下配置:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[credential]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     helper = store&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="项目管理" scheme="http://www.qiuchengjia.cn/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="项目管理" scheme="http://www.qiuchengjia.cn/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java源码分析--Enum</title>
    <link href="http://www.qiuchengjia.cn/2016/08/12/JAVA%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Java%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-Enum/"/>
    <id>http://www.qiuchengjia.cn/2016/08/12/JAVA源码分析/Java源码分析-Enum/</id>
    <published>2016-08-12T12:39:07.000Z</published>
    <updated>2016-08-12T04:43:20.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Enum类是java.lang包中一个类，他是Java语言中所有枚举类型的公共基类</p>
</blockquote>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Enum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;, <span class="title">Serializable</span></span></div></pre></td></tr></table></figure>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul>
<li>首先，<strong>抽象类不能被实例化</strong>，所以我们在<strong>java程序中不能使用new关键字来声明一个Enum</strong>，如果想要定义可以使用这样的语法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> enumName&#123;</div><div class="line">    value1,<span class="function">value2</span></div><div class="line">    <span class="title">method1</span><span class="params">()</span>&#123;&#125;</div><div class="line">    method2()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>其次，看到抽象类，第一印象是肯定有类继承他。至少我们应该是可以继承他的，所以：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testEnum</span> <span class="keyword">extends</span> <span class="title">Enum</span></span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testEnum</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt;</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testEnum</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt;</span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>尝试了以上三种方式之后，得出以下结论：<strong>Enum类无法被继承</strong></p>
</li>
<li><p>为什么一个抽象类不让继承？enum定义的枚举是怎么来的？难道不是对Enum的一种继承吗？带着这些疑问我们来反编译以下代码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Color &#123;RED, BLUE, GREEN&#125;</div></pre></td></tr></table></figure>
<ul>
<li>编译器将会把他转成如下内容：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">Color</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color[] values() &#123; <span class="keyword">return</span> (Color[])$VALUES.clone(); &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Color <span class="title">valueOf</span><span class="params">(String name)</span> </span>&#123; ... &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String s, <span class="keyword">int</span> i)</span> </span>&#123; <span class="keyword">super</span>(s, i); &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color RED;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color BLUE;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color GREEN;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color $VALUES[];</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    RED = <span class="keyword">new</span> Color(<span class="string">"RED"</span>, <span class="number">0</span>);</div><div class="line">    BLUE = <span class="keyword">new</span> Color(<span class="string">"BLUE"</span>, <span class="number">1</span>);</div><div class="line">    GREEN = <span class="keyword">new</span> Color(<span class="string">"GREEN"</span>, <span class="number">2</span>);</div><div class="line">    $VALUES = (<span class="keyword">new</span> Color[] &#123; RED, BLUE, GREEN &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>短短的一行代码，被编译器处理过之后竟然变得这么多，看来，enmu关键字是java提供给我们的一个语法糖啊。。。从反编译之后的代码中，我们发现，编译器不让我们继承Enum，但是当我们使用enum关键字定义一个枚举的时候，他会帮我们在编译后默认继承java.lang.Enum类，而不像其他的类一样默认继承Object类。且采用enum声明后，该类会被编译器加上final声明，故该类是无法继承的。 PS：由于JVM类初始化是线程安全的，所以可以采用枚举类实现一个线程安全的单例模式</li>
</ul>
<h3 id="实现Comparable和Serializable接口"><a href="#实现Comparable和Serializable接口" class="headerlink" title="实现Comparable和Serializable接口"></a>实现Comparable和Serializable接口</h3><ul>
<li>Enum实现了Serializable接口，可以序列化。 Enum实现了Comparable接口，可以进行比较，默认情况下，只有同类型的enum才进行比较（原因见后文），要实现不同类型的enum之间的比较，只能复写compareTo方法</li>
</ul>
<h3 id="泛型-“-lt-”E-extends-Enum”-lt-”E-gt-gt"><a href="#泛型-“-lt-”E-extends-Enum”-lt-”E-gt-gt" class="headerlink" title="泛型 “&lt;”E extends Enum”&lt;”E&gt;&gt;"></a>泛型 “&lt;”E extends Enum”&lt;”E&gt;&gt;</h3><ul>
<li>怎么理解 “&lt;”E extends Enum”&lt;”E&gt;&gt;</li>
</ul>
<p>首先，这样写只是为了让Java的API更有弹性，他主要是限定形态参数实例化的对象，故要求只能是Enum，这样才能对 compareTo 之类的方法所传入的参数进行形态检查。所以，<strong>我们完全可以不必去关心他为什么这么设计</strong></p>
<ul>
<li><p>首先我们先来“翻译”一下这个Enum<e extends="" enum<e="">&gt;到底什么意思，然后再来解释为什么Java要这么用。 我们先看一个比较常见的泛型：List<string>。这个泛型的意思是，List中存的都是String类型，告诉编译器要接受String类型，并且从List中取出内容的时候也自动帮我们转成String类型。 所以Enum<e extends="" enum<e="">&gt;可以暂时理解为Enum里面的内容都是E extends Enum<e>类型。 这里的E我们就理解为枚举，extends表示上界，比如： List&lt;? extends Object&gt;，List中的内容可以是Object或者扩展自Object的类。这就是extends的含义。 所以，E extends Enum<e>表示为一个继承了Enum<e>类型的枚举类型。 那么，Enum<e extends="" enum<e="">&gt;就不难理解了，就是一个Enum只接受一个Enum或者他的子类作为参数。相当于把一个子类或者自己当成参数，传入到自身，引起一些特别的语法效果  </e></e></e></e></e></string></e></p>
</li>
<li><p><strong>为什么Java要这样定义Enum</strong></p>
</li>
</ul>
<p>首先我们来科普一下enum</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">enum</span> Color&#123;</div><div class="line">    RED,GREEN,YELLOW</div><div class="line">&#125;</div><div class="line"><span class="keyword">enum</span> Season&#123;</div><div class="line">    SPRING,SUMMER,WINTER</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(Color.RED.ordinal());</div><div class="line">        System.out.println(Season.SPRING.ordinal());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>代码中两处输出内容都是 0 ，因为枚举类型的默认的序号都是从零开始的</p>
</li>
<li><p>要理解这个问题，首先我们来看一个Enum类中的方法（暂时忽略其他成员变量和方法）：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Enum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;, <span class="title">Serializable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> ordinal;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(E o)</span> </span>&#123;</div><div class="line">        Enum other = (Enum)o;</div><div class="line">        Enum self = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span> (self.getClass() != other.getClass() &amp;&amp; <span class="comment">// optimization</span></div><div class="line">            self.getDeclaringClass() != other.getDeclaringClass())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException();</div><div class="line">        <span class="keyword">return</span> self.ordinal - other.ordinal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>首先我们认为Enum的定义中没有使用Enum<e extends="" enum<e="">&gt;，那么compareTo方法就要这样定义（因为没有使用泛型，所以就要使用Object，这也是Java中很多方法常用的方式）：</e></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>当我们调用compareTo方法的时候依然传入两个枚举类型，在compareTo方法的实现中，比较两个枚举的过程是先将参数转化成Enum类型，然后再比较他们的序号是否相等。那么我们这样比较：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Color.RED.compareTo(Color.RED);</div><div class="line">Color.RED.compareTo(Season.SPRING);</div></pre></td></tr></table></figure>
<ul>
<li><p>如果在compareTo方法中不做任何处理的话，那么以上这段代码返回内容将都是true（因为Season.SPRING的序号和Color.RED的序号都是 0 ）。但是，很明显， Color.RED和Season.SPRING并不相等</p>
</li>
<li><p>但是Java使用Enum<e extends="" enum<e="">&gt;声明Enum，并且在compareTo的中使用E作为参数来避免了这种问题。 以上两个条件限制Color.RED只能和Color定义出来的枚举进行比较，当我们试图使用Color.RED.compareTo(Season.SPRING);这样的代码是，会报出这样的错误：</e></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">The method <span class="title">compareTo</span><span class="params">(Color)</span> in the type Enum&lt;Color&gt; is not applicable <span class="keyword">for</span> the <span class="title">arguments</span> <span class="params">(Season)</span></span></div></pre></td></tr></table></figure>
<ul>
<li><p>他说明，compareTo方法只接受Enum<color>类型</color></p>
</li>
<li><p>Java为了限定形态参数实例化的对象，故要求只能是Enum，这样才能对 compareTo之类的方法所传入的参数进行形态检查。 因为“红色”只有和“绿色”比较才有意义，用“红色”和“春天”比较毫无意义，所以，Java用这种方式一劳永逸的保证像compareTo这样的方法可以正常的使用而不用考虑类型</p>
</li>
</ul>
<blockquote>
<p>PS：在Java中，其实也可以实现“红色”和“春天”比较，因为Enum实现了Comparable接口，可以重写compareTo方法来实现不同的enum之间的比较</p>
</blockquote>
<h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><ul>
<li>在Enum中，有两个成员变量，一个是名字(name)，一个是序号(ordinal)。 序号是一个枚举常量，表示在枚举中的位置，从0开始，依次递增</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> hollis</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name；</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> ordinal;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">ordinal</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> ordinal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul>
<li>前面我们说过，Enum是一个抽象类，不能被实例化，但是他也有构造函数，从前面我们反编译出来的代码中，我们也发现了Enum的构造函数，在Enum中只有一个保护类型的构造函数：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Enum</span><span class="params">(String name, <span class="keyword">int</span> ordinal)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.ordinal = ordinal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>文章开头反编译的代码中private Color(String s, int i) { super(s, i); }中的super(s, i);就是调用Enum中的这个保护类型的构造函数来初始化name和ordinal</li>
</ul>
<h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><ul>
<li>Enum当中有以下这么几个常用方法，调用方式就是使用Color.RED.methodName（params…）的方式调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>==other;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.hashCode();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(E o)</span> </span>&#123;</div><div class="line">    Enum other = (Enum)o;</div><div class="line">    Enum self = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (self.getClass() != other.getClass() &amp;&amp; <span class="comment">// optimization</span></div><div class="line">        self.getDeclaringClass() != other.getDeclaringClass())</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException();</div><div class="line">    <span class="keyword">return</span> self.ordinal - other.ordinal;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class&lt;E&gt; <span class="title">getDeclaringClass</span><span class="params">()</span> </span>&#123;</div><div class="line">    Class clazz = getClass();</div><div class="line">    Class zuper = clazz.getSuperclass();</div><div class="line">    <span class="keyword">return</span> (zuper == Enum.class) ? clazz : zuper;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Enum&lt;T&gt;&gt; <span class="function">T <span class="title">valueOf</span><span class="params">(Class&lt;T&gt; enumType,String name)</span> </span>&#123;</div><div class="line">    T result = enumType.enumConstantDirectory().get(name);</div><div class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Name is null"</span>);</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">        <span class="string">"No enum constant "</span> + enumType.getCanonicalName() + <span class="string">"."</span> + name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.hollischuang.com/archives/92" target="_blank" rel="external">Java 7 源码学习系列（二）——Enum</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Enum类是java.lang包中一个类，他是Java语言中所有枚举类型的公共基类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Enum&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Enum&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Comparable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt;, &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;抽象类&quot;&gt;&lt;a href=&quot;#抽象类&quot; class=&quot;headerlink&quot; title=&quot;抽象类&quot;&gt;&lt;/a&gt;抽象类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先，&lt;strong&gt;抽象类不能被实例化&lt;/strong&gt;，所以我们在&lt;strong&gt;java程序中不能使用new关键字来声明一个Enum&lt;/strong&gt;，如果想要定义可以使用这样的语法：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; enumName&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    value1,&lt;span class=&quot;function&quot;&gt;value2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    method2()&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JAVA源码分析" scheme="http://www.qiuchengjia.cn/categories/JAVA%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="JAVA源码分析" scheme="http://www.qiuchengjia.cn/tags/JAVA%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Java命令--javap</title>
    <link href="http://www.qiuchengjia.cn/2016/08/12/JAVA%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/Java%E5%91%BD%E4%BB%A4-javap/"/>
    <id>http://www.qiuchengjia.cn/2016/08/12/JAVA命令学习/Java命令-javap/</id>
    <published>2016-08-12T12:34:38.000Z</published>
    <updated>2016-08-12T08:41:37.735Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>javap是jdk自带的一个工具，可以对代码 <a href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E5%8F%8D%E7%BC%96%E8%AF%91/">反编译</a>，也可以查看java编译器生成的字节码</p>
</blockquote>
<p>一般情况下，很少有人使用javap对class文件进行反编译，因为有很多成熟的反编译工具可以使用，比如jad。但是，javap还可以查看java编译器为我们生成的字节码。通过它，可以对照源代码和字节码，从而了解很多编译器内部的工作</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li>javap命令分解一个class文件，它根据options来决定到底输出什么。如果没有使用options,那么javap将会输出包，类里的protected和public域以及类里的所有方法。javap将会把它们输出在标准输出上。来看这个例子，先编译(javac)下面这个类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.applet.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocFooter</span> <span class="keyword">extends</span> <span class="title">Applet</span> </span>&#123;</div><div class="line">        String date;</div><div class="line">        String email;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">                resize(<span class="number">500</span>,<span class="number">100</span>);</div><div class="line">                date = getParameter(<span class="string">"LAST_UPDATED"</span>);</div><div class="line">                email = getParameter(<span class="string">"EMAIL"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</div><div class="line">                g.drawString(date + <span class="string">" by "</span>,<span class="number">100</span>, <span class="number">15</span>);</div><div class="line">                g.drawString(email,<span class="number">290</span>,<span class="number">15</span>);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>在命令行上键入javap DocFooter后，输出结果如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Compiled from <span class="string">"DocFooter.java"</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocFooter</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">applet</span>.<span class="title">Applet</span> </span>&#123;</div><div class="line">  java.lang.String date;</div><div class="line">  java.lang.String email;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DocFooter</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(java.awt.Graphics)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果加入了-c，即javap -c DocFooter，那么输出结果如下</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">Compiled from "DocFooter.java"</div><div class="line">public class DocFooter extends java.applet.Applet &#123;</div><div class="line">  java.lang.String date;</div><div class="line"></div><div class="line">  java.lang.String email;</div><div class="line"></div><div class="line">  public DocFooter();</div><div class="line">    Code:</div><div class="line">       0: aload_0       </div><div class="line">       1: invokespecial #1                  // Method java/applet/Applet."&lt;init&gt;":()V</div><div class="line">       4: return        </div><div class="line"></div><div class="line">  public void init();</div><div class="line">    Code:</div><div class="line">       0: aload_0       </div><div class="line">       1: sipush        500</div><div class="line">       4: bipush        100</div><div class="line">       6: invokevirtual #2                  // Method resize:(II)V</div><div class="line">       9: aload_0       </div><div class="line">      10: aload_0       </div><div class="line">      11: ldc           #3                  // String LAST_UPDATED</div><div class="line">      13: invokevirtual #4                  // Method getParameter:(Ljava/lang/String;)Ljava/lang/String;</div><div class="line">      16: putfield      #5                  // Field date:Ljava/lang/String;</div><div class="line">      19: aload_0       </div><div class="line">      20: aload_0       </div><div class="line">      21: ldc           #6                  // String EMAIL</div><div class="line">      23: invokevirtual #4                  // Method getParameter:(Ljava/lang/String;)Ljava/lang/String;</div><div class="line">      26: putfield      #7                  // Field email:Ljava/lang/String;</div><div class="line">      29: return        </div><div class="line"></div><div class="line">  public void paint(java.awt.Graphics);</div><div class="line">    Code:</div><div class="line">       0: aload_1       </div><div class="line">       1: new           #8                  // class java/lang/StringBuilder</div><div class="line">       4: dup           </div><div class="line">       5: invokespecial #9                  // Method java/lang/StringBuilder."&lt;init&gt;":()V</div><div class="line">       8: aload_0       </div><div class="line">       9: getfield      #5                  // Field date:Ljava/lang/String;</div><div class="line">      12: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">      15: ldc           #11                 // String  by </div><div class="line">      17: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">      20: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div><div class="line">      23: bipush        100</div><div class="line">      25: bipush        15</div><div class="line">      27: invokevirtual #13                 // Method java/awt/Graphics.drawString:(Ljava/lang/String;II)V</div><div class="line">      30: aload_1       </div><div class="line">      31: aload_0       </div><div class="line">      32: getfield      #7                  // Field email:Ljava/lang/String;</div><div class="line">      35: sipush        290</div><div class="line">      38: bipush        15</div><div class="line">      40: invokevirtual #13                 // Method java/awt/Graphics.drawString:(Ljava/lang/String;II)V</div><div class="line">      43: return        </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>上面输出的内容就是<strong>字节码</strong></li>
</ul>
<h2 id="用法摘要"><a href="#用法摘要" class="headerlink" title="用法摘要"></a>用法摘要</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-help 帮助</div><div class="line">-l 输出行和变量的表</div><div class="line">-<span class="keyword">public</span> 只输出<span class="keyword">public</span>方法和域</div><div class="line">-<span class="keyword">protected</span> 只输出<span class="keyword">public</span>和<span class="keyword">protected</span>类和成员</div><div class="line">-<span class="keyword">package</span> 只输出包，<span class="keyword">public</span>和<span class="keyword">protected</span>类和成员，这是默认的</div><div class="line">-p -<span class="keyword">private</span> 输出所有类和成员</div><div class="line">-s 输出内部类型签名</div><div class="line">-c 输出分解后的代码，例如，类中每一个方法内，包含java字节码的指令，</div><div class="line">-verbose 输出栈大小，方法参数的个数</div><div class="line">-constants 输出静态<span class="keyword">final</span>常量</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>javap可以用于反编译和查看编译器编译后的字节码。平时一般用javap -c比较多，该命令用于列出每个方法所执行的JVM指令，并显示每个方法的字节码的实际作用。可以通过字节码和源代码的对比，深入分析java的编译原理，了解和解决各种Java原理级别的问题</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://www.hollischuang.com/archives/1107" target="_blank" rel="external">Java命令学习系列（七）——javap</a></p>
</li>
<li><p><a href="http://www.colabug.com/thread-1450948-1-1.html" target="_blank" rel="external">Java命令学习系列（七）——javap</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;javap是jdk自带的一个工具，可以对代码 &lt;a href=&quot;http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E5%8F%8D%E7%BC%96%E8%AF%91/&quot;&gt;反编译&lt;/a&gt;，也可以查看java编译器生成的字节码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般情况下，很少有人使用javap对class文件进行反编译，因为有很多成熟的反编译工具可以使用，比如jad。但是，javap还可以查看java编译器为我们生成的字节码。通过它，可以对照源代码和字节码，从而了解很多编译器内部的工作&lt;/p&gt;
&lt;h2 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;javap命令分解一个class文件，它根据options来决定到底输出什么。如果没有使用options,那么javap将会输出包，类里的protected和public域以及类里的所有方法。javap将会把它们输出在标准输出上。来看这个例子，先编译(javac)下面这个类&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.awt.*;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.applet.*;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DocFooter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Applet&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String date;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String email;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                resize(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                date = getParameter(&lt;span class=&quot;string&quot;&gt;&quot;LAST_UPDATED&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                email = getParameter(&lt;span class=&quot;string&quot;&gt;&quot;EMAIL&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;paint&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Graphics g)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                g.drawString(date + &lt;span class=&quot;string&quot;&gt;&quot; by &quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                g.drawString(email,&lt;span class=&quot;number&quot;&gt;290&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JAVA命令学习" scheme="http://www.qiuchengjia.cn/categories/JAVA%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JAVA命令学习" scheme="http://www.qiuchengjia.cn/tags/JAVA%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java单例模式的七种写法</title>
    <link href="http://www.qiuchengjia.cn/2016/08/12/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%83%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <id>http://www.qiuchengjia.cn/2016/08/12/JAVA设计模式/Java单例模式的七种写法/</id>
    <published>2016-08-11T23:37:17.000Z</published>
    <updated>2016-08-12T08:17:27.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一种（懒汉，线程不安全）："><a href="#第一种（懒汉，线程不安全）：" class="headerlink" title="第一种（懒汉，线程不安全）："></a>第一种（懒汉，线程不安全）：</h2><ul>
<li>类初始化的时候并不创建，想用的时候创建</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">        instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第二种（懒汉，线程安全）："><a href="#第二种（懒汉，线程安全）：" class="headerlink" title="第二种（懒汉，线程安全）："></a>第二种（懒汉，线程安全）：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">        instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这种写法能够在多线程中很好的工作，而且看起来它也具备很好的lazy loading(只在需要的时候加载必要的数据，这样可以避免即时加载所带来的不必要的系统开销)，但是，遗憾的是，效率很低，99%情况下不需要同步</li>
</ul>
<a id="more"></a>
<h2 id="第三种（饿汉）："><a href="#第三种（饿汉）：" class="headerlink" title="第三种（饿汉）："></a>第三种（饿汉）：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这种方式基于classloder机制，避免了多线程的同步(classloder在加载类的时候是同步的)问题，不过，instance在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用getInstance方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance显然没有达到lazy loading(只在需要的时候加载必要的数据，这样可以避免即时加载所带来的不必要的系统开销)的效果</li>
</ul>
<h2 id="第四种（饿汉，变种）："><a href="#第四种（饿汉，变种）：" class="headerlink" title="第四种（饿汉，变种）："></a>第四种（饿汉，变种）：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> Singleton instance = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">static</span> &#123;  </div><div class="line">    instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>表面上看起来差别挺大，其实更第三种方式差不多，都是在类初始化即实例化instance</li>
</ul>
<h2 id="第五种（静态内部类）："><a href="#第五种（静态内部类）：" class="headerlink" title="第五种（静态内部类）："></a>第五种（静态内部类）：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这种方式同样利用了classloder的机制来保证初始化instance时只有一个线程，它跟第三种和第四种方式不同的是（很细微的差别）：第三种和第四种方式是只要Singleton类被装载了，那么instance就会被实例化（没有达到lazy loading效果），而这种方式是Singleton类被装载了，instance不一定被初始化。因为SingletonHolder类没有被主动使用，只有显示通过调用getInstance方法时，才会显示装载SingletonHolder类，从而实例化instance。想象一下，如果实例化instance很消耗资源，我想让他延迟加载，另外一方面，我不希望在Singleton类加载时就实例化，因为我不能确保Singleton类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化instance显然是不合适的。这个时候，这种方式相比第三和第四种方式就显得很合理</li>
</ul>
<h2 id="第六种（枚举）："><a href="#第六种（枚举）：" class="headerlink" title="第六种（枚举）："></a>第六种（枚举）：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;  </div><div class="line">    INSTANCE;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这种方式是Effective Java作者Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象，可谓是很坚强的壁垒啊，在<a href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB/">Java枚举类</a>中有详细介绍枚举的线程安全问题和序列化问题，不过，个人认为由于1.5中才加入enum特性，用这种方式写不免让人感觉生疏，在实际工作中，我也很少看见有人这么写过</li>
</ul>
<h2 id="第七种（双重校验锁）："><a href="#第七种（双重校验锁）：" class="headerlink" title="第七种（双重校验锁）："></a>第七种（双重校验锁）：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </div><div class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </div><div class="line">            singleton = <span class="keyword">new</span> Singleton();  </div><div class="line">        &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> singleton;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有两个问题需要注意：</p>
<ol>
<li><p>如果单例由不同的类装载器装入，那便有可能存在多个单例类的实例。假定不是远端存取，例如一些servlet容器对每个servlet使用完全不同的类装载器，这样的话如果有两个servlet访问一个单例类，它们就都会有各自的实例</p>
</li>
<li><p>如果Singleton实现了java.io.Serializable接口，那么这个类的实例就可能被序列化和复原。不管怎样，如果你序列化一个单例类的对象，接下来复原多个那个对象，那你就会有多个单例类的实例</p>
</li>
</ol>
<ul>
<li>对第一个问题修复的办法是：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Class <span class="title">getClass</span><span class="params">(String classname)</span>  </span></div><div class="line"><span class="keyword">throws</span> ClassNotFoundException &#123;  </div><div class="line">    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</div><div class="line">    <span class="keyword">if</span>(classLoader == <span class="keyword">null</span>)     </div><div class="line">          classLoader = Singleton.class.getClassLoader();     </div><div class="line">          <span class="keyword">return</span> (classLoader.loadClass(classname));     </div><div class="line">       &#125;     </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>对第二个问题修复的办法是：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;     </div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();     </div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;     </div><div class="line"></div><div class="line">   &#125;     </div><div class="line">   <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;     </div><div class="line">            <span class="keyword">return</span> INSTANCE;     </div><div class="line">      &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>对我来说，我比较喜欢第三种和第五种方式，简单易懂，而且在JVM层实现了线程安全（如果不是多个类加载器环境），一般的情况下，我会使用第三种方式，只有在要明确实现lazy loading效果时才会使用第五种方式，另外，如果涉及到反序列化创建对象时我会试着使用枚举的方式来实现单例，不过，我一直会保证我的程序是线程安全的，而且我永远不会使用第一种和第二种方式，如果有其他特殊的需求，我可能会使用第七种方式，毕竟，JDK1.5已经没有双重检查锁定的问题了</p>
</li>
<li><p>不过一般来说，第一种不算单例，第四种和第三种就是一种，如果算的话，第五种也可以分开写了。所以说，一般单例都是五种写法。懒汉，恶汉，双重校验锁，枚举和静态内部类</p>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://www.hollischuang.com/archives/205" target="_blank" rel="external">[转+注]单例模式的七种写法</a></p>
</li>
<li><p><a href="http://cantellow.iteye.com/blog/838473" target="_blank" rel="external">单例模式的七种写法</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一种（懒汉，线程不安全）：&quot;&gt;&lt;a href=&quot;#第一种（懒汉，线程不安全）：&quot; class=&quot;headerlink&quot; title=&quot;第一种（懒汉，线程不安全）：&quot;&gt;&lt;/a&gt;第一种（懒汉，线程不安全）：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类初始化的时候并不创建，想用的时候创建&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton instance;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (instance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;第二种（懒汉，线程安全）：&quot;&gt;&lt;a href=&quot;#第二种（懒汉，线程安全）：&quot; class=&quot;headerlink&quot; title=&quot;第二种（懒汉，线程安全）：&quot;&gt;&lt;/a&gt;第二种（懒汉，线程安全）：&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton instance;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (instance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;这种写法能够在多线程中很好的工作，而且看起来它也具备很好的lazy loading(只在需要的时候加载必要的数据，这样可以避免即时加载所带来的不必要的系统开销)，但是，遗憾的是，效率很低，99%情况下不需要同步&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA设计模式" scheme="http://www.qiuchengjia.cn/categories/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JAVA设计模式" scheme="http://www.qiuchengjia.cn/tags/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java反编译</title>
    <link href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <id>http://www.qiuchengjia.cn/2016/08/12/JAVA/Java反编译/</id>
    <published>2016-08-11T23:03:35.000Z</published>
    <updated>2016-08-12T06:00:21.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是编译"><a href="#什么是编译" class="headerlink" title="什么是编译"></a>什么是编译</h2><ol>
<li><p>利用编译程序从源语言编写的源程序产生目标程序的过程</p>
</li>
<li><p>用编译程序产生目标程序的动作。 编译就是把高级语言变成计算机可以识别的2进制语言，计算机只认识1和0，编译程序把人们熟悉的语言换成2进制的。 编译程序把一个源程序翻译成目标程序的工作过程分为五个阶段：词法分析；语法分析；语义检查和中间代码生成；代码优化；目标代码生成。主要是进行词法分析和语法分析，又称为源程序分析，分析过程中发现有语法错误，给出提示信息，具体参考 <a href="http://www.qiuchengjia.cn/2016/07/24/JVM/Javac%E7%BC%96%E8%AF%91%E4%B8%8EJIT%E7%BC%96%E8%AF%91/">Javac编译与JIT编译</a></p>
</li>
</ol>
<h2 id="什么是反编译"><a href="#什么是反编译" class="headerlink" title="什么是反编译"></a>什么是反编译</h2><ul>
<li>计算机软件反向工程（Reverse engineering）也称为计算机软件还原工程，是指通过对他人软件的目标程序（可执行程序）进行“逆向分析、研究”工作，以推导出他人的软件产品所使用的思路、原理、结构、算法、处理过程、运行方法等设计要素，某些特定情况下可能推导出源代码。反编译作为自己开发软件时的参考，或者直接用于自己的软件产品中</li>
</ul>
<a id="more"></a>
<h2 id="反编译的原理"><a href="#反编译的原理" class="headerlink" title="反编译的原理"></a>反编译的原理</h2><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><ul>
<li><strong>JVM是什么？</strong>我的理解简单来说是：一个能把Class字节码翻译成本机cpu能够识别的指令的程序</li>
</ul>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><blockquote>
<p>Java源码(.java文件) =&gt; 编译器  =&gt;  Class文件 =&gt; JVM =&gt; 可执行的指令</p>
</blockquote>
<ul>
<li>不一定只有Java，例如Scala，Groovy等基于JVM的语言，只要能编译成标准Class的都可以</li>
</ul>
<h3 id="Class文件"><a href="#Class文件" class="headerlink" title="Class文件"></a>Class文件</h3><ul>
<li><p>详情参见 <a href="http://www.qiuchengjia.cn/2016/07/18/JVM/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/">Class类文件结构</a></p>
</li>
<li><p><strong>class文件结构介绍：</strong> 根据java虚拟机规范的规定，class文件格式采用一种类似c语言结构体的伪结构来存储，这种伪结构中只有两种数据类型：无符号数和表。 无符号数：无符号数属于基本的数据类型，以u1,u2,u4,u8来分别代表1个字节，2个字节，4个字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值，或者按照utf-8编码构成字符串值。 表：表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性地以“_info“结尾。表用于描述有层次关系的复合结构的数据，整个class文件本质上就是一张表，它由下列数据项构成：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">ClassFile &#123; </div><div class="line">    <span class="comment">//魔数(0xCAFEBABE)，每个class文件的前4个字节称为魔数,</span></div><div class="line">    <span class="comment">//值为0xCAFEBABE。作用在于轻松的辨别class文件与非class文件。</span></div><div class="line">    u4 magic;</div><div class="line">    <span class="comment">//下面两个是版本号，随着Java技术的发展，class文件的格式会发生变化。</span></div><div class="line">    <span class="comment">//版本号的作用在于使得虚拟机能够认识当前加载class的文件格式。从而准确的提取class文件信息</span></div><div class="line">    u2 minor_version;<span class="comment">//次版本号</span></div><div class="line">    u2 major_version;<span class="comment">//主版本号  </span></div><div class="line">    u2 constant_pool_count;<span class="comment">//常量池容量计数值  </span></div><div class="line">    cp_info constant_pool[constant_pool_count-<span class="number">1</span>];<span class="comment">//常量池，具体见对照表  </span></div><div class="line">    <span class="comment">//访问标志，用来表明该class文件中定义的是类还是接口，访问</span></div><div class="line">    <span class="comment">//修饰符是public还是缺省。类或接口是否是抽象的。类是否是final的。  </span></div><div class="line">    u2 access_flags;</div><div class="line">    u2 this_class;<span class="comment">//类索引  </span></div><div class="line">    u2 super_class;<span class="comment">//父类索引  </span></div><div class="line">    u2 interfaces_count;<span class="comment">//接口计数器  </span></div><div class="line">    u2 interfaces[interfaces_count];<span class="comment">//接口索引集合  </span></div><div class="line">    u2 fields_count;<span class="comment">//字段计数器  </span></div><div class="line">    field_info fields[fields_count];<span class="comment">//字段表  </span></div><div class="line">    u2 methods_count;<span class="comment">//方法计数器  </span></div><div class="line">    method_info methods[methods_count];<span class="comment">//方法表  </span></div><div class="line">    u2 attributes_count;<span class="comment">//属性表计数器  </span></div><div class="line">    attribute_info attributes[attributes_count];<span class="comment">//属性表集合  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="常量对照表"><a href="#常量对照表" class="headerlink" title="常量对照表"></a>常量对照表</h3><table>
<thead>
<tr>
<th>常量表类型</th>
<th style="text-align:left">标志值(占1 byte)</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONSTANT_Utf8</td>
<td style="text-align:left">1</td>
<td style="text-align:left">UTF-8编码的Unicode字符串</td>
</tr>
<tr>
<td>CONSTANT_Integer</td>
<td style="text-align:left">3</td>
<td style="text-align:left">int类型的字面值</td>
</tr>
<tr>
<td>CONSTANT_Float</td>
<td style="text-align:left">4</td>
<td style="text-align:left">float类型的字面值</td>
</tr>
<tr>
<td>CONSTANT_Long</td>
<td style="text-align:left">5</td>
<td style="text-align:left">long类型的字面值</td>
</tr>
<tr>
<td>CONSTANT_Double</td>
<td style="text-align:left">6</td>
<td style="text-align:left">double类型的字面值</td>
</tr>
<tr>
<td>CONSTANT_Class</td>
<td style="text-align:left">7</td>
<td style="text-align:left">对一个类或接口的符号引用</td>
</tr>
<tr>
<td>CONSTANT_String</td>
<td style="text-align:left">8</td>
<td style="text-align:left">String类型字面值的引用</td>
</tr>
<tr>
<td>CONSTANT_Fieldref</td>
<td style="text-align:left">9</td>
<td style="text-align:left">对一个字段的符号引用</td>
</tr>
<tr>
<td>CONSTANT_Methodref</td>
<td style="text-align:left">10</td>
<td style="text-align:left">对一个类中方法的符号引用</td>
</tr>
<tr>
<td>CONSTANT_InterfaceMethodref</td>
<td style="text-align:left">11</td>
<td style="text-align:left">对一个接口中方法的符号引用</td>
</tr>
<tr>
<td>CONSTANT_NameAndType</td>
<td style="text-align:left">12</td>
<td style="text-align:left">对一个字段或方法的部分符号引用</td>
</tr>
</tbody>
</table>
<p>如上面表格所示，每个类型都会有对应的tag值，还有方法权限标志表，描述符表之类的。根据这些tag值来表示，例如常量为01 00 12 4C 6A 61 76 61 2F 6C 61 6E 67 2F 53 74 72 69 6E 67 3B，是int类型呢还是float呢，是public还是private？根据这些对照表来查出对应tag所表示的意义可以看出：</p>
<ul>
<li><p>01——tag值为1，类型为CONSTANT_Utf8_info；</p>
</li>
<li><p>00 12——这个UTF-8编码的常量字符串长度为18；</p>
</li>
<li><p>4C 6A 61 76 61 2F 6C 61 6E 67 2F 53 74 72 69 6E 67 3B——18个字节的字符串，对应：Ljava/lang/String(描述符,L 代表是引用类型);</p>
</li>
</ul>
<h3 id="反编译原理"><a href="#反编译原理" class="headerlink" title="反编译原理"></a>反编译原理</h3><ul>
<li>Class按照上面说的tag值和表对照，就能分析出Class对应的Java文件结构，那么即遵循这样的规范反编译成Java文件，当然反编译出来的并非是原本一模一样的Java源码，而是根据分析重新生成的Java代码</li>
</ul>
<h2 id="Java类的编译与反编译"><a href="#Java类的编译与反编译" class="headerlink" title="Java类的编译与反编译"></a>Java类的编译与反编译</h2><ul>
<li>我们在最初学习Java的时候，会接触到两个命令：javac和java,那个时候我们就知道，javac是用来编译Java类的，就是将我们写好的helloworld.java文件编译成helloworld.class文件</li>
</ul>
<blockquote>
<p>class文件打破了C或者C++等语言所遵循的传统，使用这些传统语言写的程序通常首先被编译，然后被连接成单独的、专门支持特定硬件平台和操作系统的二进制文件。通常情况下，一个平台上的二进制可执行文件不能在其他平台上工作。而Java class文件是可以运行在任何支持Java虚拟机的硬件平台和操作系统上的二进制文件</p>
</blockquote>
<ul>
<li>那么<strong>反编译</strong>呢，就是通过helloworld.class文件得到java文件（或者说是程序员能看懂的Java文件）</li>
</ul>
<h2 id="什么时候会用到反编译"><a href="#什么时候会用到反编译" class="headerlink" title="什么时候会用到反编译"></a>什么时候会用到反编译</h2><ol>
<li><p>我们只有一个类的class文件，但是我们又看不懂Java的class文件，那么我们可以把它反编译成我们可以看得懂的文件</p>
</li>
<li><p>学习Java过程中，JDK的每个版本都会加入越来越多的语法糖，有些时候我们想知道Java一些实现细节，我们可以借助反编译。</p>
</li>
</ol>
<h2 id="反编译工具"><a href="#反编译工具" class="headerlink" title="反编译工具"></a>反编译工具</h2><ol>
<li><p><a href="http://www.qiuchengjia.cn/2016/08/12/JAVA%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/Java%E5%91%BD%E4%BB%A4-javap/">javap</a></p>
</li>
<li><p>Jad: <a href="http://varaneckas.com/jad/" target="_blank" rel="external">官网</a></p>
</li>
</ol>
<blockquote>
<p>这个工具下载好之后会有一个执行文件，只要在执行文件所在目录执行./jad helloworld.class 就会在当前目录下生成helloworld.jad文件，该文件里就是我们很熟悉的Java代码</p>
</blockquote>
<ul>
<li><strong>Eclipse插件：</strong></li>
</ul>
<p><a href="http://jadclipse.sourceforge.net/wiki/index.php/Main_Page" target="_blank" rel="external">传送门</a> 在官网下载插件的jar包，然后将jar包放到eclipse的plugins目录下‘ 在打开Eclipse，<strong>Eclipse-&gt;Window-&gt;Preferences-&gt;Java</strong>，此时你会发现会比原来多了一个JadClipse的选项，单击，在Path to decompiler中输入你刚才放置jad.exe的位置，也可以制定临时文件的目录。当然在JadClipse下还有一些子选项，如Debug，Directives等，按照默认配置即可。 基本配置完毕后，我们可以查看一下class文件的默认打开方式，<strong>Eclipse-&gt;Window-&gt;Preferences-&gt;General-&gt;Editors-&gt;File Associations</strong> 我们可以看到class文件的打开方式有两个，JadClipse和Eclipse自带的Class File Viewer，而JadClipse是默认的。 全部配置完成，下面我们可以查看源码了，选择需要查看的类，按F3即可查看源码</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://www.hollischuang.com/archives/58" target="_blank" rel="external">Java的反编译</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/9e38f648aacd" target="_blank" rel="external">反编译原理浅析</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是编译&quot;&gt;&lt;a href=&quot;#什么是编译&quot; class=&quot;headerlink&quot; title=&quot;什么是编译&quot;&gt;&lt;/a&gt;什么是编译&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;利用编译程序从源语言编写的源程序产生目标程序的过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用编译程序产生目标程序的动作。 编译就是把高级语言变成计算机可以识别的2进制语言，计算机只认识1和0，编译程序把人们熟悉的语言换成2进制的。 编译程序把一个源程序翻译成目标程序的工作过程分为五个阶段：词法分析；语法分析；语义检查和中间代码生成；代码优化；目标代码生成。主要是进行词法分析和语法分析，又称为源程序分析，分析过程中发现有语法错误，给出提示信息，具体参考 &lt;a href=&quot;http://www.qiuchengjia.cn/2016/07/24/JVM/Javac%E7%BC%96%E8%AF%91%E4%B8%8EJIT%E7%BC%96%E8%AF%91/&quot;&gt;Javac编译与JIT编译&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;什么是反编译&quot;&gt;&lt;a href=&quot;#什么是反编译&quot; class=&quot;headerlink&quot; title=&quot;什么是反编译&quot;&gt;&lt;/a&gt;什么是反编译&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;计算机软件反向工程（Reverse engineering）也称为计算机软件还原工程，是指通过对他人软件的目标程序（可执行程序）进行“逆向分析、研究”工作，以推导出他人的软件产品所使用的思路、原理、结构、算法、处理过程、运行方法等设计要素，某些特定情况下可能推导出源代码。反编译作为自己开发软件时的参考，或者直接用于自己的软件产品中&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java枚举类</title>
    <link href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
    <id>http://www.qiuchengjia.cn/2016/08/12/JAVA/Java枚举类/</id>
    <published>2016-08-11T22:19:08.000Z</published>
    <updated>2016-08-12T04:47:33.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul>
<li>在java语言中还没有引入枚举类型之前，表示枚举类型的常用模式是声明一组具有int常量。之前我们通常利用public final static 方法定义的代码如下，分别用1 表示春天，2表示夏天，3表示秋天，4表示冬天</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Season</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SPRING = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUMMER = <span class="number">2</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUTUMN = <span class="number">3</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WINTER = <span class="number">4</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这种方法称作int枚举模式。可这种模式有什么问题呢，我们都用了那么久了，应该没问题的。通常我们写出来的代码都会考虑它的安全性、易用性和可读性。 首先我们来考虑一下它的类型安全性。当然这种模式不是类型安全的。比如说我们设计一个函数，要求传入春夏秋冬的某个值。但是使用int类型，我们无法保证传入的值为合法。代码如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getChineseSeason</span><span class="params">(<span class="keyword">int</span> season)</span></span>&#123;</div><div class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">switch</span>(season)&#123;</div><div class="line">            <span class="keyword">case</span> Season.SPRING :</div><div class="line">                result.append(<span class="string">"春天"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Season.SUMMER :</div><div class="line">                result.append(<span class="string">"夏天"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Season.AUTUMN :</div><div class="line">                result.append(<span class="string">"秋天"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Season.WINTER :</div><div class="line">                result.append(<span class="string">"冬天"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span> :</div><div class="line">                result.append(<span class="string">"地球没有的季节"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>.getChineseSeason(Season.SPRING));<span class="comment">//这是正常的场景</span></div><div class="line"></div><div class="line">        System.out.println(<span class="keyword">this</span>.getChineseSeason(<span class="number">5</span>));</div><div class="line">        <span class="comment">//这个却是不正常的场景，这就导致了类型不安全问题</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>程序getChineseSeason(Season.SPRING)是我们预期的使用方法。可getChineseSeason(5)显然就不是了，而且编译很通过，在运行时会出现什么情况，我们就不得而知了。这显然就不符合Java程序的类型安全</p>
</li>
<li><p>接下来我们来考虑一下这种模式的可读性。使用枚举的大多数场合，我都需要方便得到枚举类型的字符串表达式。如果将int枚举常量打印出来，我们所见到的就是一组数字，这是没什么太大的用处。我们可能会想到使用String常量代替int常量。虽然它为这些常量提供了可打印的字符串，但是它会导致性能问题，因为它依赖于字符串的比较操作，所以这种模式也是我们不期望的。 从类型安全性和程序可读性两方面考虑，int和String枚举模式的缺点就显露出来了。幸运的是，从Java1.5发行版本开始，就提出了另一种可以替代的解决方案，可以避免int和String枚举模式的缺点，并提供了许多额外的好处。那就是枚举类型（enum type）。接下来的章节将介绍枚举类型的定义、特征、应用场景和优缺点</p>
</li>
</ul>
<a id="more"></a>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>枚举类型（enum type）是指由一组固定的常量组成合法的类型。Java中由关键字enum来定义一个枚举类型。下面就是java枚举类型的定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Season &#123;</div><div class="line">    SPRING, SUMMER, AUTUMN, WINER;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>Java定义枚举类型的语句很简约。它有以下特点：</p>
<ol>
<li><p>使用关键字enum</p>
</li>
<li><p>类型名称，比如这里的Season</p>
</li>
<li><p>一串允许的值，比如上面定义的春夏秋冬四季</p>
</li>
<li><p>枚举可以单独定义在一个文件中，也可以嵌在其它Java类中</p>
</li>
<li><p>枚举可以实现一个或多个接口（Interface）</p>
</li>
<li><p>可以定义新的变量</p>
</li>
<li><p>可以定义新的方法</p>
</li>
<li><p>可以定义根据具体枚举值而相异的类</p>
</li>
</ol>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>以在背景中提到的类型安全为例，用枚举类型重写那段代码。代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Season &#123;</div><div class="line">    SPRING(<span class="number">1</span>), SUMMER(<span class="number">2</span>), AUTUMN(<span class="number">3</span>), WINTER(<span class="number">4</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(<span class="keyword">int</span> code)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> code;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseSeason</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将英文的季节转换成中文季节</div><div class="line">     * <span class="doctag">@param</span> season</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChineseSeason</span><span class="params">(Season season)</span></span>&#123;</div><div class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">switch</span>(season)&#123;</div><div class="line">            <span class="keyword">case</span> SPRING :</div><div class="line">                result.append(<span class="string">"[中文：春天，枚举常量:"</span> + season.name() + <span class="string">"，数据:"</span> + season.getCode() + <span class="string">"]"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> AUTUMN :</div><div class="line">                result.append(<span class="string">"[中文：秋天，枚举常量:"</span> + season.name() + <span class="string">"，数据:"</span> + season.getCode() + <span class="string">"]"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> SUMMER : </div><div class="line">                result.append(<span class="string">"[中文：夏天，枚举常量:"</span> + season.name() + <span class="string">"，数据:"</span> + season.getCode() + <span class="string">"]"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> WINTER :</div><div class="line">                result.append(<span class="string">"[中文：冬天，枚举常量:"</span> + season.name() + <span class="string">"，数据:"</span> + season.getCode() + <span class="string">"]"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span> :</div><div class="line">                result.append(<span class="string">"地球没有的季节 "</span> + season.name());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(Season s : Season.values())&#123;</div><div class="line">            System.out.println(getChineseSeason(s));<span class="comment">//这是正常的场景</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//System.out.println(getChineseSeason(5));</span></div><div class="line">        <span class="comment">//此处已经是编译不通过了，这就保证了类型安全</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</div><div class="line">        UseSeason useSeason = <span class="keyword">new</span> UseSeason();</div><div class="line">        useSeason.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>输出</li>
</ul>
<blockquote>
<p>[中文：春天，枚举常量:SPRING，数据:1] [中文：夏天，枚举常量:SUMMER，数据:2] [中文：秋天，枚举常量:AUTUMN，数据:3] [中文：冬天，枚举常量:WINTER，数据:4]</p>
</blockquote>
<ul>
<li>这里有一个问题，为什么我要将域添加到枚举类型中呢？目的是想将数据与它的常量关联起来。如1代表春天，2代表夏天</li>
</ul>
<h3 id="什么时候使用"><a href="#什么时候使用" class="headerlink" title="什么时候使用"></a>什么时候使用</h3><ul>
<li>那么什么时候应该使用枚举呢？每当需要一组固定的常量的时候，如一周的天数、一年四季等。或者是在我们编译前就知道其包含的所有值的集合。Java 1.5的枚举能满足绝大部分程序员的要求的，它的简明，易用的特点是很突出的</li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul>
<li>这里介绍了七种常见的用法</li>
</ul>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;  </div><div class="line">  RED, GREEN, BLANK, YELLOW  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Signal &#123;  </div><div class="line">    GREEN, YELLOW, RED  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrafficLight</span> </span>&#123;  </div><div class="line">    Signal color = Signal.RED;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">switch</span> (color) &#123;  </div><div class="line">        <span class="keyword">case</span> RED:  </div><div class="line">            color = Signal.GREEN;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> YELLOW:  </div><div class="line">            color = Signal.RED;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> GREEN:  </div><div class="line">            color = Signal.YELLOW;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="向枚举中添加新方法"><a href="#向枚举中添加新方法" class="headerlink" title="向枚举中添加新方法"></a>向枚举中添加新方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;  </div><div class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>);  </div><div class="line">    <span class="comment">// 成员变量  </span></div><div class="line">    <span class="keyword">private</span> String name;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;  </div><div class="line">    <span class="comment">// 构造方法  </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">        <span class="keyword">this</span>.index = index;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 普通方法  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">for</span> (Color c : Color.values()) &#123;  </div><div class="line">            <span class="keyword">if</span> (c.getIndex() == index) &#123;  </div><div class="line">                <span class="keyword">return</span> c.name;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// get set 方法  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> name;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> index;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.index = index;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="覆盖枚举的方法"><a href="#覆盖枚举的方法" class="headerlink" title="覆盖枚举的方法"></a>覆盖枚举的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;  </div><div class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>);  </div><div class="line">    <span class="comment">// 成员变量  </span></div><div class="line">    <span class="keyword">private</span> String name;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;  </div><div class="line">    <span class="comment">// 构造方法  </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">        <span class="keyword">this</span>.index = index;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//覆盖方法  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.index+<span class="string">"_"</span>+<span class="keyword">this</span>.name;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Behaviour</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;  </div><div class="line">    <span class="function">String <span class="title">getInfo</span><span class="params">()</span></span>;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color implements Behaviour&#123;  </div><div class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>);  </div><div class="line">    <span class="comment">// 成员变量  </span></div><div class="line">    <span class="keyword">private</span> String name;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;  </div><div class="line">    <span class="comment">// 构造方法  </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">        <span class="keyword">this</span>.index = index;  </div><div class="line">    &#125;  </div><div class="line"><span class="comment">//接口方法  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//接口方法  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="keyword">this</span>.index+<span class="string">":"</span>+<span class="keyword">this</span>.name);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用接口组织枚举"><a href="#使用接口组织枚举" class="headerlink" title="使用接口组织枚举"></a>使用接口组织枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Food</span> </span>&#123;  </div><div class="line">    <span class="keyword">enum</span> Coffee implements Food&#123;  </div><div class="line">        BLACK_COFFEE,DECAF_COFFEE,LATTE,CAPPUCCINO  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">enum</span> Dessert implements Food&#123;  </div><div class="line">        FRUIT, CAKE, GELATO  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="关于枚举集合的使用"><a href="#关于枚举集合的使用" class="headerlink" title="关于枚举集合的使用"></a>关于枚举集合的使用</h3><ul>
<li>java.util.EnumSet和java.util.EnumMap是两个枚举集合。EnumSet保证集合中的元素不重复;EnumMap中的 key是enum类型，而value则可以是任意类型。关于这个两个集合的使用就不在这里赘述，可以参考JDK文档</li>
</ul>
<hr>
<hr>
<h2 id="枚举是如何保证线程安全的"><a href="#枚举是如何保证线程安全的" class="headerlink" title="枚举是如何保证线程安全的"></a>枚举是如何保证线程安全的</h2><ul>
<li>要想看源码，首先得有一个类吧，那么枚举类型到底是什么类呢？是enum吗？答案很明显不是，enum就和class一样，只是一个关键字，他并不是一个类，那么枚举是由什么类维护的呢，我们简单的写一个枚举：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> t &#123;</div><div class="line">    SPRING,SUMMER,AUTUMN,WINTER;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后我们使用反编译，看看这段代码到底是怎么实现的，反编译（<a href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E5%8F%8D%E7%BC%96%E8%AF%91/">Java的反编译</a>）后代码内容如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Enum</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">T</span><span class="params">(String s, <span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(s, i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T[] values()&#123;</div><div class="line">        T at[];</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        T at1[];</div><div class="line">        System.arraycopy(at = ENUM$VALUES, <span class="number">0</span>, at1 = <span class="keyword">new</span> T[i = at.length], <span class="number">0</span>, i);</div><div class="line">        <span class="keyword">return</span> at1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">valueOf</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (T)Enum.valueOf(demo/T, s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T SPRING;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T SUMMER;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T AUTUMN;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T WINTER;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> T ENUM$VALUES[];</div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        SPRING = <span class="keyword">new</span> T(<span class="string">"SPRING"</span>, <span class="number">0</span>);</div><div class="line">        SUMMER = <span class="keyword">new</span> T(<span class="string">"SUMMER"</span>, <span class="number">1</span>);</div><div class="line">        AUTUMN = <span class="keyword">new</span> T(<span class="string">"AUTUMN"</span>, <span class="number">2</span>);</div><div class="line">        WINTER = <span class="keyword">new</span> T(<span class="string">"WINTER"</span>, <span class="number">3</span>);</div><div class="line">        ENUM$VALUES = (<span class="keyword">new</span> T[] &#123;</div><div class="line">            SPRING, SUMMER, AUTUMN, WINTER</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>通过反编译后代码我们可以看到，<strong>public final class T extends Enum</strong>，说明，该类是继承了Enum类的，同时final关键字告诉我们，这个类也是不能被继承的。当我们使用<strong>enmu</strong>来定义一个枚举类型的时候，编译器会自动帮我们创建一个final类型的类继承Enum类,所以枚举类型不能被继承，我们看到这个类中有几个属性和方法</p>
</li>
<li><p>我们可以看到：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T SPRING;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T SUMMER;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T AUTUMN;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T WINTER;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> T ENUM$VALUES[];</div><div class="line">        <span class="keyword">static</span></div><div class="line">        &#123;</div><div class="line">            SPRING = <span class="keyword">new</span> T(<span class="string">"SPRING"</span>, <span class="number">0</span>);</div><div class="line">            SUMMER = <span class="keyword">new</span> T(<span class="string">"SUMMER"</span>, <span class="number">1</span>);</div><div class="line">            AUTUMN = <span class="keyword">new</span> T(<span class="string">"AUTUMN"</span>, <span class="number">2</span>);</div><div class="line">            WINTER = <span class="keyword">new</span> T(<span class="string">"WINTER"</span>, <span class="number">3</span>);</div><div class="line">            ENUM$VALUES = (<span class="keyword">new</span> T[] &#123;</div><div class="line">                SPRING, SUMMER, AUTUMN, WINTER</div><div class="line">            &#125;);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li>都是static类型的，因为static类型的属性会在类被加载之后被初始化，当一个Java类第一次被真正使用到的时候静态资源被初始化、Java类的加载和初始化过程都是线程安全的。所以，<strong>创建一个enum类型是线程安全的</strong></li>
</ul>
<h2 id="为什么用枚举实现的单例是最好的方式"><a href="#为什么用枚举实现的单例是最好的方式" class="headerlink" title="为什么用枚举实现的单例是最好的方式"></a>为什么用枚举实现的单例是最好的方式</h2><ul>
<li>在<a href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%83%E7%A7%8D%E5%86%99%E6%B3%95/">单例模式的七种写法</a>中，我们看到一共有七种实现单例的方式，其中，Effective Java作者Josh Bloch 提倡使用枚举的方式，既然大神说这种方式好，那我们就要知道它为什么好？</li>
</ul>
<h3 id="枚举写法简单"><a href="#枚举写法简单" class="headerlink" title="枚举写法简单"></a>枚举写法简单</h3><ul>
<li>写法简单这个大家看看<a href="http://www.qiuchengjia.cn/2016/08/12/JAVA/Java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%83%E7%A7%8D%E5%86%99%E6%B3%95/">单例模式的七种写法</a>里面的实现就知道区别了</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EasySingleton&#123;</div><div class="line">    INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>你可以通过<strong>EasySingleton.INSTANCE</strong>来访问</li>
</ul>
<h3 id="枚举自己处理序列化"><a href="#枚举自己处理序列化" class="headerlink" title="枚举自己处理序列化"></a>枚举自己处理序列化</h3><ul>
<li>我们知道，以前的所有的单例模式都有一个比较大的问题，就是一旦实现了Serializable接口之后，就不再是单例得了，因为，每次调用 readObject()方法返回的都是一个新创建出来的对象，有一种解决办法就是使用readResolve()方法来避免此事发生。但是，<strong>为了保证枚举类型像Java规范中所说的那样，每一个枚举类型及其定义的枚举变量在JVM中都是唯一的，在枚举类型的序列化和反序列化上，Java做了特殊的规定</strong>。原文如下：</li>
</ul>
<blockquote>
<p>Enum constants are serialized differently than ordinary serializable or externalizable objects. The serialized form of an enum constant consists solely of its name; field values of the constant are not present in the form. To serialize an enum constant, ObjectOutputStream writes the value returned by the enum constant’s name method. To deserialize an enum constant, ObjectInputStream reads the constant name from the stream; the deserialized constant is then obtained by calling the java.lang.Enum.valueOf method, passing the constant’s enum type along with the received constant name as arguments. Like other serializable or externalizable objects, enum constants can function as the targets of back references appearing subsequently in the serialization stream. The process by which enum constants are serialized cannot be customized: any class-specific writeObject, readObject, readObjectNoData, writeReplace, and readResolve methods defined by enum types are ignored during serialization and deserialization. Similarly, any serialPersistentFields or serialVersionUID field declarations are also ignored–all enum types have a fixedserialVersionUID of 0L. Documenting serializable fields and data for enum types is unnecessary, since there is no variation in the type of data sent.</p>
</blockquote>
<ul>
<li>大概意思就是说，在序列化的时候Java仅仅是将枚举对象的name属性输出到结果中，反序列化的时候则是通过java.lang.Enum的valueOf方法来根据名字查找枚举对象。同时，编译器是不允许任何对这种序列化机制的定制的，因此禁用了writeObject、readObject、readObjectNoData、writeReplace和readResolve等方法。 我们看一下这个valueOf方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Enum&lt;T&gt;&gt; <span class="function">T <span class="title">valueOf</span><span class="params">(Class&lt;T&gt; enumType,String name)</span> </span>&#123;  </div><div class="line">            T result = enumType.enumConstantDirectory().get(name);  </div><div class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>)  </div><div class="line">                <span class="keyword">return</span> result;  </div><div class="line">            <span class="keyword">if</span> (name == <span class="keyword">null</span>)  </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Name is null"</span>);  </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(  </div><div class="line">                <span class="string">"No enum const "</span> + enumType +<span class="string">"."</span> + name);  </div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li>从代码中可以看到，代码会尝试从调用enumType这个Class对象的enumConstantDirectory()方法返回的map中获取名字为name的枚举对象，如果不存在就会抛出异常。再进一步跟到enumConstantDirectory()方法，就会发现到最后会以反射的方式调用enumType这个类型的values()静态方法，也就是上面我们看到的编译器为我们创建的那个方法，然后用返回结果填充enumType这个Class对象中的enumConstantDirectory属性。所以，<strong>JVM对序列化有保证</strong></li>
</ul>
<h3 id="枚举实例创建是thread-safe-线程安全的"><a href="#枚举实例创建是thread-safe-线程安全的" class="headerlink" title="枚举实例创建是thread-safe(线程安全的)"></a>枚举实例创建是thread-safe(线程安全的)</h3><ul>
<li>当一个Java类第一次被真正使用到的时候静态资源被初始化、Java类的加载和初始化过程都是线程安全的。所以，创建一个enum类型是线程安全的</li>
</ul>
<h2 id="扩展资料"><a href="#扩展资料" class="headerlink" title="扩展资料"></a>扩展资料</h2><ul>
<li><a href="http://www.qiuchengjia.cn/2016/08/12/JAVA%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Java%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-Enum/">Java源码分析–Enum</a></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://www.hollischuang.com/archives/195" target="_blank" rel="external">Java的枚举类型用法介绍</a></p>
</li>
<li><p><a href="http://www.hollischuang.com/archives/197" target="_blank" rel="external">深度分析Java的枚举类型—-枚举的线程安全性及序列化问题</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在java语言中还没有引入枚举类型之前，表示枚举类型的常用模式是声明一组具有int常量。之前我们通常利用public final static 方法定义的代码如下，分别用1 表示春天，2表示夏天，3表示秋天，4表示冬天&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Season&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; SPRING = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; SUMMER = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; AUTUMN = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; WINTER = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;这种方法称作int枚举模式。可这种模式有什么问题呢，我们都用了那么久了，应该没问题的。通常我们写出来的代码都会考虑它的安全性、易用性和可读性。 首先我们来考虑一下它的类型安全性。当然这种模式不是类型安全的。比如说我们设计一个函数，要求传入春夏秋冬的某个值。但是使用int类型，我们无法保证传入的值为合法。代码如下所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getChineseSeason&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; season)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        StringBuffer result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuffer();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(season)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Season.SPRING :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                result.append(&lt;span class=&quot;string&quot;&gt;&quot;春天&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Season.SUMMER :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                result.append(&lt;span class=&quot;string&quot;&gt;&quot;夏天&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Season.AUTUMN :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                result.append(&lt;span class=&quot;string&quot;&gt;&quot;秋天&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Season.WINTER :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                result.append(&lt;span class=&quot;string&quot;&gt;&quot;冬天&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                result.append(&lt;span class=&quot;string&quot;&gt;&quot;地球没有的季节&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result.toString();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getChineseSeason(Season.SPRING));&lt;span class=&quot;comment&quot;&gt;//这是正常的场景&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getChineseSeason(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//这个却是不正常的场景，这就导致了类型不安全问题&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;程序getChineseSeason(Season.SPRING)是我们预期的使用方法。可getChineseSeason(5)显然就不是了，而且编译很通过，在运行时会出现什么情况，我们就不得而知了。这显然就不符合Java程序的类型安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接下来我们来考虑一下这种模式的可读性。使用枚举的大多数场合，我都需要方便得到枚举类型的字符串表达式。如果将int枚举常量打印出来，我们所见到的就是一组数字，这是没什么太大的用处。我们可能会想到使用String常量代替int常量。虽然它为这些常量提供了可打印的字符串，但是它会导致性能问题，因为它依赖于字符串的比较操作，所以这种模式也是我们不期望的。 从类型安全性和程序可读性两方面考虑，int和String枚举模式的缺点就显露出来了。幸运的是，从Java1.5发行版本开始，就提出了另一种可以替代的解决方案，可以避免int和String枚举模式的缺点，并提供了许多额外的好处。那就是枚举类型（enum type）。接下来的章节将介绍枚举类型的定义、特征、应用场景和优缺点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java自动拆箱和装箱</title>
    <link href="http://www.qiuchengjia.cn/2016/08/11/JAVA/Java%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%92%8C%E8%A3%85%E7%AE%B1/"/>
    <id>http://www.qiuchengjia.cn/2016/08/11/JAVA/Java自动拆箱和装箱/</id>
    <published>2016-08-11T14:24:02.000Z</published>
    <updated>2016-08-11T07:22:34.756Z</updated>
    
    <content type="html"><![CDATA[<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%92%8C%E8%A3%85%E7%AE%B1.png" alt=""></center>

<h2 id="什么是自动拆箱和装箱"><a href="#什么是自动拆箱和装箱" class="headerlink" title="什么是自动拆箱和装箱"></a>什么是自动拆箱和装箱</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>自动装箱就是 Java 自动将原始数据类型转为对应的包装类对象 比如将 int 型的变量转成 Integer对象 自动拆箱反之(从 Java 1.5 开始引入)</li>
</ul>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul>
<li>自动装箱时，编译器调用 valueOf() 将原始数据类型值转为对象；同时自动拆箱时，编译器调用类似 intValue(), doubleValue() 这类方法将对象转换成原始类型值</li>
</ul>
<table>
<thead>
<tr>
<th>基本类型</th>
<th style="text-align:left">大小</th>
<th style="text-align:left">数值范围</th>
<th style="text-align:left">默认值</th>
<th style="text-align:left">包装类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td style="text-align:left">^</td>
<td style="text-align:left">true,false</td>
<td style="text-align:left">false</td>
<td style="text-align:left">Boolean</td>
</tr>
<tr>
<td>byte</td>
<td style="text-align:left">8bit</td>
<td style="text-align:left">-2^7 – 2^7-1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Byte</td>
</tr>
<tr>
<td>char</td>
<td style="text-align:left">16bit</td>
<td style="text-align:left">\u0000 – \uffff</td>
<td style="text-align:left">\u0000</td>
<td style="text-align:left">Character</td>
</tr>
<tr>
<td>short</td>
<td style="text-align:left">16bit</td>
<td style="text-align:left">-2^15 – 2^15-1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Short</td>
</tr>
<tr>
<td>int</td>
<td style="text-align:left">32bit</td>
<td style="text-align:left">-2^31 – 2^31-1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Integer</td>
</tr>
<tr>
<td>long</td>
<td style="text-align:left">64bit</td>
<td style="text-align:left">-2^63 – 2^63-1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Long</td>
</tr>
<tr>
<td>float</td>
<td style="text-align:left">32bit</td>
<td style="text-align:left">IEEE 754</td>
<td style="text-align:left">0.0f</td>
<td style="text-align:left">Float</td>
</tr>
<tr>
<td>double</td>
<td style="text-align:left">64bit</td>
<td style="text-align:left">IEEE 754</td>
<td style="text-align:left">0.0d</td>
<td style="text-align:left">Double</td>
</tr>
<tr>
<td>void</td>
<td style="text-align:left">^</td>
<td style="text-align:left">^</td>
<td style="text-align:left">^</td>
<td style="text-align:left">Void</td>
</tr>
</tbody>
</table>
<h3 id="基本类型与装箱基本类型的区别"><a href="#基本类型与装箱基本类型的区别" class="headerlink" title="基本类型与装箱基本类型的区别"></a>基本类型与装箱基本类型的区别</h3><ul>
<li><p>基本类型只有值，而装箱基本类型则具有与它们的值不同的同一性。换句话说，对装箱基本类型运用 == 操作符几乎总是错的</p>
</li>
<li><p>基本类型只有功能完备的值，而装箱基本类型除了它对应基本类型的所有功能值外，还有一个非功能值 null，这导致了对于包装基本类型进行拆箱操作后所进行的操作存在 NPE 的风险</p>
</li>
<li><p>基本类型更加省空间和时间，如果对包装类型进行频繁的装箱和拆箱操作会影响性能</p>
</li>
</ul>
<a id="more"></a>
<h2 id="何时发生自动装箱与拆箱？"><a href="#何时发生自动装箱与拆箱？" class="headerlink" title="何时发生自动装箱与拆箱？"></a>何时发生自动装箱与拆箱？</h2><h3 id="赋值时"><a href="#赋值时" class="headerlink" title="赋值时"></a>赋值时</h3><ul>
<li>在Java1.5之前，需要手动地进行类型转换，而现在所有的转换都是有编译器来完成</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//before autoboxing</span></div><div class="line">Integer iObject = Integer.valueOf(<span class="number">3</span>);</div><div class="line"><span class="keyword">int</span> iPrimitive = iObject.intValue()</div><div class="line"> </div><div class="line"><span class="comment">//after java5</span></div><div class="line">Integer iObject = <span class="number">3</span>;      <span class="comment">//autobxing - primitive to wrapper conversion</span></div><div class="line"><span class="keyword">int</span> iPrimitive = iObject; <span class="comment">//unboxing - object to primitive conversion</span></div></pre></td></tr></table></figure>
<h3 id="方法调用时"><a href="#方法调用时" class="headerlink" title="方法调用时"></a>方法调用时</h3><ul>
<li>当在进行方法调用时，可以传入原始数据值或对象，编译器同样会自动进行转换</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">show</span><span class="params">(Integer iParam)</span></span>&#123;</div><div class="line">   System.out.println(<span class="string">"autoboxing example - method invocation i: "</span> + iParam);</div><div class="line">   <span class="keyword">return</span> iParam;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//autoboxing and unboxing in method invocation</span></div><div class="line">show(<span class="number">3</span>); <span class="comment">//autoboxing</span></div><div class="line"><span class="keyword">int</span> result = show(<span class="number">3</span>); <span class="comment">//unboxing because return type of method is Integer</span></div></pre></td></tr></table></figure>
<h2 id="自动装箱引起的性能问题"><a href="#自动装箱引起的性能问题" class="headerlink" title="自动装箱引起的性能问题"></a>自动装箱引起的性能问题</h2><ul>
<li>如果有人告诉你：“只要修改一个字符，下面这段代码的运行速度就能提高5倍。”，你觉得可能么？</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> t = System.currentTimeMillis();</div><div class="line">Long sum = <span class="number">0L</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</div><div class="line">    sum += i;</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"total:"</span> + sum);</div><div class="line">System.out.println(<span class="string">"processing time: "</span> + (System.currentTimeMillis() - t) + <span class="string">" ms"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>输出结果：</li>
</ul>
<blockquote>
<p>total:2305843005992468481<br>processing time: 63556 ms</p>
</blockquote>
<ul>
<li>将Long修改为long，再来看一下运行结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> t = System.currentTimeMillis();</div><div class="line"><span class="keyword">long</span> sum = <span class="number">0L</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</div><div class="line">    sum += i;</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"total:"</span> + sum);</div><div class="line">System.out.println(<span class="string">"processing time: "</span> + (System.currentTimeMillis() - t) + <span class="string">" ms"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>输出结果：</li>
</ul>
<blockquote>
<p>total:2305843005992468481<br>processing time: 12229 ms</p>
</blockquote>
<ul>
<li>事实证明，仅仅修改了一个字符，性能提高了不止一倍两倍。那，就究竟是什么原因导致的呢？<br>因为，+这个操作符不适用Integer对象，在进行数值相加操作之前会发生自动拆箱操作，转换成int，相加之后还会发生自动拆箱操作，装换成Integer对象。其内部变化如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sum = sum.longValue() + i;</div><div class="line">Long sum = <span class="keyword">new</span> Long(sum);</div></pre></td></tr></table></figure>
<ul>
<li>很明显，在上面的循环中会创建2147483647个”Long“类型实例，在这样庞大的循环中，会降低程序的性能并且加重了垃圾回收的工作量</li>
</ul>
<blockquote>
<p><strong>说明：包含在包装器中的内容不会改变。即Long对象是不可变的</strong></p>
</blockquote>
<h2 id="重载与自动装箱"><a href="#重载与自动装箱" class="headerlink" title="重载与自动装箱"></a>重载与自动装箱</h2><ul>
<li>在java 5之前，value(int)和value(Integer)是完全不相同的方法，开发者不会因为传入是int还是Integer调用哪个方法困惑，但是由于自动装箱和拆箱的引入，处理重载方法时会不会有什么变化呢？可通过下面一个例子进行探讨：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"method with primitive argument"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Integer num)</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"method with wrapper argument"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//calling overloaded method</span></div><div class="line">AutoboxingTest autoTest = <span class="keyword">new</span> AutoboxingTest();</div><div class="line"><span class="keyword">int</span> value = <span class="number">3</span>;</div><div class="line">autoTest.test(value);  <span class="comment">//no autoboxing </span></div><div class="line">Integer iValue = value;</div><div class="line">autoTest.test(iValue); <span class="comment">//no autoboxing</span></div></pre></td></tr></table></figure>
<ul>
<li>输出结果</li>
</ul>
<blockquote>
<p>method with primitive argument<br>method with wrapper argument</p>
</blockquote>
<ul>
<li>从输出结果可以看出，在重载的情况下，不会发生自动装箱操作</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>自动装箱与拆箱在编程过程中给我们带来了极大的方便，但也存在一些容易让人出错的问题</li>
</ul>
<h3 id="对象相等比较"><a href="#对象相等比较" class="headerlink" title="对象相等比较"></a>对象相等比较</h3><ul>
<li>“==”既可用于原始值的比较，也可用于对象间的比较。当进行对象间的比较时，实质上比较的是对象的引用是否相等，而不是比较对象代表的值。如果要比较对象的值，应当使用对象对应的equals方法。可通过以下例子进行探讨：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoboxingTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="comment">// Example 1: == comparison pure primitive – no autoboxing</span></div><div class="line">        <span class="keyword">int</span> i1 = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> i2 = <span class="number">1</span>;</div><div class="line">        System.out.println(<span class="string">"i1==i2 : "</span> + (i1 == i2)); <span class="comment">// true</span></div><div class="line"> </div><div class="line">        <span class="comment">// Example 2: equality operator mixing object and primitive</span></div><div class="line">        Integer num1 = <span class="number">1</span>; <span class="comment">// autoboxing</span></div><div class="line">        <span class="keyword">int</span> num2 = <span class="number">1</span>;</div><div class="line">        System.out.println(<span class="string">"num1 == num2 : "</span> + (num1 == num2)); <span class="comment">// true</span></div><div class="line"> </div><div class="line">        <span class="comment">// Example 3: special case - arises due to autoboxing in Java</span></div><div class="line">        Integer obj1 = <span class="number">1</span>; <span class="comment">// autoboxing will call Integer.valueOf()</span></div><div class="line">        Integer obj2 = <span class="number">1</span>; <span class="comment">// same call to Integer.valueOf() will return same cached Object</span></div><div class="line">        System.out.println(<span class="string">"obj1 == obj2 : "</span> + (obj1 == obj2)); <span class="comment">// true</span></div><div class="line"> </div><div class="line">        <span class="comment">// Example 4: equality operator - pure object comparison</span></div><div class="line">        Integer one = <span class="keyword">new</span> Integer(<span class="number">1</span>); <span class="comment">// no autoboxing</span></div><div class="line">        Integer anotherOne = <span class="keyword">new</span> Integer(<span class="number">1</span>);</div><div class="line">        System.out.println(<span class="string">"one == anotherOne : "</span> + (one == anotherOne)); <span class="comment">// false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>输出结果</li>
</ul>
<blockquote>
<p>i1==i2 : true<br>num1 == num2 : true<br>obj1 == obj2 : true<br>one == anotherOne : false</p>
</blockquote>
<ul>
<li><p>值得注意的是，在Example 2中，比较是一个对象和一个原始值，出现这种情况比较的应该是对象的值</p>
</li>
<li><p>让人感到困惑的Example 3，在一开始我们说过，”==”用于对象间的比较时，比较的是它们的引用，那么为什么obj1 == obj2返回的结果却是true？<strong>这是一种极端情况，处于节省内存的考虑，JVM会缓存-128到127的Integer对象</strong>。也就是说，在创建obj1对象时，会进行自动装箱操作，并且将其对象保存至缓存中，在创建obj2对象时，同样会进行自动装箱操作，然后在缓存中查找是否有相同值的对象，如果有，那么obj2对象就会指向obj1对象。obj1和obj2实际上是同一个对象。所以使用”==”比较返回true</p>
</li>
<li><p>而Example 4，是通过使用构造器来创建对象的，而没有发生自动装箱操作，不会执行缓存策略，故one和anotherOne是指向不同的引用的</p>
</li>
</ul>
<blockquote>
<p>　<strong>说明：这种 Integer 缓存策略仅在自动装箱（autoboxing）的时候有用，使用构造器创建的 Integer 对象不能被缓存</strong></p>
</blockquote>
<h3 id="容易混乱的对象和原始数据值"><a href="#容易混乱的对象和原始数据值" class="headerlink" title="容易混乱的对象和原始数据值"></a>容易混乱的对象和原始数据值</h3><ul>
<li>一个很容易犯错的问题，就是忽略对象与原始数据值之间的差异，在进行比较操作时，对象如果没有初始化或者为null，在自动拆箱过程中obj.xxxValue，则会抛出NullPointerException，可通过以下例子进行探讨：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Integer count;</div><div class="line"><span class="comment">//NullPointerException on unboxing</span></div><div class="line"><span class="keyword">if</span>( count &lt;= <span class="number">0</span>)&#123;</div><div class="line">  System.out.println(<span class="string">"Count is not started yet"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生成无用对象增加GC压力"><a href="#生成无用对象增加GC压力" class="headerlink" title="生成无用对象增加GC压力"></a>生成无用对象增加GC压力</h3><ul>
<li>因为自动装箱会隐式地创建对象，像前面提到的那样，如果在一个循环体中，会创建无用的中间对象，这样会增加GC压力，拉低程序的性能。所以在写循环时一定要注意代码，避免引入不必要的自动装箱操作</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://gongchuangsu.com/2016/05/25/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/15.Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/" target="_blank" rel="external">Java学习笔记之自动装箱与拆箱</a>  </p>
</li>
<li><p><a href="http://ryan-hou.github.io/blog/2016/06/08/zi-dong-zhuang-xiang-yu-chai-xiang/" target="_blank" rel="external">自动装箱与拆箱</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;http://o99dg8ap9.bkt.clouddn.com/Java%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%92%8C%E8%A3%85%E7%AE%B1.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;什么是自动拆箱和装箱&quot;&gt;&lt;a href=&quot;#什么是自动拆箱和装箱&quot; class=&quot;headerlink&quot; title=&quot;什么是自动拆箱和装箱&quot;&gt;&lt;/a&gt;什么是自动拆箱和装箱&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自动装箱就是 Java 自动将原始数据类型转为对应的包装类对象 比如将 int 型的变量转成 Integer对象 自动拆箱反之(从 Java 1.5 开始引入)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;过程&quot;&gt;&lt;a href=&quot;#过程&quot; class=&quot;headerlink&quot; title=&quot;过程&quot;&gt;&lt;/a&gt;过程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自动装箱时，编译器调用 valueOf() 将原始数据类型值转为对象；同时自动拆箱时，编译器调用类似 intValue(), doubleValue() 这类方法将对象转换成原始类型值&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基本类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;大小&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;数值范围&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;默认值&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;包装类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;true,false&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Boolean&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;8bit&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-2^7 – 2^7-1&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Byte&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;16bit&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\u0000 – \uffff&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\u0000&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;16bit&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-2^15 – 2^15-1&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Short&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;32bit&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-2^31 – 2^31-1&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;64bit&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-2^63 – 2^63-1&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;32bit&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;IEEE 754&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0.0f&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Float&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;64bit&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;IEEE 754&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0.0d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Void&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;基本类型与装箱基本类型的区别&quot;&gt;&lt;a href=&quot;#基本类型与装箱基本类型的区别&quot; class=&quot;headerlink&quot; title=&quot;基本类型与装箱基本类型的区别&quot;&gt;&lt;/a&gt;基本类型与装箱基本类型的区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本类型只有值，而装箱基本类型则具有与它们的值不同的同一性。换句话说，对装箱基本类型运用 == 操作符几乎总是错的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基本类型只有功能完备的值，而装箱基本类型除了它对应基本类型的所有功能值外，还有一个非功能值 null，这导致了对于包装基本类型进行拆箱操作后所进行的操作存在 NPE 的风险&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基本类型更加省空间和时间，如果对包装类型进行频繁的装箱和拆箱操作会影响性能&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java注解</title>
    <link href="http://www.qiuchengjia.cn/2016/08/07/JAVA/Java%E6%B3%A8%E8%A7%A3/"/>
    <id>http://www.qiuchengjia.cn/2016/08/07/JAVA/Java注解/</id>
    <published>2016-08-07T13:20:39.000Z</published>
    <updated>2016-08-09T12:29:19.076Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h3><ul>
<li><p>注解对于开发人员来讲既熟悉又陌生，熟悉是因为只要你是做开发，都会用到注解（常见的@Override）；陌生是因为即使不使用注解也照常能够进行开发；注解不是必须的，但了解注解有助于我们深入理解某些第三方框架（比如Android Support Annotations、JUnit、xUtils、ActiveAndroid等），提高工作效率</p>
</li>
<li><p>ava注解又称为标注，是Java从1.5开始支持加入源码的特殊语法元数据；Java中的类、方法、变量、参数、包都可以被注解。这里提到的元数据是描述数据的数据，结合实例来说明：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>AnnotionDemo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>这里的”app_name”就是描述数据”AnnotionDemo”的数据，这是在配置文件中写的，注解是在源码中写的，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main_layout);</div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            setTextInOtherThread();</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>在上面的代码中，在MainActivity.java中复写了父类Activity.java的onCreate方法，使用到了@Override注解。但即使不加上@Override注解标记代码，程序也能够正常运行。那这里的@Override注解有什么用呢？使用它有什么好处？事实上，@Override是告诉编译器这个方法是一个重写方法，如果父类中不存在该方法，编译器会报错，提示该方法不是父类中的方法。如果不小心拼写错误，将onCreate写成了onCreat，而且没有使用@Override注解，程序依然能够编译通过，但运行结果和期望的大不相同。从示例可以看出，注解有助于阅读代码</p>
</li>
<li><p>使用注解很简单，根据注解类的@Target所修饰的对象范围，可以在类、方法、变量、参数、包中使用“@+注解类名+[属性值]”的方式使用注解。比如：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@UiThread</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTextInOtherThread</span><span class="params">(@StringRes <span class="keyword">int</span> resId)</span></span>&#123;</div><div class="line">    TextView threadTxtView = (TextView)MainActivity.<span class="keyword">this</span>.findViewById(R.id.threadTxtViewId);</div><div class="line">    threadTxtView.setText(resId);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="特别说明："><a href="#特别说明：" class="headerlink" title="特别说明："></a><strong>特别说明：</strong></h4><ul>
<li><p>注解仅仅是元数据，和业务逻辑无关，所以当你查看注解类时，发现里面没有任何逻辑处理；</p>
</li>
<li><p>javadoc中的@author、@version、@param、@return、@deprecated、@hide、@throws、@exception、@see是标记，并不是注解；</p>
</li>
</ul>
<a id="more"></a>
<h3 id="注解的作用"><a href="#注解的作用" class="headerlink" title="注解的作用"></a>注解的作用</h3><ul>
<li><p><strong>格式检查：</strong>告诉编译器信息，比如被@Override标记的方法如果不是父类的某个方法，IDE会报错；</p>
</li>
<li><p><strong>减少配置：</strong>运行时动态处理，得到注解信息，实现代替配置文件的功能；</p>
</li>
<li><p><strong>减少重复工作：</strong>比如第三方框架xUtils，通过注解@ViewInject减少对findViewById的调用，类似的还有（JUnit、ActiveAndroid等）；</p>
</li>
</ul>
<h3 id="注解是如何工作的？"><a href="#注解是如何工作的？" class="headerlink" title="注解是如何工作的？"></a>注解是如何工作的？</h3><ul>
<li>注解仅仅是元数据，和业务逻辑无关，所以当你查看注解类时，发现里面没有任何逻辑处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ViewInject &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/* parent view id */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">parentId</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果注解不包含业务逻辑处理，必然有人来实现这些逻辑。注解的逻辑实现是元数据的用户来处理的，注解仅仅提供它定义的属性（类/方法/变量/参数/包）的信息，注解的用户来读取这些信息并实现必要的逻辑。当使用java中的注解时（比如@Override、@Deprecated、@SuppressWarnings）JVM就是用户，它在字节码层面工作。如果是自定义的注解，比如第三方框架ActiveAndroid，它的用户是每个使用注解的类，所有使用注解的类都需要继承Model.java，在Model.java的构造方法中通过反射来获取注解类中的每个属性：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TableInfo</span><span class="params">(Class&lt;? extends Model&gt; type)</span> </span>&#123;</div><div class="line">    mType = type;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Table tableAnnotation = type.getAnnotation(Table.class);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (tableAnnotation != <span class="keyword">null</span>) &#123;</div><div class="line">        mTableName = tableAnnotation.name();</div><div class="line">        mIdName = tableAnnotation.id();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        mTableName = type.getSimpleName();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Manually add the id column since it is not declared like the other columns.</span></div><div class="line">    Field idField = getIdField(type);</div><div class="line">    mColumnNames.put(idField, mIdName);</div><div class="line"></div><div class="line">    List&lt;Field&gt; fields = <span class="keyword">new</span> LinkedList&lt;Field&gt;(ReflectionUtils.getDeclaredColumnFields(type));</div><div class="line">    Collections.reverse(fields);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">        <span class="keyword">if</span> (field.isAnnotationPresent(Column.class)) &#123;</div><div class="line">            <span class="keyword">final</span> Column columnAnnotation = field.getAnnotation(Column.class);</div><div class="line">            String columnName = columnAnnotation.name();</div><div class="line">            <span class="keyword">if</span> (TextUtils.isEmpty(columnName)) &#123;</div><div class="line">                columnName = field.getName();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mColumnNames.put(field, columnName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注解和配置文件的区别"><a href="#注解和配置文件的区别" class="headerlink" title="注解和配置文件的区别"></a>注解和配置文件的区别</h3><ul>
<li>通过上面的描述可以发现，其实注解干的很多事情，通过配置文件也可以干，比如为类设置配置属性；但注解和配置文件是有很多区别的，在实际编程过程中，注解和配置文件配合使用在工作效率、低耦合、可拓展性方面才会达到权衡</li>
</ul>
<hr>
<h4 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a><strong>配置文件：</strong></h4><p><strong>使用场合：</strong></p>
<ul>
<li><p>外部依赖的配置，比如build.gradle中的依赖配置；</p>
</li>
<li><p>同一项目团队内部达成一致的时候；</p>
</li>
<li><p>非代码类的资源文件（比如图片、布局、数据、签名文件等）；</p>
</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li><p>降低耦合，配置集中，容易扩展，比如Android应用多语言支持；</p>
</li>
<li><p>对象之间的关系一目了然，比如strings.xml；</p>
</li>
<li><p>xml配置文件比注解功能齐全，支持的类型更多，比如drawable、style等；</p>
</li>
</ul>
<p><strong> 缺点：</strong></p>
<ul>
<li><p>繁琐；</p>
</li>
<li><p>类型不安全，比如R.java中的都是资源ID，用TextView的setText方法时传入int值时无法检测出该值是否为资源ID，但@StringRes可以；</p>
</li>
</ul>
<hr>
<h4 id="注解："><a href="#注解：" class="headerlink" title="注解："></a><strong>注解：</strong></h4><p><strong>使用场合：</strong></p>
<ul>
<li><p>动态配置信息；</p>
</li>
<li><p>代为实现程序逻辑（比如xUtils中的@ViewInject代为实现findViewById）；</p>
</li>
<li><p>代码格式检查，比如Override、Deprecated、NonNull、StringRes等，便于IDE能够检查出代码错误</p>
</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li><p>在class文件中，提高程序的内聚性；</p>
</li>
<li><p>减少重复工作，提高开发效率，比如findViewById</p>
</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><p>如果对annotation进行修改，需要重新编译整个工程；</p>
</li>
<li><p>业务类之间的关系不如XML配置那样一目了然；</p>
</li>
<li><p>程序中过多的annotation，对于代码的简洁度有一定影响；</p>
</li>
<li><p>扩展性较差；</p>
</li>
</ul>
<hr>
<h3 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h3><h4 id="API"><a href="#API" class="headerlink" title="API"></a><strong>API</strong></h4><p>Android开发过程中使用到的注解主要来自如下几个地方：</p>
<ul>
<li><p>Android SDK：在包android.annotation下；</p>
</li>
<li><p>Android Annotation Support包：在包android.support.annotation下；</p>
</li>
<li><p>JDK：在包java.lang下；</p>
</li>
<li><p>第三方框架中的自定义注解；</p>
</li>
</ul>
<h4 id="最常见注解"><a href="#最常见注解" class="headerlink" title="最常见注解"></a><strong>最常见注解</strong></h4><ul>
<li><strong>@Override</strong></li>
</ul>
<p>属于标记注解，不需要设置属性值；只能添加在方法的前面，用于标记该方法是复写的父类中的某个方法，如果在父类没有的方法前面加上@Override注解，编译器会报错：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@Deprecated</strong></li>
</ul>
<p>属于标记注解，不需要设置属性值；可以对构造方法、变量、方法、包、参数标记，告知用户和编译器被标记的内容已不建议被使用，如果被使用，编译器会报警告，但不会报错，程序也能正常运行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.LOCAL_VARIABLE, ElementType.METHOD, ElementType.PACKAGE, ElementType.PARAMETER, ElementType.TYPE&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@SuppressWarnings</strong></li>
</ul>
<p>可以对构造方法、变量、方法、包、参数标记，用于告知编译器忽略指定的警告，不用再编译完成后出现警告信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.CONSTRUCTOR, ElementType.LOCAL_VARIABLE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</div><div class="line">    String[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@TargetApi</strong></li>
</ul>
<p>可以对接口、方法、构造方法标记，如果在应用中指定minSdkVersion为8，但有地方需要使用API 11中的方法，为了避免编译器报错，在调用API11中方法的接口、方法或者构造方法前面加上@Target(11)，这样该方法就可以使用&lt;=11的API接口了。虽然这样能够避免编译器报错，但在运行时需要注意，不能在API低于11的设备中使用该方法，否则会crash（可以获取程序运行设备的API版本来判断是否调用该方法）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;TYPE, METHOD, CONSTRUCTOR&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TargetApi &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This sets the target api level for the type..</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@SuppressLint</strong></li>
</ul>
<p>和@Target的功能差不多，但使用范围更广，主要用于避免在lint检查时报错：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressLint &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The set of warnings (identified by the lint issue id) that should be</div><div class="line">     * ignored by lint. It is not an error to specify an unrecognized name.</div><div class="line">     */</div><div class="line">    String[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Android-Annotation-Support包中的注解介绍："><a href="#Android-Annotation-Support包中的注解介绍：" class="headerlink" title="Android Annotation Support包中的注解介绍："></a>Android Annotation Support包中的注解介绍：</h3><p>Android support library从19.1版本开始引入了一个新的注解库，它包含很多有用的元注解，你能用它们修饰你的代码，帮助你发现bug。Support library自己本身也用到了这些注解，所以作为support library的用户，Android Studio已经基于这些注解校验了你的代码并且标注其中潜在的问题</p>
<p>这些注解是作为一个support包提供给开发者使用，要使用他们，需要在build.gradle中添加对android support-annotations的依赖：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.android.support:support-annotations:22.2.0'</span></div></pre></td></tr></table></figure>
<p>support包中的注解分为如下几大类：</p>
<h4 id="Nullness注解："><a href="#Nullness注解：" class="headerlink" title="Nullness注解："></a><strong>Nullness注解：</strong></h4><ul>
<li><p><strong>@Nullable:</strong>用于标记方法参数或者返回值可以为空；</p>
</li>
<li><p><strong>@NonNull:</strong>用于标记方法参数或者返回值不能为空，如果为空编译器会报警告；</p>
</li>
</ul>
<h4 id="资源类型注解："><a href="#资源类型注解：" class="headerlink" title="资源类型注解："></a><strong>资源类型注解：</strong></h4><ul>
<li>这类注解主要用于标记方法的参数必须要是指定的资源类型，如果不是，IDE就会报错；因为资源文件都是静态的，所以在编写代码时IDE就知道传值是否错误，可以避免传的资源id错误导致运行时异常。资源类型注解包括@AnimatorRes、@AnimRes、@AnyRes、@ArrayRes、@BoolRes、@ColorRes、@DimenRes、@DrawableRes、@FractionRes、@IdRes、@IntgerRes、@InterpolatorRes、@LayoutRes、@MenuRes、@PluralsRes、@RawRes、@StringRes、@StyleableRes、@StyleRes、@TransitionRes、@XmlRes</li>
</ul>
<h4 id="类型定义注解："><a href="#类型定义注解：" class="headerlink" title="类型定义注解："></a><strong>类型定义注解：</strong></h4><ul>
<li>这类注解用于检查“魔幻数”，很多时候，我们使用整型常量代替枚举类型（性能考虑），例如我们有一个IceCreamFlavourManager类，它具有三种模式的操作：VANILLA，CHOCOLATE和STRAWBERRY。我们可以定义一个名为@Flavour的新注解，并使用@IntDef指定它可以接受的值类型：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceCreamFlavourManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flavour;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VANILLA = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CHOCOLATE = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STRAWBERRY = <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="meta">@IntDef</span>(&#123;VANILLA, CHOCOLATE, STRAWBERRY&#125;)</div><div class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Flavour &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Flavour</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFlavour</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> flavour;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlavour</span><span class="params">(@Flavour <span class="keyword">int</span> flavour)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.flavour = flavour;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这时如果我们使用错误的整型值调用IceCreamFlavourManager.setFlavour时，IDE将报错如下：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A32.jpg" alt=""></center>

<ul>
<li>IDE甚至会提示我们可以使用的有效的取值：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A31.jpg" alt=""></center>

<ul>
<li>我们也可以指定整型值作为标志位，也就是说这些整型值可以使用’｜’或者’&amp;’进行与或等操作。如果我们把@Flavour定义为如下标志位：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IntDef</span>(flag = <span class="keyword">true</span>, value = &#123;VANILLA, CHOCOLATE, STRAWBERRY&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Flavour &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>那么可以如下调用：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.setFlavour(IceCreamFlavourManager.VANILLA &amp; IceCreamFlavourManager.CHOCOLATE);</div></pre></td></tr></table></figure>
<h4 id="线程注解："><a href="#线程注解：" class="headerlink" title="线程注解："></a><strong>线程注解：</strong></h4><ul>
<li>用于标记指定的方法、类（如果一个类中的所有方法都有相同的线程需求，就可以对这个类进行注解，比如View.java就被@UIThread所标记）只能在指定的线程类中被调用，包括：@UiThread、@MainThread、@WorkerThread、@BinderThread；以@UIThread为例，说明这类注解的使用方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main_layout);</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                setTextInOtherThread(R.string.app_name);</div><div class="line">             <span class="comment">// setTextInOtherThread2(R.string.app_name);</span></div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@UiThread</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTextInOtherThread</span><span class="params">(@StringRes <span class="keyword">int</span> resId)</span></span>&#123;</div><div class="line">        TextView threadTxtView = (TextView)MainActivity.<span class="keyword">this</span>.findViewById(R.id.threadTxtViewId);</div><div class="line">        threadTxtView.setText(resId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTextInOtherThread2</span><span class="params">(@StringRes <span class="keyword">final</span> <span class="keyword">int</span> resId)</span></span>&#123;</div><div class="line">        MainActivity.<span class="keyword">this</span>.runOnUiThread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                TextView threadTxtView = (TextView)MainActivity.<span class="keyword">this</span>.findViewById(R.id.threadTxtViewId);</div><div class="line">                threadTxtView.setText(resId);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@UIThread和@MainThread的区别：</strong>在进程里只有一个主线程。这个就是@MainThread。同时这个线程也是一个@UiThread。比如activity的主要窗口就运行在这个线程上。然而它也有能力为应用创建其他线程。这很少见，一般具备这样功能的都是系统进程。通常是把和生命周期有关的用@MainThread标注，和View层级结构相关的用@UiThread标注。但是由于@MainThread本质上是一个@UiThread，而大部分情况下@UiThread又是一个@MainThread，所以工具(lint ,Android Studio,等等)可以把他们互换，所以你能在一个可以调用@MainThread方法的地方也能调用@UiThread方法，反之亦然</li>
</ul>
<h4 id="GRB颜色值注解："><a href="#GRB颜色值注解：" class="headerlink" title="GRB颜色值注解："></a><strong>GRB颜色值注解：</strong></h4><ul>
<li>用于标记传递的颜色值必须是整型值，并且不能是color资源ID；当你的API期望一个颜色资源的时候，可以用@ColorRes标注，但是当你有一个相反的使用场景时，这种用法就不可用了，因为你并不是期望一个颜色资源id，而是一个真实的RGB或者ARGB的颜色值。在这种情况下，你可以使用@ColorInt注解，表示你期望的是一个代表颜色的整数值：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(@ColorInt <span class="keyword">int</span> color)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>有了这个，当你传递一个颜色id而不是颜色值的时候，lint就会标记出这段不正确的代码：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A34.jpg" alt=""></center>

<h4 id="值约束注解："><a href="#值约束注解：" class="headerlink" title="值约束注解："></a><strong>值约束注解：</strong></h4><ul>
<li>用于标记参数必须是指定类型的值，并且值的范围必须在约束的范围内，包括@Size、@IntRange、@FloatRange。如果你的参数是一个float或者double类型，并且一定要在某个范围内，你可以使用@FloatRange注解：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlpha</span><span class="params">(@FloatRange(from=<span class="number">0.0</span>, to=<span class="number">1.0</span>)</span> <span class="keyword">float</span> alpha)</span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果有人使用该API的时候传递一个0-255的值，比如尝试调用setAlpha(128)，那么工具就会捕获这一问题：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A36.jpg" alt=""></center>

<ul>
<li><p>把这些注解应用到参数上是非常有用的，因为用户很有可能会提供错误范围的参数，比如上面的setAlpha例子，有的API是采用0-255的方式，而有的是采用0-1的float值的方式</p>
</li>
<li><p>对于数据、集合以及字符串，你可以用@Size注解参数来限定集合的大小(当参数是字符串的时候，可以限定字符串的长度)。举几个例子:</p>
<ol>
<li><p>集合不能为空: @Size(min=1)；</p>
</li>
<li><p>字符串最大只能有23个字符: @Size(max=23)；</p>
</li>
<li><p>数组只能有2个元素: @Size(2)；</p>
</li>
<li><p>数组的大小必须是2的倍数 (例如图形API中获取位置的x/y坐标数组: @Size(multiple=2)</p>
</li>
</ol>
</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A37.jpg" alt=""></center>

<h4 id="权限注解："><a href="#权限注解：" class="headerlink" title="权限注解："></a><strong>权限注解：</strong></h4><ul>
<li>如果你的方法需要调用者有特定的权限，你可以使用@RequiresPermission注解：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>(Manifest.permission.SET_WALLPAPER)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setWallpaper</span><span class="params">(Bitmap bitmap)</span> <span class="keyword">throws</span> IOException</span>;</div></pre></td></tr></table></figure>
<ul>
<li>如果你至少需要权限集合中的一个，你可以使用anyOf属性：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>(anyOf = &#123;</div><div class="line">    Manifest.permission.ACCESS_COARSE_LOCATION,</div><div class="line">    Manifest.permission.ACCESS_FINE_LOCATION&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Location <span class="title">getLastKnownLocation</span><span class="params">(String provider)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>如果你同时需要多个权限，你可以用allOf属性：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>(allOf = &#123;</div><div class="line">    Manifest.permission.READ_HISTORY_BOOKMARKS, </div><div class="line">    Manifest.permission.WRITE_HISTORY_BOOKMARKS&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">updateVisitedHistory</span><span class="params">(ContentResolver cr, String url, <span class="keyword">boolean</span> real)</span> </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>对于intents的权限，可以直接在定义的intent常量字符串字段上标注权限需求(他们通常都已经被@SdkConstant注解标注过了):</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>(android.Manifest.permission.BLUETOOTH)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_REQUEST_DISCOVERABLE =</div><div class="line">            <span class="string">"android.bluetooth.adapter.action.REQUEST_DISCOVERABLE"</span>;</div></pre></td></tr></table></figure>
<ul>
<li>对于content providers的权限，你可能需要单独的标注读和写的权限访问，所以可以用@Read或者@Write标注每一个权限需求：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresPermission</span>.Read(<span class="meta">@RequiresPermission</span>(READ_HISTORY_BOOKMARKS))</div><div class="line"><span class="meta">@RequiresPermission</span>.Write(<span class="meta">@RequiresPermission</span>(WRITE_HISTORY_BOOKMARKS))</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Uri BOOKMARKS_URI = Uri.parse(<span class="string">"content://browser/bookmarks"</span>);</div></pre></td></tr></table></figure>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A38.jpg" alt=""></center>


<h4 id="复写方法注解："><a href="#复写方法注解：" class="headerlink" title="复写方法注解："></a><strong>复写方法注解：</strong></h4><ul>
<li>如果你的API允许使用者重写你的方法，但你又需要你自己的方法(父方法)在重写的时候也被调用，这时候你可以使用@CallSuper标注：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CallSuper</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>用了这个后，当重写的方法没有调用父方法时，工具就会给予警告提示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A39.jpg" alt=""></center>

<h4 id="返回值注解："><a href="#返回值注解：" class="headerlink" title="返回值注解："></a><strong>返回值注解：</strong></h4><ul>
<li><p>如果你的方法有返回值，你期望调用者用这个值做些事情，那么你可以使用@CheckResult注解标注这个方法</p>
</li>
<li><p>你并不需要为每个非空方法都进行标注。它主要的目的是帮助哪些容易被混淆，难以被理解的API的使用者</p>
</li>
<li><p>比如，可能很多开发者都对String.trim()一知半解，认为调用了这个方法，就可以让字符串改变以去掉空白字符。如果这个方法被@CheckResult标注，工具就会对那些没有使用trim()返回结果的调用者发出警告</p>
</li>
<li><p>Android中，Context#checkPermission这个方法已经被@CheckResult标注了：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CheckResult</span>(suggest=<span class="string">"#enforcePermission(String,int,int,String)"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">checkPermission</span><span class="params">(@NonNull String permission, <span class="keyword">int</span> pid, <span class="keyword">int</span> uid)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>这是非常重要的，因为有些使用context.checkPermission的开发者认为他们已经执行了一个权限 —-但其实这个方法仅仅只做了检查并且反馈一个是否成功的值而已。如果开发者使用了这个方法，但是又不用其返回值，那么这个开发者真正想调用的可能是这个Context#enforcePermission方法，而不是checkPermission</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A310.jpg" alt=""></center>

<h4 id="测试可见注解："><a href="#测试可见注解：" class="headerlink" title="测试可见注解："></a><strong>测试可见注解：</strong></h4><ul>
<li>你可以把这个注解标注到类、方法或者字段上，以便你在测试的时候可以使用他们</li>
</ul>
<hr>
<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>通过阅读注解类的源码可以发现，任何一个注解类都有如下特征：</p>
<ul>
<li><p>注解类会被@interface标记；</p>
</li>
<li><p>注解类的顶部会被@Documented、@Retention、@Target、@Inherited这四个注解标记（@Documented、@Inherited可选，@Retention、@Target必须要有）；</p>
</li>
</ul>
<p><strong>@UiThread源码：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(CLASS)</div><div class="line"><span class="meta">@Target</span>(&#123;METHOD,CONSTRUCTOR,TYPE&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UiThread &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>上文提到的四个注解：@Documented、@Retention、@Target、@Inherited就是元注解，它们的作用是负责注解其它注解，主要是描述注解的一些属性，任何注解都离不开元注解（包括元注解自身，通过元注解可以自定义注解），元注解的用户是JDK，JDK已经帮助我们实现了这四个注解的逻辑。这四个注解在JDK的java.lang.annotation包中。对每个元注解的详细说明如下：</p>
<h4 id="Target："><a href="#Target：" class="headerlink" title="@Target："></a><strong>@Target：</strong></h4><ul>
<li><p><strong>作用：</strong>用于描述注解的使用范围，即被描述的注解可以用在什么地方；</p>
</li>
<li><p><strong>取值：</strong></p>
</li>
</ul>
<ol>
<li><p>CONSTRUCTOR:构造器；</p>
</li>
<li><p>FIELD:实例；</p>
</li>
<li><p>LOCAL_VARIABLE:局部变量；</p>
</li>
<li><p>METHOD:方法；</p>
</li>
<li><p>PACKAGE:包；</p>
</li>
<li><p>PARAMETER:参数;</p>
</li>
<li><p>TYPE:类、接口(包括注解类型) 或enum声明</p>
</li>
</ol>
<ul>
<li><strong>示例：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/***</span></div><div class="line"> *</div><div class="line"> * 实体注解接口</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(value = &#123;ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(value = RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Entity &#123;</div><div class="line">    <span class="comment">/***</span></div><div class="line">     * 实体默认firstLevelCache属性为false</div><div class="line">     * <span class="doctag">@return</span> boolean</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">firstLevelCache</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</div><div class="line">    <span class="comment">/***</span></div><div class="line">     * 实体默认secondLevelCache属性为false</div><div class="line">     * <span class="doctag">@return</span> boolean</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">secondLevelCache</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</div><div class="line">    <span class="comment">/***</span></div><div class="line">     * 表名默认为空</div><div class="line">     * <span class="doctag">@return</span> String</div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">tableName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">    <span class="comment">/***</span></div><div class="line">     * 默认以""分割注解</div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">split</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Retention："><a href="#Retention：" class="headerlink" title="@Retention："></a><strong>@Retention：</strong></h4><ul>
<li><p><strong>作用：</strong>表示需要在什么级别保存该注解信息，用于描述注解的生命周期，即被描述的注解在什么范围内有效；</p>
</li>
<li><p><strong>取值：</strong></p>
</li>
</ul>
<ol>
<li><p>SOURCE:在源文件中有效，即源文件保留；</p>
</li>
<li><p>CLASS:在class文件中有效，即class保留；</p>
</li>
<li><p>RUNTIME:在运行时有效，即运行时保留；</p>
</li>
</ol>
<ul>
<li><strong>示例：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/***</span></div><div class="line"> * 字段注解接口</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(value = &#123;ElementType.FIELD&#125;)<span class="comment">//注解可以被添加在实例上</span></div><div class="line"><span class="meta">@Retention</span>(value = RetentionPolicy.RUNTIME)<span class="comment">//注解保存在JVM运行时刻,能够在运行时刻通过反射API来获取到注解的信息</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;<span class="comment">//注解的name属性</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Documented："><a href="#Documented：" class="headerlink" title="@Documented："></a><strong>@Documented：</strong></h4><ul>
<li><p><strong>作用：</strong>用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化</p>
</li>
<li><p><strong>取值：</strong>它属于标记注解，没有成员；</p>
</li>
<li><p><strong>示例：</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(CLASS)</div><div class="line"><span class="meta">@Target</span>(&#123;METHOD,CONSTRUCTOR,TYPE&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UiThread &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Inherited："><a href="#Inherited：" class="headerlink" title="@Inherited："></a><strong>@Inherited：</strong></h4><ul>
<li><p><strong>作用：</strong>用于描述某个被标注的类型是可被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类</p>
</li>
<li><p><strong>取值：</strong>它属于标记注解，没有成员；</p>
</li>
<li><p><strong>示例：</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  </span></div><div class="line"> * <span class="doctag">@author</span> wangsheng </div><div class="line"> **/  </div><div class="line"><span class="meta">@Inherited</span>  </div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Greeting &#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> FontColor&#123; BULE,RED,GREEN&#125;;  </div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;  </div><div class="line">    <span class="function">FontColor <span class="title">fontColor</span><span class="params">()</span> <span class="keyword">default</span> FontColor.GREEN</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如何自定义注解"><a href="#如何自定义注解" class="headerlink" title="如何自定义注解"></a>如何自定义注解</h3><p>使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。</p>
<ul>
<li><strong>自定义注解格式：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">元注解</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名&#123;</div><div class="line">    定义体；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>注解参数可支持的数据类型：</strong></li>
</ul>
<ol>
<li><p>所有基本数据类型（int,float,boolean,byte,double,char,long,short)；</p>
</li>
<li><p>String类型；</p>
</li>
<li><p>Class类型；</p>
</li>
<li><p>enum类型；</p>
</li>
<li><p>Annotation类型；</p>
</li>
<li><p>以上所有类型的数组</p>
</li>
</ol>
<hr>
<p><strong>特别说明：</strong></p>
<ul>
<li>注解类中的方法只能用public或者默认这两个访问权修饰，不写public就是默认，eg：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FruitColor &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Color&#123; BULE,RED,GREEN&#125;;</div><div class="line">    <span class="function">Color <span class="title">fruitColor</span><span class="params">()</span> <span class="keyword">default</span> Color.GREEN</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>如果注解类中只有一个成员，最好把方法名设置为”value”，比如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FruitName &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解元素的值不可为null。因此, 使用空字符串或0作为默认值是一种常用的做法</li>
</ul>
<hr>
<h4 id="实例演示："><a href="#实例演示：" class="headerlink" title="实例演示："></a><strong>实例演示：</strong></h4><ul>
<li><strong>ToDo.java：</strong>注解类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@interface</span> Todo &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Priority &#123;LOW, MEDIUM, HIGH&#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Status &#123;STARTED, NOT_STARTED&#125;    </div><div class="line">    <span class="function">String <span class="title">author</span><span class="params">()</span> <span class="keyword">default</span> "Yash"</span>;</div><div class="line">    <span class="function">Priority <span class="title">priority</span><span class="params">()</span> <span class="keyword">default</span> Priority.LOW</span>;</div><div class="line">    <span class="function">Status <span class="title">status</span><span class="params">()</span> <span class="keyword">default</span> Status.NOT_STARTED</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>BusinessLogic:</strong>使用注解的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessLogic</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessLogic</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compltedMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"This method is complete"</span>);</div><div class="line">    &#125;    </div><div class="line"></div><div class="line">    <span class="meta">@Todo</span>(priority = Todo.Priority.HIGH)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notYetStartedMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// No Code Written yet</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Todo</span>(priority = Todo.Priority.MEDIUM, author = <span class="string">"Uday"</span>, status = Todo.Status.STARTED)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">incompleteMethod1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//Some business logic is written</span></div><div class="line">        <span class="comment">//But its not complete yet</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Todo</span>(priority = Todo.Priority.LOW, status = Todo.Status.STARTED )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">incompleteMethod2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//Some business logic is written</span></div><div class="line">        <span class="comment">//But its not complete yet</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>TodoReport.java：</strong>解析注解信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoReport</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TodoReport</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        getTodoReportForBusinessLogic();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 解析使用注解的类，获取通过注解设置的属性</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getTodoReportForBusinessLogic</span><span class="params">()</span> </span>&#123;</div><div class="line">        Class businessLogicClass = BusinessLogic.class;</div><div class="line">        <span class="keyword">for</span>(Method method : businessLogicClass.getMethods()) &#123;</div><div class="line">            Todo todoAnnotation = (Todo)method.getAnnotation(Todo.class);</div><div class="line">            <span class="keyword">if</span>(todoAnnotation != <span class="keyword">null</span>) &#123;</div><div class="line">                System.out.println(<span class="string">" Method Name : "</span> + method.getName());</div><div class="line">                System.out.println(<span class="string">" Author : "</span> + todoAnnotation.author());</div><div class="line">                System.out.println(<span class="string">" Priority : "</span> + todoAnnotation.priority());</div><div class="line">                System.out.println(<span class="string">" Status : "</span> + todoAnnotation.status());</div><div class="line">                System.out.println(<span class="string">" --------------------------- "</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>执行结果如下图所示：</li>
</ul>
<center><img src="http://o99dg8ap9.bkt.clouddn.com/Java%E6%B3%A8%E8%A7%A311.jpg" alt=""></center>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/21410338?f3fb8ead20=ede8379d6b659f7594e37ed09c7c0b50" target="_blank" rel="external">深入浅出Java注解</a></p>
</li>
<li><p><a href="http://www.in-droid.com/2016/06/02/Java%E6%B3%A8%E8%A7%A3/" target="_blank" rel="external">Java注解</a></p>
</li>
<li><p><a href="http://josh-persistence.iteye.com/blog/2226493" target="_blank" rel="external">深入浅出Java Annotation(元注解和自定义注解）</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是注解&quot;&gt;&lt;a href=&quot;#什么是注解&quot; class=&quot;headerlink&quot; title=&quot;什么是注解&quot;&gt;&lt;/a&gt;什么是注解&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注解对于开发人员来讲既熟悉又陌生，熟悉是因为只要你是做开发，都会用到注解（常见的@Override）；陌生是因为即使不使用注解也照常能够进行开发；注解不是必须的，但了解注解有助于我们深入理解某些第三方框架（比如Android Support Annotations、JUnit、xUtils、ActiveAndroid等），提高工作效率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ava注解又称为标注，是Java从1.5开始支持加入源码的特殊语法元数据；Java中的类、方法、变量、参数、包都可以被注解。这里提到的元数据是描述数据的数据，结合实例来说明：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;app_name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;AnnotionDemo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;这里的”app_name”就是描述数据”AnnotionDemo”的数据，这是在配置文件中写的，注解是在源码中写的，如下所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    setContentView(R.layout.activity_main_layout);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            setTextInOtherThread();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;).start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在上面的代码中，在MainActivity.java中复写了父类Activity.java的onCreate方法，使用到了@Override注解。但即使不加上@Override注解标记代码，程序也能够正常运行。那这里的@Override注解有什么用呢？使用它有什么好处？事实上，@Override是告诉编译器这个方法是一个重写方法，如果父类中不存在该方法，编译器会报错，提示该方法不是父类中的方法。如果不小心拼写错误，将onCreate写成了onCreat，而且没有使用@Override注解，程序依然能够编译通过，但运行结果和期望的大不相同。从示例可以看出，注解有助于阅读代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用注解很简单，根据注解类的@Target所修饰的对象范围，可以在类、方法、变量、参数、包中使用“@+注解类名+[属性值]”的方式使用注解。比如：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@UiThread&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setTextInOtherThread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@StringRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resId)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    TextView threadTxtView = (TextView)MainActivity.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.findViewById(R.id.threadTxtViewId);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    threadTxtView.setText(resId);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;特别说明：&quot;&gt;&lt;a href=&quot;#特别说明：&quot; class=&quot;headerlink&quot; title=&quot;特别说明：&quot;&gt;&lt;/a&gt;&lt;strong&gt;特别说明：&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注解仅仅是元数据，和业务逻辑无关，所以当你查看注解类时，发现里面没有任何逻辑处理；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javadoc中的@author、@version、@param、@return、@deprecated、@hide、@throws、@exception、@see是标记，并不是注解；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.qiuchengjia.cn/tags/JAVA/"/>
    
  </entry>
  
</feed>
